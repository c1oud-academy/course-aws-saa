Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной сессии Демо. Тема сегодняшнего Демо - это создание VPC и всех необходимых компонентов, используя AWS Console. Итак, давайте начнем. В рамках сегодняшнего Демо мы построим следующую архитектуру. В одном AWS аккаунте в одном регионе это us-east-1 или North Virginia, создадим VPC. Будет она называться DEMO_VPC со следующим CIDR блоком. Все ресурсы, которые будем создавать в рамках Демо, будут находиться в availability zone us-east-1a. Это первая availability zone в рамках региона North Virginia. Далее, нам необходимо создать два subnet. Первый будет public. Необходимо не только назвать его public, но и фактически сделать его public. Мы с вами из лекций помним, какие шаги нам для этого нужно предпринять. А именно, необходимо создать subnet. Далее, создать Internet gateway, привязать ее к VPC. После чего при необходимости создать и настроить route table, там прописать следующие rules. Первый rule стандартный, дает возможность обмениваться информацией, ресурсом внутри VPC. И необходимо создать дополнительный rule, который предоставит доступ в Интернет. То есть как Destination мы укажем интернет, а как Target используем Internet gateway. Далее, нам необходимо привязать наш subnet к этому route table. После чего фактически наш public subnet становится public и все ресурсы, созданные в этом subnet, будут иметь возможность выйти в интернет. Далее мы будем создавать private subnet и нам также необходимо предоставить возможность ресурсам из этого subnet выходить в интернет. Для этого мы будем использовать NAT gateway, привяжем Elastic IP адрес к этому NAT gateway и уже в route table для private subnet пропишем дополнительный routing rule, который будет как Destination указывать интернет, но как Target укажет NAT gateway ID. После того как мы это сделаем и private route table привяжем к нашему private subnet, все ресурсы из private subnet получат необходимый доступ. Итак, давайте начнем. Начинаем мы с главной страницы AWS Management Console. Здесь первым делом необходимо убедиться, что мы находимся в правильном регионе, это North Virginia. После чего переходим в сервис VPC, для этого необходимо воспользоваться строкой поиска сервисов и самая первая ссылка это та ссылка, которая нам нужна. Как только мы перейдем в сервис VPC, нам необходимо воспользоваться навигационным меню слева и выбрать пункт Your VPCs. Как только мы это сделаем, мы увидим список всех VPC на нашем AWS аккаунте. В рамках нашего Демо создадим новый VPC, поэтому будем использовать кнопку вверху справа Create VPC. Как только вы нажмете на эту кнопку, нас направят на страницу создания VPC, где необходимо будет ввести некоторые входные данные. В рамках этого действия мы создадим только VPC, у нас также есть возможность выбрать опцию VPC and more и указать какие компоненты дополнительно нужно создать. В будущем вы скорее всего будете использовать вторую опцию, но в рамках нашего Демо мы будем создавать каждый ресурс по отдельности. Как результат мы получим ту же инфраструктуру, ее можно получить и тем и другим способом. Выбираем VPC only, далее как Name tag вводим DemoVPC и как CIDR block вводим то значение, которое мы определили в самом начале. Остальные настройки оставляем как есть, вы также можете обратить внимание, что в разделе тегов автоматически заполнился ключ-значение, Name = DemoVPC. После чего нажимаем на Create VPC и нас направят на страницу недавно созданного VPC и мы увидим соответствующее сообщение, что мы успешно создали DemoVPC. Мы двигаемся к следующей части нашего Демо и здесь выполним все шаги необходимые для создания фактически public subnet-a. Для этого нам необходимо в сервисе VPC воспользоваться левым навигационным меню и перейти к списку subnets. Существующие subnets нас не интересует, мы создаем новый, поэтому нажимаем на кнопку Create Subnet. Нас направят на страницу создания subnet, где необходимо ввести входные данные. Самым первым делом нам необходимо выбрать VPC. Мы с вами помним, что subnet создается в строгой привязке к VPC. Выбираем DemoVPC и прокручиваем страницу чуть ниже. Как Subnet name укажем PublicSubnet, как Availability zone выбираем us-east-1a и как CIDR block укажем следующие значения, которые мы обговорили в начале в рамках нашего задания. Теперь нам необходимо прокрутить в самый низ страницы. Обратите внимание, что автоматически заполнился тег с ключом Name и со значением PublicSubnet. И после того, как мы ввели все необходимые значения, мы можем нажать на кнопку Create Subnet. Как только вы это сделаете, вас направят на список subnet-ов и оно будет отфильтровано по subnet, который мы сейчас только создали. Теперь нам необходимо воспользоваться левым навигационным меню, чтобы создать Internet gateways. Давайте перейдем к списку Internet gateway. На текущем аккаунте у нас не имеется Internet gateways, поэтому мы создадим новый. Для этого нажмем на кнопку Create Internet Gateway. Как Name введем DemoIG, можем также ввести DemoIGVW, это по вашему усмотрению. Больше других настроек мы ввести здесь не можем, тег name заполняется автоматически и здесь нам необходимо нажать на кнопку Create Internet Gateway. Как только вы это сделаете, нас направят на страницу ресурса Internet gateway и вы видите ее состояние, как Detached. Нам необходимо привязать ее к нашему VPC. Вы это можете сделать несколькими способами и вы видите вверху справа есть кнопка Attach to a VPC. Это то действие, которое предлагается сразу после создания Internet gateway. Если же такое сообщение не отобразилось, либо вы вернулись к созданию привязки между Internet gateway и VPC попозже, то можете воспользоваться кнопкой Actions и там выбрать опцию Attach to a VPC. Как только вы это нажмете, вас направят на страницу, где необходимо заполнить основное единственное поле, где вы выбираете VPC. Из списка выбираем DemoVPC и нажимаем на кнопку Attach Internet gateway. Отлично, теперь мы видим, что у Internet gateway состояние Attached и как VPC ID заполнена наша DemoVPC. Теперь нам необходимо настроить route tables. Для этого также воспользуемся навигационным меню слева и выберем пункт Route tables. Здесь нам необходимо создать новую, это будет кастомный route table, который привяжем к нашему public subnet. Давайте нажмем на кнопку Create route table. На странице для ввода входных данных как имя введем PublicRouteTable и как VPC укажем наше DemoVPC. Это основные настройки, которые необходимы для создания route table и здесь мы можем внизу страницы нажать на кнопку Create route table для ее создания. Как только вы ее нажмете, нас направят на основную страницу ресурса. Вы увидите сообщение, что route table был успешно создан. Также видите во вкладках в нижней части страницы, во вкладке Routes мы видим один единственный стандартный route, который помогает обмениваться данными ресурсами в рамках одного VPC. Нам необходимо создать новый routing rule, для этого нажмем на кнопку Edit rules. Здесь нам необходимо будет нажать на кнопку Add route и начать заполнять необходимые поля. Как в Destination мы указываем обозначение интернета, это IP адрес со всеми нулями слеш ноль. Как Target необходимо указать созданный нами Internet gateway. На этом мы ввели все необходимые значения и здесь нам необходимо внизу страницы нажать на кнопку Save changes. Следующий шаг. Кастомно созданный route table должен быть привязан к subnet, поэтому нам необходимо перейти на вкладку Subnet associations и здесь вы увидите, что у нас нет привязанных subnets, поэтому необходимо нажать на кнопку Edit subnet associations. Как только вы это нажмете отобразится список subnets доступных для привязки, это единственный subnet - public subnet. Давайте его выберем и нажмем на кнопку Save associations. Отлично, мы увидим сообщение о том, что subnet был успешно привязан к route table и на этом этапе мы превратили наш public subnet фактически в public subnet. Мы с вами добрались до второй части нашего сегодняшнего Демо и сейчас проделаем все необходимые шаги, чтобы предоставить ресурсам из private subnet доступ в интернет. Для этого первым делом нам необходимо создать private subnet. Для этого в сервисе Amazon VPC нам необходимо в левом навигационном меню перейти по пункту Subnets. Мы увидим список subnets в этом AWS аккаунте. Здесь необходимо нажать на кнопку Create subnet. Все настройки те же, как VPC необходимо выбрать DemoVPC, как Subnet name прописываем PrivateSubnet, Availability zone выбираем первую, то есть us-east-1a и прописываем CIDR block, который мы определили в самом начале лабораторной работы. Прокручиваем в самый низ и здесь также видим, что тег с ключом name заполнил соответствующее значение. На этом мы ввели все необходимые значения и можем нажать на кнопку Create subnet. Как только мы ее создали, двигаемся к следующей части. Нам необходимо создать NAT gateway, но до создания NAT gateway нам нужен созданный Elastic IP адрес, поэтому мы в левом навигационном меню выбираем пункт Elastic IPs. Как только перейдем на страницу со всеми Elastic IP адресами, нажмем на кнопку Allocate Elastic IP address. Здесь мы все значения оставляем как есть, обязательно нужно убедиться, что в первом поле выбран нужный регион – North Virginia. Если все верно, то прокручиваем в самый низ страницы и нажимаем на кнопку Allocate. Мы увидим сообщение, что Elastic IP адрес был успешно создан и Static IP адрес следующий. Отлично, теперь мы можем переходить к созданию NAT gateway. Здесь также воспользуемся навигационным меню слева и выберем опцию NAT gateways. Здесь необходимо будет нажать на кнопку Create NAT gateways и нас направит на страницу для ввода входных данных. В поле Subnet нам необходимо выбрать Public Subnet, так как мы создаем NAT gateway в этом Public Subnet. Далее Connectivity Type остается значение по умолчанию Public и здесь необходимо выбрать Elastic IP address, который мы создали ранее. Оно должно отобразиться в выпадающем меню. Это все значения, которые необходимо здесь ввести. Мы можем прокрутить до конца страницы и нажать на кнопку Create NAT gateway. Отлично, нас направят на основную страницу ресурса. Здесь мы видим, что состояние Pending. Мы можем продолжать двигаться к следующим шагам. Через некоторое время состояние NAT gateway перейдет в состояние Available. Мы с вами двигаемся дальше. Здесь нам необходимо создать route table для нашего private subnet, поэтому выбираем соответствующий пункт в левом навигационном меню и переходим к списку route tables в этом AWS аккаунте. Здесь нам необходимо нажать на кнопку Create route table и ввести все необходимые входные значения. Вводим как Name PrivateRouteTable и как VPC указываем наше DemoVPC. После чего нажимаем на кнопку Create route table внизу страницы. Как только мы это сделаем, нас направят на основную страницу ресурса. Здесь мы видим несколько вкладок. Первая вкладка - Routes. Если вы ее нажмете, мы увидим один единственный стандартный routing rule. Нам необходимо создать еще один. Для этого нажмем на кнопку Edit routes. На следующей странице нам необходимо будет нажать на кнопку Add route и ввести необходимые нам значения, а именно как Destination указываем обозначение интернета и как Target указываем NAT gateway, который мы ранее создали. После чего нажимаем на кнопку Save changes. Отлично. Теперь следующий шаг. Не забываем, что route table это независимый ресурс и необходимо не забывать привязывать ее к соответствующим subnet-ам. Для этого переходим во вкладку Subnet associations и здесь видим, что этот route table никаким subnets не используется. Давайте это исправим и нажмем на кнопку Edit subnet associations. Здесь мы видим все существующие subnet-ы, к которым мы можем привязать этот route table. Для public subnet мы уже создали отдельный кастомный route table и ее уже привязали. Это вы видите в соответствующей колонке. Здесь нам необходимо выбрать именно private subnet и нажать на кнопку Save associations. Отлично. Теперь мы в списке явно привязанных subnet видим наш private subnet. На этом мы завершили задания нашего сегодняшнего Демо и давайте теперь пройдемся какие же ресурсы мы создали. Первым делом мы создали наше DemoVPC, далее мы создали два subnets - public subnet и private subnet. Для каждого subnet создали соответствующие route tables и привязали к subnet-ам. Далее создали Internet gateway, Elastic IP адрес с статическим IP адресом и использовали Elastic IP адрес для создания NAT gateway. На этом мы подошли к концу нашего Демо. Я надеюсь было все понятно. Все что непонятно, пожалуйста задавайте ваши вопросы. Будем по возможности отвечать. Завершаем сегодняшнюю сессию. Спасибо за внимание. Увидимся на следующих наших активностях.