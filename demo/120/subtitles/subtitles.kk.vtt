WEBVTT

00:00:00.000 --> 00:00:06.120
Қайырлы күн, құрметті студенттер! Барлығыңызды
келесі Демо сессияда көргеніме қуаныштымын.

00:00:06.120 --> 00:00:10.915
Бүгін алдыңғы Демодағы
тапсырманы орындаймыз, яғни AWS

00:00:10.939 --> 00:00:16.640
бұлтында VPC және оның барлық
қажетті құрамдастарын жасаймыз.

00:00:16.640 --> 00:00:21.985
Жалғыз айырмашылық мынада, бұл үшін
AWS Management Console емес, AWS CLI,

00:00:22.009 --> 00:00:27.280
яғни AWS бұлтымен жұмыс істеуге
арналған командалық жолын қолданамыз.

00:00:27.280 --> 00:00:34.400
Ендеше, бастайық. Қандай тапсырма 
болғанын еске түсірейік.

00:00:34.400 --> 00:00:42.680
North Virginia аймағында AWS аккаунтын
жасау қажет болды, бұл us-east-1 VPC.

00:00:42.680 --> 00:00:48.400
VPC - DEMO_VPC деп аталады,
оның берілген CIDR блогы бар.

00:00:48.400 --> 00:00:54.040
VPC-дегі барлық ресурстар бір
availability zone-да болады, us-east-1a.

00:00:54.040 --> 00:00:58.560
VPC-де екі subnet болады,
біреуі public, екіншісі private.

00:00:58.560 --> 00:01:02.048
Public subnet тек жай атау екенін
және оның шын мәнінде public

00:01:02.072 --> 00:01:06.020
болуы үшін белгілі бір қадамдар
жасалуы керек екенін есте ұстаймыз.

00:01:06.020 --> 00:01:13.800
Ол үшін екі бөлек route table болады, біреуі public
subnet үшін, екіншісі private subnet-ке арналған.

00:01:13.800 --> 00:01:21.219
Internet gateway-ді VPC-ге қосамыз,
NAT gateway баптаймыз және Elastic

00:01:21.243 --> 00:01:29.200
IP мекенжайымен жұмыс істейміз.
Барлық жұмыстарды құмсалғышта орындаймыз.

00:01:29.200 --> 00:01:35.868
AWS Academy-де модульдер тізімінің
төменгі жағында Sandbox пунктін таба

00:01:35.892 --> 00:01:42.560
аласыз және оны бассаңыз, зертханалық
жұмыспен ұқсас интерфейс болады.

00:01:42.560 --> 00:01:55.400
Мұнда Terminal терезесін ашып, зертханалық жұмысты
бастау керек, осылайша уақытша AWS аккаунты жасалады.

00:01:55.400 --> 00:02:02.760
Оны басқаннан кейін біраз күту керек, содан кейін
зертханалық жұмыстың күйі Ready күйіне ауысады.

00:02:02.760 --> 00:02:07.008
Бұл қалқымалы терезені жаба
аламыз және AWS батырмасын

00:02:07.032 --> 00:02:11.280
басқаннан кейін AWS
Management Console бағытталасыз.

00:02:11.280 --> 00:02:17.827
Барлық командаларды Terminal-дағы
зертханалық жұмыстың парақшасында

00:02:17.851 --> 00:02:24.200
енгіземіз және кейінірек AWS
Management Console-де тексереміз.

00:02:24.200 --> 00:02:29.480
Демоның бірінші бөлігін
бастаймыз және енді VPC жасаймыз.

00:02:29.480 --> 00:02:33.600
Сондай-ақ, команда жолымен жұмыс
істегенде белгілі бір нюанстарды қарастырамыз.

00:02:33.600 --> 00:02:39.280
Ең бірінші команда - VPC жасау.
Қосымша компоненттерсіз VPC.

00:02:39.280 --> 00:02:43.320
Команданы көріп тұрсыздар,
оны бөліп қарастырайық.

00:02:43.320 --> 00:02:50.120
Бірінші бөлігі - AWS кілт сөзі, ол біз AWS
CLI пайдалана бастайтынымызды айтады.

00:02:50.120 --> 00:02:58.200
Әрі қарай екінші кілт сөз – бұл сервис атауы.
Біздің жағдайда, бұл - EC2.

00:02:58.200 --> 00:03:05.440
Үшінші кілт сөз - API немесе операцияның атауы.
Біздің жағдайда, бұл - Create VPC.

00:03:05.440 --> 00:03:15.528
Содан кейін жасалған ресурсқа
тағайындағымыз келетін мәндері бар қос сызықша

00:03:15.552 --> 00:03:25.640
арқылы тізімделген параметрлерді көресіз.
Біздің жағдайда біз VPC жасаймыз.

00:03:25.640 --> 00:03:32.440
Бірінші параметр - бұл ең басында
суретте көрген мәні бар CIDR блогы.

00:03:32.440 --> 00:03:39.400
Келесі, екінші параметр - аймақ. Мұнда North
Virginia аймағын, us-east-1 аймағын көрсетеміз.

00:03:39.400 --> 00:03:45.120
Осы команданы теріп, Enter пернесін
басқаннан кейін жауапта JSON аласыз.

00:03:45.120 --> 00:03:52.160
Бұл JSON жасалған ресурсты сипаттайды.
VPC ID тағайындалғанын көресіз.

00:03:52.160 --> 00:04:01.120
Сондай-ақ, кіріс деректеріне енгізген CIDR
блогын және басқа метадеректерді көресіз.

00:04:01.120 --> 00:04:07.960
Енді осы VPC шынымен пайда болғанын
тексеріп, AWS Management Console-ді ашайық.

00:04:07.960 --> 00:04:13.540
Мұнда сервисті іздеу жолағын пайдаланып,
VPC деп енгізуді бастауымыз керек.

00:04:13.540 --> 00:04:19.440
Дұрыс сервиске кіргеннен кейін,
дұрыс аймақта екеніңізді тексеріңіз.

00:04:19.440 --> 00:04:25.560
Сол жақ шарлау мәзірінде Your
VPCs пунктін пайдалану керек.

00:04:25.560 --> 00:04:38.040
Бірдей VPC ID және біз тағайындаған CIDR блогы бар
VPC жасағанымызды көресіз. Енді осы VPC-ні жояйық.

00:04:38.040 --> 00:04:43.600
Мен сізге командалық жолдың
мүмкіндіктерін көрсеткім келеді.

00:04:43.600 --> 00:04:51.840
VPC жоятынымызды растауымыз керек және VPC
шынымен жойылғаны туралы хабарды көруіміз керек.

00:04:51.840 --> 00:05:07.080
Енді команда жолына ораламыз және VPC жасайтын
командаға айнымалы мәндерді тағайындаймыз.

00:05:07.080 --> 00:05:13.240
Бірақ қосымша параметрлер қосылатынын 
ескеріңіз. Бұл мәтінге тең болатын output.

00:05:13.240 --> 00:05:19.440
Яғни, ол команда нәтижесін мәтін түрінде 
қайтарады. Ал екіншісі - query, яғни фильтр.

00:05:19.440 --> 00:05:32.520
Жауапта Vpc.VpcId жолындағы мәнді қайтарғымыз келеді.
Бұл мәнді vpc_id айнымалысына тағайындаңыз.

00:05:32.520 --> 00:05:40.320
Әрі қарай, команда аяқталғаннан кейін,
VPC ID айнымалысының мәнін көрсетеміз.

00:05:40.320 --> 00:05:52.840
Сіз басқа бірегей VPC ID алғанымызды көресіз,
бірақ командада көрсетілген параметрлермен бірдей.

00:05:52.840 --> 00:05:59.320
Енді AWS Management Console-ге оралып,
барлығының дұрыс жұмыс істегенін тексерейік.

00:05:59.320 --> 00:06:04.400
CIDR блогы біз көрсеткен блок екенін
және VPC ID сәйкес келетінін көреміз.

00:06:04.400 --> 00:06:10.528
Бұл әрекеттің алдыңғысынан
айырмашылығы, команда жолында біз VPC ID-ді

00:06:10.552 --> 00:06:16.680
айнымалы мәнде сақтадық және оны
келесі командаларда пайдалана аламыз.

00:06:16.680 --> 00:06:24.001
Бұл әртүрлі ID енгізу қажеттілігін,
адам факторын болдырмайды

00:06:24.025 --> 00:06:32.080
және команда жолы арқылы AWS
бұлтымен жұмыс істеуді жеңілдетеді.

00:06:32.080 --> 00:06:43.760
Енді команда жолына ораламыз және осы жерде тегті
Name кілтімен, Demo VPC мәнімен толтырып көрейік.

00:06:43.760 --> 00:06:49.400
Ол үшін келесі команданы қолданамыз.
EC2 сервисін қолданамыз.

00:06:49.400 --> 00:06:54.640
Әрі қарай Create Tags API
және келесі параметрлер бар.

00:06:54.640 --> 00:07:00.440
Resources параметрі үшін VPC ID айнымалы
мәнін жіберіп жатқанымызды ескеріңіз.

00:07:00.440 --> 00:07:05.668
Ал Tags параметрінде Name
кілті бар тег үшін Demo VPC мәнін

00:07:05.692 --> 00:07:10.920
тағайындағымыз келетінін
белгілі бір форматта жеткіземіз.

00:07:10.920 --> 00:07:18.600
Осы команданы іске қосқаннан кейін, ол қатені
қайтармаса, бұл команда сәтті орындалғанын білдіреді.

00:07:18.600 --> 00:07:24.002
Енді, егер AWS Management
Console-ге оралсақ, VPC үшін

00:07:24.026 --> 00:07:30.040
Name бағанының толтырылғанын
көреміз, оның мәні Demo VPC.

00:07:30.040 --> 00:07:39.440
Жақсы, команда жолына қайта ораламыз және осы
жерде мен назарыңызды келесіге аударғым келеді.

00:07:39.440 --> 00:07:46.680
Ресурста тегтердің болуы сол ресурстар туралы
метадеректерді фильтрлеп, сұрауға мүмкіндік береді.

00:07:46.680 --> 00:07:58.720
Мысалы, VPC туралы ақпаратты Name тегі
және Demo VPC мәні бойынша фильтрлей аламыз.

00:07:58.720 --> 00:08:02.941
Бұл әрекетті орындау үшін,
Describe VPCs API қолданамыз және

00:08:02.965 --> 00:08:07.760
filters деп аталатын белгілі бір
форматтағы параметрді енгіземіз.

00:08:07.760 --> 00:08:11.240
Нәтижесінде JSON
қайтарылғанын көресіз.

00:08:11.240 --> 00:08:20.760
Жалғыз VPC кілті бар, ол JSON массиві және
әрбір JSON белгілі бір ресурсты сипаттайды.

00:08:20.760 --> 00:08:33.000
Фильтрде белгілі бір VPC көрсеткендіктен, массивте
бір JSON қайтарылды және ол біздің VPC сипаттайды.

00:08:33.000 --> 00:08:38.416
Бұл жерде мен команда жолымен
жұмыс істегенде бір-бірінен тәуелсіз

00:08:38.440 --> 00:08:43.857
командаларды жазып қана қоймай,
айнымалыларға мәндерді тағайындау

00:08:43.881 --> 00:08:48.794
және осы айнымалылармен
жұмыс істеу туралы ғана емес, бөлек

00:08:48.818 --> 00:08:54.240
bash скрипттерін де жазуға
болатындығына назар аударғым келеді.

00:08:54.240 --> 00:08:59.241
Идея мынада: осы барлық
командаларды бір нақты файлға біріктіруге

00:08:59.265 --> 00:09:03.640
болады және бұл файл белгілі
бір тапсырманы орындайды.

00:09:03.640 --> 00:09:06.920
Кішкентай емес, бұл бір команда емес, 
бірнеше командалардың жиынтығы.

00:09:06.920 --> 00:09:14.480
Осы bash скриптін іске қосқан кезде, осы скрипттегі
барлық командалар дәйекті түрде орындалады.

00:09:14.480 --> 00:09:19.767
Осылайша, bash скрипттері арқылы
сіз күнделікті жұмысыңыздың белгілі

00:09:19.791 --> 00:09:24.840
бір бөлігін, Cloud инженердің
жұмысын автоматтандыруға болады.

00:09:24.840 --> 00:09:29.279
Онда айнымалыларды да, сонымен
қатар күрделірек конструкцияларды,

00:09:29.303 --> 00:09:34.160
яғни циклдерді, if else конструкцияларды
 және т.б. қолдануға болады.

00:09:34.160 --> 00:09:40.760
Демоның аясында біз
қарапайым опцияны қолданамыз.

00:09:40.760 --> 00:09:46.962
Bash скрипттерін жазу біздің
Демо аясына кірмейді, сондықтан біз

00:09:46.986 --> 00:09:53.188
тәуелсіз командаларды жазамыз,
бірақ сонымен бірге белгілі бір

00:09:53.212 --> 00:09:59.809
мәндерге байланбауға тырысамыз
және ресурс ID мәндерін айнымалыларға

00:09:59.833 --> 00:10:05.640
кейінірек қайта пайдалануға
болатындай етіп тағайындаймыз.

00:10:05.640 --> 00:10:12.320
Енді VPC-нің келесі құрамдастарына көшеміз
және ең алдымен Internet gateway жасаймыз.

00:10:12.320 --> 00:10:15.520
Ол үшін келесі
команданы қолданамыз.

00:10:15.520 --> 00:10:24.040
Мұнда InternetGateway.InternetGatewayId
жолындағы мәндерді ig_id айнымалысына сақтаймыз.

00:10:24.040 --> 00:10:30.634
Команданы орындағаннан
кейін ig_id айнымалысында мәнді

00:10:30.658 --> 00:10:38.000
көрсеттік және Internet Gateway
ID осы жерде көрсетіледі.

00:10:38.000 --> 00:10:45.920
AWS Management Console-де сондай ID тексере
аламыз, ол Internet Gateway тізімінде пайда болады.

00:10:45.920 --> 00:10:54.360
Енді осы Internet Gateway үшін тегті Name
кілтімен және Demo IGW мәнімен толтыруымыз керек.

00:10:54.360 --> 00:11:02.251
Алдында іске қосқан дәл сол команда
іске қосылды, жалғыз айырмашылығы - біз ID

00:11:02.275 --> 00:11:10.680
Internet Gateway Resources параметріне береміз.
Оны ig_id айнымалысында сақтадық.

00:11:10.680 --> 00:11:19.200
Мұны орындағаннан кейін, AWS Management Console-ге
оралып, оның сәтті қолданылғанын тексеруге болады.

00:11:19.200 --> 00:11:24.560
Әрі қарай жүрейік. Енді жасалған Internet
Gateway-ді VPC-ге байланыстыруымыз керек.

00:11:24.560 --> 00:11:30.440
Бұл үшін Attach Internet
Gateway деп аталатын API бар.

00:11:30.440 --> 00:11:35.280
Қажетті параметрлер –
Internet Gateway және VPC ID.

00:11:35.280 --> 00:11:42.003
Ол екеуі айнымалыларымызда
сақталады, сондықтан біз Internet Gateway ID

00:11:42.027 --> 00:11:49.520
үшін ig_id айнымалы мәнін және VPC ID
үшін vpc_id айнымалы мәнін көрсетеміз.

00:11:49.520 --> 00:12:04.080
Команданы іске қосқаннан кейін қате болмаса, 
команда сәтті орындалды деп есептейміз.

00:12:04.080 --> 00:12:08.920
Енді әрі қарай жүреміз.
Біз subnets жасаймыз.

00:12:08.920 --> 00:12:20.120
Ең алдымен, us-east-1a availability zone
шынымен бар-жоғын тексеруіміз керек.

00:12:20.120 --> 00:12:30.715
Шынында, бұл анық, өйткені аймақтың жүйелік
атауы us-east-1 екенін білеміз, availability zone,

00:12:30.739 --> 00:12:42.360
мысалы, үшеу болса, онда олар алфавиттік тәртіпте
белгіленетінін білеміз. Бұл us-east-1a, 1b және 1c.

00:12:42.360 --> 00:12:54.640
Бұл команданың идеясы бағдарлама ішіндегі белгілі бір
аймақ үшін бар availability zone сұрауға болатын еді.

00:12:54.640 --> 00:13:02.848
Бұл жағдайда value ретінде us-east-1a емес,
us-east-1 мәнін көрсетесіз, содан кейін жауап ретінде

00:13:02.872 --> 00:13:11.080
сізге әрбір availability zone үшін ақпаратты қамтитын
JSON бар availability zone массиві қайтарады.

00:13:11.080 --> 00:13:19.559
Бізге қажет availability zone бойынша фильтрлеп,
жауап қайтарылғандықтан, осы availability

00:13:19.583 --> 00:13:27.680
zone жазылуы дұрыс екенін өзіміз үшін
тағы да растадық. Енді public subnet жасаймыз.

00:13:27.680 --> 00:13:37.460
Мен команданың бөліктері туралы айтпаймын,
өйткені идеясы алдыңғы командалардағыдай.

00:13:37.460 --> 00:13:40.520
Ал алдыңғы командаларды біз
егжей-тегжейлі талқылаған болатынбыз.

00:13:40.520 --> 00:13:44.968
Мұнда Create Subnet API
қолданамыз, қажетті параметрлерді

00:13:44.992 --> 00:13:49.440
енгіземіз: availability zone,
CIDR блогы және VPC ID.

00:13:49.440 --> 00:14:00.280
Содан кейін осының бәрін айнымалыға тағайындаймыз.
Бізге Subnet.SubnetId жолындағы мән қажет.

00:14:00.280 --> 00:14:08.040
Бірден public_subnet_id айнымалы
мәніндегі мәнді тексереміз. Бір ID бар. Жақсы.

00:14:08.040 --> 00:14:15.120
Әрі қарай жүрейік. Енді осы subnet үшін
Name кілтімен тегті толтыруымыз керек.

00:14:15.120 --> 00:14:20.080
Demo public subnet мәнін толтырыңыз.
Келесі қадамға көшейік.

00:14:20.080 --> 00:14:30.600
Енді public subnet-те NAT Gateway жасау керек.
Ол үшін ең алдымен Elastic IP address жасау керек.

00:14:30.600 --> 00:14:37.800
Elastic IP address жасау үшін бөлек API бар.
Ол Allocate address деп аталады.

00:14:37.800 --> 00:14:44.672
Мұнда қосымша параметрлерді
көрсетпейміз, тек JSON ішіндегі

00:14:44.696 --> 00:14:52.280
мәнді AllocationId жолының бойымен
eip айнымалысына сақтаймыз.

00:14:52.280 --> 00:14:58.200
Сіз eip айнымалысында Elastic IP
address ID пайда болғанын көресіз.

00:14:58.200 --> 00:15:06.920
Енді әрі қарай жүре аламыз, NAT gateway жасаймыз.
Бұл жағдайда Create NAT gateway API қолданамыз.

00:15:06.920 --> 00:15:16.228
Мұнда Subnet ID, Allocation ID
параметрлерін береміз және мәнді

00:15:16.252 --> 00:15:25.560
ngw_id параметрінде
Natgateway.NatgatewayId жолында сақтаймыз.

00:15:25.560 --> 00:15:32.068
Келесі қадам, subnet-ті public
ету үшін, route table жасап,

00:15:32.092 --> 00:15:38.600
осы route table-де қосымша
параметрлерді жасауымыз керек.

00:15:38.600 --> 00:15:44.463
Сонымен, route table жасау үшін
Create route table API қолданамыз,

00:15:44.487 --> 00:15:49.808
VPC ID параметрлерін енгіземіз
және нәтижесінде JSON мәнін

00:15:49.832 --> 00:15:55.153
public_rt айнымалысында
RouteTable.RouteTableId жолы бойымен

00:15:55.177 --> 00:16:01.040
сақтаймыз. Айнымалыға белгілі 
бір мән жазылғанын көреміз. Жақсы.

00:16:01.040 --> 00:16:09.588
Енді келесі қадам тегті Name кілтімен
толтыру болып табылады, мән Public

00:16:09.612 --> 00:16:18.160
Subnet Route Table болады және енді
Route table үшін routing rule қосамыз.

00:16:18.160 --> 00:16:24.908
Естеріңізге сала кетейік, Destination
ретінде Интернет пайдаланатын және

00:16:24.932 --> 00:16:31.680
Target ретінде Internet gateway
пайдаланатын routing rule қосуымыз керек.

00:16:31.680 --> 00:16:37.240
Тиісінше, Destination, CIDR блогы мен
gateway ID  параметрлерін толтырамыз.

00:16:37.240 --> 00:16:51.040
Осының барлығын орындағаннан кейін Return кілті
true мәнімен толтырылған JSON түрінде жауап аламыз.

00:16:51.040 --> 00:16:57.448
Қазір барлық қажетті routing rule
жасадық, route table жеке тәуелсіз ресурс

00:16:57.472 --> 00:17:03.880
екенін ұмытпаймыз және оны пайдалану
үшін оны subnet-ке байланыстыру керек.

00:17:03.880 --> 00:17:09.208
Әрбір subnet-тің онымен байланыстырылған
тек бір route table болуы мүмкін екенін

00:17:09.232 --> 00:17:14.560
есте ұстаймыз, бірақ кез келген route
table-ді бірнеше subnet пайдалана алады.

00:17:14.560 --> 00:17:18.949
Жарайды, келесі Associate
route table API қолданамыз,

00:17:18.973 --> 00:17:24.040
мұнда route table және subnet
ID параметрлерін көрсетеміз.

00:17:24.040 --> 00:17:30.782
Мұны істегеннен кейін жауабында
JSON-да қауымдастық құрғанымызды

00:17:30.806 --> 00:17:37.120
көреміз, оның ID ресурсы да
бар, оны экранда көре аласыз.

00:17:37.120 --> 00:17:44.600
Қате болмаса, операцияның
сәтті аяқталғанын білдіреді.

00:17:44.600 --> 00:17:52.880
Біз Демоның үшінші бөлігіне жеттік және private
subnet-ке қатысты құрамдастарды жасаймыз.

00:17:52.880 --> 00:18:00.172
Ең алдымен, Subnet ID жасауымыз керек. Сіз команданы
көресіз, Create Subnet API қолданамыз, availability

00:18:00.196 --> 00:18:06.920
zone, CIDR блогын, VPC ID көрсетеміз және
барлығын private_subnet_id айнымалысында сақтаймыз.

00:18:06.920 --> 00:18:12.800
JSON жүйесінен Subnet.SubnetId
жолындағы мәнді қолданамыз.

00:18:12.800 --> 00:18:17.480
Содан кейін мән private_subnet_id
айнымалысында пайда болғанын көреміз.

00:18:17.480 --> 00:18:27.680
Енді жасалған Subnet ID үшін
Name кілтінің мәнін толтыру керек.

00:18:27.680 --> 00:18:36.120
Бұл әрекетті орындау үшін Create tags API қолданамыз
және resources пен tags параметрлерін енгіземіз.

00:18:36.120 --> 00:18:43.411
Әрі қарай, route table жасауымыз керек, ол
private route table болады, Create route table

00:18:43.435 --> 00:18:50.560
API қолданамыз, VPC ID параметрлерін
толтырамыз, бізде vpc_id айнымалысында мән бар.

00:18:50.560 --> 00:19:00.248
Әрі қарай, оны оңай ажырату үшін осы route
table-ге тег қосуымыз керек. Name кілті бар тегтің

00:19:00.272 --> 00:19:09.960
мәні private subnet route table болады және
бұл жерде route table-де екі өзгеріс енгізу керек.

00:19:09.960 --> 00:19:14.955
Біріншісі - Интернетке трафикті
біз бұрын жасаған NAT gateway

00:19:14.979 --> 00:19:19.640
арқылы өткізуге мүмкіндік
беретін routing rule енгізу.

00:19:19.640 --> 00:19:23.580
NAT gateway ID ngw_id
айнымалысында сақталады.

00:19:23.580 --> 00:19:34.480
Осы команданы іске қосқаннан кейін Return кілтінде
 true мәні орнатылған JSON нәтижесін көреміз.

00:19:34.480 --> 00:19:38.400
Бұл routing rule сәтті
жасалғанын білдіреді.

00:19:38.400 --> 00:19:43.520
Енді осы route table-ді private
subnet-ке байланыстыруымыз керек.

00:19:43.520 --> 00:19:52.475
Ол үшін Associate route table API қолданамыз,
private_rt айнымалысында сақталған

00:19:52.499 --> 00:20:01.000
route table ID және private_subnet_id
айнымалысында subnet ID толтырамыз.

00:20:01.000 --> 00:20:07.228
Нәтижесінде JSON түрінде жауапты
көреміз, онда Association ID кілтін кейбір ID

00:20:07.252 --> 00:20:13.480
енгіземіз, ол операцияның сәтті аяқталғанын
көрсетеді. Әрі қарай жалғастырайық.

00:20:13.480 --> 00:20:21.680
Енді AWS Management Console-де барлық қажетті 
ресурстардың жасалғанын тексеруіміз керек.

00:20:21.680 --> 00:20:25.960
Біріншісі - CIDR блогымен
сәйкес келетін Demo VPC.

00:20:25.960 --> 00:20:30.080
Әрі қарай, екі subnet бар,
public subnet және private subnet.

00:20:30.080 --> 00:20:35.827
Public subnet-те Интернетке трафикті Internet
gateway арқылы бағыттайтын қосымша routing

00:20:35.851 --> 00:20:41.400
rule бар және private subnet бар, онда
Интернетке трафик NAT gateway арқылы өтеді.

00:20:41.400 --> 00:20:44.720
Мұнда бәрі дұрыс.
Әрі қарай жүрейік.

00:20:44.720 --> 00:20:50.928
Екі route table бар, біреуі public
subnet үшін және ол онымен

00:20:50.952 --> 00:20:57.160
байланысты, екіншісі private
subnet үшін және оған байланысқан.

00:20:57.160 --> 00:21:03.400
Әрі қарай, Demo VPC-ге
қосылған бір Internet gateway бар.

00:21:03.400 --> 00:21:13.149
NAT gateway пайдаланатын Elastic IP
address бар және сіз көріп отырған NAT gateway

00:21:13.173 --> 00:21:22.680
өзі, оның Elastic IP address болып
табылатын primary public IP мекенжайы бар.

00:21:22.680 --> 00:21:28.253
Осымен осы тапсырма аясында
қажет әрекеттердің барлығын аяқтадық

00:21:28.277 --> 00:21:34.560
және командалық жолын пайдаланып,
дәл сол бірдей ресурстарды жасадық.

00:21:34.560 --> 00:21:43.240
Осымен Демо сессия аяқталды. Сіз AWS CLI
сервисін жақсырақ түсіндіңіз деп үміттенемін.

00:21:43.240 --> 00:21:51.840
Сұрақтарыңыз болса, жазыңыз. Назарларыңызға 
рахмет. Келесі белсенділіктерде кездескенше.