 Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной сессии демо. Тема сегодняшнего демо – это изучение функционала Вершенинг у сервиса Amazon S3. Итак, давайте начнем. Начинаем мы наше демо с главной страницы AWS Management Console. Здесь нам необходимо в строке поиска сервисов ввести S3, и вы в выдаче увидите нужный нам сервис. Давайте на него перейдем. Как только мы нажмем на эту ссылку, мы окажемся на главной странице сервиса Amazon S3. Здесь вы видите список всех существующих бакетов. В нашем случае мы будем создавать новый бакет, поэтому нажмем на кнопку Create Bucket в правой части экрана. Как только вы на нее нажмете, нас перенаправит на страницу создания нового S3 бакета, необходимо ввести некоторые входные данные. Первым делом нам необходимо ввести Bucket Name. Напоминаю, что он должен быть уникальным глобально. Далее мы указываем регион, в котором будут храниться наши данные. Чуть ниже у нас есть настройки Object Ownership. Это так называемый ACL, который является старым функционалом. Сейчас он полностью заменен IAM. При необходимости его можно включить, но рекомендуется его отключать. Чуть ниже есть функционал Block Public Access. По умолчанию флажочек включен, что говорит о том, что мы блокируем полностью публичный доступ к нашему бакету. Далее, если мы прокрутим страницу чуть ниже, мы увидим секцию с настройками Bucket Versioning. То есть до создания самого бакета мы можем указать необходимые параметры касательно версионинга. Нам необходимо выбрать опцию Enable. Следующая секция это теги. Здесь мы можем указать user defined, то есть определенные пользователи. Теги ключ значения. Давайте скопируем название нашего бакета и положим под ключом Name. Также мы можем выбрать шифрование. По умолчанию включено SSE S3, то есть это Server Side Encryption дефолтовый от Amazon S3. Есть другой вариант использовать отдельный сервис специально предназначенный для шифрования. Это Amazon QMS. Если нам необходимо использовать QMS, нам необходимо выбрать вторую опцию. Сейчас, чтобы не терять время на этих деталях, мы выберем первый вариант. Если мы прокрутим чуть ниже, мы увидим, что у нас есть последняя секция Advanced Settings. Здесь можно выбрать менее популярные варианты настройки S3 Bucket. На них мы подробнее останавливаться не будем в рамках нашего сегодняшнего демо. В самом низу экрана нажмем на кнопку Create Bucket. Как только вы на нее нажмете, нас перенаправит на страницу со списком всех существующих бакетов. Вы увидите наш бакет в списке. Увидите вверху экрана соответствующее сообщение с зеленым фоном о том, что бакет был успешно создан. Следующий шаг. Сейчас нам необходимо нажать на название нового S3 Bucket для того, чтобы провалиться внутрь этого бакета и посмотреть его детали. Как только мы попадем на основную страницу нового созданного S3 Bucket, мы с вами увидим различные вкладки. Сейчас мы находимся на первой вкладке Objects. Вы видите, что у нас 0 объектов и бакет полностью пустой. Давайте перейдем на вторую вкладку Properties. Здесь вы увидите различные настройки S3 Bucket, в том числе Bucket version. Вы видите сейчас, что он включен. Тем не менее, давайте на кнопку Edit нажмем и посмотрим, что же он нам отобразит. Вы видите, что у нас есть два варианта. Первый это Enable, то есть он сейчас уже включен, поэтому флажок сейчас на этой опции. Также есть другая опция Suspend. Как мы ранее с вами говорили на лекции, есть три состояния. Первое состояние это Disabled, самое первоначальное. После чего есть вариант Enable и третий вариант Suspended. Это когда мы один раз включили и после того, как один раз включается версионик у Bucket, его полностью отключить невозможно. Его можно только приостановить. Отлично. Давайте начнем наш эксперимент. Создадим локально тестовый файл. Пусть он будет называться TestFile.txt и заполним его следующим значением. This is version 1. После этого нам необходимо загрузить этот файл в S3 Bucket. Для этого мы перейдем во вкладку Objects, нажмем на кнопку Upload, нас направит на соответствующую страницу. Мы можем загружать как файлы, так и папки. В нашем случае это один-единственный файл. Поэтому нажмем на кнопку Add Files. Откроется окно выбора файла. Здесь вы можете выбрать один или несколько файлов. Выбираем наш TestFile.txt и нажимаем на кнопку Open. Как только вы на него нажмете, вы увидите отобразиться в списке наш единственный файл, который подготовлен к загрузке. В нижней части страницы необходимо нажать на кнопку Upload. Как только вы на него нажмете, нас перенаправит на следующую страницу, где будет отображаться список всех файлов и папок для загрузки, состояние по каждому объекту, а также после завершения загрузки всех файлов вы увидите вверху экрана специальное сообщение зеленым фоном о том, что процесс загрузки полностью успешно завершен. Здесь мы закончили, поэтому вверху справа есть кнопка Close. Давайте на нее нажмем и вернемся обратно на основную страницу нашего бакета. Здесь вы видите, что у нас появился наш файл. Давайте ее выберем и нажмем на кнопку Open, чтобы открыть ее содержание. Нас перенаправит на новую страницу, в котором будет отображаться содержание нашего txt файла, а именно This is version 1. Мы продолжаем наш эксперимент. Давайте теперь изменим наш файл и запишем содержание This is version 2. Захраним и загрузим на S3Bucket по тем же действиям, которые мы проделали ранее. Вы увидите, что обновится Last Modified столбец для нашего файла TestFile.txt. Теперь нам необходимо нажать на переключатель Show versions в верхней части экрана. После того, как вы на нее нажмете, вы увидите все версии всех файлов. В нашем случае это один единственный файл и две ее версии. Вы видите, что version ID отличается, хотя сам key, то есть путь до этого файла, он совпадает. Отлично. Теперь давайте выберем последнюю версию нашего файла и нажмем на кнопку Open, чтобы проверить, действительно ли последняя версия загрузилась. Мы видим, что в новой вкладке браузера открывается наш TXT файл с необходимым нам содержанием. Если мы вернемся обратно на наш S3Bucket и нажмем на название файла, мы провалимся на специальную страницу нашего объекта. Это главная страница объекта S3. Вы увидите, что здесь есть несколько вкладок. Нас интересует третья вкладка versions, по нажатию которой направляет нас на специальную страницу, где отображаются все версии этого файла. Все верно, отображаются две версии, которые мы загрузили и дополнительная информация, некоторые metadata. Что мы делаем дальше? Мы возвращаемся обратно к нашему S3Bucket на ее основную страницу. Здесь нам необходимо нажать на флажок Show versions еще раз, для того чтобы переключиться на самые актуальные версии файлов и не видеть предыдущие версии. После этого нам необходимо выбрать наш файл и нажать на кнопку Delete. Нас направят на отдельную страницу, где необходимо подтвердить, что мы действительно удаляем этот файл. Необходимо в поле ввести Delete и нажать на кнопку Delete objects. Как только вы это сделаете, вы увидите соответствующее сообщение, а также в списке всех объектов мы увидим, что там пусто. Теперь давайте мы нажмем обратно на переключатель Show versions. Здесь мы увидим, что появилась третья версия, типом которой является DeleteMarker и у нее свой version ID. Что же это означает? Это означает, что история сохранилась, все версии файла на месте и DeleteMarker означает, что в текущем состоянии бакета этого файла не существует. Что мы сделаем? Давайте теперь последнюю версию, то есть наш DeleteMarker, и вторую версию нашего файла выделим для того, чтобы их удалить. После чего нажмем на кнопку Delete. Как только мы нажмем на кнопку Delete, нас направляет на страницу подтверждения удаления. Здесь отображается список наших файлов для удаления и нам необходимо в нижней части прописать Permanently delete и после этого станет активна кнопка Delete objects. Давайте это сделаем и нажмем на кнопку Delete objects. Как только мы ее нажимаем, мы уже видим в списке файлов с отображением версии, у нас остался один файл с единственной версией. Эта версия как раз соответствует самой первой версии этого файла, отображается как текущая. Давайте ее выделим и нажмем на кнопку Open, чтобы проверить действительно ли это самая первая версия файла. Да, действительно это так. Мы видим, что мы смогли, используя функционал версионинга, посмотреть как это работает и восстановили удаленные файлы и более того вернули на предыдущую версию. Таким образом вы понимаете, что с включенным версиями ваши файлы всегда будут на месте, всегда можно будет вернуть в нужное состояние и они точно не потеряются. На этом мы подошли к концу нашей сегодняшней сессии. Я надеюсь вы получили более полное представление о функционале версионинга внутри сервиса Amazon S3. Спасибо за внимание, увидимся с вами на следующих наших активностях.
