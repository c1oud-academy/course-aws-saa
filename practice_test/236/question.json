{
    "text": "A company currently has an Augment Reality (AR) mobile game that has a serverless backend. It is using a DynamoDB table which was launched using the AWS CLI to store all the user data and information gathered from the players and a Lambda function to pull the data from DynamoDB. The game is being used by millions of users each day to read and store data.\nHow would you design the application to improve its overall performance and make it more scalable while keeping the costs low?",
    "answers": [
        {
            "text": "Use AWS SSO and Cognito to authenticate users and have them directly access DynamoDB using single-sign on. Manually set the provisioned read and write capacity to a higher RCU and WCU."
        },
        {
            "text": "Enable DynamoDB Accelerator (DAX) and ensure that the Auto Scaling is enabled and increase the maximum provisioned read and write capacity.",
            "right_answer": true
        },
        {
            "text": "Since Auto Scaling is enabled by default, the provisioned read and write capacity will adjust automatically. Also enable DynamoDB Accelerator (DAX) to improve the performance from milliseconds to microseconds."
        },
        {
            "text": "Use API Gateway in conjunction with Lambda and turn on the caching on frequently accessed data and enable DynamoDB global replication.",
            "right_answer": true
        },
        {
            "text": "Configure CloudFront with DynamoDB as the origin; cache frequently accessed data on the client device using ElastiCache."
        }
    ]
}