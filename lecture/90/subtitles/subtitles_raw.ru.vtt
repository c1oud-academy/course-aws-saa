WEBVTT

00:00:00.000 --> 00:00:02.000
Добрый день, уважаемые студенты!

00:00:02.000 --> 00:00:05.000
Я рад вас всех видеть на очередной лекции.

00:00:05.000 --> 00:00:11.000
Это начало серии из двух лекций, тема базы данных.

00:00:11.000 --> 00:00:13.000
Итак, давайте начнем.

00:00:13.000 --> 00:00:17.000
Наша сегодняшняя лекция состоит из трех частей.

00:00:17.000 --> 00:00:22.000
В первой части мы поговорим про архитектуру VWS,

00:00:22.000 --> 00:00:25.000
которую мы развиваем в рамках лабораторных работ.

00:00:25.000 --> 00:00:27.000
Какая часть добавится на этой неделе.

00:00:27.000 --> 00:00:33.000
Далее, во второй части мы рассмотрим все вопросы, связанные с выбором типа базы данных.

00:00:33.000 --> 00:00:39.000
Какие виды бывают, чем они друг от друга отличаются, какие есть преимущества и недостатки.

00:00:39.000 --> 00:00:46.000
Далее, в последней части этой лекции мы поговорим про сервис RDS.

00:00:46.000 --> 00:00:48.000
Это Relational Database Service.

00:00:48.000 --> 00:00:52.000
Также напоминаю, у нас есть дополнительные активности на этой неделе.

00:00:52.000 --> 00:00:54.000
Это демо.

00:00:54.000 --> 00:01:02.000
Будем создавать автоматические бэкапы и read-реплику для инстанса RDS.

00:01:02.000 --> 00:01:04.000
Также есть Guided Lab.

00:01:04.000 --> 00:01:07.000
Здесь мы будем создавать базу данных RDS.

00:01:07.000 --> 00:01:12.000
Будет введение, а также разбор лабораторной работы.

00:01:12.000 --> 00:01:15.000
Мы начинаем первую часть нашей сегодняшней лекции

00:01:15.000 --> 00:01:19.000
и поговорим про архитектуру в облаке,

00:01:19.000 --> 00:01:22.000
которую мы строим в рамках лабораторных работ.

00:01:22.000 --> 00:01:26.000
На этой неделе добавляется Amazon RDS Primary Instance.

00:01:26.000 --> 00:01:28.000
Это база данных.

00:01:28.000 --> 00:01:32.000
Если говорить про business case, use case,

00:01:32.000 --> 00:01:39.000
то мы на предыдущих неделях создали веб-сайт, добавили динамичности,

00:01:39.000 --> 00:01:41.000
добавили возможность оставлять заказы.

00:01:41.000 --> 00:01:45.000
И как мы с вами помним, у нас есть EC2 Instance.

00:01:45.000 --> 00:01:49.000
Внутри этого же EC2 Instance поднята база данных.

00:01:49.000 --> 00:01:51.000
И все данные в ней сохраняются.

00:01:51.000 --> 00:01:54.000
Если что-то произойдет с этими EC2 Instance,

00:01:54.000 --> 00:01:56.000
то мы потеряем все данные.

00:01:56.000 --> 00:02:03.000
Это начали постепенно понимать все роли в рамках нашего business case,

00:02:03.000 --> 00:02:07.000
начиная от Марты, это мама София,

00:02:07.000 --> 00:02:12.000
которая использует эти данные в целях бухгалтерии и отчетности.

00:02:12.000 --> 00:02:16.000
Также Фрэнк, он использует эти данные для поиска идей,

00:02:16.000 --> 00:02:20.000
какое количество десертов нужно испечь,

00:02:20.000 --> 00:02:23.000
чтобы их все раскупили.

00:02:23.000 --> 00:02:29.000
Либо экспериментировать с новыми видами продукции,

00:02:29.000 --> 00:02:31.000
которые бы всем понравились.

00:02:31.000 --> 00:02:35.000
Также есть некоторые моменты, связанные со Софией.

00:02:35.000 --> 00:02:40.000
Она понимает, что поддерживать базу данных нужно некоторое время.

00:02:40.000 --> 00:02:42.000
Периодически выходят обновления.

00:02:42.000 --> 00:02:46.000
Эти обновления нужно применять к базе данных.

00:02:46.000 --> 00:02:49.000
И это происходит на регулярной основе.

00:02:49.000 --> 00:02:52.000
Из этого администрирование базы данных – это отдельный скилл,

00:02:52.000 --> 00:02:57.000
отдельная роль или должность специалиста, который постоянно этим занимается.

00:02:57.000 --> 00:03:00.000
Кого-то обучать времени нет,

00:03:00.000 --> 00:03:03.000
самой заниматься тоже не получается.

00:03:03.000 --> 00:03:08.000
Поэтому на общем митинге, на встрече,

00:03:08.000 --> 00:03:10.000
было решено рассмотреть варианты,

00:03:10.000 --> 00:03:14.000
как можно разгрузить Софию от этих работ,

00:03:14.000 --> 00:03:17.000
но так, чтобы все продолжало работать,

00:03:17.000 --> 00:03:21.000
чтобы все стояло рабочее, сохранялось,

00:03:21.000 --> 00:03:23.000
чтобы данные не затерялись,

00:03:23.000 --> 00:03:26.000
сама база данных была высокодоступной, надежной

00:03:26.000 --> 00:03:30.000
и была возможность масштабируется при необходимости.

00:03:36.000 --> 00:03:42.000
Как решение было согласовано

00:03:42.000 --> 00:03:45.000
использовать сервис Amazon Ordes,

00:03:45.000 --> 00:03:52.000
который подходит ко всем требованиям наших персонажей.

00:03:52.000 --> 00:03:54.000
И в рамках наших лабораторных работ

00:03:54.000 --> 00:03:59.000
мы будем создавать инстенс базы данных Amazon Ordes.

00:04:01.000 --> 00:04:05.000
Мы с вами добрались до второй части нашей сегодняшней лекции.

00:04:05.000 --> 00:04:08.000
И здесь обсудим моменты, связанные с выбором баз данных.

00:04:10.000 --> 00:04:14.000
� екомендуется особо рассмотреть четыре направления.

00:04:14.000 --> 00:04:18.000
И это максимально поможет не ошибиться с вашим выбором.

00:04:18.000 --> 00:04:20.000
Первое – это масштабируемость.

00:04:20.000 --> 00:04:22.000
Здесь подразумевается возможность

00:04:22.000 --> 00:04:25.000
и необходимость масштабирования вашей базы данных.

00:04:25.000 --> 00:04:28.000
Вы знаете, какой объем баз данных у вас в начале,

00:04:28.000 --> 00:04:30.000
как она будет расти

00:04:30.000 --> 00:04:34.000
и какое она будет через некоторое время потенциально.

00:04:34.000 --> 00:04:38.000
И таким образом вы можете ответить на вопрос,

00:04:38.000 --> 00:04:44.000
какой уровень масштабируемости нужен для вашей баз данных.

00:04:44.000 --> 00:04:52.000
Связанный вопрос – это какой объем данных будет протекать через вашу базу данных.

00:04:52.000 --> 00:04:58.000
Далее второй момент, который нужно учитывать – это требования к хранилищу.

00:04:58.000 --> 00:05:02.000
То есть насколько большой должна быть ваша база данных.

00:05:02.000 --> 00:05:06.000
База данных – это размеров в гигабайты, в терабайты,

00:05:06.000 --> 00:05:08.000
может быть в петабайты.

00:05:08.000 --> 00:05:13.000
В зависимости от того, какой объем баз данных у вас будет в начале

00:05:13.000 --> 00:05:16.000
либо через какое-то время может потенциально стать,

00:05:16.000 --> 00:05:22.000
вы в самом начале будете определяться, с какой базы данных вы начнете.

00:05:22.000 --> 00:05:28.000
Далее третье – это какие именно данные вы будете хранить.

00:05:28.000 --> 00:05:33.000
То есть какой размер объектов и какой тип этих объектов.

00:05:33.000 --> 00:05:40.000
То есть это могут быть какие-то числовые значения, строки, символы и так далее.

00:05:40.000 --> 00:05:43.000
То есть простые структуры данных.

00:05:43.000 --> 00:05:46.000
Это могут быть некоторые сложные структуры данных,

00:05:46.000 --> 00:05:51.000
то есть объекты, рисунок объекты в таком же виде возможно вам нужно хранить в базе данных.

00:05:51.000 --> 00:05:57.000
Может быть вы будете хранить ваши данные, то есть медиафайлы в базе данных.

00:05:57.000 --> 00:06:07.000
Эти все моменты также нужно заранее узнать и брать во внимание.

00:06:07.000 --> 00:06:11.000
Последнее направление – это durability, то есть надежность вашей базы данных.

00:06:11.000 --> 00:06:17.000
Здесь подразумевается data durability, data availability и recoverability.

00:06:17.000 --> 00:06:20.000
Давайте остановимся подробнее на каждом из них.

00:06:20.000 --> 00:06:27.000
Data durability – это то, могут ли ваши данные быть утеряны.

00:06:27.000 --> 00:06:36.000
Data availability – это может ли получится так, что данные хранятся, они есть,

00:06:36.000 --> 00:06:43.000
но в какой-то момент ввиду проблем с сетью либо любыми другими моментами вы не можете обратиться к ним.

00:06:43.000 --> 00:06:47.000
В зависимости от того, насколько кратичен тот или иной момент,

00:06:47.000 --> 00:06:54.000
вы будете определять уровень durability и availability для вашей базы данных и для ваших данных.

00:06:54.000 --> 00:07:04.000
Далее есть понятие recoverability – это как быстро вам необходимо вернуть в строй вашу базу данных

00:07:04.000 --> 00:07:09.000
и с какими потерями ваш бизнес может мириться.

00:07:09.000 --> 00:07:15.000
Представим, у вас есть бэкапы ежемесячные и каждый месяц 1 числа

00:07:15.000 --> 00:07:17.000
вы делаете бэкап базы данных.

00:07:17.000 --> 00:07:19.000
Она у вас хранится, есть.

00:07:19.000 --> 00:07:26.000
В случае, если что-то произойдет в середине месяца, вы знаете, что вы можете всегда откатиться на начало месяца.

00:07:26.000 --> 00:07:32.000
Если те данные, которые были с начала месяца, будут утеряны для вас не критично,

00:07:32.000 --> 00:07:36.000
это и есть тот уровень recoverability, который вам нужен.

00:07:36.000 --> 00:07:43.000
Если вы говорите, что вам нужны данные день в день, то есть что-то происходит сегодня с базой данных,

00:07:43.000 --> 00:07:49.000
нам нужно, чтобы мы смогли постановить все данные на начало этого дня.

00:07:49.000 --> 00:07:53.000
И не критично, если мы потеряем данные, созданные сегодня.

00:07:53.000 --> 00:08:00.000
В этом случае от вас потребуются, естественно, большие финансовые затраты,

00:08:00.000 --> 00:08:07.000
так как само решение, оно усложнится, но оно будет обеспечивать тот уровень recoverability, который вам требуется.

00:08:07.000 --> 00:08:16.000
Если же это такой уровень, когда вы не можете ни одну строчку ваших данных потерять,

00:08:16.000 --> 00:08:19.000
то в этом случае это будет еще дороже.

00:08:19.000 --> 00:08:22.000
Сама архитектура, она усложнится.

00:08:22.000 --> 00:08:29.000
Скорее всего, вы будете подключать другие WS-регионы, чтобы данные реплицировались в несколько регионов.

00:08:29.000 --> 00:08:33.000
В этом случае вы точно ваши данные не потеряете, но вы осознаете,

00:08:33.000 --> 00:08:37.000
что вам необходимо нести определенные финансовые расходы

00:08:37.000 --> 00:08:42.000
на поддержание вот этой сложной IT-архитектуры.

00:08:42.000 --> 00:08:48.000
Еще один момент, который связан с durability, это некоторые регуляторные требования.

00:08:48.000 --> 00:08:55.000
Например, вы работаете в финансовой сфере, и вам необходимо данные хранить в течение 5 лет.

00:08:55.000 --> 00:09:01.000
Поэтому эти данные нужно сохранить в определенное место, так чтобы это было недорого для вас,

00:09:01.000 --> 00:09:05.000
при этом при необходимости вы могли эти данные извлечь.

00:09:05.000 --> 00:09:13.000
Либо такие требования, что вы не можете потерять данные более чем за 3 дня.

00:09:13.000 --> 00:09:19.000
Тогда вы должны строить свое решение таким образом, чтобы 2-3 дня данные всегда...

00:09:19.000 --> 00:09:26.000
каждые 2-3 дня данные выкопировались, и вы в любой момент могли вернуться на предыдущую версию

00:09:26.000 --> 00:09:30.000
и не нарушить требования регуляторного органа.

00:09:30.000 --> 00:09:37.000
Когда мы говорим про типы базы данных, то выделяют две большие группы.

00:09:37.000 --> 00:09:46.000
Первая группа это relational database, примерами могут быть Microsoft SQL Server, Oracle Database, MySQL.

00:09:46.000 --> 00:09:54.000
А вторая группа это non-relational, примерами могут быть MongoDB, Cassandra, Redis и другие.

00:09:54.000 --> 00:09:59.000
Давайте теперь подробнее остановимся, чем они друг от друга отличаются.

00:09:59.000 --> 00:10:06.000
Когда мы говорим relational database, то это тот тип баз данных, который появился изначально.

00:10:06.000 --> 00:10:11.000
Он является самым популярным типом баз данных, его очень легко использовать.

00:10:11.000 --> 00:10:19.000
Есть возможность работать с SQL, то есть Structured Query Language, самый популярный язык запросов.

00:10:19.000 --> 00:10:31.000
Далее, это тот случай, когда вам нужна целостность данных, она гарантируется жесткой структурой таблиц.

00:10:31.000 --> 00:10:37.000
То есть data modeling происходит изначально, вы определяете какие таблицы есть,

00:10:37.000 --> 00:10:42.000
какие есть поля у каждой из таблиц, как эти таблицы между собой взаимосвязаны,

00:10:42.000 --> 00:10:47.000
и дальнейшее изменение, оно очень сложно происходит.

00:10:47.000 --> 00:10:55.000
Но если правильно определить все в начале, то очень просто, удобно работать с этими данными.

00:10:55.000 --> 00:11:02.000
За счет вот этой оптимизации и структуризации хранения ваших данных,

00:11:02.000 --> 00:11:10.000
вы будете хранить намного меньше данных, чем если бы хранили одним большим полотном.

00:11:10.000 --> 00:11:15.000
� елационные базы данных, они идеальны, когда вам нужна жесткая структура,

00:11:15.000 --> 00:11:26.000
они редко меняются, вам нужна целостность данных, вам нет необходимости в экстремальных операциях записи и чтения,

00:11:26.000 --> 00:11:31.000
также не нужна большая производительность.

00:11:31.000 --> 00:11:39.000
В противовес этому типу, у нас есть вторая группа, это non-relational database type.

00:11:39.000 --> 00:11:44.000
Это тот случай, когда база данных строится на конкретную задачу.

00:11:44.000 --> 00:11:49.000
Поэтому видов нерелационных баз данных очень много.

00:11:49.000 --> 00:11:53.000
Также их часто называют no-SQL databases.

00:11:53.000 --> 00:11:59.000
Они отличаются гибкостью, высокой масштабируемостью, высокой производительностью

00:11:59.000 --> 00:12:04.000
и различными возможностями взаимодействия с этой базой данных.

00:12:04.000 --> 00:12:09.000
Не везде SQL поддерживается в случае no-SQL баз данных.

00:12:09.000 --> 00:12:15.000
Она идеально подходит, если вам нужно, чтобы ваша база данных масштабировалась горизонтально,

00:12:15.000 --> 00:12:19.000
то есть это работа с большим объемом данных.

00:12:19.000 --> 00:12:29.000
Также подходит, если традиционные релационные базы данных вам по тем или иным причинам не совсем подходят.

00:12:29.000 --> 00:12:37.000
И другой момент, если у вас достаточно высоконагруженные запросы на ваше приложение,

00:12:37.000 --> 00:12:45.000
то нерелационные базы данных могут быть экономичнее по сравнению с релационными базами данных.

00:12:45.000 --> 00:12:54.000
На этом слайде вы видите примеры самых популярных существующих сервисов баз данных.

00:12:54.000 --> 00:12:58.000
На самом деле их больше, но они не так часто используются.

00:12:58.000 --> 00:13:02.000
Сервисы поделены на две группы.

00:13:02.000 --> 00:13:07.000
С левой стороны это примеры релационных баз данных.

00:13:07.000 --> 00:13:09.000
Самый популярный это Amazon RDS.

00:13:09.000 --> 00:13:12.000
Далее идет Amazon Redshift и Amazon Aurora.

00:13:12.000 --> 00:13:20.000
Я напомню, что Amazon Aurora это in-house разработка от самого AWS.

00:13:20.000 --> 00:13:27.000
И она предлагает свою релационную базу данных, построенные на движке MySQL либо PostgreSQL.

00:13:27.000 --> 00:13:35.000
И глобально ничем не отличается от Amazon RDS, кроме как нативная интеграция AWS.

00:13:35.000 --> 00:13:37.000
Соответственно, это vendor-log.

00:13:37.000 --> 00:13:42.000
Но по той же самой цене мы получаем большую эффективность и производительность

00:13:42.000 --> 00:13:47.000
по сравнению с любой другой базой данных в сервисе Amazon RDS.

00:13:47.000 --> 00:13:53.000
Поэтому какой вариант для вас лучше, вы решайте для себя.

00:13:53.000 --> 00:13:59.000
На следующих слайдах мы подробнее будем говорить именно про сервис Amazon RDS.

00:13:59.000 --> 00:14:04.000
Если мы говорим про нерелационные базы данных, тоже очень много различных видов.

00:14:04.000 --> 00:14:11.000
Самые популярные из них это Amazon DynamoDB, дальше ElastiCache и Amazon Neptune.

00:14:11.000 --> 00:14:16.000
Среди этой тройки самые популярные, часто используемые, это KeyPair Database,

00:14:16.000 --> 00:14:19.000
то есть Amazon DynamoDB.

00:14:19.000 --> 00:14:29.000
И на этих лекциях мы будем подробнее рассматривать именно Amazon DynamoDB

00:14:29.000 --> 00:14:32.000
из группы нерелационных баз данных.

00:14:32.000 --> 00:14:36.000
На этом мы подошли к концу второй части нашей сегодняшней лекции.

00:14:36.000 --> 00:14:44.000
Мы разобрали кейсы, которые важно знать и учитывать при выборе типа баз данных.

00:14:44.000 --> 00:14:51.000
Далее мы сделали поверхностное сравнение, что такое нерелационные базы данных

00:14:51.000 --> 00:14:54.000
и чем они отличаются от нерелационных баз данных.

00:14:54.000 --> 00:15:01.000
А также буквально один слайд был посвящен существующим сервисам AWS.

00:15:01.000 --> 00:15:05.000
Самые популярные среди них мы будем рассматривать более подробно.

00:15:05.000 --> 00:15:11.000
Мы с вами начинаем третью часть нашей сегодняшней лекции

00:15:11.000 --> 00:15:14.000
и подробнее поговорим про сервис Amazon RDS.

00:15:14.000 --> 00:15:19.000
Amazon RDS – это полностью менеджед решение, которое предоставляет вам

00:15:19.000 --> 00:15:21.000
нерелационные базы данных.

00:15:21.000 --> 00:15:24.000
Перед тем, как мы перейдем к разбору этого сервиса,

00:15:24.000 --> 00:15:29.000
давайте посмотрим, что же такое Managed Database Service.

00:15:29.000 --> 00:15:34.000
На этом слайде вы видите сравнение трех различных баз данных.

00:15:34.000 --> 00:15:39.000
В первом случае это база данных, которая размещается на локальном дата-центре.

00:15:39.000 --> 00:15:43.000
В этом случае абсолютно все производится вами,

00:15:43.000 --> 00:15:48.000
то есть начиная от организации питания, подключения к сети,

00:15:48.000 --> 00:15:52.000
заканчивая моментами, связанные непосредственно с приложением,

00:15:52.000 --> 00:15:54.000
это на ваших плечах.

00:15:54.000 --> 00:15:57.000
В другом случае это когда вы хостите вашу базу данных

00:15:57.000 --> 00:16:02.000
внутри Amazon EC2, то есть подняли сервер и там отдельно установили

00:16:02.000 --> 00:16:05.000
приложение баз данных и работаете с ней.

00:16:05.000 --> 00:16:11.000
В этом случае часть, которая связана с физическим присутствием,

00:16:11.000 --> 00:16:18.000
то есть работы, которые происходят при физическом присутствии возле этого сервера,

00:16:18.000 --> 00:16:24.000
она передается AWS, даже установка операционной системы

00:16:24.000 --> 00:16:27.000
это тоже в каком-то смысле на стороне AWS.

00:16:27.000 --> 00:16:31.000
Для вас фактически все готово, вам достаточно выбрать

00:16:31.000 --> 00:16:33.000
подходящую для вас операционную систему,

00:16:33.000 --> 00:16:36.000
когда она устанавливается и готова для работы.

00:16:36.000 --> 00:16:42.000
В этом случае вы видите выделены синим те работы,

00:16:42.000 --> 00:16:47.000
связанные с базами данных, которые выполняете самостоятельно.

00:16:47.000 --> 00:16:52.000
И третий случай с правой стороны, это когда у нас

00:16:52.000 --> 00:16:58.000
managed AWS database service, когда практически все работы,

00:16:58.000 --> 00:17:04.000
связанные с администрированием и поддержкой работоспособности вашей базы данных,

00:17:04.000 --> 00:17:08.000
она переходит на сторону AWS.

00:17:08.000 --> 00:17:14.000
Вы лишь управляете тем, что правильно создаете модель данных,

00:17:14.000 --> 00:17:19.000
создаете таблицы, создаете правильные запросы для вашего приложения,

00:17:19.000 --> 00:17:24.000
то есть занимаетесь всем тем, что непосредственно связано с вашим приложением

00:17:24.000 --> 00:17:28.000
и оптимизацией базы данных для вашего приложения.

00:17:28.000 --> 00:17:36.000
Вы видите, что большой объем работ, оно уходит от вас,

00:17:36.000 --> 00:17:41.000
переходит AWS, на стороне AWS это максимально автоматизировано,

00:17:41.000 --> 00:17:46.000
то есть нет момента, когда происходит некоторая поломка

00:17:46.000 --> 00:17:48.000
ввиду человеческого фактора.

00:17:48.000 --> 00:17:51.000
В большинстве случаев это происходит из-за того,

00:17:51.000 --> 00:17:55.000
что само железо выходит из строя, и это нормально,

00:17:55.000 --> 00:17:57.000
к этому нужно быть готовым.

00:17:57.000 --> 00:18:03.000
А все остальное, оно автоматизировано и работает как часы для вас.

00:18:03.000 --> 00:18:07.000
Для вас лишь остается максимально сконцентрироваться

00:18:07.000 --> 00:18:10.000
на вашей конкретной бизнес-задаче.

00:18:10.000 --> 00:18:15.000
В случае, когда у вас небольшая команда, либо команда из дорогостоящих специалистов,

00:18:15.000 --> 00:18:24.000
либо в случае, когда команда просто не успевает заниматься попутными работами

00:18:24.000 --> 00:18:29.000
по поддержке вашей инфраструктуры, Managed Database может быть идеальным решением.

00:18:34.000 --> 00:18:40.000
Давайте рассмотрим кейсы, которые подходят для Amazon RDS.

00:18:40.000 --> 00:18:44.000
В случае, если вы обращаетесь к вашим данным транзакционно,

00:18:44.000 --> 00:18:49.000
либо есть небольшая простая аналитика, то можно использовать Amazon RDS.

00:18:49.000 --> 00:18:52.000
Если мы говорим с точки зрения размера баз данных,

00:18:52.000 --> 00:18:59.000
все, что до терабайта, это подходит для работы в реализационных баз данных.

00:18:59.000 --> 00:19:03.000
Если говорить про максимально поддерживаемые размеры баз данных,

00:19:03.000 --> 00:19:06.000
для Amazon Aurora это 64 терабайта,

00:19:06.000 --> 00:19:13.000
для MySQL, MariaDB, Oracle и Postgres в два раза меньше это 32 терабайта,

00:19:13.000 --> 00:19:19.000
и самый маленький это Microsoft SQL Server, который поддерживает максимум 16 терабайтов.

00:19:21.000 --> 00:19:25.000
Дополнительным преимуществом использования Amazon RDS является то,

00:19:25.000 --> 00:19:30.000
что размер хранилища, оно может быть увеличено динамически

00:19:30.000 --> 00:19:34.000
и нет необходимости для этого останавливать instance базы данных.

00:19:35.000 --> 00:19:39.000
Если мы говорим про производительность, то здесь есть два варианта.

00:19:39.000 --> 00:19:48.000
Первый вариант это General SSD, который на 1 гигабайт выделенного дает 3 IOPS,

00:19:48.000 --> 00:19:51.000
то есть 3 Input Output Operations Per Second.

00:19:51.000 --> 00:19:54.000
Соответственно, если у вас 100 гигабайтов базы данных,

00:19:54.000 --> 00:19:57.000
вы перемножаете 3 умноженное на 100, будет 300,

00:19:57.000 --> 00:20:02.000
и в этом случае ваша база данных будет поддерживать 300 IOPS операций.

00:20:02.000 --> 00:20:04.000
Такой объем данных.

00:20:04.000 --> 00:20:10.000
При необходимости оно может увеличиваться до 3000 IOPS,

00:20:10.000 --> 00:20:16.000
но оно лишь кратковременное.

00:20:16.000 --> 00:20:18.000
То есть если есть такие нагрузки,

00:20:18.000 --> 00:20:23.000
то Amazon RDS тоже так же может в этом случае подойти.

00:20:23.000 --> 00:20:27.000
В случае, если у вас нагрузки еще больше,

00:20:27.000 --> 00:20:32.000
то есть другой тип хранения, это provisioned IOPS SSD storage.

00:20:32.000 --> 00:20:38.000
В этом случае оно поддерживает еще больше операций ввода и вывода.

00:20:44.000 --> 00:20:52.000
Если мы говорим про поддерживаемые движки в рамках сервиса Amazon RDS,

00:20:52.000 --> 00:20:59.000
то это Microsoft SQL Server, Oracle, MySQL, Postgres, Aurora и MariaDB.

00:20:59.000 --> 00:21:04.000
Если мы говорим про существующие типы баз данных,

00:21:04.000 --> 00:21:08.000
а также семейство типов баз данных, то выделяют 3 вида.

00:21:08.000 --> 00:21:10.000
Первый это T-Family.

00:21:10.000 --> 00:21:16.000
В тот случай, когда оно подходит для большинства нагрузок,

00:21:16.000 --> 00:21:20.000
также называется burstable instances.

00:21:20.000 --> 00:21:25.000
То есть если у вас в какой-то момент приходит большая нагрузка,

00:21:25.000 --> 00:21:30.000
то именно этот тип инстанцев баз данных,

00:21:30.000 --> 00:21:34.000
они могут работать поверх своих характеристик

00:21:34.000 --> 00:21:37.000
некоторое время за дополнительную плату.

00:21:38.000 --> 00:21:42.000
Если мы говорим про второе семейство, это M-Family,

00:21:42.000 --> 00:21:46.000
это тот случай, когда ваши нагрузки CPU intensive,

00:21:46.000 --> 00:21:49.000
то есть требуют больших вычислительных мощностей,

00:21:49.000 --> 00:21:51.000
и идет нагрузка на 2-3

00:21:51.000 --> 00:21:56.000
то есть требует больших вычислительных мощностей, и идет нагрузка на процессор.

00:21:56.000 --> 00:22:02.000
В этом случае вы можете смотреть в сторону этого семейства типов баз данных.

00:22:02.000 --> 00:22:06.000
Если мы говорим про третье семейство, это R-Family,

00:22:06.000 --> 00:22:13.000
и оно при прочих равных условиях

00:22:13.000 --> 00:22:18.000
содержит в себе большее количество операционной памяти.

00:22:18.000 --> 00:22:45.000
Это тот случай, когда у вас есть большие сложные запросы,

00:22:45.000 --> 00:23:13.000
эти данные доходят до вас например для S3 и там хранятся в сыром виде,

00:23:13.000 --> 00:23:22.460
в datastore, то есть сервис Amazon RDS, где эти данные используются для простейшей аналитики и для

00:23:22.460 --> 00:23:32.740
поиска некоторых важных для бизнеса выводов на основе этих данных. Давайте теперь подробнее

00:23:32.740 --> 00:23:40.380
ознакомимся с функционалом Multi-Azial Deployment. Идея в том, что это то, что позволяет нам предоставить

00:23:40.380 --> 00:23:45.280
высокую доступность наших баз данных. Идея в том, что у нас есть регион, в регионе есть

00:23:45.280 --> 00:23:53.040
несколько availability zone и с включенным функционалом Multi-Azial Deployment мы выбираем необходимые

00:23:53.040 --> 00:24:02.960
availability zone и Amazon RDS деплоит два инстенса баз данных, один как основной, другой как

00:24:02.960 --> 00:24:13.520
standby и при необходимости переключает основную базу данных между этими двумя инстенсами. Это

00:24:13.520 --> 00:24:21.020
предоставляет большую доступность, также дает возможность автоматически переключать основную

00:24:21.020 --> 00:24:30.140
инстенс базы данных в случае определенных проблем. Какие проблемы могут возникнуть, это если в целом

00:24:30.140 --> 00:24:36.560
в availability zone будут какие-то проблемы, то происходит автоматический failover. Далее, если

00:24:36.560 --> 00:24:45.440
есть проблемы с сетью, другой момент, если вдруг выходит из строя процессор либо любое другое

00:24:45.440 --> 00:24:52.560
железо на этом конкретном сервере, то происходит автоматический failover. И последнее, если что-то

00:24:52.560 --> 00:24:59.080
опять же происходит с железом, но связанное с хранением ваших данных. В этом случае триггерится

00:24:59.080 --> 00:25:07.160
событие automated failover и второй instance баз данных, который standby, становится основным, а второй,

00:25:07.160 --> 00:25:15.720
который был основным, он переходит в состояние standby. Для приложения это все происходит

00:25:15.720 --> 00:25:24.800
прозрачно, так как ссылка endpoint к вашей базе данных она не меняется и приложение после того,

00:25:24.800 --> 00:25:33.440
как произойдет переключение, оно сможет продолжать работать в том же режиме,

00:25:33.440 --> 00:25:39.840
как и работал до этого. То есть, автоматический failover не требует от вас ручного вмешательства.

00:25:39.840 --> 00:25:49.040
Другой функционал называется read replicas, оно используется для повышения производительности

00:25:49.040 --> 00:25:58.280
ваших баз данных. Идея в том, что создается особый вид вашей базы данных, которая доступна

00:25:58.280 --> 00:26:03.320
только для операции чтения. Через него вы изменять базу и что-то записывать не можете.

00:26:03.320 --> 00:26:11.520
Когда вы создаете read replica, вы можете разгрузить основную базу данных от тяжелых либо частых

00:26:11.520 --> 00:26:18.160
операций чтения. Таким образом нагрузка переходит на read replicas. Следует обратить внимание,

00:26:18.160 --> 00:26:26.720
что синхронизация между ними она асинкронизирована. То есть, данные они появляются не сразу,

00:26:26.720 --> 00:26:34.880
а с небольшой задержкой. Поддерживается этот функционал четырьмя движками, это mysql,

00:26:34.880 --> 00:26:44.480
MariaDB, Postgres и Oracle. Основные лимиты, которые есть, это то, что вы можете создать максимум 5

00:26:44.480 --> 00:26:52.640
read replic на ваш основной instance баз данных. Если вам нужна строгая read after write consistency,

00:26:52.640 --> 00:27:02.880
это когда возможно считать данные сразу после ее записи, то вам необходимо делать чтение из

00:27:02.880 --> 00:27:11.440
основной баз данных. Во всех других случаях, когда допустимо, что данные будут в асинхронии

00:27:11.440 --> 00:27:17.240
некоторое небольшое количество времени, обычно это менее одной секунды, то рекомендуется

00:27:17.240 --> 00:27:26.040
использовать read replica. Одним из частых use case является создание read replicas для разгрузки

00:27:26.040 --> 00:27:33.720
основной базы данных в целях использования для приложения и создается еще дополнительная read

00:27:33.720 --> 00:27:43.600
replica, на котором отрабатывают некоторые сложные запросы для генерации отчетности. Отчетности для

00:27:43.600 --> 00:27:49.760
руководства и соответственно руководство, получая эти отчеты, делает некоторые бизнес

00:27:49.760 --> 00:27:58.000
решения. И эти отчеты формируются не в ущерб основным нагрузкам от ваших пользователей на

00:27:58.000 --> 00:28:06.040
приложении. Пару слов хотелось бы добавить касательно бэкапов. Есть такая опция, есть

00:28:06.040 --> 00:28:14.080
manual backup, есть automatic backups, где вы настраиваете расписание и по расписанию создаются бэкапы

00:28:14.080 --> 00:28:20.240
ваших баз данных. Они хранятся в s3 bucket, этот s3 bucket может находиться в том же регионе,

00:28:20.240 --> 00:28:29.360
если есть необходимость вы можете создавать снапшоты в s3 bucket в другом регионе для disaster

00:28:29.360 --> 00:28:35.960
recovery. Также вы можете отправлять ваши снапшоты в другой AWS аккаунт, если того требует ваша

00:28:35.960 --> 00:28:44.760
бизнес задача. Мы с вами подробнее обсудили про самый популярный сервис релационных баз данных

00:28:44.760 --> 00:28:52.560
Amazon RDS. Теперь буквально по одному слайду остановимся на оставшихся двух сервисах

00:28:52.560 --> 00:28:59.080
релационных баз данных Amazon Aurora и Amazon Redshift. Amazon Aurora это также fully managed

00:28:59.080 --> 00:29:07.680
сервис релационных баз данных. Оно было написано командой AWS для AWS, то есть это

00:29:07.680 --> 00:29:15.920
нативное AWS решение, базируется на движках MySQL и PostgreSQL. Таким образом, существующую базу

00:29:15.920 --> 00:29:23.920
данных на MySQL либо Postgres вы можете с легкостью перенести на сервис Amazon Aurora. Этот сервис

00:29:23.920 --> 00:29:33.320
также хорошо подходит для транзакционных нагрузок, так как эта база данных она была написана

00:29:33.320 --> 00:29:43.960
командой AWS, то была соответственно оптимизирована и вы за ту же цену при прочих равных условиях

00:29:43.960 --> 00:29:50.960
получаете в пять раз более производительную базу данных по сравнению со стандартным MySQL и в три

00:29:50.960 --> 00:29:58.880
раза производительную базу данных по сравнению со стандартным PostgreSQL. Если вам интересны

00:29:58.880 --> 00:30:08.200
детали этих тестов, то вы можете с легкостью их найти через поисковик в BEEF простой запрос. Здесь

00:30:08.200 --> 00:30:18.000
также следует отметить, что Aurora предоставляет достаточно высокую durability, то есть надежность

00:30:18.000 --> 00:30:25.760
хранения ваших данных путем сохранения в шести различных местах в трех различных availability

00:30:25.760 --> 00:30:32.800
зонах. Это достаточно надежное решение и вы с меньшей долей вероятности потеряете ваши данные.

00:30:32.800 --> 00:30:42.000
Если говорить про возможности увеличения производительности, мы ранее упоминали, что

00:30:42.000 --> 00:30:51.760
четыре движка Amazon RDS поддерживают до пяти read-replic. Если говорить про Aurora, это в три раза

00:30:51.760 --> 00:31:00.280
больше. Вы можете создать для одного основного инстенса Aurora до 15 read-replic. Таким образом,

00:31:00.280 --> 00:31:08.080
она может больше масштабироваться по сравнению с любым другим движком Amazon RDS. Но очень важно

00:31:08.080 --> 00:31:14.720
отметить то, что при использовании Amazon Aurora вы привязываетесь к AWS, то есть у вас некий

00:31:14.720 --> 00:31:21.920
vendor lock. Если ваша компания изначально решила двигаться с AWS, есть дополнительные контракты,

00:31:21.920 --> 00:31:30.560
которые дают скидки, либо вы ограничены вашей командой, которая специализируется на AWS и

00:31:30.560 --> 00:31:39.720
смена облачного провайдера сильно скажется на производительности вашей команды, да и в целом

00:31:39.720 --> 00:31:47.200
поставит под вопрос существование вашей компании, то да, вы привязаны к AWS. В этом случае ничего

00:31:47.200 --> 00:31:52.200
страшного нет. Использовать этот сервис и получать все те преимущества, которые она предоставляет.

00:31:52.200 --> 00:31:59.640
Здесь также хотелось бы отметить, что Amazon Aurora также существует в сервер-лес-варианте.

00:31:59.640 --> 00:32:08.280
Сервер-лес-Aurora это когда у вас поднимается инстенс базы данных и вы с ней работаете в

00:32:08.280 --> 00:32:12.760
случае, когда на нее нагрузка не идет, она отключается и вы за это время не платите.

00:32:12.760 --> 00:32:24.360
Таким образом для непостоянных нагрузок сервер-лес-решение от Amazon Aurora может быть

00:32:24.360 --> 00:32:36.600
идеальным решением в связке с Lambda. Как только вы разведете ваше приложение, ваш сервис и вы

00:32:36.600 --> 00:32:44.400
будете получать постоянные нагрузки, то скорее всего вам от сервер-лес-аврора нужно будет

00:32:44.400 --> 00:32:53.240
переходить на стандартный деплеймент и таким образом это будет на тот момент более выгодным

00:32:53.240 --> 00:33:01.360
решением. Следующий сервис это Amazon Redshift. Это тот сервис, который предоставляет вам

00:33:01.360 --> 00:33:09.640
Data Warehouse, то есть DWH. Это то место, где вы можете хранить все ваши данные и там проводить

00:33:09.640 --> 00:33:17.920
некоторые аналитические расчеты, то есть all-up нагрузки. Оно специально было создано под такой

00:33:17.920 --> 00:33:24.920
тип нагрузок. Также это тот сервис, который может расширяться до петабайтов размеров.

00:33:24.920 --> 00:33:30.760
Другая особенность является то, что оно достаточно нативно интегрировано с сервисом

00:33:30.760 --> 00:33:38.400
Amazon S3 и внутри Redshift вы можете делать запросы на данные в S3, что очень удобно.

00:33:38.400 --> 00:33:48.520
На этом мы подошли к третьей части нашей сегодняшней лекции. Мы разобрали, что такое

00:33:48.520 --> 00:33:55.480
Managed AWS Database Service, чем он отличается от других вариантов деплеймента. Подробнее разобрали

00:33:55.480 --> 00:34:01.480
сервис Amazon RDS, какие у него есть особенности и какие есть use-кейсы использования именно

00:34:01.480 --> 00:34:08.920
этого сервиса. Далее буквально по одному слайду мы рассмотрели следующие по популярности сервисы

00:34:08.920 --> 00:34:17.320
реализационных баз данных. Это Amazon Aurora и Amazon Redshift. На этом мы завершаем нашу сегодняшнюю

00:34:17.320 --> 00:34:24.240
лекцию. Я надеюсь, вы получили более полное представление о разобранных нами сервисах AWS.

00:34:24.240 --> 00:34:29.040
Спасибо за внимание. Увидимся с вами на следующих наших активностях.