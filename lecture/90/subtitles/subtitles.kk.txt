Қайырлы күн, құрметті студенттер! Сізді келесі дәрісте көргеніме қуаныштымын. Бұл - дерекқор бойынша екі дәрістік топтаманың біріншісі. Ендеше, бастайық. Бүгінгі дәрісіміз үш бөлімнен тұрады. Бірінші бөлімде зертханалық жұмыстың аясында әзірлеп жатқан AWS архитектурасы және қандай бөлігі осы аптада қосылатыны туралы айтатын боламыз. Келесі, екінші бөлімде дерекқор түрін таңдауға қатысты барлық мәселелерді қарастырамыз. Қандай түрлері бар, бір-бірінен қалай ерекшеленеді, қандай артықшылықтар мен кемшіліктері бар. Дәрістің соңғы бөлігінде Amazon RDS сервисі туралы айтамыз. Бұл - Relational Database Service. Сондай-ақ, осы аптада қосымша белсенділіктер бар екенін еске саламын, бұл - Демо. RDS инстансы үшін автоматты сақтық көшірмелерді және read репликасын жасаймыз. Сондай-ақ, Guided Lab бар. Мұнда RDS дерекқорын жасаймыз. Кіріспе, сонымен қатар зертханалық жұмыстарға шолу болады. Ендеше бүгін дәрісіміздің бірінші бөлімін бастаймыз және зертханалық жұмыстың аясында жасап жатқан бұлттағы архитектура туралы айтатын боламыз. Осы аптада Amazon RDS Primary Instance қосылады. Бұл - дерекқор. Егер бизнес-кейс, use case туралы айтатын болсақ, онда алдыңғы апталарда веб-сайт құрдық, динамизмді қостық және тапсырыстарды орналастыру мүмкіндігін қостық. Бізде EC2 инстансы бар. Сол EC2 инстансында дерекқор орнатылады және барлық деректер сол жерде сақталады. Осы EC2 инстансына бірдеңе болса, біз барлық деректерді жоғалтамыз. Біздің бизнестегі адамдар, бұл деректерді бухгалтерлік есеп беру үшін пайдаланатын Софияның анасы Мартадан бастап, мұны бірте-бірте түсіне бастады. Сондай-ақ, Фрэнк, ол бұл деректерді барлық өнімді сату үшін қанша десерт пісіру керектігі туралы идеяларды табу үшін немесе барлығына ұнайтын өнімдердің жаңа түрлерімен тәжірибе жасауға пайдаланады. Софияға қатысты кейбір сәттер де бар. Ол дерекқорды басқару біраз уақытты қажет ететінін түсінеді. Жаңартулар мерзімді түрде шығарылады. Бұл жаңартулар дерекқорға қолданылуы керек және бұл жүйелі түрде орын алады. Оның үстіне, дерекқорды әкімшілендіру – бұл жеке дағды, осымен үнемі айналысатын маманның бөлек рөлі немесе қызметі. Біреуді жаттықтыруға уақыт жоқ, өзі де істей алмайды. Сондықтан, жалпы жиналыста бәрі жұмыс істей беретіндей, сақталатындай, деректер жоғалып кетпейтіндей, дерекқордың өзі өте қолжетімді, сенімді және қажет болған жағдайда масштабтау мүмкіндігіне ие болатындай Софияны бұл жұмыстан қалай босатудың нұсқаларын қарастыру туралы шешім қабылданды. Шешім ретінде кейіпкерлеріміздің барлық талаптарына сәйкес келетін Amazon RDS сервисін пайдалануға келісілді. Біздің зертханаларымыздың бөлігі ретінде Amazon RDS дерекқор инстансын жасайтын боламыз. Бүгінгі дәрісіміздің екінші бөліміне жеттік. Енді дерекқор таңдауға қатысты мәселелерді талқылаймыз. Төрт бағытты арнайы қарастыру ұсынылады. Бұл таңдауыңызда қателеспеуге мүмкіндігінше көмектеседі. Біріншісі - масштабтау. Бұл дерекқорды масштабтау мүмкіндігі мен қажеттілігін білдіреді. Сіз өзіңіздің дерекқорыңыздың қаншалықты үлкен екенін, оның қалай өсетінін және уақыт өте келе қандай болатынын білесіз. Осылайша дерекқорыңыз үшін масштабтаудың қандай деңгейі қажет деген сұраққа жауап бере аласыз. Осыдан туындайтын сұрақ - дерекқорыңыз арқылы деректердің қандай көлемі өтеді? Әрі қарай, ескеретін екінші нәрсе - сақтау талаптары, яғни дерекқорыңыз қаншалықты үлкен болуы керек. Бұл гигабайт, терабайт, мүмкін петабайттағы өлшемдер. Бастапқыда болатын немесе уақыт өте келе болуы мүмкін деректер қорының өлшеміне байланысты қай дерекқордан бастайтыныңызды ең басында шешесіз. Келесі, үшінші - қандай деректерді сақтайсыз, яғни объектілердің қандай өлшемі және осы объектілердің қандай түрі. Бұл қандай да бір сандық мәндер, жолдар, белгілер және т.б., яғни қарапайым деректер құрылымдары болуы мүмкін. Сонымен қатар, бұл кейбір күрделі деректер құрылымдары болуы мүмкін, яғни объектілер, бір пішіндегі сурет объектілері, оларды деректер базасында сақтау қажет болуы мүмкін. Мүмкін медиа файлдарды дерекқорда сақтайсыз. Бұл жайттардың барлығын алдын ала ескеру қажет. Соңғы бағыт - durability, деректер қорының сенімділігі. Бұл - data durability, data availability және recoverability. Әрқайсысын толығырақ қарастырайық. Data durability - бұл деректеріңіздің жоғалу мүмкіндігі. Data availability - деректер сақталып тұр, бар, бірақ белгілі бір уақытта желідегі ақауларға немесе басқа мәселелерге байланысты оған қол жеткізе алмайсыз. Белгілі бір сәттің қаншалықты маңызды екеніне байланысты дерекқордың және деректеріңіздің durability және availability деңгейін анықтайсыз. Әрі қарай, recoverability ұғымы бар - бұл дерекқорыңызды қаншалықты жылдам іске қосуыңыз керек және бизнесіңіз қандай шығындарды қабылдай алады. Сізде ай сайынғы сақтық көшірмелер бар деп елестетіп көрейік және ай сайын бірінші күні дерекқордың сақтық көшірмесін жасайсыз. Ол сізде сақталынады, бар. Айдың ортасында бір мәселе туындаса, сіз әрқашан айдың басына оралуға болатынын білесіз. Егер айдың басынан бері қолжетімді деректер жоғалса, олар сіз үшін маңызды болмаса, бұл сізге қажет recoverability деңгейі. Күнделікті деректер қажет десеңіз, бүгін дерекқорда мәселе туындаса, біз сол күннің басына дейін барлық деректерді қалпына келтіре алуымыз керек. Егер біз бүгін жасалған деректерді жоғалтсақ, бұл сондай маңызды емес. Бұл жағдайда, әрине, сізде үлкен қаржылық шығындар болады, өйткені шешімнің өзі күрделене түседі, бірақ сіз талап ететін recoverability деңгейін қамтамасыз етеді. Егер бұл деректеріңіздің бір жолын да жоғалта алмайтын деңгей болса, онда бұл жағдайда ол одан да қымбат болады. Архитектураның өзі күрделене түседі. Деректердің бірнеше аймақтарда көшірілуі үшін басқа AWS аймақтарын қосасыз. Бұл жағдайда сіз міндетті түрде деректеріңізді жоғалтпайсыз, бірақ осы күрделі IT архитектурасын сақтау үшін белгілі бір қаржылық шығындарды көтеруіңіз керек екенін түсінесіз. Durability-ге қатысты тағы бір мәселе - кейбір нормативтік талаптар. Мысалы, сіз қаржы саласында жұмыс істейсіз және деректерді 5 жыл бойы сақтауыңыз керек. Сондықтан, бұл деректер сіз үшін арзан болуы үшін, бірақ қажет болған жағдайда бұл деректерді алуға болатын белгілі бір жерде сақталуы керек. Немесе 3 күндік деректерді жоғалта алмайтындай талаптар қойылады. Бұл жағдайда шешіміңізді деректердің сақтық көшірмесі 2-3 күн сайын жасалатындай құруыңыз керек және кез келген уақытта алдыңғы нұсқаға оралып, реттеуші органның талаптарын бұзбайтын боласыз. Дерекқор түрлері туралы айтатын болсақ, екі үлкен топ бар. Бірінші топ – Relational database, мысалы Microsoft SQL Server, Oracle Database, MySQL. Ал екінші топ - Non-relational, мысалы MongoDB, Cassandra, Redis және т.б. Енді олардың бір-бірінен қалай ерекшеленетінін толығырақ қарастырайық. Реляционды деректер базасы деп айтқанда, бұл бастапқыда пайда болған деректер қорының түрі. Бұл - дерекқордың ең танымал түрі және оны пайдалану өте оңай. SQL-мен жұмыс істеуге болады, яғни Structured Query Language, сұраныстың ең танымал тілі. Әрі қарай, бұл деректердің тұтастығын қажет ететін жағдай, ол кестелердің қатаң құрылымымен қамтамасыз етіледі. Яғни, бастапқыда data modeling орын алады, қандай кестелер бар екенін, әр кестенің қандай өрістері бар, бұл кестелер бір-бірімен қалай байланысты екенін анықтайсыз, ал кейін өзгертулер енгізу өте қиын. Бірақ егер бәрін басында дұрыс анықтасаңыз, онда бұл деректермен жұмыс істеу өте қарапайым және ыңғайлы. Деректерді сақтауды осы оңтайландыру және құрылымдау арқасында сіз оны бір үлкен кенепте сақтағанға қарағанда әлдеқайда аз деректерді сақтайсыз. Қатаң құрылым қажет болғанда, Relational database өте қолайлы, сирек өзгереді, деректер тұтастығын қажет етеді, оқу және жазудың экстремалды операциялары қажет емес, керемет өнімділік қажет емес. Бұл түрге қарағанда бізде екінші топ бар, бұл Non-relational database type. Бұл - белгілі бір тапсырма үшін деректер базасы құрастырылған кездегі жағдай. Сондықтан Non-relational database көптеген түрлері бар. Оларды NoSQL дерекқорлары деп те атайды. Олар икемділікпен, жоғары ауқымдылықпен, жоғары өнімділікпен және осы дерекқормен өзара әрекеттесу үшін әртүрлі мүмкіндіктермен сипатталады. NoSQL дерекқорлары жағдайында SQL-ге барлық жерде қолдау көрсетілмейді. Дерекқорды көлденең масштабтау қажет болса, бұл өте қолайлы, яғни деректердің үлкен көлемімен жұмыс істеу керек. Дәстүрлі дерекқорлар қандай да бір себептермен сізге мүлдем сәйкес келмесе, қолайлы. Тағы бір мәселе, егер сізде қолданбаға арналған өте жоғары жүктемелі сұраулар болса, онда Non-relational database реляциялық дерекқормен салыстырғанда үнемді болуы мүмкін. Бұл слайдта сіз қол жетімді ең танымал дерекқор сервистерінің мысалдарын көресіз. Іс жүзінде олардың саны көп, бірақ олар жиі қолданылмайды. Сервистер екі топқа бөлінеді. Сол жағында реляционды деректер қорының мысалдары берілген. Ең танымалы - Amazon RDS. Одан кейін Amazon Redshift және Amazon Aurora. Естеріңізге сала кетейін, Amazon Aurora – бұл AWS-тен жасалған in-house әзірлеме. Және ол MySQL немесе PostgreSQL қозғалтқышында құрылған өзінің реляционды дерекқорын ұсынады. Және жергілікті AWS интеграциясын қоспағанда, жаһандық деңгейде ол Amazon RDS-тен айырмашылығы жоқ. Сәйкесінше, бұл vendor-lock. Бірақ сол бағаға Amazon RDS-тегі кез келген басқа дерекқорға қарағанда тиімдірек және өнімділікке ие боламыз. Сондықтан, сіз үшін қай нұсқа жақсырақ, өзіңіз шешесіз. Келесі слайдтарда Amazon RDS сервисі туралы толығырақ айтатын боламыз. Егер реляционды емес деректер базасы туралы айтатын болсақ, онда көптеген әртүрлі типтері бар. Олардың ішіндегі ең танымалдары - Amazon DynamoDB, одан кейін Amazon ElastiCache және Amazon Neptune. Осы үшеуінің ішінде ең танымал және жиі қолданылатын key-value Database - Amazon DynamoDB. Және бұл дәрістерде реляционды емес деректер базасы тобынан Amazon DynamoDB сервисін егжей-тегжейлі қарастырамыз. Осымен бүгінгі дәрісіміздің екінші бөлімін аяқтадық. Біз дерекқор түрін таңдау кезінде білу және ескеру маңызды жағдайларды талдадық. Әрі қарай, реляционды дерекқорлардың не екенін және олардың реляционды емес дерекқорлардан қалай ерекшеленетінін салыстырдық. Және бір слайд қолданыстағы AWS сервистеріне арналды. Олардың ішіндегі ең танымалдарын толығырақ қарастырамыз. Енді дәрісіміздің үшінші бөлімін бастаймыз және Amazon RDS сервисі туралы толығырақ айтатын боламыз. Amazon RDS – реляционды емес дерекқорлармен қамтамасыз ететін толығымен managed шешім. Бұл сервисті талдауға көшпес бұрын, Managed Database Service дегеніміз не екенін қарастырайық. Бұл слайдта үш түрлі дерекқордың салыстыруын көресіз. Бірінші жағдайда - бұл жергілікті дата-центрде орналасқан дерекқор. Бұл жағдайда барлығын сіз жасайсыз, яғни іске қосылуды ұйымдастыру, желіге қосылу, қолданбаға тікелей қатысты сәттердің барлығы сіздің жауапкершілігіңіз. Басқа жағдайда, сіздің дерекқорыңызды Amazon EC2 ішінде орналастырған кезде, яғни серверді орнатып, онда дерекқор қолданбасын бөлек орнатып, онымен жұмыс жасайсыз. Бұл жағдайда физикалық қатысумен байланысты бөлік, яғни осы сервердің жанында физикалық қатысумен болатын жұмыс AWS-ке ауыстырылады, тіпті операциялық жүйені орнату да AWS жағында болады. Барлығы іс жүзінде сіз үшін дайын, сізге қолайлы операциялық жүйені таңдау керек және ол орнатылады және жұмыс істеуге дайын болады. Бұл жағдайда сіз өзіңіз орындайтын дерекқорларға қатысты тапсырмаларды көк түспен көресіз. Оң жақтағы үшінші жағдай - бізде managed AWS database service болған кезде, дерекқорыңыздың функционалдығын басқаруға және қолдауға қатысты барлық дерлік жұмыс AWS-ке өтеді. Сіз тек дұрыс деректер үлгісін жасауға, кестелерді құруға, қолданбаңыз үшін дұрыс сұрауларды жасауға, яғни қолданбаңызға тікелей қатысты барлық нәрсені жасауға және дерекқорды оңтайландыруға жауаптысыз. Жұмыстың үлкен көлемі AWS-ке аударылғанын көресіз, AWS жағында ол мүмкіндігінше автоматтандырылған, яғни адам факторына байланысты кейбір бұзылулар орын алатын сәт жоқ. Көп жағдайда бұл аппараттық құралдың өзі істен шыққандықтан болады және бұл қалыпты жағдай, бұған дайын болу керек. Ал қалғанының бәрі автоматтандырылған және сағат секілді жұмыс істейді. Сізге бар болғаны нақты бизнес тапсырмаңызға мүмкіндігінше көп көңіл бөлу керек. Егер сізде шағын команда немесе қымбат мамандар тобы болса, немесе команданың инфрақұрылымды қолдау үшін тиісті жұмыстарды орындауға уақыты болмаса, Managed Database тамаша шешім болуы мүмкін. Amazon RDS үшін қолайлы жағдайларды қарастырайық. Деректеріңізге транзакциялық жолмен қол жеткізсеңіз немесе қарапайым аналитика болса, Amazon RDS пайдалана аласыз. Деректер қорының көлемі туралы айтатын болсақ, реляционды деректер қорында жұмыс істеу үшін терабайтқа дейінгі кез келген өлшем қолайлы. Қолдау көрсетілетін дерекқордың максималды өлшемдері туралы айтатын болсақ, Amazon Aurora үшін бұл 64 терабайт, MySQL, MariaDB, Oracle және Postgres үшін бұл екі есе аз - бұл 32 терабайт, ал ең кішісі - Microsoft SQL Server, ол максимум 16 терабайтты қолдайды. Amazon RDS пайдаланудың қосымша артықшылығы - сақтау көлемін дерекқор инстансын тоқтатудың қажетінсіз динамикалық түрде арттыруға болады. Егер өнімділік туралы айтатын болсақ, онда екі нұсқа бар. Бірінші опция - General SSD, ол 1 гигабайт жад үшін 3 IOPS береді, яғни 3 Input Output Operations Per Second. Тиісінше, егер сізде 100 гигабайт дерекқор болса, 3-ке көбейтесіз, сонда 300 болады, бұл жағдайда сіздің дерекқорыңыз 300 IOPS операциясын қолдайды. Қажет болса, ол 3000 IOPS дейін көтерілуі мүмкін, бірақ бұл қысқа мерзімді. Яғни, егер осындай жүктемелер болса, Amazon RDS бұл жағдайда да қолайлы болуы мүмкін. Егер жүктеме одан да көп болса, сақтаудың басқа түрі бар, бұл Provisioned IOPS SSD storage. Бұл жағдайда ол одан да көп енгізу және шығару операцияларын қолдайды. Егер Amazon RDS сервисінде қолдау көрсетілетін қозғалтқыштар туралы айтатын болсақ, онда бұл Microsoft SQL Server, Oracle, MySQL, Postgres, Aurora және MariaDB. Деректер қоры типтері және типтердің топтары туралы айтатын болсақ, онда 3 түрі бар. Біріншісі - Т family. Бұл көптеген жұмыс жүктемелері үшін қолайлы, ол Burstable instances деп те аталады. Яғни, қандай да бір сәтте үлкен жүктеме болса, онда дерекқор инстансының бұл түрі қосымша ақыға біраз уақыт оның сипаттамаларынан қосымша жұмыс істей алады. Егер екінші топ туралы айтатын болсақ - бұл M family, бұл жүктемелеріңіз CPU-intensive қажет ететін жағдай, яғни олар үлкен есептеу қуатын қажет етеді, ал жүктеме процессорда болады. Бұл жағдайда дерекқор түрлерінің осы тобын таңдай аласыз. Егер үшінші топ туралы айтатын болсақ, бұл - R family, ол барлығы шартты түрде тең болған жағдайда, онда операциялық жадтың үлкен көлемі болады. Бұл үлкен күрделі сұраулар немесе деректер қорына қосылымдар саны көп болған кезде және сәйкесінше операциялық жадта жүктеме болғанда. Бұл жағдайда осы топтағы инстанс түрлерін қарастырасыз. Ең танымал пайдалану жағдайларының бірін қарастырайық, қолданба бар, пайдаланушылар кейбір деректерді жасайды, бұл деректер сізге жетеді, мысалы, S3 үшін және сол жерде оның өңделмеген түрінде сақталады, содан кейін бұл деректер өңделеді, белгілі бір пішінге келтіріледі және содан кейін деректер өңделгеннен кейін сіз оны кез келген жерде сақтайсыз, мысалы, ұзақ мерзімді сақтау үшін S3 жүйесінде, сондай-ақ сол деректерді деректер қоймасына тасымалдайсыз, мысалы, бұл деректер қарапайым аналитика және осы деректерге негізделген кейбір маңызды бизнес қорытындыларын табу үшін пайдаланылатын Amazon RDS сервисі болуы мүмкін. Енді Multi-AZ Deployment функционалдығын толығырақ қарастырайық. Бұл дерекқорларымызға жоғары қолжетімділікті қамтамасыз етуге мүмкіндік береді. Идея мынада: аймақ бар, аймақта бірнеше availability zone бар және Multi-AZ Deployment функциясы қосулы болғанда біз қажетті availability zone таңдаймыз және Amazon RDS екі дерекқор инстансын орналастырады, біреуі негізгі, екіншісі standby ретінде және қажет болса, негізгі дерекқорды осы екі инстанстың арасында ауыстырады. Бұл белгілі бір мәселелер туындаған жағдайда негізгі дерекқор инстансын автоматты түрде ауыстыру мүмкіндігін және үлкен қолжетімділікті қамтамасыз етеді. Қандай мәселелер туындауы мүмкін, мысалы егер тұтастай алғанда availability zone-да қандай да бір ақаулар болса, автоматты түрде ауысу орын алады. Әрі қарай, егер желіде ақаулар болса, егер процессор немесе осы нақты сервердегі кез келген басқа аппараттық құрал кенеттен істен шықса, автоматты түрде failover орын алады. Соңғысы, егер деректеріңізді сақтауға қатысты аппараттық құралмен мәселе туындаған жағдайда. Бұл жағдайда automated failover іске қосылады және екінші standby дерекқор инстансы негізгіге айналады, ал негізгі болған инстанс екінші standby күйіне өтеді. Қолданба үшін мұның бәрі ашық болады, өйткені дерекқорға endpoint сілтемесі өзгермейді және ауысудан кейін қолданба бұрын жұмыс істеген режимде жұмысын жалғастыра алады. Яғни, автоматты failover сізден қолма-қол жұмысты қажет етпейді. Басқа функционал дерекқорыңыздың жұмысын жақсарту үшін пайдаланылатын read replicas деп аталады. Яғни, тек оқуға арналған дерекқордың арнайы түрі жасалады. Ол арқылы сіз дерекқорды өзгерте алмайсыз және ештеңе жаза алмайсыз. Сіз read replica жасағанда, негізгі дерекқорды ауыр немесе жиі оқылатын әрекеттерден босатуға болады. Осылайша, жүктеме read replica-ға өтеді. Айта кету керек, олардың арасындағы синхрондау асинхрондалған. Яғни, деректер бірден пайда болмайды, сәл кідіріспен. Бұл функционалдылыққа төрт қозғалтқыш қолдау көрсетеді: mysql, MariaDB, Postgres және Oracle. Бар негізгі шектеулер - негізгі дерекқор инстансында ең көбі 5 read replica жасай аласыз. Егер сізге жазылғаннан кейін деректерді бірден оқуға болатын қатаң read-after-write consistency қажет болса, онда негізгі дерекқорлардан оқу керек. Барлық басқа жағдайларда, деректердің аз уақыт ішінде, әдетте бір секундтан аз уақытқа синхрондалмағаны қолайлы болған кезде, read replica пайдалану ұсынылады. Жалпы пайдалану жағдайларының бірі - қолданбаның пайдалануы үшін негізгі дерекқорға жүктемелерді азайту үшін read replicas жасау және қосымша read replica жасалады, онда басшылыққа есептерді шығаруға арналған кейбір күрделі сұраулар өңделеді. Сәйкесінше басшылық осы есептерді талдап, кейбір іскерлік шешімдерді қабылдайды. Бұл есептер қолданбадағы пайдаланушылардың негізгі жүктемесін бұзбай жасалады. Сақтық көшірмелерге қатысты бірнеше сөз қосқым келеді. Яғни, manual backup деген опция бар, automatic backups көшірмелер бар, онда кестені орнатасыз және деректер қорыңыздың сақтық көшірмелері кестеге сәйкес жасалады. Олар S3 bucket-те сақталады, бұл S3 bucket бір аймақта орналасуы мүмкін, қажет болса, disaster recovery үшін басқа аймақтағы S3 bucket-те снапшоттар жасауға болады. Сондай-ақ, бизнес тапсырмаңызға қажет болса, снапшотты басқа AWS аккаунтына жіберуге болады. Біз ең танымал реляционды дерекқор сервисі Amazon RDS туралы толығырақ талқыладық. Енді қалған екі реляционды дерекқор сервистеріне тоқталайық, Amazon Aurora және Amazon Redshift. Amazon Aurora да fully managed реляционды дерекқор сервисі болып табылады. Оны AWS үшін AWS командасы жазған, яғни бұл MySQL және PostgreSQL қозғалтқыштарына негізделген жергілікті AWS шешімі. Осылайша, MySQL немесе Postgres дерекқорын Amazon Aurora сервисіне оңай тасымалдай аласыз. Бұл сервис транзакциялық жұмыс жүктемелері үшін де қолайлы, өйткені бұл дерекқорды AWS командасы жазғандықтан, ол сәйкесінше оңтайландырылған және бірдей бағаға, барлық басқа шарттары тең болса, стандартты MySQL-мен салыстырғанда бес есе өнімді және стандартты PostgreSQL-пен салыстырғанда үш есе өнімді дерекқорды аласыз. Егер сізді осы сынақтардың егжей-тегжейлері қызықтырса, оларды қарапайым сұраныс жазу арқылы іздеу жүйесі арқылы оңай табуға болады. Сондай-ақ, Aurora айтарлықтай жоғары durability қамтамасыз етеді, яғни деректеріңізді үш түрлі availability аймағында алты түрлі жерде сақтау арқылы сақтау сенімділігін қамтамасыз етеді. Бұл өте сенімді шешім және сіздің деректеріңізді жоғалту ықтималдығы аз. Егер өнімділікті арттыру мүмкіндіктері туралы айтатын болсақ, төрт Amazon RDS қозғалтқышы бес read replica-ға дейін қолдау көрсетеді. Егер Aurora туралы айтатын болсақ, бұл үш есе көп. Бір негізгі Aurora инстансы үшін 15 read replica жасауға болады. Осылайша, ол кез келген басқа Amazon RDS қозғалтқышына қарағанда ауқымды бола алады. Бірақ Amazon Aurora пайдаланған кезде AWS-ке байланғаныңызды, яғни сізде белгілі бір vendor lock бар екенін ескеру өте маңызды. Егер сіздің компанияңыз бастапқыда AWS-ке көшуді шешсе, жеңілдіктер беретін қосымша келісім-шарттар бар немесе AWS-те маманданған командаңызбен шектелсеңіз және бұлттық провайдерді өзгерту сіздің командаңыздың өнімділігіне айтарлықтай әсер етеді және тұтастай алғанда күмән тудыратын болса, онда, иә, сіз AWS-ке байланғансыз. Бұл жағдайда еш күмәнсіз, сервисті пайдаланып, барлық артықшылықтарды қолдана бересіз. Мұнда Amazon Aurora serverless нұсқада да бар екенін атап өткім келеді. Serverless Aurora - бұл сізде дерекқор инстансы орнатылған және онымен жұмыс істесеңіз, жүктеме болмаған кезде, ол өшеді және бұл уақыт үшін төлем жасамайсыз. Осылайша, тұрақсыз жұмыс жүктемелері үшін Amazon Aurora компаниясының serverless шешімі Lambda-мен бірге тамаша шешім болуы мүмкін. Қолданбаңызды, сервисіңізді дамытқаннан кейін және тұрақты жүктемелерге жеткеннен кейін, ең алдымен, Serverless Aurora-дан стандартты deployment-ке ауысуыңыз керек, бұл тиімдірек шешім болады. Келесі сервис - Amazon Redshift болып табылады. Бұл Data Warehouse, DWH ұсынатын сервис. Бұл барлық деректеріңізді сақтауға және сол жерде кейбір аналитикалық есептеулерді жүргізуге болатын орын, яғни OLAP жүктемелері. Ол жүктемелердің осы түрі үшін арнайы жасалған. Бұл - сонымен қатар өлшемі петабайтқа дейін кеңейе алатын сервис. Тағы бір ерекшелігі, ол Amazon S3 сервисімен жүйелі түрде біріктірілген және Redshift ішінде S3 жүйесіндегі деректер бойынша сұраулар жасай аласыз, бұл өте ыңғайлы. Осымен дәрісіміздің үшінші бөлімінің соңына жеттік. Біз Managed AWS Database Service не екенін және оның басқа орналастыру опцияларынан айырмашылығын қарастырдық. Amazon RDS сервисін, оның қандай мүмкіндіктері бар екенін және осы сервисті пайдалану үшін қандай жағдайлар бар екенін егжей-тегжейлі қарастырдық. Әрі қарай, ең танымал реляционды дерекқор сервистерін қарастырдық. Бұл Amazon Aurora және Amazon Redshift. Осымен бүгінгі дәрісіміз аяқталды. Бүгінгі қарастырылған AWS сервистерін жақсырақ түсіндіңіз деп үміттенемін. Назарларыңызға рақмет. Келесі белсенділіктерде кездескенше.