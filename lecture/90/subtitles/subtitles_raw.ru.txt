 Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной лекции. Это начало серии из двух лекций, тема базы данных. Итак, давайте начнем. Наша сегодняшняя лекция состоит из трех частей. В первой части мы поговорим про архитектуру VWS, которую мы развиваем в рамках лабораторных работ. Какая часть добавится на этой неделе. Далее, во второй части мы рассмотрим все вопросы, связанные с выбором типа базы данных. Какие виды бывают, чем они друг от друга отличаются, какие есть преимущества и недостатки. Далее, в последней части этой лекции мы поговорим про сервис RDS. Это Relational Database Service. Также напоминаю, у нас есть дополнительные активности на этой неделе. Это демо. Будем создавать автоматические бэкапы и read-реплику для инстанса RDS. Также есть Guided Lab. Здесь мы будем создавать базу данных RDS. Будет введение, а также разбор лабораторной работы. Мы начинаем первую часть нашей сегодняшней лекции и поговорим про архитектуру в облаке, которую мы строим в рамках лабораторных работ. На этой неделе добавляется Amazon RDS Primary Instance. Это база данных. Если говорить про business case, use case, то мы на предыдущих неделях создали веб-сайт, добавили динамичности, добавили возможность оставлять заказы. И как мы с вами помним, у нас есть EC2 Instance. Внутри этого же EC2 Instance поднята база данных. И все данные в ней сохраняются. Если что-то произойдет с этими EC2 Instance, то мы потеряем все данные. Это начали постепенно понимать все роли в рамках нашего business case, начиная от Марты, это мама София, которая использует эти данные в целях бухгалтерии и отчетности. Также Фрэнк, он использует эти данные для поиска идей, какое количество десертов нужно испечь, чтобы их все раскупили. Либо экспериментировать с новыми видами продукции, которые бы всем понравились. Также есть некоторые моменты, связанные со Софией. Она понимает, что поддерживать базу данных нужно некоторое время. Периодически выходят обновления. Эти обновления нужно применять к базе данных. И это происходит на регулярной основе. Из этого администрирование базы данных – это отдельный скилл, отдельная роль или должность специалиста, который постоянно этим занимается. Кого-то обучать времени нет, самой заниматься тоже не получается. Поэтому на общем митинге, на встрече, было решено рассмотреть варианты, как можно разгрузить Софию от этих работ, но так, чтобы все продолжало работать, чтобы все стояло рабочее, сохранялось, чтобы данные не затерялись, сама база данных была высокодоступной, надежной и была возможность масштабируется при необходимости. Как решение было согласовано использовать сервис Amazon Ordes, который подходит ко всем требованиям наших персонажей. И в рамках наших лабораторных работ мы будем создавать инстенс базы данных Amazon Ordes. Мы с вами добрались до второй части нашей сегодняшней лекции. И здесь обсудим моменты, связанные с выбором баз данных. Рекомендуется особо рассмотреть четыре направления. И это максимально поможет не ошибиться с вашим выбором. Первое – это масштабируемость. Здесь подразумевается возможность и необходимость масштабирования вашей базы данных. Вы знаете, какой объем баз данных у вас в начале, как она будет расти и какое она будет через некоторое время потенциально. И таким образом вы можете ответить на вопрос, какой уровень масштабируемости нужен для вашей баз данных. Связанный вопрос – это какой объем данных будет протекать через вашу базу данных. Далее второй момент, который нужно учитывать – это требования к хранилищу. То есть насколько большой должна быть ваша база данных. База данных – это размеров в гигабайты, в терабайты, может быть в петабайты. В зависимости от того, какой объем баз данных у вас будет в начале либо через какое-то время может потенциально стать, вы в самом начале будете определяться, с какой базы данных вы начнете. Далее третье – это какие именно данные вы будете хранить. То есть какой размер объектов и какой тип этих объектов. То есть это могут быть какие-то числовые значения, строки, символы и так далее. То есть простые структуры данных. Это могут быть некоторые сложные структуры данных, то есть объекты, рисунок объекты в таком же виде возможно вам нужно хранить в базе данных. Может быть вы будете хранить ваши данные, то есть медиафайлы в базе данных. Эти все моменты также нужно заранее узнать и брать во внимание. Последнее направление – это durability, то есть надежность вашей базы данных. Здесь подразумевается data durability, data availability и recoverability. Давайте остановимся подробнее на каждом из них. Data durability – это то, могут ли ваши данные быть утеряны. Data availability – это может ли получится так, что данные хранятся, они есть, но в какой-то момент ввиду проблем с сетью либо любыми другими моментами вы не можете обратиться к ним. В зависимости от того, насколько кратичен тот или иной момент, вы будете определять уровень durability и availability для вашей базы данных и для ваших данных. Далее есть понятие recoverability – это как быстро вам необходимо вернуть в строй вашу базу данных и с какими потерями ваш бизнес может мириться. Представим, у вас есть бэкапы ежемесячные и каждый месяц 1 числа вы делаете бэкап базы данных. Она у вас хранится, есть. В случае, если что-то произойдет в середине месяца, вы знаете, что вы можете всегда откатиться на начало месяца. Если те данные, которые были с начала месяца, будут утеряны для вас не критично, это и есть тот уровень recoverability, который вам нужен. Если вы говорите, что вам нужны данные день в день, то есть что-то происходит сегодня с базой данных, нам нужно, чтобы мы смогли постановить все данные на начало этого дня. И не критично, если мы потеряем данные, созданные сегодня. В этом случае от вас потребуются, естественно, большие финансовые затраты, так как само решение, оно усложнится, но оно будет обеспечивать тот уровень recoverability, который вам требуется. Если же это такой уровень, когда вы не можете ни одну строчку ваших данных потерять, то в этом случае это будет еще дороже. Сама архитектура, она усложнится. Скорее всего, вы будете подключать другие WS-регионы, чтобы данные реплицировались в несколько регионов. В этом случае вы точно ваши данные не потеряете, но вы осознаете, что вам необходимо нести определенные финансовые расходы на поддержание вот этой сложной IT-архитектуры. Еще один момент, который связан с durability, это некоторые регуляторные требования. Например, вы работаете в финансовой сфере, и вам необходимо данные хранить в течение 5 лет. Поэтому эти данные нужно сохранить в определенное место, так чтобы это было недорого для вас, при этом при необходимости вы могли эти данные извлечь. Либо такие требования, что вы не можете потерять данные более чем за 3 дня. Тогда вы должны строить свое решение таким образом, чтобы 2-3 дня данные всегда... каждые 2-3 дня данные выкопировались, и вы в любой момент могли вернуться на предыдущую версию и не нарушить требования регуляторного органа. Когда мы говорим про типы базы данных, то выделяют две большие группы. Первая группа это relational database, примерами могут быть Microsoft SQL Server, Oracle Database, MySQL. А вторая группа это non-relational, примерами могут быть MongoDB, Cassandra, Redis и другие. Давайте теперь подробнее остановимся, чем они друг от друга отличаются. Когда мы говорим relational database, то это тот тип баз данных, который появился изначально. Он является самым популярным типом баз данных, его очень легко использовать. Есть возможность работать с SQL, то есть Structured Query Language, самый популярный язык запросов. Далее, это тот случай, когда вам нужна целостность данных, она гарантируется жесткой структурой таблиц. То есть data modeling происходит изначально, вы определяете какие таблицы есть, какие есть поля у каждой из таблиц, как эти таблицы между собой взаимосвязаны, и дальнейшее изменение, оно очень сложно происходит. Но если правильно определить все в начале, то очень просто, удобно работать с этими данными. За счет вот этой оптимизации и структуризации хранения ваших данных, вы будете хранить намного меньше данных, чем если бы хранили одним большим полотном. Релационные базы данных, они идеальны, когда вам нужна жесткая структура, они редко меняются, вам нужна целостность данных, вам нет необходимости в экстремальных операциях записи и чтения, также не нужна большая производительность. В противовес этому типу, у нас есть вторая группа, это non-relational database type. Это тот случай, когда база данных строится на конкретную задачу. Поэтому видов нерелационных баз данных очень много. Также их часто называют no-SQL databases. Они отличаются гибкостью, высокой масштабируемостью, высокой производительностью и различными возможностями взаимодействия с этой базой данных. Не везде SQL поддерживается в случае no-SQL баз данных. Она идеально подходит, если вам нужно, чтобы ваша база данных масштабировалась горизонтально, то есть это работа с большим объемом данных. Также подходит, если традиционные релационные базы данных вам по тем или иным причинам не совсем подходят. И другой момент, если у вас достаточно высоконагруженные запросы на ваше приложение, то нерелационные базы данных могут быть экономичнее по сравнению с релационными базами данных. На этом слайде вы видите примеры самых популярных существующих сервисов баз данных. На самом деле их больше, но они не так часто используются. Сервисы поделены на две группы. С левой стороны это примеры релационных баз данных. Самый популярный это Amazon RDS. Далее идет Amazon Redshift и Amazon Aurora. Я напомню, что Amazon Aurora это in-house разработка от самого AWS. И она предлагает свою релационную базу данных, построенные на движке MySQL либо PostgreSQL. И глобально ничем не отличается от Amazon RDS, кроме как нативная интеграция AWS. Соответственно, это vendor-log. Но по той же самой цене мы получаем большую эффективность и производительность по сравнению с любой другой базой данных в сервисе Amazon RDS. Поэтому какой вариант для вас лучше, вы решайте для себя. На следующих слайдах мы подробнее будем говорить именно про сервис Amazon RDS. Если мы говорим про нерелационные базы данных, тоже очень много различных видов. Самые популярные из них это Amazon DynamoDB, дальше ElastiCache и Amazon Neptune. Среди этой тройки самые популярные, часто используемые, это KeyPair Database, то есть Amazon DynamoDB. И на этих лекциях мы будем подробнее рассматривать именно Amazon DynamoDB из группы нерелационных баз данных. На этом мы подошли к концу второй части нашей сегодняшней лекции. Мы разобрали кейсы, которые важно знать и учитывать при выборе типа баз данных. Далее мы сделали поверхностное сравнение, что такое нерелационные базы данных и чем они отличаются от нерелационных баз данных. А также буквально один слайд был посвящен существующим сервисам AWS. Самые популярные среди них мы будем рассматривать более подробно. Мы с вами начинаем третью часть нашей сегодняшней лекции и подробнее поговорим про сервис Amazon RDS. Amazon RDS – это полностью менеджед решение, которое предоставляет вам нерелационные базы данных. Перед тем, как мы перейдем к разбору этого сервиса, давайте посмотрим, что же такое Managed Database Service. На этом слайде вы видите сравнение трех различных баз данных. В первом случае это база данных, которая размещается на локальном дата-центре. В этом случае абсолютно все производится вами, то есть начиная от организации питания, подключения к сети, заканчивая моментами, связанные непосредственно с приложением, это на ваших плечах. В другом случае это когда вы хостите вашу базу данных внутри Amazon EC2, то есть подняли сервер и там отдельно установили приложение баз данных и работаете с ней. В этом случае часть, которая связана с физическим присутствием, то есть работы, которые происходят при физическом присутствии возле этого сервера, она передается AWS, даже установка операционной системы это тоже в каком-то смысле на стороне AWS. Для вас фактически все готово, вам достаточно выбрать подходящую для вас операционную систему, когда она устанавливается и готова для работы. В этом случае вы видите выделены синим те работы, связанные с базами данных, которые выполняете самостоятельно. И третий случай с правой стороны, это когда у нас managed AWS database service, когда практически все работы, связанные с администрированием и поддержкой работоспособности вашей базы данных, она переходит на сторону AWS. Вы лишь управляете тем, что правильно создаете модель данных, создаете таблицы, создаете правильные запросы для вашего приложения, то есть занимаетесь всем тем, что непосредственно связано с вашим приложением и оптимизацией базы данных для вашего приложения. Вы видите, что большой объем работ, оно уходит от вас, переходит AWS, на стороне AWS это максимально автоматизировано, то есть нет момента, когда происходит некоторая поломка ввиду человеческого фактора. В большинстве случаев это происходит из-за того, что само железо выходит из строя, и это нормально, к этому нужно быть готовым. А все остальное, оно автоматизировано и работает как часы для вас. Для вас лишь остается максимально сконцентрироваться на вашей конкретной бизнес-задаче. В случае, когда у вас небольшая команда, либо команда из дорогостоящих специалистов, либо в случае, когда команда просто не успевает заниматься попутными работами по поддержке вашей инфраструктуры, Managed Database может быть идеальным решением. Давайте рассмотрим кейсы, которые подходят для Amazon RDS. В случае, если вы обращаетесь к вашим данным транзакционно, либо есть небольшая простая аналитика, то можно использовать Amazon RDS. Если мы говорим с точки зрения размера баз данных, все, что до терабайта, это подходит для работы в реализационных баз данных. Если говорить про максимально поддерживаемые размеры баз данных, для Amazon Aurora это 64 терабайта, для MySQL, MariaDB, Oracle и Postgres в два раза меньше это 32 терабайта, и самый маленький это Microsoft SQL Server, который поддерживает максимум 16 терабайтов. Дополнительным преимуществом использования Amazon RDS является то, что размер хранилища, оно может быть увеличено динамически и нет необходимости для этого останавливать instance базы данных. Если мы говорим про производительность, то здесь есть два варианта. Первый вариант это General SSD, который на 1 гигабайт выделенного дает 3 IOPS, то есть 3 Input Output Operations Per Second. Соответственно, если у вас 100 гигабайтов базы данных, вы перемножаете 3 умноженное на 100, будет 300, и в этом случае ваша база данных будет поддерживать 300 IOPS операций. Такой объем данных. При необходимости оно может увеличиваться до 3000 IOPS, но оно лишь кратковременное. То есть если есть такие нагрузки, то Amazon RDS тоже так же может в этом случае подойти. В случае, если у вас нагрузки еще больше, то есть другой тип хранения, это provisioned IOPS SSD storage. В этом случае оно поддерживает еще больше операций ввода и вывода. Если мы говорим про поддерживаемые движки в рамках сервиса Amazon RDS, то это Microsoft SQL Server, Oracle, MySQL, Postgres, Aurora и MariaDB. Если мы говорим про существующие типы баз данных, а также семейство типов баз данных, то выделяют 3 вида. Первый это T-Family. В тот случай, когда оно подходит для большинства нагрузок, также называется burstable instances. То есть если у вас в какой-то момент приходит большая нагрузка, то именно этот тип инстанцев баз данных, они могут работать поверх своих характеристик некоторое время за дополнительную плату. Если мы говорим про второе семейство, это M-Family, это тот случай, когда ваши нагрузки CPU intensive, то есть требуют больших вычислительных мощностей, и идет нагрузка на 2-3<|th|><|translate|> то есть требует больших вычислительных мощностей, и идет нагрузка на процессор. В этом случае вы можете смотреть в сторону этого семейства типов баз данных. Если мы говорим про третье семейство, это R-Family, и оно при прочих равных условиях содержит в себе большее количество операционной памяти. Это тот случай, когда у вас есть большие сложные запросы, эти данные доходят до вас например для S3 и там хранятся в сыром виде, в datastore, то есть сервис Amazon RDS, где эти данные используются для простейшей аналитики и для поиска некоторых важных для бизнеса выводов на основе этих данных. Давайте теперь подробнее ознакомимся с функционалом Multi-Azial Deployment. Идея в том, что это то, что позволяет нам предоставить высокую доступность наших баз данных. Идея в том, что у нас есть регион, в регионе есть несколько availability zone и с включенным функционалом Multi-Azial Deployment мы выбираем необходимые availability zone и Amazon RDS деплоит два инстенса баз данных, один как основной, другой как standby и при необходимости переключает основную базу данных между этими двумя инстенсами. Это предоставляет большую доступность, также дает возможность автоматически переключать основную инстенс базы данных в случае определенных проблем. Какие проблемы могут возникнуть, это если в целом в availability zone будут какие-то проблемы, то происходит автоматический failover. Далее, если есть проблемы с сетью, другой момент, если вдруг выходит из строя процессор либо любое другое железо на этом конкретном сервере, то происходит автоматический failover. И последнее, если что-то опять же происходит с железом, но связанное с хранением ваших данных. В этом случае триггерится событие automated failover и второй instance баз данных, который standby, становится основным, а второй, который был основным, он переходит в состояние standby. Для приложения это все происходит прозрачно, так как ссылка endpoint к вашей базе данных она не меняется и приложение после того, как произойдет переключение, оно сможет продолжать работать в том же режиме, как и работал до этого. То есть, автоматический failover не требует от вас ручного вмешательства. Другой функционал называется read replicas, оно используется для повышения производительности ваших баз данных. Идея в том, что создается особый вид вашей базы данных, которая доступна только для операции чтения. Через него вы изменять базу и что-то записывать не можете. Когда вы создаете read replica, вы можете разгрузить основную базу данных от тяжелых либо частых операций чтения. Таким образом нагрузка переходит на read replicas. Следует обратить внимание, что синхронизация между ними она асинкронизирована. То есть, данные они появляются не сразу, а с небольшой задержкой. Поддерживается этот функционал четырьмя движками, это mysql, MariaDB, Postgres и Oracle. Основные лимиты, которые есть, это то, что вы можете создать максимум 5 read replic на ваш основной instance баз данных. Если вам нужна строгая read after write consistency, это когда возможно считать данные сразу после ее записи, то вам необходимо делать чтение из основной баз данных. Во всех других случаях, когда допустимо, что данные будут в асинхронии некоторое небольшое количество времени, обычно это менее одной секунды, то рекомендуется использовать read replica. Одним из частых use case является создание read replicas для разгрузки основной базы данных в целях использования для приложения и создается еще дополнительная read replica, на котором отрабатывают некоторые сложные запросы для генерации отчетности. Отчетности для руководства и соответственно руководство, получая эти отчеты, делает некоторые бизнес решения. И эти отчеты формируются не в ущерб основным нагрузкам от ваших пользователей на приложении. Пару слов хотелось бы добавить касательно бэкапов. Есть такая опция, есть manual backup, есть automatic backups, где вы настраиваете расписание и по расписанию создаются бэкапы ваших баз данных. Они хранятся в s3 bucket, этот s3 bucket может находиться в том же регионе, если есть необходимость вы можете создавать снапшоты в s3 bucket в другом регионе для disaster recovery. Также вы можете отправлять ваши снапшоты в другой AWS аккаунт, если того требует ваша бизнес задача. Мы с вами подробнее обсудили про самый популярный сервис релационных баз данных Amazon RDS. Теперь буквально по одному слайду остановимся на оставшихся двух сервисах релационных баз данных Amazon Aurora и Amazon Redshift. Amazon Aurora это также fully managed сервис релационных баз данных. Оно было написано командой AWS для AWS, то есть это нативное AWS решение, базируется на движках MySQL и PostgreSQL. Таким образом, существующую базу данных на MySQL либо Postgres вы можете с легкостью перенести на сервис Amazon Aurora. Этот сервис также хорошо подходит для транзакционных нагрузок, так как эта база данных она была написана командой AWS, то была соответственно оптимизирована и вы за ту же цену при прочих равных условиях получаете в пять раз более производительную базу данных по сравнению со стандартным MySQL и в три раза производительную базу данных по сравнению со стандартным PostgreSQL. Если вам интересны детали этих тестов, то вы можете с легкостью их найти через поисковик в BEEF простой запрос. Здесь также следует отметить, что Aurora предоставляет достаточно высокую durability, то есть надежность хранения ваших данных путем сохранения в шести различных местах в трех различных availability зонах. Это достаточно надежное решение и вы с меньшей долей вероятности потеряете ваши данные. Если говорить про возможности увеличения производительности, мы ранее упоминали, что четыре движка Amazon RDS поддерживают до пяти read-replic. Если говорить про Aurora, это в три раза больше. Вы можете создать для одного основного инстенса Aurora до 15 read-replic. Таким образом, она может больше масштабироваться по сравнению с любым другим движком Amazon RDS. Но очень важно отметить то, что при использовании Amazon Aurora вы привязываетесь к AWS, то есть у вас некий vendor lock. Если ваша компания изначально решила двигаться с AWS, есть дополнительные контракты, которые дают скидки, либо вы ограничены вашей командой, которая специализируется на AWS и смена облачного провайдера сильно скажется на производительности вашей команды, да и в целом поставит под вопрос существование вашей компании, то да, вы привязаны к AWS. В этом случае ничего страшного нет. Использовать этот сервис и получать все те преимущества, которые она предоставляет. Здесь также хотелось бы отметить, что Amazon Aurora также существует в сервер-лес-варианте. Сервер-лес-Aurora это когда у вас поднимается инстенс базы данных и вы с ней работаете в случае, когда на нее нагрузка не идет, она отключается и вы за это время не платите. Таким образом для непостоянных нагрузок сервер-лес-решение от Amazon Aurora может быть идеальным решением в связке с Lambda. Как только вы разведете ваше приложение, ваш сервис и вы будете получать постоянные нагрузки, то скорее всего вам от сервер-лес-аврора нужно будет переходить на стандартный деплеймент и таким образом это будет на тот момент более выгодным решением. Следующий сервис это Amazon Redshift. Это тот сервис, который предоставляет вам Data Warehouse, то есть DWH. Это то место, где вы можете хранить все ваши данные и там проводить некоторые аналитические расчеты, то есть all-up нагрузки. Оно специально было создано под такой тип нагрузок. Также это тот сервис, который может расширяться до петабайтов размеров. Другая особенность является то, что оно достаточно нативно интегрировано с сервисом Amazon S3 и внутри Redshift вы можете делать запросы на данные в S3, что очень удобно. На этом мы подошли к третьей части нашей сегодняшней лекции. Мы разобрали, что такое Managed AWS Database Service, чем он отличается от других вариантов деплеймента. Подробнее разобрали сервис Amazon RDS, какие у него есть особенности и какие есть use-кейсы использования именно этого сервиса. Далее буквально по одному слайду мы рассмотрели следующие по популярности сервисы реализационных баз данных. Это Amazon Aurora и Amazon Redshift. На этом мы завершаем нашу сегодняшнюю лекцию. Я надеюсь, вы получили более полное представление о разобранных нами сервисах AWS. Спасибо за внимание. Увидимся с вами на следующих наших активностях.
