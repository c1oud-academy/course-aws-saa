Қайырлы күн, құрметті студенттер! Сізді келесі дәрісте көргеніме қуаныштымын.
Бұл дәріс Compute ауқымды тақырыбының бірінші бөлімі.
Бұл - бұлтты есептеулерге қатысты сервистер.
Ең алдымен, бұл Amazon EC2, ол туралы бүгін айтатын боламыз.
Ендеше, бастайық.
Бүгінгі дәрісте 6 тақырыпқа тоқталамыз.
Бірінші бөлімде зертханалық жұмыс аясында қарастырылатын бизнес жағдайымызды еске түсіреміз.
Осы аптада не істейтінімізді көреміз.
Әрі қарай, Amazon EC2 сервисі туралы бірнеше жаңа мәліметтерді талдаймыз.
Одан кейін AMI туралы, оның не екенін, артықшылықтары мен кемшіліктері туралы толығырақ айтамыз.
Келесі, төртінші тақырыпта пайдалану жағдайлары мен бизнес тапсырмаларына байланысты EC2 инстансының дұрыс түрін қалай таңдауға болатынын толығырақ талқылаймыз.
Соңғы екі тақырыпта маңызды функционалдылық туралы сөйлесетін боламыз, бұл User Data және Amazon EC2 сервисімен жұмыс істейтін сақтаумен байланысты қандай IT ресурстары бар екенін қарастырамыз.
Ендеше, бірінші бөлімді бастайық.
Бұл зертханалық жұмысымызға тікелей қатысты, осы слайдта көріп отырған IT архитектурасын AWS бұлтында жасайтын боламыз. 
Әр апта сайын жаңа компонентті қосамыз.
Осы аптада Amazon EFS-пен байланысқан EC2 инстанстарын қосатын боламыз.
Мұның бәрі техникалық жағына қатысты.
Енді бизнес-кейстің өзі туралы толығырақ сөйлесейік, яғни бұл техникалық мәселені қандай жағдайлар үшін шешуге болады.
Біздің бизнес-кейсімізде Фрэнк пен Мартаға тиесілі наубайхана мен кафе бар екені есімізде.
Бұл істе оларға қызы София мен жұмысшысы Нихил көмектеседі.
Олар статикалық веб-сайтты іске қосқаннан кейін келушілер саны артты.
Бұл кафе иелерін қатты қуантты.
Олар дамудың одан арғы қадамдарын қарастыра бастады және нәтижесінде көптеген келушілер жолжөнекей өнімдерді сатып алу үшін ғана кафеге кіреді деген тұжырым жасады. 
Осыған байланысты тұтынушылардың өтініші бойынша веб-сайтқа онлайн тапсырыс беру мүмкіндігін қосу ыңғайлы болар еді.
Яғни, техникалық тұрғыдан алғанда, бұл - енді статикалық емес, тапсырыс беруге болатын динамикалық веб-сайт.
Сондай-ақ, осы бизнес-кейстің бөлігі ретінде осы веб-сайттың динамикалығын көрсету үшін жеке парақшада қандай тапсырыстар жасалғанын көре аламыз.
Жақсы, осымен бірінші бөлімді аяқтап, келесі бөлімге көшеміз.
Дәрісіміздің екінші бөліміне келдік.
Оны бастамас бұрын, есептеулерге қатысты негізгі сервистердің қандай түрлері бар екенін еске түсірейік.
Оларды бес түрлі топқа бөлуге болады.
Олардың айырмашылығы, біріншісінде инфрақұрылымға жоғары бақылау бар.
Оның бөліктерін кез келген жолмен реттей аламыз.
Осылайша, IT-инфрақұрылымын қолдау бойынша жұмыстың көп бөлігін AWS-ке тапсырған кезде serverless-ке ауысамыз.
Яғни, біз тек кішігірім бөлігін жасаймыз.
Енді әр топты талдап көрейік.
Біріншісі - Virtual Machines.
Виртуалды машинаға SSH арқылы қосылып, қажетті параметрлерді орнатып, кез келген қолданбаны орната аламыз.
Ал бұл жағдайда, егер сервистер туралы айтатын болсақ, бұл Amazon EC2, Elastic Compute Cloud, ең негізгі сервис.
Және сәл өзгеше, бірақ сонымен бірге виртуалды серверлерді қамтамасыз ететін Amazon Lightsail сервисі.
Келесі деңгейде бізде бақылау азырақ, бірақ әлі де бар, бұл - Containers.
Ең айқын өкілі - Amazon ECS, ол Docker-контейнерлерімен жұмыс істейді.
Үшінші топ - PaaS, Platform as a Service, AWS Elastic Beanstalk сервисін айтуға болады.
Идея мынада: қолданбаңыздың кодын жазып, инфрақұрылымыңыздың конфигурациясын сипаттайтын құжатты дайындап, оны осы сервиске жүктеп саласыз.
Содан кейін келесі жағдай орын алады: AWS Elastic Beanstalk сервисі осы инфрақұрылымды орнатумен байланысты барлық мәселелерді шешеді, барлық қажетті қосымша ресурстарды орнатады және сіз UI арқылы, яғни AWS Management Console арқылы инфрақұрылымды басқара аласыз.
Төртінші топ - Serverless, біз IT-инфрақұрылымын қолдауға қатысты барлық жұмысты AWS-ке өткіземіз және бізге тек код жазу керек болады.
Көрнекті өкілі AWS Lambda болып табылады, яғни код жазасыз, оны жүктейсіз және AWS техникалық қызмет көрсетуге қатысты барлық мәселені өз жағында шешеді.
Және нәтижесінде сіз Lambda функциясының орындалуының секундына гигабайт саны үшін ғана төлейсіз.
Lambda функциясы орындалмаған жағдайда, ештеңе төлемейсіз.
Бұл Serverless-тің артықшылығы.
Атап өткім келетін ақпарат, әдетте, егер сізде біркелкі тұрақты жүктемелер болса, Amazon EC2 немесе оған жақын сервистерге жүгіну ұсынылады.
Егер сіз, мысалы, шағын стартап болсаңыз немесе IT-инфрақұрылымыңыздың жүктемесі тұрақты болмаса, олар әртүрлі уақытта келеді, жүктеме мүлде келмейтін кезеңдер де болады, бұл жағдайда Serverless нұсқасын қарастыру ұсынылады, өйткені жүктеме болмаған кезде сіз ештеңе төлемейсіз.
Осылайша, Serverless шешімдер мұндай жұмыс жүктемелері үшін үнемді шешім болып табылады.
Serverless тағы бір өкілі - AWS Fargate.
Бұл - контейнерлерді басқаруға мүмкіндік беретін сервис.
Яғни, оны шешуге көмектесетін арнайы бөлек Serverless шешім.
Сондай-ақ, есептеуге қатысты басқа санаттағы екі сервисті атап өткім келеді.
Бұл - AWS Outposts.
Идея мынада: AWS Outposts сервисін жергілікті есептеу қуатыңызбен байланыстыра аласыз және оларды AWS қуаты сияқты басқара аласыз.
Екінші мысал - AWS Batch, бұл белгілі бір тапсырмаларды бач ретінде, яғни белгілі бір топтарда орындауға мүмкіндік беретін сервис.
Бұл дәрісте Amazon Elastic Compute Cloud (Amazon EC2) сервисі туралы егжей-тегжейлі айтатын боламыз.
Бұл не? Бұл - бізді виртуалды машиналармен, яғни серверлермен қамтамасыз ететін сервис.
Біздің API немесе AWS Management Console пайдалана отырып, бірнеше минут ішінде бұл серверлерді кез келген мөлшерде орнату мүмкіндігіміз бар.
Қажет болса, біз IT инфрақұрылымындағы жүктемеге байланысты масштабтауды үлкейту және кішірейтуді автоматты түрде реттей аламыз.
Оның үстіне, сервис бұлтқа негізделгендіктен, ол тек қажет есептеу қуаты үшін ғана төлеуге мүмкіндік береді.
Мысал келтірейін, егер кейбір есептеулер үшін қысқа мерзімді есептеу қуаты қажет десек және бұл есептеулер жұмыс істеген кезде, мысалы, 100 машина 3 күнді алады, біз іс жүзінде AWS-те бар кез келген конфигурациялы 100 серверін сұрап, оларды 3 күнге іске қосамыз.
Барлық есептеулерімізді аяқтағаннан кейін бұл серверлерді қайтара аламыз және айдың соңынан кейін, жұмыс істеп тұрған серверлер саны үшін дәл осы 3 күн үшін төлем үшін шот аламыз.
Осылайша тек пайдаланғанымыз үшін төлейміз.
Amazon EC2 неден тұратыны туралы бірнеше сөз айта кетейін.
Бізде AWS Regions бар екенін білеміз, әрбір AWS Regions-та бірнеше availability zone бар және availability zone аясында бірнеше дата-центр бар.
Дата-центрде бізде ондаған мың серверлер бар және әрбір сервер мүмкіндігінше қуатты.
Енді гипервизорды қолданудың арқасында бізде бір қуатты физикалық серверді жүздеген шағын виртуалды серверлерге бөлу мүмкіндігі бар.
Осылайша, Amazon EC2 сервисінде 700-ден астам әртүрлі опциялардың ішінен қалаған конфигурацияны таңдауға болады.
Виртуалды серверді алған кезде оның құрамында CPU процессор бар, яғни есептеу қуатының өзі, RAM, оперативті жады және деректерді сақтайтын орын - Instance Store немесе Amazon EBS.
Amazon EBS – бізге тұрақты сақтауды қамтамасыз ететін бөлек сервис.
Instance Store - уақытша сақтау орны.
Осы екі сақтау опциясының ерекшеліктері мен айырмашылықтары туралы сәл кейінірек айтатын боламыз.
Amazon EC2 сервисін пайдалану жағдайлары туралы бірнеше сөз айтайық.
Әдетте, бұл сервис есептеу ресурстарын толық бақылау қажет болған жағдайда таңдалады.
Виртуалды серверлермен жұмыс істегенде, кез келген қолданбаны орната аламыз, оны өзіміз қалағандай баптай аламыз және бұл жерде бізді ешкім шектемейді.
Кез келген операциялық жүйені орната аламыз, демек, кез келген дерлік IT-инфрақұрылымын, физикалық серверлерде жұмыс істейтін жергілікті дата-центрде орналастырылған кез келген қолданбаны AWS бұлтындағы Amazon EC2 сервисіне тасымалдауға болады.
Сондай-ақ, есептеу шығындарын оңтайландырғымыз келсе, Amazon EC2 сервисін пайдалана бастаймыз.
Reserved Instances сатып алуға, Spot Instances пайдалануға, сондай-ақ Amazon EC2 виртуалды серверлерін пайдалану үшін айтарлықтай жеңілдіктер беретін Savings Plans мүмкіндіктері бар.
EC2 виртуалды серверін орнату кезінде бірнеше шешім қабылдауымыз керек.
Ең негізгі қадамдарды қарастырайық.
Ең бірінші қадам - өзіміз дайындайтын AMI немесе AWS-те бар AMI пайдалану туралы шешім қабылдау.
Әрі қарай, қандай инстанс түрін қолданатынымызды анықтаймыз.
Бұл жағдайда қанша процессор, қанша жедел жады және сақтау орны қажет екенін білуіміз керек.
Содан кейін EC2 инстанстарының дата-центрде қалай орналасуын қалайтынымызды қосымша көрсете аламыз.
Бұл туралы келесі слайдтарда айтатын боламыз.
Қолданбамыз басқа сервистермен жұмыс істейтін болса, біздің инстансты пайдаланатын және басқа сервистерге қол жеткізетін рөлді теңшеуіміз керек.
Сондай-ақ, User Data-ны пайдаланамыз ба, жоқ па, соны түсіну керек.
Біз инстансымызды алдын ала конфигурациялау үшін кейбір командаларды AMI-ге қоса аламыз, бірақ кейбір себептерге байланысты кейбірін AMI-ге орналастыра алмаймыз, сондықтан инстанс орнатылған кезде кейбір командаларды орындайтын User Data теңшеуіміз керек.
Сақтау мәселелері де шешілуі керек.
Екі нұсқа бар, Instance store пайдалануға болады, бұл ескі опция немесе Amazon EBS, Persistent Block Storage, яғни тұрақты блокты сақтау орнын ұсынатын бөлек сервисті пайдалануға болады, бұл AWS ұсынған best practice.
Әрі қарай, қауіпсіздікке қатысты мәселелерді қарастыруымыз керек - бұл Security Group баптау, қандай трафикке рұқсат етілген, қандай трафикке тыйым салынған және ең соңғы Key pair, бұл - SSH арқылы қашықтан виртуалды серверлерге қосылуға мүмкіндік беретін кілт.
Осымен, бүгінгі дәрісіміздің екінші бөлімінің соңына жеттік, Amazon EC2 сервисі дегеніміз не, ол қандай мүмкіндіктер беретіні туралы жадымызды жаңарттық, сондай-ақ серверімізді сәтті баптау және іске қосу үшін орындалуы керек қадамдарға назар аудардық.
Бірінші және ең негізгісі - AMI таңдау, AMI дегеніміз не және ол бізге қандай мүмкіндіктер беретіні туралы бүгінгі дәрісіміздің үшінші бөлімінде қарастырамыз.
Енді AMI дегеніміз не екенін қарастырайық, ол Amazon Machine Image дегенді білдіреді, бұл - осы үлгі template негізінде EC2 виртуалды серверлерін жасауға мүмкіндік беретін үлгі түрі.
Суретте көріп отырғаныңыздай, тек AMI көмегімен бірдей EC2 инстанстарын орната аламыз.
AMI - root volume-ді, яғни операциялық жүйе орнатылған қатқыл дискінің түбірлік бөлімін, мүмкін кейбір бағдарламалық жасақтаманы, сипаттайды.
Төменде осы AMI пайдаланатын аккаунттар туралы ақпарат сипатталған.
Үшінші тармақ - сақтау мақсаттары үшін қатқыл дискінің қосымша бөлімдерінің сипаттамасы.
AMI бізге қандай артықшылықтар береді, бұл 3R - Repeatability, Reusability және Recoverability. 
Яғни бұл шаблонды бір рет жасап, бірнеше рет қолданамыз деген ой.
Сонымен қатар, адам факторы алынып тасталды және параметрлер конфигурациясының кейбір бөлігі осы үлгіде орналасқан және басқа конфигурацияны алу мүмкін емес.
Осылайша, бұл адам факторын жояды.
Тағы бір мәселе, біз AMI-ді ең қарапайым түрде пайдалана аламыз, бұл серверді, барлық қажетті бағдарламалық жасақтаманы орнату, барлығы дұрыс жұмыс істейтініне көз жеткізу және осы серверден AMI жасау.
Бұл қалпына келтіру үшін пайдалануға болатын реттелетін үлгі болады.
Егер бірдеңе болып, серверіңіз істен шықса, реттелетін AMI көмегімен оны тез жұмысқа қайтара аласыз.
Бұл, әрине, ең қарапайым пайдалану.
AMI пайдаланудың неғұрлым озық тәжірибелері бар, олар туралы кейінірек айтатын боламыз.
Енді дұрыс AMI таңдауға мүмкіндік беретін негізгі ойларды қарастырайық.
Бес түрлі тармақ бар.
Біріншісі және негізгісі – аймақ.
AMI белгілі бір AWS аймағында жасалатынын және сол жерде қолданылатынын білеміз.
Бұл AMI-ды басқа аймақта пайдаланғыңыз келсе, оны көшіру керек.
Мұны істеу өте оңай.
Бұл жағдайда көшірме осы AMI үшін бөлек бірегей ID алады және одан кейін дербес пайдаланылады.
Екінші тармақ - операциялық жүйені таңдау.
Біз ештеңемен шектелмейміз.
Кез келген операциялық жүйені орната аламыз.
Бұл жағдайда ең көп таралған опциялар Windows OS немесе Linux OS кейбір нұсқалары болып табылады.
Әрі қарай, IT сақтау ресурсы туралы шешім қабылдау керек.
Бұл EBS, тұрақты блоктық сақтауды қамтамасыз етуге көмектесетін бөлек сервис немесе ол Instance Store болуы мүмкін.
Instance Store - бұл виртуалды машинамыздың жанында физикалық орналасқан жад.
Бұл ұсынылмайды, өйткені бұл ескі қолдану жағдайы және best practice ретінде артықшылықтарына байланысты EBS пайдалану ұсынылады.
Бұл туралы келесі слайдтарда толығырақ тоқталамыз.
Төртінші тармақ - архитектураны таңдау.
Біз 32 немесе 64 битті таңдай аламыз.
Сонымен қатар, біз ARM архитектурасын таңдай аламыз.
Сондай-ақ, AWS Graviton-нан өзіндік әзірлеме пайда болды.
Оның белгілі бір артықшылықтар бар.
Толығырақ ресми AWS құжаттамасынан оқи аласыз.
Қай архитектура жақсырақ жұмыс істейтін, жұмыс жүктемелерінің әртүрлі түрлері үшін әртүрлі салыстырулар бар.
Соңғы тармақ - виртуализация түрі.
Екі нұсқа бар, PV Paravirtual және HVM Hardware Virtual Machine.
Көп жағдайда HVM пайдалану ұсынылады.
Енді AMI-ді қайдан алуға болатыны туралы айтайық.
Біріншісі - Quick Start.
Бұл - AWS ұсынған дайын AMI.
Екіншісі - My AMIs деп аталатын.
Бұл өзіміз үшін жасайтын барлық AMI, реттелетін AMI.
Келесі - AWS Marketplace бар.
Бұл - басқа компаниялар жасаған AMI-ді пайдалануға болатын арнайы орын.
Дегенмен, AWS ешқандай кепілдік бермейді.
Сондықтан, мұнда пайдалану сіздің тәуекеліңізге байланысты.
AWS Marketplace-те танымал вендорлардың тегін және ақылы AMI-ларын таба аласыз.
Мысалы, Red Hat және т.б.
Төртінші – Community AMIs.
Бұл - AWS пайдаланушылары жасаған AMI.
Бұл жерде тағы да AWS ешқандай жауапкершілік көтермейді және бұл AMI-ді өз тәуекеліңізбен пайдаланасыз.
Енді Root Volume үшін сақтаудың екі түрін салыстыруға келдік.
Бұл Instance Store және Amazon EBS.
Кесте бес түрлі сипаттамада берілген.
Әрқайсысына тоқталайық.
EBS-тен инстансты іске қосу Instance Store-дан іске қосудан әлдеқайда жылдамырақ.
Себебі, Instance Store деректердің кейбір бөліктерін Amazon S3 ішінде сақтайды.
Amazon S3-тен деректерді жүктеу біраз уақытты алады.
EBS үшін Root Volume-нің ең үлкен көлемі 16 ТБ, ал Instance Store үшін ол тек 10 ГБ.
Бірақ көптеген тапсырмалар үшін 10 ГБ та жеткілікті.
Егер инстансты тоқтату мүмкіндігі туралы айтатын болсақ, EBS-тегі инстанстар үшін жасай аламыз.
Және инстансты тоқтатқанда, бұл үшін ешқандай шығынға ұшырамаймыз.
Егер Instance Store туралы айтатын болсақ, мұндай инстансты тоқтату мүмкін емес, оны тек қайта жүктеуге немесе тоқтатуға, яғни оны өшіруге болады.
Тоқтатқан кезде, Instance Store-да сақталған барлық деректер жоғалады.
Егер инстанстың түрін өзгерту мүмкіндігі туралы айтатын болсақ, онда EBS жағдайында мұны істеу өте оңай.
Инстансты кез келген уақытта тоқтата аласыз, Instance type өзгерте аласыз және оны қайта қосқан кезде Instance type өзгертілген болады.
Егер Instance Store туралы айтатын болсақ, онда бұл виртуалды сервердің жанында физикалық түрде орналасқан қатқыл дискінің бөлімі болғандықтан мұны істеу мүмкін емес.
Сондықтан, Instance type өзгерткен кезде, жеке Instance store бар басқа физикалық серверге тасымалданасыз.
Осылайша, Instance type өзгертуге мүмкіндік жоқ.
Егер төлем мәселелері туралы айтатын болсақ, онда EBS жағдайында Amazon EBS сервисінің тарифтеріне сәйкес шығындарды төлейсіз.
Instance Store шығындары туралы айтатын болсақ, бұл - Amazon S3 сервисінде деректерді сақтауға байланысты шығындар.
Көбінесе Amazon S3 сервисінде деректерді сақтау EBS сервисінде сақтаудан арзанырақ.
Егер гигабайттар туралы айтатын болсақ, 100 гигабайтқа дейін, онда бұл шығындар минималды және айтарлықтай ерекшеленбейді.
Сондықтан бұл жайтты да ескерген жөн.
Егер сізде серверлер саны өте көп болса және Instance Store-ның артықшылықтары мен кемшіліктері жеткілікті болса, деректер Amazon S3 сервисінде сақталғандықтан және ол арзанырақ болғандықтан, оны пайдаланып, кейбір артықшылықтарға қол жеткізе аласыз.
Барлық басқа жағдайларда Root Volume үшін Amazon EBS-ті пайдалану best practice ретінде ұсынылады.
Енді Instance Lifecycle, яғни EC2 инстансының өмірлік циклі туралы сөйлесейік.
Барлығы Pending күйінен басталады.
Инстансты бірінші рет іске қосқан кезде AMI-ден сервер іске қосылады.
Ол қосылған кезде ол Pending күйінде болады.
Pending күйіне Stopped күйінен де жете аламыз.
Бұл тек тоқтатуға болатын Amazon EBS-backed Instances-тарға қатысты.
Сонымен, оны тоқтатып, қосқан кезде, ең алдымен, ол Stopped күйден Pending күйіне өтеді.
Әрі қарай, ол қосылып, жұмысқа дайын болғаннан кейін Pending күйінен Running күйіне ауысады.
Енді осы EC2 инстансына SSH арқылы қосылып, онымен жұмыс істей аласыз.
Қосылған инстансты қайта жүктеуге болады.
Ол Rebooting күйіне өтіп, Running күйіне оралады.
Reboot кезінде сол серверде физикалық ақаулар болмаса, оның жалпыға ортақ IP мекенжайы мен физикалық сервер өзгеріссіз қалады.
Amazon EBS-backed Instances үшін оны тоқтату мүмкіндігі бар.
Оны істегеннен кейін ол Running күйінен Stopping күйіне өтеді.
Толық тоқтағаннан кейін ол Stopped күйіне өтетін болады.
Сондай-ақ, Amazon EBS-backed Instances-тарды күту күйіне, яғни гибернацияға жібере аламыз.
Бұл жағдайда ағымдағы күй операциялық жадта сақталады.
Осылайша ол тезірек қосылады.
Бұл жағдайда ол, сондай-ақ, Stopped және Pending күйлері арқылы өтеді және соңында Running күйіне өтеді.
Тоқтаудың гибернациядан айырмашылығы гибернация күйінде физикалық серверді сақтаймыз.
Ол жұмыс істейді, оның жеке және жалпы IP мекенжайлары сақталады және осы құрылғымен жұмыс істей бересіз.
Бұл серверде физикалық ақаулар болмаған жағдайда.
Егер оны тоқтатсақ, виртуалды машинамызды орналастыратын физикалық сервер өзгеруі мүмкін.
Соңғы күй – аялдама.
Егер машина жұмыс істеп тұрса және оны тоқтатсақ, ол Shutting down күйіне өтеді, яғни өшеді және соңында Terminated күйіне өтеді.
AWS Management Console-де біраз уақыт оны Terminated деп көресіз және біраз уақыттан кейін ол толығымен жоғалады.
Terminated күйіне біз Stopped күйінен өте аламыз, яғни Amazon EBS-backed Instance тоқтатылған болса, оны Running күйіне тасымалдамай-ақ тоқтата аламыз.
Енді жаңа AMI құру туралы бірнеше сөз айтқым келеді.
Біз A аймағындамыз деп елестетіп көрейік.
Кейбір AMI бар, олар біз жасаған немесе кез келген басқа AWS қамтамасыз ететін AMI-лар болуы мүмкін.
Инстанс іске қосылғанда AMI-дің нақты көшірмесін аламыз, іске қосылған инстанста Unmodified instance болады.
Содан кейін осы инстансқа қосылып, кейбір әрекеттерді орындай аламыз.
AMI құрудың тағы бір тәсілі - EC2 Image Builder сервисі.
Бұл сервисті пайдалана отырып, анық UI интерфейсінде AMI құрылғыларын жасауды, басқаруды, техникалық қызмет көрсетуді, орналастыруды және нұсқаларды басқаруды оңай автоматтандыруға болады.
Бұл слайдта EC2 Image Builder сервисінің image pipeline көресіз.
Ол 5 негізгі қадамнан тұрады.
Ең бірінші істеу керек нәрсе - source image таңдау, яғни бұл сіздің AMI негізделген операциялық жүйе.
Amazon Linux 2, Windows операциялық жүйесін, Ubuntu және т.б. таңдауға болады.
Екінші қадам - компоненттер тізімін анықтау.
Қандай қолданбалар мен бағдарламалық жасақтама орнатылатынын көрсетесіз.
Мысалы, Python бағдарламалау тілін орнату.
Үшінші қадам - қауіпсіздікті тексеру үшін Hardening Tests деп аталатын сынақтарды орындау.
AWS қамтамасыз ететін арнайы сынақтар бар.
Сондай-ақ, мұнда өз сынақтарыңызды қосуға болады.
AMI қауіпсіздік тексеруінен өткеннен кейін төртінші қадамға көшеміз.
Төртінші қадам - жаңа AMI қаншалықты жиі жасалатынын жоспарлау.
Сұрақ туындауы мүмкін: неліктен мерзімді негізде AMI құрып отыру керек? Жауап өте қарапайым.
Операциялық жүйелер мен бағдарламалық жасақтама бір орында тұрмайтынын және дамып жатқанын білеміз.
Ал жаңартудың бір түрі - жаңа функционалдылықпен қатар қауіпсіздіктің жаңартылуы, яғни қауіпсіздік патчтары.
Осылайша, бұл кесте құрамдастардың дәл осындай құрамы бар AMI жасауға мүмкіндік береді, бірақ белгілі бір қолданбалар үшін жаңа жаңартулар қолданылады.
Соңғы қадам - AMI қай аймақтарды қамтитынын анықтау.
Инфрақұрылымды бірнеше аймақта орналастырсаңыз, бір негізгі немесе бірнеше аймақты таңдауға болады.
Осымен бүгінгі дәрісіміздің үшінші бөлімі аяқталды.
AMI-ге қатысты негізгі ойларды талқыладық.
Енді дәрісіміздің төртінші бөліміне жеттік және EC2 инстансының түрін таңдаудың нюанстары туралы айтатын боламыз.
Инстанс түрі дегеніміз не? Бұл - процессорды өңдеу CPU қуат сипаттамаларын қамтитын кейбір бірегей конфигурация.
Келесі, Memory - операциялық жады болып табылады.
Storage - сақтау, біздің қатқыл дискілер.
Ал Network Performance, яғни желімен жұмыс істеуге арналған аппараттық құралдардың қасиеттері.
Инстанс түрінің атауы бірнеше бөліктен тұрады.
Оны слайдтан көре аласыз.
Ең бірінші - инстанс түрлерінің топтары.
Ол туралы келесі слайдтарда айтатын боламыз.
Біздің жағдайда бұл m тобы.
Келесі, екіншісі - буын нөмірі болуы керек.
Біздің жағдайда m5, m тобының 5-ші буын инстансын білдіреді.
Жыл сайын Amazon бұл санды арттырып, одан да тартымды шарттарды ұсынады: әдетте бірдей бағаға олар алдыңғы буынға қарағанда қуаттырақ немесе жақсырақ машинаны ұсынады.
Мысалы, m6 буыны бағасы бойынша дәл солай болады, бірақ жақсы өнімділікке ие болуы мүмкін.
Үшінші бөлігі - кейбір қосымша мүмкіндіктер.
Бұл жағдайда сіз d әрпін көресіз, бұл қатқыл дискінің осы түрі HDD орнына SSD түрін қолданатынын білдіреді.
Осы негізгі бөліктерден кейін нүкте арқылы инстанстың өлшемі сипатталады.
Nano, micro және т.б. бастап белгілі бір градация бар.
Мысалы, xlarge бұл инстанстың өте үлкен екенін білдіреді.
Сіз, сондай-ақ, сипаттамаларын көре аласыз.
Оның 4 процессорлық ядросы бар.
16 ГБ жедел жады.
Бір қатқыл диск 150 ГБ.
Network performance – секундына 10 гигабитке дейін деректерді желі арқылы тасымалдай аламыз.
Көлемді ұлғайту осы слайдтың сол жағындағы бір немесе бірнеше сипаттамаларды сәйкесінше үлкейтеді.
Келесі екі слайдта инстанс түрлерінің ең танымал 5 тобын қарастырамыз.
Әрбір топ үшін пайдалану мысалдары және әріптік белгілеулер беріледі.
Әрқайсысына тоқталайық.
Ең танымал, көп жағдайда қолайлы - General Purpose.
Әріптік белгілеулер - M, T, A.
Келесі Compute optimized, бұл - барлық басқа шарттар тең болған жағдайда, CPU ядроларының саны көбірек болатын инстанстар.
Әріптік белгілеулер - C, мүмкін CN, мұнда N - желімен жұмыс істеу сипаттамалары одан әрі артады.
Әрі қарай, Memory optimized тобы бар, RAM жедел жад көлемі ұлғайған.
Әріптік белгілеулер - R, X және HMI болып табылады.
Осыдан кейін Storage Optimized тобы бар.
Олар қатқыл дискімен жұмыс істеу бойынша енгізу-шығару операцияларымен жұмыс істеуге бағытталған.
Әріптік белгілеулердің мысалдары I, D, H болуы мүмкін.
Сондай-ақ, танымал болып келе жатқан тағы бір топ - нейрондық желілердің модельдерін, оқу машиналарын, видеокарта ресурстарын талап ететін барлық жүктемелерді оқыту үшін қолданылатын Accelerated Computing.
Әріптік белгілеулері P, G және F болып табылады.
Барлық басқа сипаттамалар тең болғанда, Accelerated Computing инстанстары видеокарта үшін қосымша немесе ұлғайтылған жад көлеміне ие болады.
Қандай инстанс түрі сәйкес келетінін анықтау үшін екі негізгі тармақты ескеру қажет.
Біріншіден - қосымшаңызда қандай жүктемелер болатынын білу.
Екіншіден - бюджетіңізді білуіңіз керек.
Инстанс неғұрлым күшті болса, бұл көбірек ақшаны қажет ететіні анық.
Жаңа инстанстың түрін таңдау үшін EC2 сервисінің негізгі парақшасындағы Instance Types қойындысына өтіп, қандай түрлер бар екенін көруге болады.
Сізге қажетті топтарды қалдыруға немесе керісінше белгілі бір сипаттаманың мөлшерін анықтауға болатын ыңғайлы фильтр бар.
Мысалы, процессор ядроларының санын және қалған опциялар.
Баға мен сапа жағынан ең оңтайлы болғандықтан, соңғы буынды пайдалану ұсынылады.
Егер бұрыннан бар инстанспен жұмыс істеп жатсаңыз және инстанстың түрін жаңарту қажеттілігі бар екенін көрсеңіз, AWS Compute Optimizer сервисіне жүгіну ұсынылады.
Ол EC2 инстанстарының жүктеу тарихын пайдаланады және инстанстардың түріне, олардың өлшеміне, санына және тіпті Auto Scaling тобының конфигурациясына қатысты кейбір ұсыныстар береді.
Талдау нәтижелеріне сүйене отырып, ол инстанстарыңызға қатысты, олардың шамадан тыс не аз жүктелгенін, оңтайландырылғанын немесе None деп белгіленгенін анықтауы мүмкін, бұл жүктемелер туралы ақпарат жеткіліксіз екенін көрсетеді.
Осымен EC2 инстансы түрін таңдауға қатысты негізгі мәселелерді талқыладық.
Келесі бөлімге көшейік.
Дәрісіміздің бесінші бөліміне жеттік және User Data туралы сөйлесетін боламыз.
User Data дегеніміз не? Оны не үшін пайдалана аламыз? User Data – инстансты іске қосу кезінде өңделетін кейбір командалар жиынтығы.
Егер инстанс LifeCycle туралы айтатын болсақ, онда User Data-дағы барлық командалар Pending қадамында өңделеді.
User Data тек бірінші рет қосылу кезінде ғана қосылатынын ескеріңіз.
Сондықтан, инстансты тоқтатып, қайта бастағаннан кейін немесе қайта жүктегеннен кейін User Data өңделмейді.
Неліктен User Data пайдалану керек? Әдетте бар бағдарламалық жасақтаманы жаңартатын командалар тізімі бар.
Бұл бағдарламалық жасақтама AMI құрамына әлдеқашан енгізілген.
Бірақ ол соңғы нұсқасы болмауы мүмкін.
Сондықтан, іске қосу кезінде User Data пайдаланып, сіз соңғы өзгерістерді енгізіп, бағдарламалық жасақтама жаңартуын жүктейсіз.
Сондай-ақ, User Data-ға инстансқа тікелей қосылуды қажет ететін командалар кіреді.
Мысалы, кейбір командалар инстанстың метадеректерін пайдалануы мүмкін немесе қосымша теңшеу үшін жалпыға ортақ немесе ішкі API болуы мүмкін.
Бұл жағдайда оны AMI-ге қоса алмаймыз.
Және ол User Data-да болады.
Сондай-ақ, User Data-да веб-серверді іске қосатын командаларды іске қосады.
Бұл жағдайда User Data тек бір рет іске қосылатынын ескеріңіз.
Сондықтан, веб-серверді бірінші рет іске қосумен қатар, инстансты қосқан сайын және өшірген сайын веб-сервер немесе кез келген басқа бағдарламалық жасақтама іске қосылуы үшін кейбір өзгертулер енгізу қажет.
Салыстырмалы түрде айтатын болсақ, белгілі бір командаларды қайда жіберу керек, AMI немесе User Data ма, өйткені олар бір-бірімен ауыса алады, мен келесідей жауап берейін.
Әрқашан тепе-теңдік болуы керек.
AMI-ге қосуға болатын барлық командаларды сол жерге қосқан жөн, бұл - командалардың бірінші бөлігі.
Жаңарту командаларының екінші бөлігі және бұрын айтылған барлық нюанстар User Data-ға қосылуы керек.
User Data-дағы командалардың үлкен көлемі инстанстың іске қосылуын баяулатады.
Тепе-теңдік орнаған кезде, кейбір командалар AMI жағында болады, ал кейбір командалар User Data жағында болады, содан кейін бір жағынан сізде жаңартылған AMI болады, екінші жағынан инстанс әлдеқайда жылдамырақ іске қосылатын болады, себебі User Data соншалықты үлкен емес.
Нәтижесінде жаңартылған бағдарламалық жасақтамасы бар және жұмысқа толығымен дайын инстансты аласыз.
Енді инстансымыз туралы ақпарат, мысалы instance metadata деп аталатын ақпаратты қайдан және қалай алуға болатынына тоқталайық.
Әрбір инстанстың деңгейінде URL мекенжайы бар.
Бұл - 169.254.169.254/latest/meta-data/.
Бұл мекенжай осы инстансқа тікелей қатысты негізгі ақпаратты қамтиды.
URL мекенжайы тек белгілі бір инстанстың деңгейінде қолжетімді.
Сондай-ақ, егер metadata орнына User Data деп жазсаңыз, User Data-дағы командалар тізімін аласыз.
Оны қосымша баптау үшін де пайдалануға болады.
Мен AMI және User Data жағындағы командалардың балансы туралы айтқанымда, әрине, әмбебап жауап жоқ.
Сіз әрқашан нақты бизнес мәселесіне қарауыңыз керек.
Командаларыңызды AMI және UserData деректерінде орналастыруға болатын 4 түрлі нұсқаны қарастырайық, бұл қандай артықшылықтар береді және әрбір тәсілдің кемшіліктері қандай.
Ең жоғарғы жағында - Flexibility көрсеткіші бар екенін байқайсыз, яғни әрбір келесі опция солдан оңға қарай көбірек икемділік береді.
Төменгі жағындағы - Simplicity көрсеткішіне қарасаңыз, бұл керісінше және оңнан солға қарай EC2 инстанстарымен жұмысты жеңілдетеміз, бірақ сонымен бірге икемділікті жоғалтамыз.
Конфигурациялардың әрқайсысын толығырақ қарастырайық.
Ең біріншісі - Fully baked AMI, онда операциялық жүйеден бастап, оның қосымша параметрлерін, қолданбаға ортаны дайындау және орнату үшін, сәйкесінше, қолданбаның өзін іске қосу үшін барлық қажетті командалар AMI жағында болады.
Бұл жағдайда инстансыңыз мүмкіндігінше жылдам іске қосылады және User data толығымен бос болуы мүмкін.
Бұл AMI-ді асинхронды түрде дайындағаныңызға байланысты.
Ол алдын ала дайындалған, бәрі дайын.
Іске қосылу қажет болғанда, тек серверді қосасыз, қалғаны дайын болады.
Артықшылығы - өзіңіздің серверлеріңізді тез іске қосасыз және олар мүмкіндігінше аз уақытта жұмысқа дайын болады.
Кемшілігі - кез келген қолданба дұрыс жұмыс істеуі үшін басқа бағдарламалық жасақтаманы қажет етуі мүмкін, мүмкін біреуден көп болуы мүмкін.
Бұл бағдарламалық жасақтаманың әрқайсысы бір-бірінен тәуелсіз дамиды, қауіпсіздік патчтары шығарылады, функционалдылық жаңартылады және т.б.
Сондықтан, осы тәсілмен AMI-ді жиірек дайындау немесе жаңарту ұсынылады.
Келесі екі тармақ икемділікті арттырады, бірақ AMI жағында командалардың бөлек жинағы және User Data жағында жеке командалардың жинағы бар болғандықтан инстанспен жұмыс істеуді біршама қиындатады.
Бірінші жағдайда, қолданба іске қосылған кезде ғана орнатылады.
Бұл қажет болуы мүмкін, себебі AMI ішінде қолданбаңызды баптау үшін сол командаларды қосу мүмкін болмайды.
Бұл - белгілі бір инстансқа қатысты кейбір деректерді пайдаланған кездегі жағдай.
Қалғанының бәрі AMI ішінде.
Одан да икемді тәсіл - операциялық жүйені баптап, осы операциялық жүйенің дұрыс жұмыс істеуі үшін барлық қажетті бағдарламалық жасақтаманы AMI ішінде орнату және екінші бөлігін, атап айтқанда қолданбаңыз үшін ортаны дайындау және қолданбаңызды тікелей User Data-да орнатуды орындау.
Бұл жағдайда оны іске қосу үшін одан да көп уақыт қажет, бірақ сонымен бірге икемділікке ие боласыз және кез келген командаларды User Data жағында өзгертуге болады.
Сонымен қатар жаңа AMI шығарудың қажеті жоқ.
Соңғысы - JeOS, ол Just Enough OS дегенді білдіреді.
Қарапайым сөзбен айтқанда, бұл жай ғана операциялық жүйе.
Қалғанының бәрі, операциялық жүйені орнату, қауіпсіздік патчтары, бақылау мен журнал жүргізуді орнату және жоғарыдағының бәрі, қолданба үшін ортаны дайындау және қолданбаның өзі User Data жағында.
Бұл жағдайда сізге AWS ұсынған кез келген қолайлы AMI таңдап, User Data жағында барлық қажетті параметрлерді жасау керек.
AMI-ге қатысты ештеңе істеудің қажеті жоқ.
Дайын ақпаратты пайдалану жеткілікті, бірақ сонымен бірге сізге User Data-ны басқару керек және сізде максималды икемділік бар екенін түсіну керек.
User Data-ны AMI өзгертпестен жиі өзгертуге болады, бірақ инстансты іске қосу әлдеқайда көп уақытты қажет ететінін түсіну керексіз, себебі ол тек іске қосу кезінде ғана толығымен бапталады.
Осымен EC2 инстансында User Data-ға қатысты барлығын қарастырдық.
Ендеше бесінші бөлімді аяқтап, әрі қарай жүреміз.
Дәрісіміздің алтыншы бөліміне жеттік және Amazon EC2 сервисімен жұмыс істеу кезінде сақтауға қатысты барлық аспектілерді қарастырамыз.
Біз білетіндей, бізде екі бөлім бар, олар Root volume және Data volume.
Root volume-де операциялық жүйемізді және барлық қолданбаларды орнатамыз.
Ал деректерді Data volume-де сақтаймыз.
Root volume Instance store немесе Amazon EBS қолдау көрсетуі мүмкін.
Егер Data volume туралы айтатын болсақ, онда олар міндетті емес, олар болмауы да мүмкін.
Егер тек ағымдағы инстансқа қол жетімді деректер туралы айтатын болсақ, шағын және шектеулі болса да Instance store пайдалана аламыз.
Қосымша Root volume-ге тәуелсіз, EBS қатқыл дискілерін қоса аламыз.
Егер барлық EC2 инстанстары арасында жалпыға қолжетімді сақтау керек десек, көмекке тағы екі сервис келеді.
Біріншісі - Linux based серверлерге арналған Amazon EFS.
Екіншісі - Amazon FSx For Windows File Server.
Бұл тек Windows операциялық жүйесі бар машиналарға арналған ұқсас сервис.
Нұсқалардың әрқайсысын толығырақ қарастырайық.
Біріншісі - Instance store.
Instance store - тұрақты емес блокты сақтау қоймасы.
Оған операциялық жүйені орнатуға болады.
Оның біз бұрын қарастырған кейбір шектеулері және артықшылықтары бар.
Instance store туралы ең негізгі ақпарат - оны тоқтату мүмкін емес.
Егер сізде қосымша инстанстар болса және оларды өшіру қажет болса, оларды өшірген кезде Instance store сақталған барлық деректер жоғалады.
Сондықтан, деректерді Instance store-да сақтауға болады, бірақ бұл оңай қалпына келтіруге болатын деректер немесе жоғалту қорқынышты емес кэш деректері.
Бұл жағдайда Instance store пайдалана аласыз.
Келесі - Amazon EBS.
Бұл - Интернет арқылы қосылған қатқыл дискілер.
Олар физикалық түрде виртуалды серверімізге жатпайды.
Және оның бірқатар артықшылықтары бар.
Best practice - EBS пайдалану, өйткені көптеген артықшылықтары бар, бірақ қатқыл дискілер көлемі әдетте 100 гигабайттан аспайтындықтан төлем сәл қымбатырақ, сонда да баға айырмашылығы байқалмайды және көбірек пайда әкеледі.
Amazon EBS-пен жұмыс істегендегі негізгі артықшылықтар мынада: қатқыл дискіні инстанстан ажыратып, оны басқа инстансқа қосып, сол қатқыл дискімен жұмыс істеуді жалғастыра аласыз.
Сонымен қатар қатқыл дискілердің әртүрлі түрлерін пайдалана аласыз - SSD немесе HDD.
Тағы бір мәселе - Amazon S3 ішінде сақталатын снапшоттарды жасауға болады.
Amazon EBS сервисінің volume-дердің қандай түрлері қолжетімді екенін қарастырайық.
Екі топқа бөлінген 4 түрі бар - SSD-backed Volumes және HDD-backed Volumes.
Егер біз Root Volume туралы айтатын болсақ, бұл операциялық жүйе орнатылатын volume, онда тек SSD түрі болуы керек.
Осылайша, Root Volume үшін екі ғана нұсқа бар - General Purpose SSD (gp2) немесе Provisioned IOPS SSD (io1).
Көп жағдайда General Purpose SSD жеткілікті болады.
Ол өте тез жұмыс істейді.
Егер сіз үшін жылдамдықтан басқа жоғары өткізу қабілеті де маңызды болса, онда Provisioned IOPS SSD-ге жүгінуіңіз керек.
Бұл қымбатырақ, бірақ сіз жылдамдық пен өткізу қабілеттілігін аласыз.
Егер екінші топ туралы айтатын болсақ - бұл HDD-backed Volumes, олар Root Volume үшін жарамсыз, бірақ бұл volume-ді деректерді сақтау үшін Data Volume ретінде пайдалануға болады.
Екі түрі бар, біріншісі - Throughput Optimized HDD (st1).
Екіншісі - Cold HDD (sc1).
Біріншісі - стандартты HDD дискілері.
Егер сізде жоғары өткізу қабілеттілігін қажет ететін жүктемелер болса және деректер жиі сұралса, st1 - сіздің таңдауыңыз.
Егер қатқыл дискілерде ақша үнемдегіңіз келсе, бірақ деректер жиі сұралмайтын болса, Cold HDD жақсы нұсқа болып табылады.
I/O Performance-ты, яғни қатқыл дискілермен байланысты Input Output әрекеттерін, арттыруға көмектесетін тағы бір функционалдылық бар – бұл Amazon EBS-optimized Instances.
Бұл барлық EC2 инстанстары қолдамайтын функция және оған қолдау көрсетілсе, EC2 инстансының виртуалды сервері мен оқшауланған EBS Volume арасында арнайы желілік қосылым бапталынады.
Бұл деректерді тасымалдау жылдамдығын арттырады.
Енді EC2 инстанстарына ортақ қолжетімділікті қамтамасыз етуге көмектесетін қалған екі сервисті қарастырайық.
Бұл жағдайда EBS көмектеспейді, өйткені бір уақытта EBS Volume-ді тек бір инстансқа қосуға болады.
Иә, қайта қосылуға болады, бірақ мұны істеу үшін алдыңғы инстансты ажырату керек.
Егер S3 туралы айтатын болсақ, ол барлық инстанстар үшін қол жетімді.
Сәйкес параметрлерді орнатуға болады, бірақ ол мінсіз емес, өйткені ол блокты сақтау емес, объектілі сақтау және жүктеме түріне байланысты ол сәйкес келмеуі мүмкін.
Егер қатқыл диск қажет болса, барлық EC2 инстанстары үшін қолжетімді блокты сақтау қоймасы керек болса, Linux операциялық жүйелеріне арналған Amazon EFS және Amazon FSx for Windows File Server, бұл әсіресе Windows операциялық жүйесі бар EC2 машиналарына арналған.
Әр сервисті бөлек қарастырайық.
Amazon EFS сервисі Linux-based жүктемелеріне арналған.
Ол NFS протоколдары арқылы EC2 инстансына орнатылады.
Көлемі петабайтқа дейін өсе алады.
Сондай-ақ, ол автоматты түрде жоғары және төмен бағытта масштабталады, сондықтан тек пайдаланғаныңыз үшін төлейсіз.
Мысалы, жарты ай бойы 100 гигабайт деректерді сақтадыңыз, ал қалған уақытта 10 гигабайт деректерді сақтадыңыз.
Тиісінше, төлем пайдаланғаныңызға қарай болады.
Бұл слайдта EFS use cases қолдану жағдайларының мысалдарын көре аласыз.
Бұл барлық EC2 инстанстары үшін бір жерде ортақ қолжетімділікті қажет ететін жағдайлардың барлығы.
Сондай-ақ, EC2 машиналарында EFS орнатуға арналған команданың мысалын көресіз.
Amazon EFS сервисіне ұқсас сервис - Amazon FSx for Windows File Server болып табылады.
Ол Windows операциялық жүйесімен жұмыс істейтін EC2 инстанстарымен жұмыс істеуді қолдайды.
Сондай-ақ, NTFS технологиясын қолдайды.
Microsoft Windows жүйесімен жергілікті түрде біріктірілген.
Сондай-ақ, Microsoft Active Directory қызметімен біріктірілген және Windows Access Control Lists (ACLs) қолдайды.
Бұл Amazon FSx жүйесінде барлық қызметкерлер деректерін сақтай алатыныңызды білдіреді.
Олар бір жерде сақталады және Windows операциялық жүйесімен жұмыс істейтін кез келген EC2 құрылғысынан қолжетімді болады.
Сонымен қатар, қызметкерлер басқа қызметкерлердің жеке деректерін көре алмайтындай қол жеткізу құқықтарын ажырата аласыз.
Осы слайдтан басқа мысалдарды да көруге болады.
Идеясы мынада: бұл сервистің көмегімен сізде жалпы деректерді жазуға және ортақ пайдалануға болатын оқшауланған жалпыға ортақ қатқыл дискі болады.
Осымен алтыншы бөлім аяқталады.
Бұл - бүгінгі дәрісіміздің соңғы бөлімі.
Amazon EC2 сервисіне қатысты сақтау мәселелерін қарастырдық.
Осымен бүгінгі дәрісімізді аяқтаймыз.
EC2-ге қатысты бірқатар мәселелерді талқыладық.
Бұл Compute тақырыбына арналған екі бөлімнің біріншісі екенін атап өткім келеді.
Бүгін келесі тақырыптарды қарастырдық.
AMI туралы айттық, ол не үшін қажет, қандай артықшылықтар береді.
Әрі қарай, Instance Type деген не, қандай топтары бар, олар қалай ерекшеленетінін және өзіңіз үшін оңтайлы Instance Type қалай таңдауға болатынын егжей-тегжейлі қарастырдық.
Келесі - User Data, ол не үшін қажет және қандай артықшылықтар беретіні туралы айттық.
Соңында Amazon EC2 сервисін пайдалану кезінде сақтауға қатысты барлық мәселелерді қарастырдық.
Осымен бүгінгі дәрісіміз аяқталды.
Назарларыңызға рахмет.
Келесі белсенділіктерде кездескенше!
