Добрый день, уважаемые студенты! Рад вас видеть на очередной лекции. Эта лекция является первой частью большой темы, связанной с Compute. Это сервисы, связанные с вычислениями в облаке. В первую очередь это Amazon EC2, о чем мы сегодня будем с вами говорить. И так, давайте начнем. В сегодняшней нашей лекции мы затронем 6 подтем. В первой части мы вспомним про наш бизнес-кейс в рамках лабораторной работы. Посмотрим, что мы будем выполнять на этой неделе. Далее освежим в памяти, что же такое сервис Amazon EC2, несколько дополнительных новых деталей. Далее поговорим подробнее про AMI, что это такое, какие есть преимущества и недостатки. Далее на четвертой теме мы подробнее обсудим, как правильно выбрать тип EC2 инстанса в зависимости от use кейсов, бизнес-задачи. В последних двух темах поговорим о важном функционале, это User Data и какие есть IT-ресурсы, связанные с хранением, которые работают с сервисом Amazon EC2. Мы начинаем первую часть. А это именно связано с нашими лабораторными работами, по ходу курса мы будем разрабатывать IT-архитектуру в облаке AWS, которую вы видите на этом слайде. Каждую неделю мы добавляем новый компонент. На этой неделе мы будем добавлять EC2 инстансы в связке с Amazon EFS. Это все, что связано с технической частью. Теперь давайте подробнее поговорим про сам бизнес-кейс, для чего можно эту техническую задачу решать. Мы с вами помним, что в рамках бизнес-кейса у нас есть пекарня и кафе, владельцами которых являются Фрэнк и Марта. Также им в этом помогают София, дочка, и Нихил, работник. После того, как они запустили статический веб-сайт, количество посетителей увеличилось. Это очень сильно обрадовало владельцев. Они начали рассматривать дальнейшие шаги развития и остановились на том, что большее количество посетителей забегает в кафе, для того, чтобы по дороге купить некоторую продукцию и дальше поехать по своим делам. В связи с этим удобно было бы, в том числе по просьбам клиентов, добавить возможность онлайн заказа на веб-сайт. То есть, с технической точки зрения, это уже не статический, а динамический веб-сайт, на котором можно оставлять заказ. Также в рамках этого бизнес-кейса у нас будет возможность посмотреть, какие заказы были сделаны на отдельной странице, чтобы продемонстрировать динамичность этого веб-сайта. Отлично, на этом мы заканчиваем первую часть и переходим к следующей. Мы переходим ко второй части нашей сегодняшней лекции. Перед тем, как ее начнем, давайте вспомним, какие у нас есть основные сервисы, связанные с вычислениями. Их можно разделить на пять различных групп. Отличаются они тем, что в самом первом у нас высокий контроль над инфраструктурой. Мы можем как угодно кастомизировать ее части. Таким образом идет смещение до serverless, когда мы большую часть работ по обслуживанию IT-инфраструктуры передаем AWS. Таким образом делаем лишь ту меньшую часть. Давайте пройдемся по каждой из групп. Первая - это Virtual Machines. То есть тот случай, когда мы получаем виртуальную машину, можно к ней подключаться по SSH, все необходимые настройки делать, любое приложение устанавливать. И в этом случае, если говорить про сервисы, это Amazon EC2, Elastic Compute Cloud, самый основной сервис. А также немного отличающийся, но также предоставляющий виртуальные сервера, это Amazon Lightsail. Следующий уровень, у нас уже чуть меньше контроля, но тем не менее есть, это Containers. Самым явным представителем является Amazon ECS, работает с Docker-контейнерами. Третья группа - это так называемый PaaS, Platform as a Service и сервисом, который ее представляет, является AWS Elastic Beanstalk. Идея в том, что вы пишете код вашего приложения, готовите некоторый документ, который описывает конфигурацию вашей инфраструктуры и загружаете в этот сервис. Далее уже происходит следующее: AWS Elastic Beanstalk берет на себя все те моменты, связанные с поднятием этой инфраструктуры, поднимает все необходимые дополнительные ресурсы и вам уже в удобном виде можно будет через UI, то есть через AWS Management Console управлять вашей инфраструктурой. Четвертая группа является Serverless, когда мы фактически передаем AWS все, что связано с обслуживанием IT-инфраструктуры, а нам лишь нужно писать код. Ярким представителем является AWS Lambda, вы пишите код, загружаете ее и AWS все, что связано с обслуживанием, берет на себя. А вы оплачиваете только за количество гигабайт в секунд исполнения Lambda функции. В случае, когда у вас ваша Lambda функция не исполняется, вы ни за что не оплачиваете. Это и есть преимущество Serverless. Я здесь хотел отметить, обычно, если у вас постоянные нагрузки, которые равномерные, то рекомендуется отдавать предпочтение Amazon EC2 либо ближайшие к нему сервисы. Если же вы, например, небольшой стартап, либо у вас та часть вашей IT-инфраструктуры, у которой нагрузки непостоянные, они приходят с различными всплесками, есть периоды, когда нагрузка совсем не приходит, в этом случае рекомендуется смотреть в сторону Serverless, так как в момент отсутствия нагрузки вы ничего не оплачиваете. Таким образом, Serverless решения в подобных нагрузках являются более экономичным решением. Еще одним представителем Serverless является AWS Fargate. Это тот сервис, который позволяет нам управлять нашими контейнерами. Это специальное отдельное Serverless решение, которое помогает с этим справляться. Также хотелось бы отметить два сервиса немного из другой категории, тоже связанных с вычислениями. Это AWS Outposts. Идея в том, что вы можете для ваших локальных вычислительных мощностей привязать сервис AWS Outposts и управлять вашими мощностями, как будто бы это AWS мощности. Второй пример - это AWS Batch, сервис, который позволяет нам выполнять некоторые задачи бачами, то есть некоторыми группами. На этой лекции мы подробно поговорим про сервис Amazon Elastic Compute Cloud (Amazon EC2). Что же это такое? Это сервис, который предоставляет нам виртуальные машины, то есть сервера. У нас есть возможность, используя API либо AWS Management Console, поднимать эти сервера в течение нескольких минут абсолютно в любом количестве. При необходимости мы можем автоматически настроить масштабирование как в сторону увеличения, так и в сторону уменьшения, в зависимости от нашей нагрузки на нашу IT-инфраструктуру. Более того, благодаря тому, что сервис облачный, он позволяет нам платить только за те вычислительные мощности, которые нам нужны. Приведу пример, если мы говорим, что нам нужны кратковременные вычислительные мощности для некоторых расчетов, и эти расчеты при запуске, например, 100 машин занимают 3 дня, мы можем действительно запросить 100 серверов любой конфигурации, которые имеются у AWS, и запустить их на 3 дня. После того, как мы завершим все наши расчеты, мы можем вернуть обратно эти сервера, и после окончания месяца нам придет счет на оплату именно на эти 3 дня, на то количество серверов, которое работало. Таким образом, мы платим только за то, что мы используем. Пару слов о том, из чего состоит Amazon EC2. Мы с вами знаем, у нас есть AWS Regions, далее в каждом AWS Regions несколько availability zone, и в рамках availability zone несколько дата-центров. В дата-центре у нас десятки тысяч серверов, и каждый сервер максимально мощный, насколько это возможно. Теперь благодаря использованию гипервизора, мы фактически имеем возможность один мощный физический сервер разделить на сотни мелких виртуальных серверов. Таким образом, в рамках сервиса Amazon EC2 есть возможность выбрать такую конфигурацию, какую мы хотим, из более чем 700 различных вариантов. Когда мы получаем виртуальный сервер, он в себе содержит CPU, то есть саму вычислительную мощность, RAM, которая является оперативной памятью, и то, что хранит данные, это либо Instance Store, либо Amazon EBS. Amazon EBS - это отдельный сервис, который предоставляет нам постоянное хранение. Когда мы говорим про Instance Store, это временное хранение. Про особенности и отличия этих двух вариантов хранения мы поговорим чуть позже. Давайте пару слов скажем про use cases использование сервиса Amazon EC2. Обычно этот сервис выбирается, если нам нужен полный контроль над нашими вычислительными ресурсами. При работе с виртуальными серверами мы можем установить любое приложение, мы можем сконфигурировать его так, как мы хотим, и никто нас в этом не ограничивает. Мы можем установить любую операционную систему, и таким образом практически любую IT-инфраструктуру, любое приложение, которое хостится на локальном дата-центре, работающих на физических серверах, можно перенести на сервис Amazon EC2 в облако AWS. Также мы начинаем использовать сервис Amazon EC2 в случае, если мы хотим оптимизировать наши расходы на вычислительные мощности. У нас есть возможность купить Reserved Instances, у нас есть возможность использовать Spot Instances, а также есть Savings Plans, которые дают значительные скидки за использование виртуальных серверов Amazon EC2. При настройке виртуального сервера EC2 нам необходимо принять несколько решений. Давайте пройдемся по самым основным шагам. Самое первое - нужно определиться с AMI, либо это AMI, который мы сами приготовим, либо использовать AMI существующий от AWS. Далее, мы определяем какой тип инстанса мы будем использовать. В этом случае мы должны знать какое количество процессоров, какое количество оперативной памяти и хранения нам нужно. Далее, мы можем дополнительно указать как мы хотим, чтобы наши EC2 инстансы располагались в дата-центре. Про это мы поговорим в следующих слайдах. Если наше приложение работает с другими сервисами, то также необходимо настроить роль, которая будет использовать наш инстанс и обращаться к другим сервисам. Необходимо также понять будем ли мы использовать User Data или нет. Часть команд по преднастройке нашего инстанса мы можем добавить в AMI, часть по некоторым причинам расположить в AMI не получится, поэтому необходимо настроить User Data, который будет исполнять некоторые команды в момент поднятия инстанса. Нужно решить также вопросы связанные с хранением. У нас есть два варианта, как мы помним, есть возможность использовать Instance store, это старая опция или использовать Amazon EBS, отдельный сервис, который предоставляет нам Persistent Block Storage, то есть постоянное блочное хранение, что является рекомендацией и best practice от AWS. Далее необходимо рассмотреть вопросы, связанные с безопасностью - это настройка Security Group, какой трафик разрешен, какой трафик запрещен и самое последнее Key pair, это ключ, который позволяет нам подключаться удаленно через SSH к нашим виртуальным серверам. На этом мы подошли к концу второй части нашей сегодняшней лекции, освежили в памяти что же такое сервис Amazon EC2, какие возможности он нам предоставляет, также остановились на тех шагах, которые необходимо выполнить для успешной настройки и запуска нашего сервера. Первый и самый основной - это выбор AMI, что такое AMI и какие возможности оно нам предоставляет мы рассмотрим в третьей части нашей сегодняшней лекции. Давайте теперь подробнее остановимся что же такое AMI. AMI расшифровывается как Amazon Machine Image, это некий template шаблон, который позволяет нам на базе этого шаблона поднимать виртуальные сервера EC2. Как вы видите на картинке с использованием одного лишь AMI мы можем поднять абсолютно идентичные EC2 инстансы. AMI описывает root volume, то есть корневой раздел жесткого диска, на котором устанавливается операционная система, а также возможно некоторое программное обеспечение. Далее здесь же описывается информация какие аккаунты могут использовать этот AMI. Третий пункт - это описание дополнительных разделов жесткого диска для целей хранения. Какие же преимущества нам предоставляет AMI, это так называемые 3R - Repeatability, Reusability и Recoverability. Идея в том, что мы создаем этот шаблон один раз и используем его много раз. Более того исключается человеческий фактор и какая-то часть конфигурации настроек сидит в этом шаблоне и возможность получить другую конфигурацию просто невозможна. Таким образом исключается человеческий фактор. Другой момент, мы можем использовать самым примитивным образом AMI, это настроить некоторый сервер, установить все необходимое ПО, убедиться что все работает как нам нужно и от этого сервера создать AMI. Это будет кастомный шаблон, который вы можете использовать для восстановления. В случае, если что-то происходит и ваш сервер падает, то вы оперативно, используя ваш кастомный AMI, можете поднять и вернуть в строй. Это естественно самое простое использование. Есть более продвинутые практики использования AMI, о которых мы поговорим с вами в дальнейшем. Давайте теперь остановимся на основных моментах, которые позволяют выбрать правильный AMI. Существует 5 различных пунктов. Первый и основной - это регион. Мы с вами помним, что AMI создается в рамках определенного AWS региона и используется там же. В случае, если вы хотите использовать этот AMI в другом регионе, то вам необходимо ее скопировать. Это достаточно просто делается. В этом случае копия получает отдельный уникальный ID этого AMI и дальше используется уже независимо. Второй пункт - это выбор операционной системы. Мы не ограничены абсолютно ничем. Можем установить любую операционную систему. Наиболее частыми вариантами в этом случае являются либо Windows OS, либо некоторые вариации Linux OS. Далее необходимо определиться с IT ресурсом хранения. Это может быть EBS, то есть отдельный сервис, который помогает нам обеспечить постоянное блочное хранение, либо это Instance Store. Instance Store - это та память, которая физически находится возле нашей виртуальной машины. Она не рекомендуется, так как это старый вариант использования и как best practice рекомендуется использовать EBS ввиду его преимуществ. На этом мы более подробно остановимся на следующих слайдах. Четвертый пункт - это выбор архитектуры. Мы можем выбрать либо 32-битную либо 64-битную. Более того можем выбрать ARM архитектуру. Также появилась собственная разработка от AWS Graviton. Есть определенные преимущества. Более подробно вы можете ознакомиться на официальной документации AWS. Там проводятся различные сравнения для различных типов нагрузок, какие архитектуры работают лучше. Последний пункт - это тип виртуализации. Здесь есть два варианта, это PV Paravirtual и HVM Hardware Virtual Machine. В большинстве случаев рекомендуется использовать HVM. Если же мы говорим про источники откуда мы можем получить AMI. Первый - это Quick Start. Это готовые AMI предоставленные от AWS. Второй - это так называемые My AMIs. Это все те AMI, которые мы сами создаем для себя, кастомные AMI. Далее, есть AWS Marketplace. Это специальное место, в котором вы можете использовать AMI созданный другими компаниями. При этом никаких гарантий AWS не предоставляет. Поэтому использование здесь на ваш страх и риск. В AWS Marketplace вы можете найти как бесплатные так и платные AMI от популярных вендоров. Например, Red Hat и другие. Четвертый - это Community AMIs. Это те AMI, которые были созданы пользователями AWS. Здесь также AWS не несет никакой ответственности и вы используете эти AMI на свой страх и риск. Мы с вами добрались до сравнения двух типов хранения для Root Volume. Это Instance Store либо Amazon EBS. Предоставлена таблица в пяти различных характеристиках. Давайте пройдемся по каждому из них. Запуск инстанса с EBS намного быстрее чем запуск с Instance Store. Это связано с тем, что Instance Store хранит некоторые части данных в Amazon S3. И загрузка данных с Amazon S3 занимает некоторое время. Максимальный размер Root Volume для EBS - 16 ТБ, а для Instance Store всего лишь 10 ГБ. Но для большинства задач 10 ГБ более чем достаточно. Если мы говорим про возможность останавливать инстансы, мы это можем сделать для инстансов с EBS. И в момент когда инстанс остановлен, мы за это не несем никаких затрат. Если мы говорим про Instance Store, остановить такой инстанс невозможно, его можно лишь перезагрузить, либо терминейтнуть, то есть отключить. В момент когда вы отключаете все данные, которые хранились в Instance Store, пропадают. Если мы говорим про возможность изменять тип инстанса, то в случае с EBS это очень легко делается. Вы можете в любой момент остановить инстанс, изменить Instance type, и в момент когда вы ее включите обратно, Instance type уже будет изменен. Если мы говорим про Instance Store, то это сделать невозможно ввиду того, что это тот раздел жесткого диска, который находится физически рядом с виртуальным сервером. Поэтому при смене Instance type вас перекинет уже на другой физический сервер, у которого свой Instance store. Таким образом нет возможности изменить Instance type. Если мы говорим про вопросы оплаты, то в случае с EBS вы несете затраты по тарифам сервиса Amazon EBS. В случае когда мы говорим про затраты Instance Store, это те затраты, связанные с хранением данных в Amazon S3. Зачастую хранение данных в Amazon S3 дешевле чем в EBS. Если мы говорим про гигабайты, до 100 гигабайтов, то эти затраты они минимальные, отличаются не сильно. Поэтому следует этот момент также учитывать. Если у вас очень большое количество серверов и вам достаточно преимуществ и недостатков Instance Store, то вы ее можете использовать и получать некоторую выгоду ввиду того, что данные хранятся в Amazon S3 и это дешевле. Во всех остальных случаях рекомендуется как best practice использовать Amazon EBS для вашего Root Volume. Давайте теперь поговорим немного про Instance Lifecycle, то есть жизненный цикл EC2 инстанса. Все начинается из состояния Pending. В момент когда мы запускаем первый раз наш инстанс из AMI поднимается сервер. И в момент когда она включается она в состоянии Pending. В состояние Pending мы так же можем попадать из состояния Stop. Это относится только к Amazon EBS-backed Instances, которые мы можем останавливать. Так вот когда мы остановили ее, включаем, в первую очередь она переходит из состояния Stopped в состояние Pending. Далее, как только она включится и будет готова к работе, из состояния Pending она перейдет в состояние Running. С этого момента вы можете по SSH подключаться к этому EC2 инстансу и работать с ней. Включенный инстанс вы можете перезагружать. Она переходит в состояние rebooting. И возвращается обратно в состояние running. В случае когда мы делаем reboot. Его публичный IP адрес. И физический сервер остаются теми же. В случае если не было проблем. Физически с этим сервером. Для EBS. Backed Instance. У нас есть возможность ее. Останавливать. Как только мы это делаем. В случае когда она полностью остановится. Она переходит в состояние stopping. Мы также можем отправить. Наш EBS. Backed Instance. На гибернацию. Это когда состояние текущее. Сохраняется в память. Операционную. И таким образом она быстрее включается. В этом случае. Она также переходит через. Stopped и pending. Переходит в состояние врань. Отличие. От остановки и гибернации. В том что в случае с гибернацией. Мы сохраняем. Физический сервер. Он запускается на нем же. Сохраняются его IP адреса. Приватные публичные. И вы продолжаете с этой машиной работать. В том случае если не было проблем. Физически с этим сервером. В случае когда мы ее останавливаем. То физический сервер который хостит нашу. Виртуальную машину. Она может сменится. Последнее состояние это остановка. Если машина. Она работает. И мы ее терминейтим. Она переходит в состояние shutting down. Отключается и в итоге переходит в состояние. Terminated. Какое то время она в AWS Management консоли. У вас будет отображаться. Terminated и через некоторое время. Она совсем пропадет. В состоянии terminated. Мы также можем переходить из состояния stopped. То есть если. был остановлен. То мы не переводя ее в состояние running. Можем ее терминейтить. Пару слов. Хотелось бы сказать про создание. Нового AMA. Представим что мы находимся в регионе A. Есть у нас некоторые AMA. Будь то созданные нами. Будь то AMA предоставленные. Вот AWS либо любой другой. Во время запуска инстанса. Мы получаем. Точную копию AMA. Уже в запустившемся инстансе. Будет у нас unmodified instance. Далее мы можем подключаться. К этому инстанцу. Проводить некоторые манипуляции. Еще один подход. К созданию AMA. Это сервис EC2 Image Builder. Используя этот сервис. Вы можете с легкостью. В понятном UI интерфейсе. Автоматизировать. Создание. Управление. Обслуживание. Развертывание. А также работа с контролем. Версии ваших AMA. На этом слайде. Вы видите. Сервис EC2 Image Builder. Он состоит из 5 основных шагов. Самым первым делом. Вам нужно выбрать source image. Это операционная система. На котором будет базироваться ваш AMA. Можете выбрать. Amazon Linux 2. Windows операционную систему. Ubuntu и так далее. Вторым шагом. Предлагается определить список. Компонентов. Вы указываете какие приложения. Один из примеров это установка языка программирования Python. Третьим шагом. Предлагается запустить так называемые. Hardening Tests. Для проверки. Безопасности. Есть специальные тесты. Которые предоставляются от AWS. Также вы можете. Добавить и включить здесь. Свои собственные тесты. После того как. AMI проходит. Проверка на безопасность. Мы переходим к четвертому шагу. Четвертый шаг. Это расписание. Как часто будет создаваться. Новые AMI. Может возникнуть вопрос. Для чего нам необходимо. На периодической основе. Создавать AMI. Ответ достаточно прост. Мы с вами знаем. Что операционные системы. Что программное обеспечение. Стоят на месте. Один из видов обновления. Это не новый функционал. А обновление безопасности. Патчи безопасности. Так вот. Это расписание. Оно позволяет вам создавать. AMI. Ровно с таким же составом. Компонентов. Внутри. Но при этом уже будут применены. Новые обновления. Приложения. Последним шагом. Вам необходимо определить. На какие регионы. Будут распространяться ваши AMI. Вы можете выбрать один основной. Или несколько регионов. Если вы хостите свою инфраструктуру. В нескольких регионах. На этом. Мы заканчиваем третью часть. Нашей сегодняшней лекции. Разобрали основные моменты. AMI. Мы с вами добрались. До четвертой части нашей сегодняшней лекции. И поговорим. О нюансах. Выбора. Типа. Инстанса. Что такое. Тип инстанса. Это некоторая уникальная конфигурация. Которая включает в себя. Характеристики CPU. Процессорных мощностей. Далее. Наш хранилище. Наши жесткие диски. И Network Performance. То есть. Свойства железа. По работе с сетью. Название типа инстанса. Состоит из нескольких частей. Вы это можете видеть. На слайде. Самое первое. Это семейство типов инстанцев. Про них мы поговорим на следующих слайдах. М. Далее вторым обязательно идет. Номер поколения. В нашем случае М5. Это значит. Инстанс из семейства М 5 поколения. Каждый год. Amazon. Увеличивает это число. И предлагает нам еще. Более привлекательные условия. Обычно за ту же цену. Предлагается. Машина. Более мощная. Либо чем-то. В лучшую сторону. Отличающаяся от предыдущего поколения. Например. М6. Она будет точно. Такое же по цене. И по характеристикам. Может быть где-то. Быть лучше. Третья часть. Это некоторые дополнительные возможности. В этом случае вы видите. Для. Жесткого диска. Использует. Тип SSD. Вместо хард драйва. После этих основных частей. Через точку. У нас описывается размер инстанса. Есть определенная градация. Начиная от nano. Micro и так далее. Здесь мы видим на примере Xlarge. Что говорит о том. Что это за инстанс Xlarge. Так же можете видеть. Характеристики. У него 4 ядра процессора. Оперативная память на 16 гигабайтов. Один жесткий диск на 150. Гигабайтов. И Network performance. Мы можем передавать данные по сети. До 10 гигабитов. В секунду. Увеличение. Размера. Увеличивает соответственно одну или несколько. Характеристик который вы видите. В левой части этого слайда. На следующих двух слайдах. Мы разберем 5 самых популярных. Семейств типов инстанцев. Для каждого семейства. Будут данные примеры. Использования. А также буквенные обозначения. Давайте пройдемся по каждому из них. Самый первый самый популярный. И подходящий для большинства случаев. Это General Purpose. И возможно CN. Это дополнительно увеличиваются. Характеристики. По работе с сетью. Далее. Увеличенный. Объем. Буквенные обозначения. R, X и HMI. После этого. Есть у нас семейство. Storage Optimized. Они ориентированы. По работе с. Операциями водо-вывода. По работе с жестким диском. Примерами. Буквенных обозначений. Могут быть I, D, H. И еще одно. Также набирающие популярность. Семейство. Это Accelerated Computing. Используется для. Тренировки моделей. Нейронных сетей. Машинам обучения. Все те нагрузки. Которые требовательны. К ресурсам. Видеокарты. И в этом случае. Буквенное обозначение. P, G и F. При всех прочих. Характеристиках. В типах инстанцев. Из Accelerated Computing. Будет дополнительно. Или увеличенное. Количество памяти. Для видеокарты. Для того. Чтобы принять решение. Какой тип инстанца. Подходит вам. Что необходимо сделать. Основные два пункта. Ваше приложение. И второй знать бюджет. Чем мощнее инстанц. Очевидно это требует. Больших затрат денежных. Для того. Чтобы определиться. С типом нового инстанца. Вы можете. На основной странице. Перейти. Во вкладку. И посмотреть какие виды есть. Наоборот. Зафиксировать. Некоторые характеристики. Например. Количество процессорных ядер. И посмотреть какие варианты. У вас остаются. Рекомендуется использовать. Последнее поколение. Так как оно самое оптимальное. С точки зрения цены. И качества. Если вы работаете. Уже существующим инстанцем. Видите что есть необходимость. Обновить. Тип инстанца. Рекомендуется посмотреть в сторону. Сервиса AWS Compute Optimizer. Она использует историю нагрузки. На ваши. Исситу инстанции. И дает некоторые рекомендации. По типу инстанцев. По их размерам. Количеству и даже конфигурации авто скейлинг группы. По результатам анализа. Он может выдать вам вердикт. Именно. По вашим инстанцам. Или они перегружены. Нет. Оптимизированы. Или с пометкой. Что говорит о том. Что информации по нагрузкам. Недостаточно для конкретного инстанца. На этом мы разобрали. Основные вопросы связанные. С выбором типа инстанца. И ситу. Переходим к следующей части. Мы с вами добрались до пятой части. Нашей сегодняшней лекции. И поговорим про UserData. Что же такое UserData? Для чего мы ее можем использовать? UserData это набор некоторых команд. Которые отрабатывают. Во время инициации. Вашего инстанца. Если говорить про LifeCycle. Инстанца. То все команды внутри UserData. Отрабатывают. В шаге pending. Обратите внимание. Что UserData запускается только при первом запуске. Поэтому. После того как вы остановите. Еще раз запустите. Либо перезагрузите ваш инстанц. UserData отрабатывать не будет. Зачем использовать UserData? Обычно. Там есть список команд. Которые обновляют существующее ПО. Это ПО уже включено в AMI. Но может там быть. В не самой последней версии. Поэтому. Используя UserData. В момент запуска вы подтягиваете самые последние изменения. И дозагружаете. Обновление вашего ПО. Далее. Также UserData попадает. Те команды. Которые требуют непосредственного. Непосредственной привязки к вашему инстанцу. Например. Некоторые команды могут использовать. Это данные вашего инстанца. Может быть публичные или внутренние. API для дополнительной настройки. В этом случае. Мы не можем добавить ее в AMI. И она будет находиться в UserData. Также в UserData запускаются. Команды для старта веб-сервера. В этом случае. Обратите внимание. Что UserData запускается только один раз. Поэтому помимо запуска. Веб-сервера в первый раз. Вам также необходимо внести. Вправки в автозагрузку. Чтобы при каждом включении. И выключении вашего инстанца. Стартовал веб-сервер. Либо любое другое программное обеспечение. Если же говорить. В сравнении. Куда. Передавать. Те или иные команды. В AMI или UserData. Так как они достаточно. Заменяемы. Отвечу следующим образом. Всегда должен быть некоторый баланс. Все те команды. Которые вы можете вложить в AMI. Желательно положить туда. Это первая часть команд. Вторая часть команд по обновлению. И все те нюансы которые говорил ранее. Следует добавить UserData. Так как большой объем команд в UserData. Замедлит старт вашего инстанца. Когда у вас будет баланс. Часть команд будет на стороне AMI. Часть команд на стороне UserData. То. С одной стороны у вас будет актуальный AMI. С другой стороны. Инстанц будет запускаться намного быстрее. Потому что UserData. Не такая большая. И в итоге вы получаете. Инстанц с обновленным программным обеспечением. И полностью готовым к работе. Раз уж мы. Заговорили. О информации про наш инстанц. Так называемый инстанц метадейта. Давайте остановимся на том. Где и как эту информацию можно получить. На уровне каждого инстанца. Есть некоторые URL. Это 169.254.169.254. Slash latest. Slash metadata. По эту матрицу находится. Основная информация. Связанная непосредственно к этому инстанцу. Этот URL доступен только на уровне. Конкретного. Инстанца. Также. Если вместо metadata написать UserData. Вы получите список тех команд. Которые есть в вашей UserData. Также можете ее использовать. Для дополнительной настройки. Когда я говорил про баланс. Команд. На стороне AMI и UserData. Естественно. Нет универсального ответа. Всегда надо смотреть. На конкретную бизнес задачу. Давайте рассмотрим. Есть 4 различных варианта. Того где могут находиться ваши команды. AMI и UserData. Какие это преимущества дает. И какие у каждого подхода есть недостатки. Если вы обратите внимание. Что на самом верху. Есть стрелка flexibility. То есть. Каждый следующий вариант. Слева направо. Он дает большую гибкость. Если посмотреть на стрелку внизу. Simplicity. Противоположное. И мы. Справа налево. Упрощаем. Работу с нашими инстанциями. Но при этом теряем в гибкости. Давайте подробнее посмотрим. На каждой из конфигураций. Самый первый это fully baked AMI. В котором. Все абсолютно. Команды необходимые для запуска. Начиная от операционной системы. Ее дополнительные настройки. Для приложения и установки. Соответственно. Самого приложения. Она происходит на стороне AMI. В этом случае. Ваш инстанц запускается. Максимально быстро. И. User data может быть. Совсем пустой. Это связано с тем. Что AMI вы готовите. Асинхронно. Она уже предварительно приготовлена. В момент необходимости запуска. Вы. Включаете только сервер. И все остальное у вас готово. Плюсом может быть то. Что вы очень быстро запускаете. Ваше сервера. И они в самое максимально. Быстрое время готовы к работе. Недостатком может являться то. Что любое приложение. Для корректной работы. Требует другое ПО. И возможно не одно. Каждое из этих ПО. Независимо друг от друга. Развивается. Выходят патчи безопасности. Обновление функционала. И так далее. Поэтому с этим подходом. Рекомендуется чаще. Готовить. Или обновлять ваши AMI. Следующие два пункта. Они. Увеличивают гибкость. Но при этом немного усложняет. В том плане. Что есть отдельный набор команд. На стороне AMI. И отдельный набор команд. На стороне UserData. В первом случае. У вас приложение устанавливается. Только в момент запуска приложения. Это может быть. Необходимо. Так как. Внутри AMI. Не получится добавить те команды. По настройке вашего приложения. Вы можете добавить. Некоторые данные. О конкретном инстансе. Все остальное находится внутри AMI. Более гибкий подход. Это когда вы настраиваете. Операционную систему. Устанавливаете все необходимые. Для корректного функционирования. Этой операционной системы. Внутри AMI. А вторую часть. Подготовку среды. Для вашего приложения. В этом случае она запускаться будет еще дольше. Но при этом вы получаете гибкость. И любые команды. Они могут быть. Изменены на стороне UserData. Новый AMI для этого выпускать не нужно. И самое последнее. Это GEOS. То есть расшифруется как. Just In Us OS. Простыми словами. Это только операционная. Система. А еще есть еще. На стороне UserData. Настройка операционной системы. Патчи безопасности. Настройка логирования. И все что выше. Это подготовка среды для приложения. И само приложение на стороне UserData. В этом случае. Вам достаточно выбрать. Любой подходящий для вас. AMI который предоставляет AWS. И все необходимые настройки. Производительные на стороне UserData. Ничего связанного с AMI делать не нужно. Достаточно использовать уже готовые. Но при этом нужно будет менеджировать UserData. И понимать что у вас максимальная гибкость. Вы можете менять. Очень часто ваши UserData. Не меняя AMI. Но при этом понимаете. Что запуск вашего инстанца. Требует намного больше времени. И до того что она фактически. Полноценно будет настраиваться. На этом мы разобрали. Все что связано. С UserData. В EC2 инстанции. Заканчиваем пятую часть. И двигаемся дальше. Мы с вами. Добрались до шестой части. Нашей сегодняшней лекции. И затронем все аспекты. Связанные с хранением. При работе с сервисом Amazon EC2. Как мы знаем. У нас есть. Два раздела. Это Root volume и Data volume. В Root volume мы устанавливаем. Нашу операционную систему. Все приложения. А в Data volume храним данные. Так вот когда мы говорим про Root volume. Root volume может быть. Instant store. Либо поддерживается Amazon EBS. Если мы говорим про Data volume. То они опциональные. Их может и не быть. Если мы говорим. Про данные. Которые доступны только для. Текущего инстенса. То мы можем использовать. Наш Instant store. Хоть он и небольшой и ограничен. Также мы можем добавить. Дополнительные. Независимые от Root volume. EBS жесткие диски. Если же мы говорим. Что нам нужно такое хранилище. Которое общее. Обще доступное среди всех EC2 инстенцев. То нам на помощь приходят. Еще два сервиса. Первый это Amazon EFS. Для Linux based серверов. И второй это Amazon FSx. For Windows Server. Windows File Server. Это аналогичный. Сервис только для. Машин с операционной системой. Windows. Давайте остановимся на каждом. Из вариантов более подробно. Самый первый это Instant store. Instant store это не постоянное. Блочное хранилище. На него можно установить. Операционную систему. У нее есть ограничения. Которые мы рассмотрели ранее. В том числе преимущества. Самый основной момент. Который связан с Instant store. Это то что его невозможно остановить. Если же. У вас есть лишние. Инстанции и вам необходимо. Их отключить. То при отключении. Они. Все те данные которые хранятся в Instant store. Они будут потеряны. Поэтому в Instant store. Данные хранить можно. Но это такие данные. Кеш данные. Либо данные которые можно с легкостью. Восстановить. И не страшно потерять. В этом случае можно использовать Instant store. Следующий это EBS. Это. Жесткие диски которые подключены через интернет. Они не относятся. Физически. К нашему виртуальному серверу. И есть у нее ряд преимуществ. Бест практиц. Это. Использовать EBS. Так как преимуществ намного больше. Но по оплате. Выходит. Немного дороже. Ввиду того что жесткие диски обычно. Устанавливаются не более 100 гигабайтов. То разница в цене. Она не ощутима. И те преимущества которые вы получаете. Они намного больше. Основные преимущества. Которые вы получаете. При работе с Amazon EBS. Это то что вы можете. Отсоединить. Ваш жесткий диск от инстанца. И подключить к другому инстанцу. Вы дальше продолжите работать с этим жестким диском. Также это то что. Вы можете использовать. Различные. Типы жестких дисков. Это SSD жесткий диск. Либо HDD. Другой момент. То что вы можете создавать снапшоты. Которые будут храниться в S3. Давайте рассмотрим. Какие типы волюмов. Сервиса Amazon EBS. Нам доступны. Есть 4 вида. SSD Backed Volumes. И HDD Backed Volumes. Если мы говорим. Про Root Volume. Это. Тот volume на который устанавливается операционная система. То в ней. Она должна быть только. Типа SSD. Таким образом у нас. Только два варианта для Root Volume. General Purpose SSD. GP2 либо Provisioned IOPS SSD. IO1. Для большинства случаев. Типа. General Purpose SSD. Будет достаточно. Она достаточно быстро работает. В случае если вам. Помимо скорости также важно. Высокая пропускная способность. То нужно смотреть в сторону Provisioned IOPS SSD. Оно дороже. Но при этом вы получаете скорость. Пропускную способность. Если мы говорим. Про вторую группу. Это HDD Backed Volumes. Они не подходят. Как для Root Volume. Но при этом вы можете использовать. Эти volume. Как Data Volume. Для хранения данных. Выделяют два вида. Первый это Throat Put Optimized HDD. ST1. Второй это Cold HDD SC1. В случае если у вас. Нагрузки. Требующие. Высокую пропускную способность. И при этом данные. Часто запрашиваются. В этом случае ST1. Это ваш выбор. В случае если вы. Хотите сэкономить на ваших жестких дисках. При этом. Данные не часто запрашиваются. То Cold HDD. И идеальный вариант. Есть еще один функционал. Который помогает нам. Увеличить IOPerformance. То есть Input Output операции. Связанные с жесткими дисками. Это Amazon EBS Optimized Instances. Это такой функционал. Который поддерживается. Не всеми EC2 инстанциями. И в случае если оно. Поддерживается. То между вашим виртуальным. Сервером EC2 инстанция. И отдельно стоящим. EBS Volume. Настраивается выделенное. Выделенное. Сетевое подключение. Это увеличивает. Скорость передачи данных. Давайте теперь. Рассмотрим оставшиеся два. Сервиса которые нам помогают. Предоставить общий доступ. В этом случае. EBS нам не поможет. Так как в один момент времени. EBS Volume может быть подключен. Только к одному инстанцию. Да можно переподключить. Но для этого нужно отключить. От предыдущего инстанца. Если мы говорим про S3. Оно доступно. Для всех инстанцев. Можно соответственно настройки. Произвести. Но оно не идеальное. Объектное хранилище. В зависимости от типа нагрузок. Оно может не подойти. В случае если вам нужен. Именно. Жесткий диск. Блочное хранилище. Которое доступно для. Всех ваших EC2 инстанцев. То рекомендуется использовать. Amazon EFS для Linux. Операционных систем. И Amazon FSx. Это специально для. EC2 машин. С операционной системой Windows. Давайте. Отдельно рассмотрим каждый. Сервис. Amazon EFS. Еще раз повторюсь. Предназначен для Linux. Бейзет нагрузок. Она монтируется через NFS протоколы. К вашему EC2 инстанцу. Может увеличиваться до 5 байтов. Размеров. Также оно. Автоматически масштабируется. И в ровном уменьшении. Вы оплачиваете только. За то что используете. Например. Пол месяца вы хранили 100 гигабайт данных. А оставшаяся часть времени вы хранили 10 гигабайт данных. И соответственно. Оплата будет. Ровно столько. Сколько вы использовали. На этом слайде. Вы можете видеть примеры юсткейсов EFS. Это как раз таки все те случаи. В которых нужен общий доступ. В одном месте. Для всех ваших EC2 инстанцев. Также вы видите. Пример команды. Для монтирования EFS. В вашей EC2 машины. Аналогичный с Amazon EFS. Service. Amazon EFS Windows. File Server. Оно поддерживает работу с EC2 инстанциями. С операционной системой Windows. Поддерживает технологию NTFS. Нативно интегрирована с Microsoft Windows. Здесь также хотел бы отметить. Что интегрируется с Microsoft Active Directory. И поддерживает Windows Access Control List. Это значит. Что вы в Amazon EFS X. Можете хранить. Все данные ваших сотрудников. Они будут храниться. В одном месте. И доступны с любой. С любой EC2 машины. На котором стоит Windows. Операционная система. И более того. Вы можете разграничить право доступа. Так что бы сотрудники не могли видеть. Персональные данные других сотрудников. На этом слайде вы также видите другие примеры. Идея в том. Что у вас. Благодаря этому сервису. Будет отдельно стоящий. Обще доступный жесткий диск. На котором вы можете записывать. И совместно использовать. Общие данные. На этом мы заканчиваем шестую секцию. Это последняя секция в рамках. Нашей сегодняшней лекции. Разобрали вопросы хранения. Связанные с сервисом Amazon EC2. На этом мы подошли к концу нашей сегодняшней лекции. Рассмотрели ряд вопросов. Связанных с EC2. Я хотел бы отметить. Что это первая часть. Из двух. Посвященной теме Compute. Сегодня мы с вами. Разобрали следующие темы. Поговорили про AMI. Зачем она нужна. Какие преимущества дает. Далее рассмотрели подробнее. Что такое Instance Type. Какие семейства бывают. Выбрать оптимальный для себя Instance Type. Далее поговорили про User Data. Для чего она нужна. Какие преимущества дает. И в конце рассмотрели все. Моменты связанные с хранением. В рамках использования сервиса Amazon EC2. На этом мы заканчиваем нашу сегодняшнюю лекцию. Спасибо за внимание. Увидимся с вами на следующих наших активностях.
