WEBVTT

00:00:00.000 --> 00:00:05.000
Добрый день, уважаемые студенты!
Рад вас видеть на очередной лекции.

00:00:05.000 --> 00:00:11.000
Эта лекция является первой частью
большой темы, связанной с Compute.

00:00:11.000 --> 00:00:15.000
Это сервисы, связанные
с вычислениями в облаке.

00:00:15.000 --> 00:00:20.000
В первую очередь это Amazon EC2, о чем сегодня
будем с вами говорить. И так, давайте начнем.

00:00:20.000 --> 00:00:26.000
В сегодняшней нашей
лекции мы затронем 6 подтем.

00:00:26.000 --> 00:00:32.000
В первой части мы вспомним про наш
бизнес-кейс в рамках лабораторной работы.

00:00:32.000 --> 00:00:35.000
Посмотрим, что мы будем
выполнять на этой неделе.

00:00:35.000 --> 00:00:41.000
Далее освежим в памяти, что такое сервис Amazon
EC2, несколько дополнительных новых деталей.

00:00:41.000 --> 00:00:48.000
Далее поговорим подробнее про AMI, что это
такое, какие есть преимущества и недостатки.

00:00:48.000 --> 00:00:54.148
Далее на четвертой теме мы подробнее
обсудим, как правильно выбрать тип

00:00:54.172 --> 00:00:59.000
EC2 инстанса в зависимости
от use кейсов, бизнес-задачи.

00:00:59.000 --> 00:01:07.354
В последних двух темах поговорим о
важном функционале, это User Data и какие есть

00:01:07.378 --> 00:01:15.000
IT-ресурсы, связанные с хранением,
которые работают с сервисом Amazon EC2.

00:01:17.000 --> 00:01:23.752
Мы начинаем первую часть. А это именно
связано с нашими лабораторными работами, по ходу

00:01:23.776 --> 00:01:31.000
курса мы будем разрабатывать IT-архитектуру в
облаке AWS, которую вы видите на этом слайде.

00:01:31.000 --> 00:01:37.988
Каждую неделю мы добавляем новый компонент.
На этой неделе мы будем добавлять

00:01:38.012 --> 00:01:45.000
EC2 инстансы в связке с Amazon EFS.
Это все, что связано с технической частью.

00:01:45.000 --> 00:01:53.000
Теперь подробнее поговорим про сам бизнес-кейс,
для чего можно эту техническую задачу решать.

00:01:53.000 --> 00:01:59.146
Мы с вами помним, что в рамках бизнес-кейса
у нас есть пекарня и кафе, владельцами

00:01:59.170 --> 00:02:06.000
которых являются Фрэнк и Марта. Также им в
этом помогают София, дочка, и Нихил, работник.

00:02:06.000 --> 00:02:10.988
После того, как они запустили
статический веб-сайт, количество

00:02:11.012 --> 00:02:16.000
посетителей увеличилось.
Это очень сильно обрадовало владельцев.

00:02:16.000 --> 00:02:27.268
Они начали рассматривать дальнейшие шаги развития
и остановились на том, что большее количество

00:02:27.292 --> 00:02:40.000
посетителей забегает в кафе, чтобы по дороге купить
некоторую продукцию и дальше поехать по своим делам.

00:02:40.000 --> 00:02:44.763
В связи с этим удобно было
бы, в том числе по просьбам

00:02:44.787 --> 00:02:50.000
клиентов, добавить возможность
онлайн заказа на веб-сайт.

00:02:50.000 --> 00:02:53.988
То есть, с технической точки
зрения, это уже не статический,

00:02:54.012 --> 00:02:58.000
а динамический веб-сайт, на
котором можно оставлять заказ.

00:02:58.000 --> 00:03:03.988
Также в рамках этого бизнес-кейса у нас
будет возможность посмотреть, какие заказы были

00:03:04.012 --> 00:03:10.000
сделаны на отдельной странице, чтобы
продемонстрировать динамичность этого веб-сайта.

00:03:10.000 --> 00:03:20.000
Отлично, на этом мы заканчиваем первую
часть и переходим к следующей.

00:03:20.000 --> 00:03:25.000
Мы переходим ко второй части
нашей сегодняшней лекции.

00:03:25.000 --> 00:03:32.000
Перед тем, как начнем, давайте вспомним, какие
есть основные сервисы, связанные с вычислениями.

00:03:32.000 --> 00:03:39.226
Их можно разделить на пять различных групп.
Отличаются они тем, что в самом первом у

00:03:39.250 --> 00:03:47.000
нас высокий контроль над инфраструктурой.
Мы можем как угодно кастомизировать ее части.

00:03:47.000 --> 00:03:55.482
Таким образом идет смещение до serverless,
когда мы большую часть работ по обслуживанию

00:03:55.506 --> 00:04:03.000
IT-инфраструктуры передаем AWS.
Таким образом делаем лишь ту меньшую часть.

00:04:03.000 --> 00:04:11.488
Пройдемся по каждой из групп. Первая - это Virtual
Machines. Когда мы получаем виртуальную машину,

00:04:11.512 --> 00:04:20.000
можно к ней подключаться по SSH, сделать необходимые
настройки, устанавливать любое приложение.

00:04:20.000 --> 00:04:26.064
И в этом случае, если говорить про
сервисы, это Amazon EC2, Elastic Compute

00:04:26.088 --> 00:04:31.741
Cloud, самый основной сервис.
И немного отличающийся, но также

00:04:31.765 --> 00:04:38.122
предоставляющий виртуальные сервера,
это Amazon Lightsail. Следующий уровень,

00:04:38.146 --> 00:04:44.000
у нас уже чуть меньше контроля,
но тем не менее есть, это Containers.

00:04:44.000 --> 00:04:49.000
Самым явным представителем является
Amazon ECS, работает с Docker-контейнерами.

00:04:49.000 --> 00:05:00.000
Третья группа - PaaS, Platform as a Service, сервис,
который ее представляет AWS Elastic Beanstalk.

00:05:00.000 --> 00:05:05.488
Идея в том, что вы пишете код вашего
приложения, готовите некоторый документ,

00:05:05.512 --> 00:05:11.000
который описывает конфигурацию вашей
инфраструктуры и загружаете в этот сервис.

00:05:11.000 --> 00:05:17.056
Далее происходит следующее: AWS
Elastic Beanstalk берет на себя все моменты,

00:05:17.080 --> 00:05:22.650
связанные с поднятием этой
инфраструктуры, поднимает все необходимые

00:05:22.674 --> 00:05:28.325
дополнительные ресурсы и вам уже
в удобном виде можно будет через UI,

00:05:28.349 --> 00:05:34.000
то есть через AWS Management Console
управлять вашей инфраструктурой.

00:05:34.000 --> 00:05:39.988
Четвертая группа является Serverless,
когда мы фактически передаем AWS все,

00:05:40.012 --> 00:05:46.000
что связано с обслуживанием
IT-инфраструктуры, а нам лишь нужно писать код.

00:05:46.000 --> 00:05:51.311
Ярким представителем является
AWS Lambda, вы пишите код, загружаете

00:05:51.335 --> 00:05:56.000
ее и AWS все, что связано с
обслуживанием, берет на себя.

00:05:56.000 --> 00:06:02.000
А вы оплачиваете только за количество
гигабайт в секунд исполнения Lambda функции.

00:06:02.000 --> 00:06:08.803
В случае, когда у вас ваша Lambda
функция не исполняется, вы ни за что не

00:06:08.827 --> 00:06:15.629
оплачиваете. Это и есть преимущество 
Serverless. Я здесь хотел отметить,

00:06:15.653 --> 00:06:21.552
обычно, если у вас постоянные
нагрузки, которые равномерные, то

00:06:21.576 --> 00:06:29.000
рекомендуется отдавать предпочтение
Amazon EC2 либо ближайшие к нему сервисы.

00:06:29.000 --> 00:06:36.988
Если же вы, например, небольшой стартап,
либо у вас та часть вашей IT-инфраструктуры,

00:06:37.012 --> 00:06:45.000
у которой нагрузки непостоянные, они
приходят с различными всплесками, есть периоды,

00:06:45.000 --> 00:06:49.633
когда нагрузка совсем не приходит, в этом
случае рекомендуется смотреть в сторону

00:06:49.657 --> 00:06:54.000
Serverless, так как в момент отсутствия
нагрузки вы ничего не оплачиваете.

00:06:54.000 --> 00:07:02.000
Таким образом, Serverless решения в подобных
нагрузках являются более экономичным решением.

00:07:02.000 --> 00:07:08.042
Еще одним представителем
Serverless является AWS Fargate.

00:07:08.066 --> 00:07:14.000
Это тот сервис, который позволяет
нам управлять нашими контейнерами.

00:07:14.000 --> 00:07:20.000
Это специальное отдельное Serverless
решение, которое помогает с этим справляться.

00:07:20.000 --> 00:07:27.452
Также хотелось бы отметить два
сервиса из другой категории, связанных

00:07:27.476 --> 00:07:34.488
с вычислениями. Это - AWS Outposts.
Идея в том, что вы можете для

00:07:34.512 --> 00:07:41.136
ваших локальных вычислительных
мощностей привязать сервис AWS

00:07:41.160 --> 00:07:49.000
Outposts и управлять вашими
мощностями, как будто бы это AWS мощности.

00:07:49.000 --> 00:07:55.224
Второй пример - это AWS Batch,
сервис, который позволяет нам

00:07:55.248 --> 00:08:02.000
выполнять некоторые задачи
бачами, то есть некоторыми группами.

00:08:06.000 --> 00:08:11.532
На этой лекции мы подробно поговорим про
сервис Amazon Elastic Compute Cloud (Amazon EC2).

00:08:11.556 --> 00:08:17.021
Что же это такое? Это сервис, который
предоставляет нам виртуальные машины,

00:08:17.045 --> 00:08:22.613
то есть сервера. У нас есть возможность,
используя API либо AWS Management Console,

00:08:22.637 --> 00:08:28.000
поднимать эти сервера в течение нескольких
минут абсолютно в любом количестве.

00:08:28.000 --> 00:08:33.631
При необходимости мы можем автоматически
настроить масштабирование как в сторону

00:08:33.655 --> 00:08:40.000
увеличения, так и в сторону уменьшения, в
зависимости от нагрузки на IT-инфраструктуру.

00:08:40.000 --> 00:08:47.488
Более того, благодаря тому, что
сервис облачный, он позволяет нам

00:08:47.512 --> 00:08:55.000
платить только за те вычислительные
мощности, которые нам нужны.

00:08:55.000 --> 00:09:02.488
Приведу пример, если мы говорим, что
нам нужны кратковременные вычислительные

00:09:02.512 --> 00:09:10.000
мощности для некоторых расчетов, и эти
расчеты при запуске, например, 100 машин

00:09:10.000 --> 00:09:15.144
занимают 3 дня, мы можем
действительно запросить 100 серверов

00:09:15.168 --> 00:09:21.000
любой конфигурации, которые
имеются у AWS, и запустить их на 3 дня.

00:09:21.000 --> 00:09:24.904
После того, как мы завершим все
наши расчеты, мы можем вернуть

00:09:24.928 --> 00:09:28.832
обратно эти сервера, и после
окончания месяца нам придет счет на

00:09:28.856 --> 00:09:32.695
оплату именно на эти 3 дня, на
то количество серверов, которое

00:09:32.719 --> 00:09:37.000
работало. Таким образом, мы
платим только за то, что мы используем.

00:09:37.000 --> 00:09:42.482
Пару слов о том, из чего состоит Amazon EC2.
Мы с вами знаем, у нас есть

00:09:42.506 --> 00:09:47.988
AWS Regions, в каждом AWS Regions
несколько availability zone, и в рамках

00:09:48.012 --> 00:09:53.189
availability zone несколько дата-центров.
В дата-центре у нас десятки

00:09:53.213 --> 00:09:59.000
тысяч серверов, и каждый сервер
максимально мощный, насколько это возможно.

00:09:59.000 --> 00:10:05.488
Теперь благодаря использованию
гипервизора, мы фактически имеем возможность

00:10:05.512 --> 00:10:12.000
один мощный физический сервер разделить
на сотни мелких виртуальных серверов.

00:10:12.000 --> 00:10:18.117
Таким образом, в рамках сервиса
Amazon EC2 есть возможность выбрать

00:10:18.141 --> 00:10:25.000
такую конфигурацию, какую мы хотим,
из более чем 700 различных вариантов.

00:10:25.000 --> 00:10:30.001
Когда мы получаем виртуальный
сервер, он в себе содержит

00:10:30.025 --> 00:10:35.482
CPU, то есть саму вычислительную
мощность, RAM, оперативную

00:10:35.506 --> 00:10:40.735
память, и то, что хранит
данные, это либо Instance Store,

00:10:40.759 --> 00:10:45.988
либо Amazon EBS. Amazon EBS - это
отдельный сервис, который

00:10:46.012 --> 00:10:51.287
предоставляет нам постоянное
хранение. Instance Store, это

00:10:51.311 --> 00:10:56.494
временное хранение.
Про особенности и отличия этих двух

00:10:56.518 --> 00:11:01.519
вариантов хранения мы поговорим 
чуть позже. Давайте пару

00:11:01.543 --> 00:11:07.000
слов скажем про use cases
использование сервиса Amazon EC2.

00:11:07.000 --> 00:11:14.000
Обычно этот сервис выбирается, если нам нужен
полный контроль над вычислительными ресурсами.

00:11:14.000 --> 00:11:18.988
При работе с виртуальными серверами
мы можем установить любое приложение,

00:11:19.012 --> 00:11:24.000
сконфигурировать его так, как мы
хотим, и никто нас в этом не ограничивает.

00:11:24.000 --> 00:11:29.549
Мы можем установить любую
операционную систему, и таким образом

00:11:29.573 --> 00:11:35.122
практически любую IT-инфраструктуру,
любое приложение, которое

00:11:35.146 --> 00:11:40.561
хостится на локальном дата-центре,
работающих на физических

00:11:40.585 --> 00:11:46.000
серверах, можно перенести на
сервис Amazon EC2 в облако AWS.

00:11:46.000 --> 00:11:51.988
Также мы начинаем использовать
сервис Amazon EC2 в случае, если

00:11:52.012 --> 00:11:58.000
мы хотим оптимизировать наши
расходы на вычислительные мощности.

00:11:58.000 --> 00:12:04.655
У нас есть возможность купить Reserved
Instances, использовать Spot Instances, а также есть

00:12:04.679 --> 00:12:12.000
Savings Plans, которые дают значительные скидки
за использование виртуальных серверов Amazon EC2.

00:12:16.000 --> 00:12:23.000
При настройке виртуального сервера EC2
нам необходимо принять несколько решений.

00:12:23.000 --> 00:12:28.988
Давайте пройдемся по самым основным шагам.
Самое первое - нужно определиться с AMI,

00:12:29.012 --> 00:12:35.000
либо это AMI, который мы сами приготовим,
либо использовать существующий AMI от AWS.

00:12:35.000 --> 00:12:42.000
Далее, мы определяем какой тип
инстанса мы будем использовать.

00:12:42.000 --> 00:12:46.488
В этом случае мы должны знать
какое количество процессоров,

00:12:46.512 --> 00:12:51.000
какое количество оперативной
памяти и хранения нам нужно.

00:12:51.000 --> 00:12:58.643
Далее, мы можем дополнительно указать
как мы хотим, чтобы наши EC2 инстансы

00:12:58.667 --> 00:13:06.000
располагались в дата-центре.
Про это мы поговорим в следующих слайдах.

00:13:06.000 --> 00:13:11.559
Если наше приложение работает с другими
сервисами, то также необходимо настроить

00:13:11.583 --> 00:13:17.000
роль, которая будет использовать наш
инстанс и обращаться к другим сервисам.

00:13:17.000 --> 00:13:22.000
Необходимо также понять будем ли
мы использовать User Data или нет.

00:13:22.000 --> 00:13:28.965
Часть команд по преднастройке нашего
инстанса мы можем добавить в AMI, часть

00:13:28.989 --> 00:13:35.767
по некоторым причинам расположить в
AMI не получится, поэтому необходимо

00:13:35.791 --> 00:13:42.431
настроить User Data, который будет
исполнять некоторые команды в момент

00:13:42.455 --> 00:13:49.000
поднятия инстанса. Нужно решить также 
вопросы связанные с хранением.

00:13:49.000 --> 00:13:53.843
У нас есть два варианта, как мы
помним, есть возможность использовать

00:13:53.867 --> 00:13:58.710
Instance store, это старая опция или
использовать Amazon EBS, отдельный

00:13:58.734 --> 00:14:04.136
сервис, который предоставляет нам
Persistent Block Storage, то есть постоянное

00:14:04.160 --> 00:14:09.000
блочное хранение, что является
рекомендацией и best practice от AWS.

00:14:09.000 --> 00:14:14.232
Далее необходимо рассмотреть
вопросы, связанные с безопасностью -

00:14:14.256 --> 00:14:19.488
это настройка Security Group,
какой трафик разрешен, какой трафик

00:14:19.512 --> 00:14:24.744
запрещен и самое последнее Key
pair, это ключ, который позволяет

00:14:24.768 --> 00:14:30.000
нам подключаться удаленно через
SSH к нашим виртуальным серверам.

00:14:30.000 --> 00:14:35.988
На этом мы подошли к концу второй
части нашей сегодняшней лекции, освежили в

00:14:36.012 --> 00:14:42.000
памяти что же такое сервис Amazon EC2,
какие возможности он нам предоставляет,

00:14:42.000 --> 00:14:46.116
также остановились на тех
шагах, которые необходимо

00:14:46.140 --> 00:14:51.000
выполнить для успешной
настройки и запуска нашего сервера.

00:14:51.000 --> 00:14:57.273
Первый и самый основной - это выбор
AMI, что такое AMI и какие возможности

00:14:57.297 --> 00:15:04.000
оно нам предоставляет мы рассмотрим в
третьей части нашей сегодняшней лекции.

00:15:04.000 --> 00:15:13.977
Теперь рассмотрим что такое AMI, расшифровывается
как Amazon Machine Image, это некий template

00:15:14.001 --> 00:15:25.000
шаблон, который позволяет нам на базе
этого шаблона поднимать виртуальные сервера EC2.

00:15:25.000 --> 00:15:29.988
Как вы видите на картинке с
использованием одного лишь

00:15:30.012 --> 00:15:35.000
AMI мы можем поднять абсолютно
идентичные EC2 инстансы.

00:15:35.000 --> 00:15:40.940
AMI описывает root volume, то есть
корневой раздел жесткого диска, на котором

00:15:40.964 --> 00:15:48.000
устанавливается операционная система, а также
возможно некоторое программное обеспечение.

00:15:48.000 --> 00:15:55.000
Далее здесь же описывается информация
какие аккаунты могут использовать этот AMI.

00:15:55.000 --> 00:16:06.000
Третий пункт - это описание дополнительных
разделов жесткого диска для целей хранения.

00:16:06.000 --> 00:16:19.000
Какие же преимущества нам предоставляет AMI,
это 3R - Repeatability, Reusability и Recoverability.

00:16:19.000 --> 00:16:25.000
Идея в том, что мы создаем этот шаблон
один раз и используем его много раз.

00:16:25.000 --> 00:16:31.488
Более того исключается человеческий
фактор и какая-то часть конфигурации настроек

00:16:31.512 --> 00:16:38.000
сидит в этом шаблоне и возможность получить
другую конфигурацию просто невозможна.

00:16:38.000 --> 00:16:42.554
Таким образом исключается человеческий
фактор. Другой момент, мы

00:16:42.578 --> 00:16:47.132
можем использовать AMI самым
примитивным образом, это настроить

00:16:47.156 --> 00:16:51.383
некоторый сервер, установить
все необходимое ПО, убедиться,

00:16:51.407 --> 00:16:56.000
что все работает как нам нужно
и от этого сервера создать AMI.

00:16:56.000 --> 00:17:02.000
Это будет кастомный шаблон, который вы
можете использовать для восстановления.

00:17:02.000 --> 00:17:08.089
В случае, если что-то происходит и ваш
сервер падает, то вы оперативно, используя ваш

00:17:08.113 --> 00:17:15.000
кастомный AMI, можете поднять и вернуть в строй.
Это естественно самое простое использование.

00:17:15.000 --> 00:17:21.000
Есть более продвинутые практики использования
AMI, о которых мы поговорим с вами в дальнейшем.

00:17:23.000 --> 00:17:29.000
Давайте теперь остановимся на основных моментах,
которые позволяют выбрать правильный AMI.

00:17:29.000 --> 00:17:35.000
Существует 5 различных пунктов.
Первый и основной - это регион.

00:17:35.000 --> 00:17:42.000
Мы с вами помним, что AMI создается в рамках
определенного AWS региона и используется там же.

00:17:42.000 --> 00:17:45.988
В случае, если вы хотите
использовать этот AMI в другом регионе,

00:17:46.012 --> 00:17:50.000
то вам необходимо ее скопировать.
Это достаточно просто делается.

00:17:50.000 --> 00:18:01.000
В этом случае копия получает отдельный уникальный
ID этого AMI и дальше используется уже независимо.

00:18:02.000 --> 00:18:06.000
Второй пункт - это выбор операционной системы.
Мы не ограничены абсолютно ничем.

00:18:06.000 --> 00:18:12.488
Можем установить любую операционную систему.
Наиболее частыми вариантами

00:18:12.512 --> 00:18:19.000
в этом случае являются либо Windows
OS, либо некоторые вариации Linux OS.

00:18:20.000 --> 00:18:28.681
Далее необходимо определиться с IT ресурсом 
хранения. Это может быть EBS, отдельный сервис,

00:18:28.705 --> 00:18:37.000
который помогает нам обеспечить постоянное
блочное хранение, либо это Instance Store.

00:18:37.000 --> 00:18:44.000
Instance Store - это та память, которая физически
находится возле нашей виртуальной машины.

00:18:44.000 --> 00:18:49.488
Она не рекомендуется, так как это
старый вариант использования и как

00:18:49.512 --> 00:18:55.000
best practice рекомендуется
использовать EBS ввиду его преимуществ.

00:18:55.000 --> 00:18:58.000
На этом мы более подробно
остановимся на следующих слайдах.

00:18:59.000 --> 00:19:08.000
Четвертый пункт - это выбор архитектуры.
Мы можем выбрать либо 32-битную либо 64-битную.

00:19:08.000 --> 00:19:17.000
Более того можем выбрать ARM архитектуру. Также
появилась собственная разработка от AWS Graviton.

00:19:17.000 --> 00:19:24.000
Есть определенные преимущества. Подробно можете
ознакомиться на официальной документации AWS.

00:19:24.000 --> 00:19:33.000
Там проводятся различные сравнения для различных
типов нагрузок, какие архитектуры работают лучше.

00:19:34.000 --> 00:19:40.278
Последний пункт - тип виртуализации.
Есть два варианта, PV Paravirtual и HVM

00:19:40.302 --> 00:19:47.000
Hardware Virtual Machine. В большинстве случаев 
рекомендуется использовать HVM.

00:19:47.000 --> 00:19:55.000
Если же мы говорим про источники откуда мы
можем получить AMI. Первый - это Quick Start.

00:19:55.000 --> 00:20:02.000
Это готовые AMI предоставленные от AWS.
Второй - это так называемые My AMIs.

00:20:02.000 --> 00:20:10.000
Это все те AMI, которые мы сами создаем для
себя, кастомные AMI. Далее, есть AWS Marketplace.

00:20:10.000 --> 00:20:22.000
Это специальное место, в котором вы можете
использовать AMI созданный другими компаниями.

00:20:22.000 --> 00:20:30.000
При этом никаких гарантий AWS не предоставляет.
Поэтому использование здесь на ваш страх и риск.

00:20:30.000 --> 00:20:37.000
В AWS Marketplace вы можете найти как бесплатные
так и платные AMI от популярных вендоров.

00:20:37.000 --> 00:20:43.000
Например, Red Hat и другие.
Четвертый - это Community AMIs.

00:20:43.000 --> 00:20:48.000
Это те AMI, которые были
созданы пользователями AWS.

00:20:48.000 --> 00:20:56.000
Здесь также AWS не несет никакой ответственности
и вы используете эти AMI на свой страх и риск.

00:20:59.000 --> 00:21:06.000
Мы с вами добрались до сравнения двух
типов хранения для Root Volume.

00:21:06.000 --> 00:21:14.000
Это Instance Store либо Amazon EBS. Предоставлена
таблица в пяти различных характеристиках.

00:21:14.000 --> 00:21:23.000
Давайте пройдемся по каждому. Запуск инстанса
с EBS намного быстрее чем запуск с Instance Store.

00:21:23.000 --> 00:21:29.000
Это связано с тем, что Instance Store хранит 
некоторые части данных в Amazon S3.

00:21:29.000 --> 00:21:36.537
И загрузка данных с Amazon S3
занимает некоторое время. Максимальный

00:21:36.561 --> 00:21:45.000
размер Root Volume для EBS - 16 ТБ,
а для Instance Store всего лишь 10 ГБ.

00:21:45.000 --> 00:21:48.000
Но для большинства задач 10
ГБ более чем достаточно.

00:21:49.000 --> 00:21:58.000
Если говорим про возможность останавливать
инстансы, это можем сделать для инстансов с EBS.

00:21:58.000 --> 00:22:05.000
И в момент когда инстанс остановлен,
мы за это не несем никаких затрат.

00:22:06.000 --> 00:22:11.059
Если мы говорим про Instance Store,
остановить такой инстанс невозможно,

00:22:11.083 --> 00:22:16.000
его можно лишь перезагрузить,
либо терминейтнуть, то есть отключить.

00:22:16.000 --> 00:22:20.000
В момент когда вы отключаете все данные,
которые хранились в Instance Store, пропадают.

00:22:22.000 --> 00:22:28.000
Если мы говорим про возможность изменять тип
инстанса, то в случае с EBS это очень легко делается.

00:22:28.000 --> 00:22:32.988
Вы можете в любой момент остановить
инстанс, изменить Instance type, и

00:22:33.012 --> 00:22:38.000
в момент когда вы ее включите
обратно, Instance type уже будет изменен.

00:22:38.000 --> 00:22:44.291
Если мы говорим про Instance Store, то
это сделать невозможно ввиду того, что это

00:22:44.315 --> 00:22:51.000
тот раздел жесткого диска, который находится
физически рядом с виртуальным сервером.

00:22:51.000 --> 00:22:54.731
Поэтому при смене Instance
type вас перекинет уже на

00:22:54.755 --> 00:22:59.000
другой физический сервер,
у которого свой Instance store.

00:22:59.000 --> 00:23:07.246
Таким образом нет возможности изменить 
Instance type. Если мы говорим про вопросы

00:23:07.270 --> 00:23:15.000
оплаты, то в случае с EBS вы несете
затраты по тарифам сервиса Amazon EBS.

00:23:15.000 --> 00:23:21.735
В случае когда мы говорим про затраты
Instance Store, это те затраты, связанные с

00:23:21.759 --> 00:23:29.000
хранением данных в Amazon S3. Зачастую
хранение данных в Amazon S3 дешевле чем в EBS.

00:23:31.000 --> 00:23:36.002
Если мы говорим про гигабайты,
до 100 гигабайтов, то эти затраты они

00:23:36.026 --> 00:23:42.000
минимальные, отличаются не сильно.
Поэтому следует этот момент также учитывать.

00:23:42.000 --> 00:23:46.066
Если у вас очень большое
количество серверов и вам

00:23:46.090 --> 00:23:50.988
достаточно преимуществ и
недостатков Instance Store, то вы

00:23:51.012 --> 00:23:55.577
ее можете использовать и
получать некоторую выгоду ввиду

00:23:55.601 --> 00:24:00.000
того, что данные хранятся
в Amazon S3 и это дешевле.

00:24:00.000 --> 00:24:12.000
Во всех остальных случаях рекомендуется как best
practice использовать Amazon EBS для Root Volume.

00:24:12.000 --> 00:24:24.000
Давайте теперь поговорим немного про Instance
Lifecycle, то есть жизненный цикл EC2 инстанса.

00:24:24.000 --> 00:24:34.000
Все начинается из состояния Pending. Когда мы 
запускаем первый раз наш инстанс из AMI

00:24:34.000 --> 00:24:37.982
поднимается сервер. И в момент когда она 
включается она в состоянии Pending.

00:24:38.006 --> 00:24:41.988
В состояние Pending мы так же можем
попадать из состояния Stopped.

00:24:42.012 --> 00:24:48.676
Это относится только к Amazon EBS-backed 
Instances, которые мы можем останавливать.

00:24:49.000 --> 00:24:52.057
Так вот когда мы остановили
ее, и включаем, в первую очередь

00:24:52.081 --> 00:24:54.000
она переходит из состояния
Stopped в состояние Pending.

00:24:54.000 --> 00:25:00.188
Далее, как только она
включится и будет готова к работе,

00:25:00.212 --> 00:25:02.000
из состояния Pending она
перейдет в состояние Running.

00:25:02.000 --> 00:25:10.000
С этого момента вы можете по SSH подключаться 
к этому EC2 инстансу и работать с ней.

00:25:10.000 --> 00:25:14.000
Включенный инстанс вы
можете перезагружать.

00:25:14.000 --> 00:25:20.000
Она переходит в состояние Rebooting и
возвращается обратно в состояние Running.

00:25:20.000 --> 00:25:24.988
Когда мы делаем reboot, его
публичный IP адрес и физический сервер

00:25:25.012 --> 00:25:30.000
остаются теми же, если физически
не было проблем с этим сервером.

00:25:30.000 --> 00:25:37.000
Для Amazon EBS-backed Instances у
нас есть возможность ее останавливать.

00:25:37.000 --> 00:25:42.000
Как только мы это делаем из состояния
Running она переходит в состояние Stopping.

00:25:42.000 --> 00:25:46.028
После того как она полностью остановится,
она переходит в состояние Stopped.

00:25:46.052 --> 00:25:52.000
Мы также можем отправить наши
Amazon EBS-backed Instances на гибернацию.

00:25:52.000 --> 00:26:02.000
Когда текущее состояние сохраняется в операционной
памяти. Таким образом она быстрее включается.

00:26:02.000 --> 00:26:10.000
В этом случае, она также переходит через Stopped
и Pending и в итоге переходит в состояние Running.

00:26:12.000 --> 00:26:22.000
Отличие от остановки и гибернации в том, что в
случае с гибернацией мы сохраняем физический сервер.

00:26:22.000 --> 00:26:25.605
Он запускается на нем же,
сохраняются его приватные и

00:26:25.629 --> 00:26:30.000
публичные IP адреса и вы
продолжаете с этой машиной работать.

00:26:30.000 --> 00:26:34.000
В том случае если физически
не было проблем с этим сервером.

00:26:34.000 --> 00:26:37.988
В случае, когда мы ее
останавливаем, то физический сервер,

00:26:38.012 --> 00:26:42.000
который хостит нашу виртуальную
машину, может сменится.

00:26:44.000 --> 00:26:52.122
Последнее состояние - это остановка. Если
машина работает и мы ее терминейтим, она переходит

00:26:52.146 --> 00:27:00.000
в состояние Shutting down, т.е. отключается
и в итоге переходит в состояние Terminated.

00:27:00.000 --> 00:27:04.188
Какое-то время в AWS Management
Console у вас будет отображаться

00:27:04.212 --> 00:27:08.000
как Terminated и через
некоторое время совсем пропадет.

00:27:08.000 --> 00:27:15.562
В состоянии Terminated мы можем переходить
из состояния Stopped, то есть если Amazon

00:27:15.586 --> 00:27:24.000
EBS-backed Instance был остановлен, то не переводя
 ее в состояние Running, можем терминейтить.

00:27:24.000 --> 00:27:32.000
Пару слов хотелось бы сказать про создание нового
 AMI. Представим, что мы находимся в регионе A.

00:27:32.000 --> 00:27:40.000
Есть некоторые AMI, будь то созданные нами, будь
то AMI предоставленные от AWS либо любой другой.

00:27:40.000 --> 00:27:44.988
Во время запуска инстанса мы
получаем точную копию AMI, уже

00:27:45.012 --> 00:27:50.000
в запустившемся инстансе
будет у нас Unmodified instance.

00:27:50.000 --> 00:27:56.000
Далее мы можем подключаться к этому
инстансу, проводить некоторые манипуляции.

00:27:58.000 --> 00:28:04.000
Еще один подход к созданию
AMI - это сервис EC2 Image Builder.

00:28:04.000 --> 00:28:13.329
Используя этот сервис, вы можете с легкостью
в понятном UI интерфейсе автоматизировать

00:28:13.353 --> 00:28:24.000
создание, управление, обслуживание, развертывание,
а также работа с контролем версии ваших AMI.

00:28:24.000 --> 00:28:30.000
На этом слайде вы видите image
pipeline сервиса EC2 Image Builder.

00:28:30.000 --> 00:28:34.793
Он состоит из 5 основных шагов.
Самым первым делом вам нужно выбрать source

00:28:34.817 --> 00:28:40.000
image, то есть это операционная система,
на котором будет базироваться ваш AMI.

00:28:40.000 --> 00:28:48.000
Можете выбрать Amazon Linux 2, Windows
операционную систему, Ubuntu и так далее.

00:28:48.000 --> 00:28:52.205
Вторым шагом предлагается
определить список компонентов.

00:28:52.229 --> 00:28:56.817
Вы указываете какие приложения,
какое ПО будет установлено.

00:28:56.841 --> 00:29:03.199
Один из примеров - это установка языка
программирования Python. Третьим шагом

00:29:03.223 --> 00:29:10.000
предлагается запустить так называемые
Hardening Tests для проверки безопасности.

00:29:10.000 --> 00:29:14.000
Есть специальные тесты,
которые предоставляются от AWS.

00:29:14.000 --> 00:29:20.000
Также вы можете добавить и
включить здесь свои собственные тесты.

00:29:20.000 --> 00:29:28.000
После того как AMI проходит проверку на
безопасность мы переходим к четвертому шагу.

00:29:28.000 --> 00:29:36.000
Четвертый шаг - это расписание того
как часто будут создаваться новые AMI.

00:29:36.000 --> 00:29:40.493
Может возникнуть вопрос:
для чего нам необходимо на

00:29:40.517 --> 00:29:46.000
периодической основе создавать AMI?
Ответ достаточно прост.

00:29:46.000 --> 00:29:49.652
Мы с вами знаем что, что
операционные системы, что

00:29:49.676 --> 00:29:54.000
программное обеспечение не
стоят на месте и развиваются.

00:29:54.000 --> 00:29:58.023
И один из видов обновления
это несколько новый функционал,

00:29:58.047 --> 00:30:02.000
а обновление безопасности,
то есть патчи безопасности.

00:30:02.000 --> 00:30:12.223
Так вот это расписание позволяет вам создавать
AMI ровно с таким же составом компонентов

00:30:12.247 --> 00:30:22.000
внутри, но при этом уже будут применены
новые обновления тех или иных приложении.

00:30:22.000 --> 00:30:30.000
Последним шагом вам необходимо определить
на какие регионы будут распространяться ваши AMI.

00:30:30.000 --> 00:30:33.777
Вы можете выбрать один
основной или несколько регионов,

00:30:33.801 --> 00:30:38.000
если вы хостите свою
инфраструктуру в нескольких регионах.

00:30:40.000 --> 00:30:46.000
На этом мы заканчиваем третью
часть нашей сегодняшней лекции.

00:30:46.000 --> 00:30:50.000
Мы разобрали основные
моменты связанные с AMI.

00:30:50.000 --> 00:30:55.772
Мы с вами добрались до четвертой
части нашей сегодняшней лекции

00:30:55.796 --> 00:31:05.568
и поговорим о нюансах выбора типа инстанса EC2.
Что такое тип инстанса? Это - некоторая 

00:31:05.592 --> 00:31:12.784
уникальная конфигурация, которая включает в себя 
характеристики CPU процессорных мощностей.

00:31:13.000 --> 00:31:20.000
Далее, Memory, это операционная память.
Storage - хранилище, наши жесткие диски.

00:31:20.000 --> 00:31:28.000
И Network Performance, то есть
свойства железа по работе с сетью.

00:31:30.000 --> 00:31:38.000
Название типа инстанса состоит из нескольких 
частей. Вы это можете видеть на слайде.

00:31:38.000 --> 00:31:44.000
Самое первое - это семейство типов инстансов.
Про них мы поговорим на следующих слайдах.

00:31:44.000 --> 00:31:50.000
В этом случае это семейство m.
Далее, вторым обязательно идет номер поколения.

00:31:50.000 --> 00:31:56.000
В нашем случае m5 - это значит
инстанс из семейства m 5-го поколения.

00:31:56.000 --> 00:32:06.988
Каждый год Amazon увеличивает это число и
предлагает еще более привлекательные условия:

00:32:07.012 --> 00:32:18.000
обычно за ту же цену предлагается машина более
мощная, либо лучше предыдущего поколения.

00:32:19.000 --> 00:32:30.000
Например, m6 будет точно такой же по
цене, но по характеристикам может быть лучше.

00:32:30.000 --> 00:32:35.988
Третья часть - это некоторые дополнительные
возможности. В этом случае вы видите букву d,

00:32:36.012 --> 00:32:50.000
она означает, что этот тип инстанса для
жесткого диска использует тип SSD вместо HDD.

00:32:52.000 --> 00:32:58.000
После этих основных частей через
точку описывается размер инстанса.

00:32:58.000 --> 00:33:04.000
Есть определенная градация,
начиная от nano, micro и так далее.

00:33:04.000 --> 00:33:12.369
Например xlarge, говорит о том, что этот инстанс
extra large. Также можете видеть характеристики.

00:33:12.393 --> 00:33:22.000
У него 4 ядра процессора. Оперативная
память на 16 ГБ. Один жесткий диск на 150 ГБ.

00:33:22.000 --> 00:33:30.000
И Network performance - мы можем передавать
данные по сети до 10 гигабитов в секунду.

00:33:30.000 --> 00:33:35.028
Увеличение размера увеличивает
соответственно одну или несколько

00:33:35.052 --> 00:33:40.000
характеристик, которые вы
видите в левой части этого слайда.

00:33:42.000 --> 00:33:48.000
На следующих двух слайдах мы разберем 5
самых популярных семейств типов инстансов.

00:33:48.000 --> 00:33:56.000
Для каждого семейства будут даны примеры
использования, а также буквенные обозначения.

00:33:56.000 --> 00:34:02.000
Давайте пройдемся по каждому. Самый популярный,
подходящий для большинства случаев - General Purpose.

00:34:02.000 --> 00:34:06.487
Буквенные обозначения - M, T, A.
Далее идет Compute optimized,

00:34:06.511 --> 00:34:12.998
это те инстансы при всех прочих
равных условиях будет большее

00:34:13.022 --> 00:34:20.509
количество ядер CPU. Буквенные 
обозначения - C, возможно CN, где N

00:34:20.533 --> 00:34:25.020
- дополнительно увеличиваются
характеристики по работе с сетью.

00:34:25.020 --> 00:34:29.049
Далее, у нас есть семейство
Memory optimized, увеличенный объем

00:34:29.073 --> 00:34:36.020
оперативной памяти RAM.
Буквенные обозначения - R, X и HMI.

00:34:36.020 --> 00:34:42.020
После этого есть у нас
семейство - Storage Optimized.

00:34:42.020 --> 00:34:50.020
Они ориентированы по работе с операциями
ввода-вывода по работе с жестким диском.

00:34:50.020 --> 00:34:56.020
Примерами буквенных
обозначений могут быть I, D, H.

00:34:56.020 --> 00:35:02.765
И еще одно также набирающее
популярность семейство - это

00:35:02.789 --> 00:35:11.254
Accelerated Computing, используется
для тренировки моделей нейронных

00:35:11.278 --> 00:35:18.826
сетей, машин обучения, все те
нагрузки, которые требовательны

00:35:18.850 --> 00:35:26.020
к ресурсам видеокарты.
Буквенное обозначение - P, G и F.

00:35:26.020 --> 00:35:33.425
При всех прочих равных характеристиках
в типах инстансов из Accelerated

00:35:33.449 --> 00:35:42.020
Computing будет дополнительно или
увеличенное количество памяти для видеокарты.

00:35:44.020 --> 00:35:51.747
Для того, чтобы принять решение какой тип
инстанса подходит вам необходимо учесть основные

00:35:51.771 --> 00:36:00.020
два пункта. Первое - это знать какие нагрузки
будут на ваше приложение. Второе - знать бюджет.

00:36:00.020 --> 00:36:06.020
Чем мощнее инстанс, очевидно это
будет требовать больших денежных затрат.

00:36:08.020 --> 00:36:13.408
Для того, чтобы определиться с типом
нового инстанса, вы можете на основной

00:36:13.432 --> 00:36:19.020
странице сервиса EC2 перейти на вкладку
Instance Types и посмотреть какие виды есть.

00:36:19.020 --> 00:36:23.031
Есть удобный фильтр, можно
отфильтровать и оставить нужные семейства

00:36:23.055 --> 00:36:30.020
либо наоборот зафиксировать
количество некоторой характеристики.

00:36:30.020 --> 00:36:38.020
Например, количество процессорных ядер,
и посмотреть какие варианты у вас остаются.

00:36:38.020 --> 00:36:43.008
Рекомендуется использовать
последнее поколение так как

00:36:43.032 --> 00:36:48.020
оно самое оптимальное с
точки зрения цены и качества.

00:36:48.020 --> 00:36:55.218
Если вы работаете уже с существующим
инстансом, видите, что есть необходимость обновить

00:36:55.242 --> 00:37:02.020
тип инстанса, рекомендуется посмотреть
в сторону сервиса AWS Compute Optimizer.

00:37:02.020 --> 00:37:09.008
Она использует историю нагрузки на ваши
EC2 инстансы и дает некоторые рекомендации по

00:37:09.032 --> 00:37:16.020
типу инстансов, по их размерам, количеству
и даже конфигурации Auto Scaling группы.

00:37:18.020 --> 00:37:22.871
По результатам анализа он
может выдать вам вердикт, а

00:37:22.895 --> 00:37:28.493
именно по вашим инстансам или
они перегружены, недогружены,

00:37:28.517 --> 00:37:33.969
оптимизированы или с пометкой
None, что говорит о том, что

00:37:33.993 --> 00:37:40.020
информации по нагрузкам
недостаточно для конкретного инстанса.

00:37:40.020 --> 00:37:49.008
На этом мы разобрали основные вопросы,
связанные с выбором типа инстанса EC2. 

00:37:49.032 --> 00:37:58.020
Переходим к следующей части. Мы с вами добрались
до пятой части нашей лекции и поговорим 

00:37:58.020 --> 00:38:02.020
про User Data. Что же такое User Data?
Для чего мы ее можем использовать?

00:38:02.020 --> 00:38:10.020
User Data - это набор некоторых команд, которые
отрабатывают во время инициации вашего инстанса.

00:38:10.020 --> 00:38:20.020
Если говорить про LifeCycle инстанса, то все команды
 внутри User Data отрабатывают в шаге Pending.

00:38:20.020 --> 00:38:24.020
Обратите внимание, что User Data
запускается только при первом запуске.

00:38:24.020 --> 00:38:29.008
Поэтому после того как вы
остановите, еще раз запустите, либо

00:38:29.032 --> 00:38:34.020
перезагрузите ваш инстанс,
UserData отрабатывать не будет.

00:38:34.020 --> 00:38:42.020
Зачем использовать User Data? Обычно там есть
список команд, которые обновляют существующее ПО.

00:38:42.020 --> 00:38:48.020
Это ПО уже включено в AMI.
Но может там быть не самой последней версии.

00:38:48.020 --> 00:38:53.008
Поэтому используя User Data в
момент запуска вы подтягиваете

00:38:53.032 --> 00:38:58.020
самые последние изменения и
дозагружаете обновление вашего ПО.

00:38:58.020 --> 00:39:08.020
Также в User Data попадают те команды, которые
требуют непосредственной привязки к инстансу.

00:39:08.020 --> 00:39:13.077
Например, некоторые команды могут
использовать метаданные вашего инстанса,

00:39:13.101 --> 00:39:18.020
может быть публичные или внутренние
API для дополнительной настройки.

00:39:18.020 --> 00:39:24.020
В этом случае мы не можем добавить ее в AMI.
И она будет находиться в User Data.

00:39:24.020 --> 00:39:28.020
Также в User Data запускаются
команды для старта веб-сервера.

00:39:28.020 --> 00:39:34.020
В этом случае обратите внимание, что
User Data запускается только один раз.

00:39:34.020 --> 00:39:38.002
Поэтому помимо запуска
веб-сервера в первый раз вам также

00:39:38.026 --> 00:39:42.008
необходимо внести некоторые
вправки в автозагрузку, чтобы

00:39:42.032 --> 00:39:46.120
при каждом включении и
выключении вашего инстанса стартовал

00:39:46.144 --> 00:39:50.020
веб-сервер, либо любое другое
программное обеспечение.

00:39:50.020 --> 00:40:03.732
Если же говорить в сравнении, куда передавать
те или иные команды, в AMI или UserData так

00:40:03.756 --> 00:40:10.020
как они достаточно заменяемы, отвечу следующим
образом. Всегда должен быть некоторый баланс.

00:40:10.020 --> 00:40:18.020
Все те команды, которые вы можете вложить в AMI,
желательно положить туда, это первая часть команд.

00:40:18.020 --> 00:40:24.020
Вторая часть команд по обновлению и все нюансы,
которые говорил ранее следует добавить в User Data.

00:40:24.020 --> 00:40:28.020
Так как большой объем команд в User
Data замедлит старт вашего инстанса.

00:40:28.020 --> 00:40:32.502
Когда у вас будет баланс, часть
команд будет на стороне AMI,

00:40:32.526 --> 00:40:37.008
и часть команд на стороне User
Data, то с одной стороны у вас

00:40:37.032 --> 00:40:41.778
будет актуальный AMI, с другой
стороны инстанс будет запускаться

00:40:41.802 --> 00:40:46.020
намного быстрее, потому что
User Data не такая большая.

00:40:46.020 --> 00:40:52.020
В итоге вы получаете инстанс с обновленным
ПО и полностью готовым к работе.

00:40:52.020 --> 00:40:57.774
Раз уж мы заговорили об информации
про наш инстанс, так называемый instance

00:40:57.798 --> 00:41:04.020
metadata, давайте остановимся на том,
где и как эту информацию можно получить.

00:41:04.020 --> 00:41:16.020
На уровне каждого инстанса есть некоторый URL.
Это 169.254.169.254/latest/meta-data/.

00:41:16.020 --> 00:41:22.020
По этому адресу находится основная информация,
связанная непосредственно к этому инстансу.

00:41:22.020 --> 00:41:28.020
Этот URL доступен только на
уровне конкретного инстанса.

00:41:28.020 --> 00:41:31.651
Также если вместо metadata
написать User Data, то вы

00:41:31.675 --> 00:41:36.020
получите список тех команд,
которые есть в вашей User Data.

00:41:36.020 --> 00:41:40.020
Также можете ее использовать
для дополнительной настройки.

00:41:44.020 --> 00:41:54.020
Когда я говорил про баланс команд на стороне AMI
и User Data естественно нет универсального ответа.

00:41:54.020 --> 00:41:58.020
Всегда надо смотреть на
конкретную бизнес-задачу.

00:41:58.020 --> 00:42:04.008
Давайте рассмотрим 4 различных варианта
того, где могут находиться ваши команды в AMI

00:42:04.032 --> 00:42:10.020
и UserData, какие это преимущества дает
и какие у каждого подхода есть недостатки.

00:42:10.020 --> 00:42:17.008
Если вы обратите внимание, что на
самом верху есть стрелка Flexibility,

00:42:17.032 --> 00:42:23.020
то есть каждый следующий вариант,
слева направо, дает большую гибкость.

00:42:23.020 --> 00:42:31.587
Если посмотреть на стрелку внизу
Simplicity, противоположное, и мы справа

00:42:31.611 --> 00:42:40.020
налево упрощаем работу с нашими EC2
инстансами, но при этом теряем в гибкости.

00:42:40.020 --> 00:42:44.020
Давайте подробнее посмотрим
на каждый из конфигураций.

00:42:44.020 --> 00:42:49.079
Самый первый - это Fully baked
AMI, в котором все абсолютно команды

00:42:49.103 --> 00:42:53.777
необходимые для запуска,
начиная от операционной системы, ее

00:42:53.801 --> 00:42:59.213
дополнительные настройки, подготовки
среды для приложения и установки,

00:42:59.237 --> 00:43:04.020
соответственно, самого приложения
происходит на стороне AMI.

00:43:04.020 --> 00:43:16.020
В этом случае ваш инстанс запускается максимально
быстро и User data может быть совсем пустой.

00:43:16.020 --> 00:43:24.020
Это связано с тем, что AMI вы готовите асинхронно.
Она уже предварительно приготовлена, все готово.

00:43:24.020 --> 00:43:31.020
В момент необходимости запуска вы включаете
только сервер и все остальное у вас готово.

00:43:31.020 --> 00:43:36.598
Плюсом может быть то, что вы
очень быстро запускаете ваши

00:43:36.622 --> 00:43:40.020
сервера и они в самое максимально
быстрое время готовы к работе.

00:43:40.020 --> 00:43:46.008
Недостатком может являться
то, что любое приложение для

00:43:46.032 --> 00:43:52.020
корректной работы требует
другое ПО и возможно не одно.

00:43:52.020 --> 00:43:57.453
Каждое из этих ПО независимо
друг от друга развивается,

00:43:57.477 --> 00:44:04.020
выходят патчи безопасности,
обновление функционала и так далее.

00:44:04.020 --> 00:44:12.020
Поэтому с этим подходом рекомендуется
чаще готовить или обновлять ваши AMI.

00:44:12.020 --> 00:44:21.008
Следующие два пункта увеличивают гибкость, но при
этом немного усложняет работу с вашим инстансом в том

00:44:21.032 --> 00:44:30.020
плане, что есть отдельный набор команд на стороне
AMI и отдельный набор команд на стороне User Data.

00:44:30.020 --> 00:44:34.020
В первом случае у вас приложение устанавливается
только в момент запуска приложения.

00:44:34.020 --> 00:44:42.173
Это может быть необходимо
так как внутри AMI не получится

00:44:42.197 --> 00:44:46.020
добавить те команды по
настройке вашего приложения.

00:44:46.020 --> 00:44:52.020
Это тот случай когда вы используете
некоторые данные о конкретном инстансе.

00:44:52.020 --> 00:44:56.266
Все остальное находится внутри AMI.
Более гибкий подход - это

00:44:56.290 --> 00:45:00.537
когда вы настраиваете операционную
систему, устанавливаете все

00:45:00.561 --> 00:45:05.054
необходимые ПО для корректного
функционирования этой операционной

00:45:05.078 --> 00:45:09.008
системы внутри AMI, а вторую
часть, а именно подготовку

00:45:09.032 --> 00:45:13.296
среды для вашего приложения и
непосредственно установка вашего

00:45:13.320 --> 00:45:17.514
приложения проделываете внутри 
User Data. В этом случае она

00:45:17.538 --> 00:45:21.908
запускаться будет еще дольше,
но при этом вы получаете гибкость

00:45:21.932 --> 00:45:26.020
и любые команды могут быть
изменены на стороне User Data.

00:45:26.020 --> 00:45:38.020
Новый AMI для этого выпускать не нужно. Последнее
- это JeOS, расшифруется как Just Enough OS.

00:45:38.020 --> 00:45:44.020
Простыми словами это
только операционная система.

00:45:44.020 --> 00:45:51.503
Все остальное, настройка операционной системы,
патчи безопасности, настройка мониторинга и

00:45:51.527 --> 00:46:00.020
логирования и все что выше, подготовка среды для
приложения и само приложение на стороне User Data.

00:46:00.020 --> 00:46:05.696
В этом случае вам достаточно выбрать
любой подходящий для вас AMI, который

00:46:05.720 --> 00:46:12.020
предоставляет AWS и все необходимые
настройки производить на стороне User Data.

00:46:12.020 --> 00:46:18.042
В этом случае ничего связанного с AMI делать
не нужно. Достаточно использовать уже готовые,

00:46:18.066 --> 00:46:24.020
но при этом нужно будет менеджить User Data
и понимать, что у вас максимальная гибкость.

00:46:24.020 --> 00:46:28.073
Вы можете менять очень часто
ваши User Data, не меняя AMI,

00:46:28.097 --> 00:46:32.150
но при этом понимаете, что
запуск вашего инстанса требует

00:46:32.174 --> 00:46:36.085
намного больше времени
ввиду того, что она фактически

00:46:36.109 --> 00:46:40.020
полноценно будет настраиваться
только в момент запуска.

00:46:40.020 --> 00:46:50.020
На этом мы разобрали все, что
связано с User Data в EC2 инстансе.

00:46:50.020 --> 00:46:54.020
На этом мы заканчиваем
пятую часть и двигаемся дальше.

00:46:54.020 --> 00:46:58.008
Мы с вами добрались до шестой части
нашей сегодняшней лекции и затронем

00:46:58.032 --> 00:47:04.020
все аспекты, связанные с хранением
при работе с сервисом Amazon EC2.

00:47:04.020 --> 00:47:12.020
Как мы знаем у нас есть два
раздела, это Root volume и Data volume.

00:47:12.020 --> 00:47:18.020
В Root volume мы устанавливаем нашу
операционную систему, все приложения.

00:47:18.020 --> 00:47:28.020
А в Data volume храним данные. Root volume может
быть Instance store либо поддерживаться Amazon EBS.

00:47:28.020 --> 00:47:34.020
Если мы говорим про Data volume, то
они опциональные, их может и не быть.

00:47:34.020 --> 00:47:40.732
Если мы говорим про данные, которые
доступны только для текущего инстанса,

00:47:40.756 --> 00:47:48.020
то мы можем использовать наш Instance
store, хоть он и небольшой и ограничен.

00:47:48.020 --> 00:47:54.020
Также мы можем добавить дополнительные
независимые от Root volume, EBS жесткие диски.

00:47:54.020 --> 00:48:02.008
Если же мы говорим, что нам нужно
хранилище, общедоступное среди

00:48:02.032 --> 00:48:08.020
всех EC2 инстансов, то нам на
помощь приходят еще два сервиса.

00:48:08.020 --> 00:48:12.020
Первый - это Amazon EFS
для Linux based серверов.

00:48:12.020 --> 00:48:18.020
И второй - это Amazon
FSx For Windows File Server.

00:48:18.020 --> 00:48:26.020
Это аналогичный сервис только для
машин с операционной системой Windows.

00:48:26.020 --> 00:48:32.020
Давайте остановимся на каждом из вариантов
более подробно. Самый первый - это Instance store.

00:48:32.020 --> 00:48:36.020
Instance store - это
непостоянное блочное хранилище.

00:48:36.020 --> 00:48:40.020
На него можно установить
операционную систему.

00:48:40.020 --> 00:48:46.020
У нее есть некоторые ограничения, которые мы
рассмотрели ранее, в том числе преимущества.

00:48:46.020 --> 00:48:52.020
Самый основной момент, который связан с Instance
store, это то, что его невозможно остановить.

00:48:52.020 --> 00:48:59.684
Если же у вас есть лишние инстансы
и вам необходимо их отключить, то при

00:48:59.708 --> 00:49:08.020
отключении все те данные, которые
хранятся в Instance store, будут потеряны.

00:49:08.020 --> 00:49:16.008
Поэтому в Instance store данные хранить можно, но
это такие кеш данные либо данные, которые можно

00:49:16.032 --> 00:49:24.020
с легкостью восстановить и не страшно потерять.
В этом случае можно использовать Instance store.

00:49:24.020 --> 00:49:30.020
Следующий - это Amazon EBS. Это жесткие диски, 
которые подключены через интернет.

00:49:30.020 --> 00:49:38.020
Они не относятся физически к нашему виртуальному
 серверу. И есть у нее ряд преимуществ.

00:49:38.020 --> 00:49:44.311
Best practice - это использовать
EBS, так как преимуществ намного

00:49:44.335 --> 00:49:50.626
больше, но по оплате выходит
немного дороже ввиду того, что жесткие

00:49:50.650 --> 00:49:56.981
диски обычно устанавливаются не
более 100 гигабайтов, то разница в

00:49:57.005 --> 00:50:04.020
цене не ощутима и те преимущества,
которые вы получаете намного больше.

00:50:06.020 --> 00:50:14.008
Основные преимущества, которые вы получаете при
работе с Amazon EBS, можно отсоединить ваш жесткий

00:50:14.032 --> 00:50:22.020
диск от инстанса и подключить к другому инстансу и
дальше продолжать работать с этим жестким диском.

00:50:22.020 --> 00:50:31.020
Также это то, что вы можете использовать
различные типы жестких дисков - это SSD либо HDD.

00:50:31.020 --> 00:50:40.020
Другой момент, то что вы можете создавать
снапшоты, которые будут храниться в Amazon S3.

00:50:42.020 --> 00:50:48.020
Давайте рассмотрим какие типы
volume-ов сервиса Amazon EBS нам доступны.

00:50:48.020 --> 00:50:56.020
Есть 4 вида, подразделяются на 2 группы -
SSD-backed Volumes и HDD-backed Volumes.

00:50:58.020 --> 00:51:04.053
Если мы говорим про Root
Volume, это тот volume на который

00:51:04.077 --> 00:51:12.020
устанавливается операционная система,
то она должна быть только типа SSD.

00:51:12.020 --> 00:51:19.568
Таким образом у нас только два варианта для
Root Volume - General Purpose SSD (gp2) либо

00:51:19.592 --> 00:51:32.020
Provisioned IOPS SSD (io1). Для большинства
случаев типа General Purpose SSD будет достаточно.

00:51:32.020 --> 00:51:37.819
Она достаточно быстро работает.
В случае, если вам помимо скорости также важна

00:51:37.843 --> 00:51:44.020
высокая пропускная способность, то нужно
смотреть в сторону Provisioned IOPS SSD.

00:51:44.020 --> 00:51:50.020
Оно дороже, но при этом вы получаете
скорость и пропускную способность.

00:51:50.020 --> 00:51:57.008
Если мы говорим про вторую группу - это
HDD-backed Volumes, они не подходят как для Root

00:51:57.032 --> 00:52:04.020
Volume, но при этом вы можете использовать
эти volume как Data Volume для хранения данных.

00:52:04.020 --> 00:52:13.020
Выделяют два вида, первый - это Throughput
Optimized HDD (st1). Второй - это Cold HDD (sc1).

00:52:13.020 --> 00:52:23.379
Первый - это стандартные HDD диски.
В случае если у вас нагрузки, требующие высокую

00:52:23.403 --> 00:52:32.020
пропускную способность и при этом данные часто
запрашиваются, в этом случае st1 это ваш выбор.

00:52:32.020 --> 00:52:38.685
В случае если вы хотите сэкономить
на ваших жестких дисках, при

00:52:38.709 --> 00:52:46.020
этом данные не часто запрашиваются,
то Cold HDD идеальный вариант.

00:52:46.020 --> 00:52:52.043
Есть еще один функционал, который помогает
нам увеличить I/O Performance, то есть Input

00:52:52.067 --> 00:52:58.020
Output операции, связанные с жесткими
дисками - это Amazon EBS-optimized Instances.

00:52:58.020 --> 00:53:04.924
Это такой функционал, который
поддерживается не всеми EC2 инстансами

00:53:04.948 --> 00:53:11.440
и в случае если оно поддерживается,
то между вашим виртуальным

00:53:11.464 --> 00:53:18.202
сервером EC2 инстанса и отдельно
стоящим EBS Volume настраивается

00:53:18.226 --> 00:53:26.020
выделенное сетевое подключение.
Это увеличивает скорость передачи данных.

00:53:30.020 --> 00:53:34.008
Давайте теперь рассмотрим
оставшиеся два сервиса, которые нам

00:53:34.032 --> 00:53:38.020
помогают предоставить общий
доступ для наших EC2 инстансов.

00:53:38.020 --> 00:53:43.132
В этом случае EBS нам не поможет,
так как в один момент времени

00:53:43.156 --> 00:53:48.020
EBS Volume может быть
подключен только к одному инстансу.

00:53:48.020 --> 00:53:54.020
Да, можно переподключить, но для этого
нужно отключить от предыдущего инстанса.

00:53:54.020 --> 00:54:00.020
Если мы говорим про S3, оно
доступно для всех инстансов.

00:54:00.020 --> 00:54:06.008
Можно произвести соответствующие
настройки, но оно не идеальное так как это не

00:54:06.032 --> 00:54:12.020
блочное, а объектное хранилище, в
зависимости от типа нагрузок может не подойти.

00:54:12.020 --> 00:54:17.718
В случае если вам нужен именно
жесткий диск, блочное хранилище, которое

00:54:17.742 --> 00:54:23.440
доступно для всех ваших для всех
ваших EC2 инстансов, то рекомендуется

00:54:23.464 --> 00:54:29.813
использовать Amazon EFS для Linux
операционных систем и Amazon FSx for Windows

00:54:29.837 --> 00:54:36.020
File Server, это специально для EC2
машин с операционной системой Windows.

00:54:36.020 --> 00:54:42.020
Давайте отдельно
рассмотрим каждый сервис.

00:54:42.020 --> 00:54:46.020
Amazon EFS, еще раз повторюсь,
предназначен для Linux-based нагрузок.

00:54:46.020 --> 00:54:56.020
Она монтируется через NFS протоколы к EC2 инстансу.
Может увеличиваться в размере до петабайтов.

00:54:56.020 --> 00:55:03.008
Также оно автоматически
масштабируется как в сторону увеличения так

00:55:03.032 --> 00:55:06.020
и в сторону уменьшении, вы
оплачиваете только за то, что используете.

00:55:06.020 --> 00:55:12.008
Например, пол месяца вы хранили 100 гигабайт
данных, а остальную часть времени вы хранили

00:55:12.032 --> 00:55:22.020
10 гигабайт данных. И соответственно, оплата
будет ровно столько сколько вы использовали.

00:55:24.020 --> 00:55:31.008
На этом слайде вы можете видеть примеры
EFS use cases. Это как раз таки все те

00:55:31.032 --> 00:55:38.020
случаи, когда нам нужен общий доступ в
одном месте для всех ваших EC2 инстансов.

00:55:38.020 --> 00:55:46.020
Также вы видите пример команды для
монтирования EFS в ваши EC2 машины.

00:55:46.020 --> 00:55:54.020
Аналогичный с Amazon EFS сервис
- Amazon FSx for Windows File Server.

00:55:54.020 --> 00:56:00.008
Он поддерживает работу с EC2 инстансами
с операционной системой Windows.

00:56:00.032 --> 00:56:04.020
Поддерживает технологию NTFS.
Нативно интегрирована с Microsoft Windows.

00:56:06.020 --> 00:56:13.735
Также интегрируется с Microsoft Active
Directory и поддерживает Windows Access Control

00:56:13.759 --> 00:56:22.020
Lists (ACLs). Это значит, что вы в Amazon FSx
можете хранить все данные ваших сотрудников.

00:56:22.020 --> 00:56:28.008
Они будут храниться в одном
месте и доступны с любой EC2

00:56:28.032 --> 00:56:34.020
машины, на котором стоит
Windows операционная система.

00:56:34.020 --> 00:56:37.758
И более того, вы можете
разграничить право доступа так, чтобы

00:56:37.782 --> 00:56:42.020
сотрудники не могли видеть
персональные данные других сотрудников.

00:56:44.020 --> 00:56:50.121
На этом слайде вы также видите 
другие примеры. Идея в том, что у

00:56:50.145 --> 00:56:56.245
вас, благодаря этому сервису будет
отдельно стоящий общедоступный

00:56:56.269 --> 00:57:01.696
жесткий диск, на котором вы
можете записывать и совместно

00:57:01.720 --> 00:57:08.020
использовать общие данные.
На этом мы заканчиваем шестую секцию.

00:57:08.020 --> 00:57:12.020
Это последняя секция в рамках
нашей сегодняшней лекции.

00:57:12.020 --> 00:57:16.020
Разобрали вопросы хранения,
связанные с сервисом Amazon EC2.

00:57:16.020 --> 00:57:24.020
На этом мы подошли к концу сегодняшней лекции.
Рассмотрели ряд вопросов, связанных с EC2.

00:57:24.020 --> 00:57:34.020
Я хотел бы отметить, что это первая
часть из двух, посвященной теме Compute.

00:57:34.020 --> 00:57:41.020
Сегодня мы разобрали следующие темы. Поговорили 
про AMI, зачем она нужна, какие преимущества дает.

00:57:41.020 --> 00:57:47.789
Далее, рассмотрели подробнее, что
такое Instance Type, какие семейства

00:57:47.813 --> 00:57:52.020
бывают, чем они отличаются, как
выбрать оптимальный для себя Instance Type.

00:57:52.020 --> 00:57:58.020
Далее поговорили про User Data, для
чего она нужна, какие преимущества дает.

00:57:58.020 --> 00:58:05.218
И в конце рассмотрели все моменты, связанные
с хранением в рамках использования сервиса

00:58:05.242 --> 00:58:12.020
Amazon EC2. На этом мы заканчиваем нашу
сегодняшнюю лекцию. Спасибо за внимание.

00:58:12.020 --> 00:58:14.020
Увидимся с вами 
на следующих наших активностях.
