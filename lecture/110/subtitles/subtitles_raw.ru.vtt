WEBVTT

00:00:00.000 --> 00:00:03.120
Добрый день, уважаемые студенты!

00:00:03.120 --> 00:00:05.400
Я рад вас всех видеть на очередной лекции.

00:00:05.400 --> 00:00:08.720
Мы с вами начинаем серию лекций, посвящённые нейтворкингу.

00:00:08.720 --> 00:00:15.260
На этой неделе мы поговорим про настройку сети в облаке

00:00:15.260 --> 00:00:16.760
AWS.

00:00:16.760 --> 00:00:19.580
На второй неделе у нас не будет лекций, но будет

00:00:19.580 --> 00:00:21.160
объёмная лабораторная работа.

00:00:21.160 --> 00:00:24.160
Она будет включать все те знания, которые вы получили

00:00:24.160 --> 00:00:29.200
на предыдущих лекциях, а также материалы, пройденные

00:00:29.200 --> 00:00:31.120
на последней лекции.

00:00:31.120 --> 00:00:35.720
На третьей неделе мы рассмотрим сервисы и варианты подключения

00:00:35.720 --> 00:00:39.680
локальной сети к сети в облаке AWS.

00:00:39.680 --> 00:00:40.680
Итак, давайте начнём.

00:00:40.680 --> 00:00:45.600
Сегодняшняя лекция состоит из четырёх частей.

00:00:45.600 --> 00:00:50.120
В первой части мы рассмотрим следующие улучшения нашей

00:00:50.120 --> 00:00:53.080
архитектуры в облаке, которые мы будем проделывать в

00:00:53.080 --> 00:00:55.320
рамках лабораторных работ.

00:00:55.320 --> 00:00:57.760
Во второй части подробнее познакомимся с сервисом

00:00:57.760 --> 00:01:01.320
VPC и её возможностями.

00:01:01.320 --> 00:01:05.480
В третьей части мы рассмотрим нюансы, связанные с VPC и её

00:01:05.480 --> 00:01:10.600
компонентами, которые дают нам возможность настроить

00:01:10.600 --> 00:01:12.720
подключение к интернету.

00:01:12.720 --> 00:01:17.520
И в последней части, четвёртой, мы рассмотрим нюансы, связанные

00:01:17.520 --> 00:01:22.400
с обеспечением безопасности нашего VPC.

00:01:22.400 --> 00:01:32.000
В первой части нашей лекции мы обсудим изменение инфраструктуры

00:01:32.000 --> 00:01:35.440
в облаке AWS в рамках лабораторных работ.

00:01:35.440 --> 00:01:39.640
Вы видите, что у нас появились новые компоненты, это VPC,

00:01:39.640 --> 00:01:42.280
интернет-гейтвей, NAT-гейтвей и три сабнета.

00:01:42.280 --> 00:01:46.760
Это всё работает согласованно и, во-первых, даёт большую

00:01:46.760 --> 00:01:51.480
безопасность, а во-вторых, у нас также все те ресурсы,

00:01:51.480 --> 00:01:53.920
к которым нужен выход в интернет, они также остались

00:01:53.920 --> 00:01:54.920
с этим доступом.

00:01:54.920 --> 00:02:03.160
Если говорить про бизнес-кейс, то работа в кафе продвигается

00:02:03.160 --> 00:02:06.120
хорошо, клиентов становится больше.

00:02:06.120 --> 00:02:10.080
София и Нихил освободились от своих основных работ

00:02:10.080 --> 00:02:15.640
и начали обсуждение по дальнейшему развитию IT-инфраструктуры

00:02:15.640 --> 00:02:18.160
в облаке AWS.

00:02:18.160 --> 00:02:22.840
Они посоветовались с постоянными посетителями кафе, которые

00:02:22.840 --> 00:02:26.480
работают с AWS, в нашем случае это Оливия, она является

00:02:26.480 --> 00:02:32.880
с Solution Architect и, выслушав текущее состояние инфраструктуры

00:02:32.880 --> 00:02:36.440
наших главных героев, она подсказала, что следует

00:02:36.440 --> 00:02:40.320
обратить особое внимание правильной настройки VPC,

00:02:40.320 --> 00:02:45.520
то есть сети и всех её компонентов, чтобы обезопасить инфраструктуру.

00:02:45.520 --> 00:02:49.800
Также она посоветовала для удаленного подключения

00:02:49.800 --> 00:02:53.480
и возможности проводить некоторые работы настроить

00:02:53.480 --> 00:02:54.480
Bastion Host.

00:02:54.480 --> 00:02:58.240
Что такое Bastion Host и другие компоненты мы с вами узнаем

00:02:58.240 --> 00:03:00.080
в нашей сегодняшней лекции.

00:03:00.080 --> 00:03:03.680
И мы сейчас переходим ко второй части нашей сегодняшней

00:03:03.680 --> 00:03:08.120
лекции.

00:03:08.120 --> 00:03:11.880
Во второй части нашей сегодняшней лекции мы подробнее ознакомимся

00:03:11.880 --> 00:03:13.880
с сервисом VPC и её компонентами.

00:03:13.880 --> 00:03:16.600
Что такое VPC?

00:03:16.600 --> 00:03:21.160
VPC расшифровывается как Virtual Private Cloud и оно нам предоставляет

00:03:21.160 --> 00:03:26.720
логически изолированную часть в облаке AWS.

00:03:26.720 --> 00:03:30.280
Оно максимально приближено к локальной сети, которую

00:03:30.280 --> 00:03:35.400
мы с вами настраивали много раз дома, на работе и AWS

00:03:35.400 --> 00:03:40.120
дает возможность удаленно настроить это в облаке AWS.

00:03:40.120 --> 00:03:46.760
У нас есть возможность выбирать CIDR блоки, то есть

00:03:46.760 --> 00:03:50.960
какой диапазон IP адресов мы хотим использовать для

00:03:50.960 --> 00:03:52.520
нашей локальной сети.

00:03:52.520 --> 00:03:55.240
Мы также можем создавать любое количество сабнетов

00:03:55.240 --> 00:03:59.360
в рамках размера нашего VPC.

00:03:59.360 --> 00:04:02.320
Внутри VPC мы можем настроить необходимые правила для

00:04:02.320 --> 00:04:08.680
того чтобы трафик мог перемещаться в таком или ином виде.

00:04:08.680 --> 00:04:12.440
Есть также все необходимые компоненты для обеспечения

00:04:12.440 --> 00:04:16.760
безопасности на уровне сабнета либо на уровне

00:04:16.760 --> 00:04:18.240
отдельно взятых ресурсов.

00:04:18.240 --> 00:04:27.240
Отличие при работе с AWS от локальных работ это то,

00:04:27.240 --> 00:04:29.720
что вам нет необходимости работать с железом.

00:04:29.720 --> 00:04:34.360
То есть вы не будете подключать кабель к сети, как-то их

00:04:34.360 --> 00:04:35.360
готовить и так далее.

00:04:35.360 --> 00:04:39.480
Все эти работы они уже проведены на стороне Tata центра AWS,

00:04:39.480 --> 00:04:42.760
уже все готово к использованию и вы удаленно, достаточно

00:04:42.760 --> 00:04:48.520
быстро можете настроить локальную сеть в облаке

00:04:48.520 --> 00:04:50.400
в зависимости от вашей бизнес задачи.

00:04:50.400 --> 00:04:58.840
VPC создается в рамках определенного AWS региона.

00:04:58.840 --> 00:05:02.520
То есть вы не можете создать VPC, который будет работать

00:05:02.520 --> 00:05:04.520
в нескольких AWS регионах.

00:05:04.520 --> 00:05:09.560
Если же вам нужно cross-region взаимодействия, то в каждом

00:05:09.560 --> 00:05:13.880
регионе создается отдельная VPC и эти VPC вы соединяете

00:05:13.880 --> 00:05:14.880
между собой.

00:05:14.880 --> 00:05:17.860
Как это делать мы с вами пройдем на следующих наших

00:05:17.860 --> 00:05:18.860
занятиях.

00:05:18.860 --> 00:05:24.480
Если говорить про availability зоны, то для VPC доступны все

00:05:24.480 --> 00:05:28.880
availability зоны в рамках региона, на котором оно было создано.

00:05:28.880 --> 00:05:33.880
Вы указываете все либо некоторые из availability зон, с которыми

00:05:33.880 --> 00:05:39.320
вы будете работать и соответственно ресурсы в рамках этого

00:05:39.320 --> 00:05:45.600
VPC могут быть созданы в той или иной availability зоне.

00:05:45.600 --> 00:05:48.640
Зачастую во время создания VPC указывают как минимум

00:05:48.640 --> 00:05:53.280
две availability зоны, что дает возможность построить highly

00:05:53.280 --> 00:05:57.160
available инфраструктуру в облаке AWS.

00:05:57.160 --> 00:06:01.360
Таким образом вы заранее обезопасите себя от возможных

00:06:01.360 --> 00:06:03.840
проблем в рамках availability зоны.

00:06:03.840 --> 00:06:07.160
В случае если что-то произойдет с одной availability зоной,

00:06:07.160 --> 00:06:11.240
другая часть вашей инфраструктуры продолжит работать во

00:06:11.240 --> 00:06:19.560
второй availability зоне.

00:06:19.560 --> 00:06:24.000
Во время создания VPC обязательно необходимо указать cidre

00:06:24.000 --> 00:06:25.000
блок.

00:06:25.000 --> 00:06:30.440
Cidre блок это диапазон IP адресов доступных для ресурсов

00:06:30.440 --> 00:06:32.880
создаваемых внутри VPC.

00:06:32.880 --> 00:06:36.600
� ешифруется как classless inter domain routing.

00:06:36.600 --> 00:06:38.920
Cidre блок обозначается следующим форматом.

00:06:38.920 --> 00:06:42.560
Указывается начальный IP адрес и через слеш указывается

00:06:42.560 --> 00:06:47.960
размер cidre блока.

00:06:47.960 --> 00:06:51.520
� азмер cidre блока может быть от 0 до 32.

00:06:51.520 --> 00:06:57.280
0 это самый большой теоретически возможный cidre блок, а 32 это

00:06:57.280 --> 00:07:00.520
самый маленький, который состоит из одного IP адреса.

00:07:00.520 --> 00:07:03.280
Если вы посмотрите примеры, первая строчка это все

00:07:03.280 --> 00:07:10.440
нули и IP адрес, а также размерность cidre блока 0.

00:07:10.440 --> 00:07:16.260
Оно является фактически всем интернетом и затрагивает

00:07:16.260 --> 00:07:20.440
все возможные, теоретически возможные IPv4 адреса.

00:07:20.440 --> 00:07:25.760
Если мы говорим про cidre блок размера 32, то здесь у нас

00:07:25.760 --> 00:07:29.800
один единственный IP адрес и тот адрес, который начальный

00:07:29.800 --> 00:07:32.400
и является адресом внутри этого cidre блока.

00:07:32.400 --> 00:07:39.160
В нашем случае это 10.22.33.44.

00:07:39.160 --> 00:07:40.960
Давайте рассмотрим другой пример.

00:07:40.960 --> 00:07:46.640
Достаточно часто кейс это cidre блоки размера 24.

00:07:46.640 --> 00:07:54.240
Для этого cidre блока доступны 256 последовательных IPv4

00:07:54.240 --> 00:07:55.240
адресов.

00:07:55.240 --> 00:08:03.200
Если мы говорим, что у нас начальный IP адрес 10.22.33.0,

00:08:03.200 --> 00:08:07.500
то есть вы видите последний компонент IP адреса 0, то

00:08:07.500 --> 00:08:11.560
самым последним является 255.

00:08:11.560 --> 00:08:15.360
То есть 10.22.33.255.

00:08:15.360 --> 00:08:19.880
Таким образом в этом cidre блоке ровно 256 IP адресов с учетом

00:08:19.880 --> 00:08:23.160
того, что IP адрес начинается с нуля.

00:08:23.160 --> 00:08:28.600
Для того, чтобы проще это обозначать, мы вместо последнего

00:08:28.600 --> 00:08:31.000
компонента четвертого указываем звездочку.

00:08:31.000 --> 00:08:34.160
Таким образом 10.22.33.

00:08:34.160 --> 00:08:39.640
говорит нам о том, что в этом cidre блоке 256 IP адресов.

00:08:39.640 --> 00:08:42.680
Давайте рассмотрим еще один популярный пример.

00:08:42.680 --> 00:08:48.640
Это cidre блок размера 16 и в этом случае оно содержит

00:08:48.640 --> 00:08:52.560
65536 IP адресов.

00:08:52.560 --> 00:09:04.600
Оно считается следующим образом.

00:09:04.600 --> 00:09:11.680
Нам необходимо от 32 отнять размер нашего cidre блока

00:09:11.680 --> 00:09:16.800
и возвести в эту степень двойки.

00:09:16.800 --> 00:09:22.000
В нашем случае это будет 2 в степени 16.

00:09:22.000 --> 00:09:26.360
Оно в себе содержит 65000 адресов и для простоты

00:09:26.360 --> 00:09:28.560
обозначается следующим образом.

00:09:28.560 --> 00:09:33.280
Первые два компонента IP адреса она указывается

00:09:33.280 --> 00:09:35.820
и оставшиеся два, третий и четвертый указывается

00:09:35.820 --> 00:09:36.820
как звездочка.

00:09:36.820 --> 00:09:42.120
Таким образом мы понимаем, что каждый из третьего

00:09:42.120 --> 00:09:44.580
и четвертого компонента IP адреса может принимать

00:09:44.580 --> 00:09:49.320
значение от нуля до 255.

00:09:49.320 --> 00:09:55.720
Если мы говорим касательно AWS, то минимальный размер

00:09:55.720 --> 00:10:00.440
cidre блока в рамках AWS это 28.

00:10:00.440 --> 00:10:06.080
28 это 16 IP адресов.

00:10:06.080 --> 00:10:11.180
Следует обратить внимание, что AWS резервирует для системного

00:10:11.180 --> 00:10:14.160
использования 5 IP адресов.

00:10:14.160 --> 00:10:17.800
Таким образом в cidre блоке 28 у вас теоретически есть

00:10:17.800 --> 00:10:24.080
16 IP адресов, а в AWS вы отнимаете еще 5 адресов и для вас будут

00:10:24.080 --> 00:10:28.720
доступны 11 IP адресов.

00:10:28.720 --> 00:10:32.760
Самый большой максимально возможный cidre блок в рамках

00:10:32.760 --> 00:10:34.720
AWS это 16.

00:10:34.720 --> 00:10:38.840
Оно содержит в себе 65536 IP адресов.

00:10:38.840 --> 00:10:40.400
Это число запоминать не нужно.

00:10:40.400 --> 00:10:46.140
И если говорить фактическое количество IP адресов доступных

00:10:46.140 --> 00:10:50.320
для вас в AWS вы отнимаете также 5 IP адресов будет

00:10:50.320 --> 00:10:55.520
65531.

00:10:55.520 --> 00:11:00.040
Вам нет необходимости запоминать какое количество IP адресов

00:11:00.040 --> 00:11:03.680
есть в том или ином cidre блоке.

00:11:03.680 --> 00:11:05.760
Достаточно знать формулу.

00:11:05.760 --> 00:11:09.480
Повторюсь мы это проходили в предыдущих лекциях.

00:11:09.480 --> 00:11:15.800
Идея в том, что вы берете размер пусть это будет 24

00:11:15.800 --> 00:11:20.320
используйте следующую формулу 32-24 равняется 8 и

00:11:20.320 --> 00:11:22.360
вы возводите полученное значение.

00:11:22.360 --> 00:11:28.720
Возводите в эту степень двойку.

00:11:28.720 --> 00:11:31.440
Два в степени 8.

00:11:31.440 --> 00:11:34.440
Оно равняется 256.

00:11:34.440 --> 00:11:37.400
При необходимости вы зная формулу можете рассчитать

00:11:37.400 --> 00:11:40.760
какое количество IP адресов доступно в любом из cidre

00:11:40.760 --> 00:11:41.760
блоков.

00:11:41.760 --> 00:11:44.600
Я для вас рекомендую запомнить лишь некоторые самые популярные

00:11:44.600 --> 00:11:46.080
cidre блоки.

00:11:46.080 --> 00:11:51.840
Это как обозначается весь интернет все нули как обозначается

00:11:51.840 --> 00:11:59.720
один единственный IP адрес это слеш 32 и несколько cidre

00:11:59.720 --> 00:12:04.280
блоков это размера 28 что он состоит из 16 IP адресов.

00:12:04.280 --> 00:12:09.840
Потом cidre блок размера 24 что он состоит из 256 IP адресов

00:12:09.840 --> 00:12:15.120
и самый большой возможный это слеш 16 который состоит

00:12:15.120 --> 00:12:24.240
из 65 тысяч IP адресов.

00:12:24.240 --> 00:12:27.560
Мы с вами помним что VPC является некоторым изолированным

00:12:27.560 --> 00:12:30.800
периметром внутри облака AWS.

00:12:30.800 --> 00:12:37.320
Subnets же они входят в определенный VPC и их следует больше воспринимать

00:12:37.320 --> 00:12:39.880
как контейнеры или логические группы.

00:12:39.880 --> 00:12:42.040
Между этими группами вы можете настраивать routing

00:12:42.040 --> 00:12:43.040
policy.

00:12:43.040 --> 00:12:46.840
Routing policy мы с вами пройдем в следующей части нашей

00:12:46.840 --> 00:12:49.840
сегодняшней лекции.

00:12:49.840 --> 00:12:52.920
Когда вы создаете сабнеты вам также обязательно как

00:12:52.920 --> 00:12:55.840
и для VPC необходимо указать cidre блок.

00:12:55.840 --> 00:12:59.300
Cidre блоки сабнетов не должны пересекаться между собой.

00:12:59.300 --> 00:13:01.640
Это также верно для VPC.

00:13:01.640 --> 00:13:04.880
Cidre блоки ваших VPC не должны пересекаться между собой

00:13:04.880 --> 00:13:08.280
в рамках AWS аккаунта.

00:13:08.280 --> 00:13:11.480
VPC работает поверх нескольких availability zone, но в рамках

00:13:11.480 --> 00:13:12.760
одного региона.

00:13:12.760 --> 00:13:16.640
А сабнеты они работают в определенной availability

00:13:16.640 --> 00:13:19.840
zone и привязываются к нему во время создания.

00:13:19.840 --> 00:13:27.160
В рамках availability zone вы можете создать необходимое

00:13:27.160 --> 00:13:28.800
количество сабнетов.

00:13:28.800 --> 00:13:30.480
Здесь нет ограничений.

00:13:30.480 --> 00:13:33.640
Единственное ограничение это учитывать размеры вашего

00:13:33.640 --> 00:13:43.720
VPC, а также размеры ваших сабнетов.

00:13:43.720 --> 00:13:47.520
На примере справа вы видите, что у нас есть VPC следующим

00:13:47.520 --> 00:13:48.520
cidre блоком.

00:13:48.520 --> 00:13:57.640
Cidre блок размера 22 это 1024 IP адресов.

00:13:57.640 --> 00:14:03.040
Далее у нас есть 4 сабнета, 2 public сабнета, 2 private сабнета.

00:14:03.040 --> 00:14:09.160
По одному паблику и по одному private сабнету расположились

00:14:09.160 --> 00:14:15.960
в каждой availability zone и у каждого сабнета есть свой

00:14:15.960 --> 00:14:19.560
cidre блок размера 24.

00:14:19.560 --> 00:14:23.960
24 он состоит из 256 IP адресов.

00:14:23.960 --> 00:14:28.080
А мы с вами помним, что AWS резервирует для себя 5

00:14:28.080 --> 00:14:36.440
IP адресов, поэтому для нас доступны 251 IP адрес.

00:14:36.440 --> 00:14:40.000
Давайте остановимся на основных best practices, связанных с настройкой

00:14:40.000 --> 00:14:41.000
VPC.

00:14:41.000 --> 00:14:45.000
� екомендуется в самом начале для VPC подключить как минимум

00:14:45.000 --> 00:14:49.160
две или более availability zone и строить ваше приложение

00:14:49.160 --> 00:14:52.360
таким образом, чтобы оно работало в нескольких availability

00:14:52.360 --> 00:14:53.360
zone.

00:14:53.360 --> 00:14:56.040
Таким образом сразу в начале ваше приложение будет

00:14:56.040 --> 00:14:59.360
высоко доступным.

00:14:59.360 --> 00:15:03.240
Если же вы начнете с одной availability zone, то в дальнейшем

00:15:03.240 --> 00:15:06.640
как только вы решите, что ваше приложение должно

00:15:06.640 --> 00:15:10.360
работать в нескольких availability zone, уже у вас будет какое-то

00:15:10.360 --> 00:15:14.400
готовое приложение, будут готовые нагрузки и это

00:15:14.400 --> 00:15:20.040
будет дольше по времени и трудозатратнее изменять

00:15:20.040 --> 00:15:21.840
вашу существующую архитектуру.

00:15:21.840 --> 00:15:30.600
Вследствием этого best practices является то, что рекомендуется

00:15:30.600 --> 00:15:35.760
размеры subnets в различных availability zone создавать

00:15:35.760 --> 00:15:37.240
одинаковых размеров.

00:15:37.240 --> 00:15:43.280
Это что-то логичное, но бывает такое, что создается

00:15:43.280 --> 00:15:49.600
в основной availability zone большие subnets большего размера,

00:15:49.600 --> 00:15:50.600
а в других поменьше.

00:15:50.600 --> 00:15:53.840
Если это будет проблемой в будущем, если же возникнут

00:15:53.840 --> 00:15:58.240
проблемы с availability zone, то у вас в других availability

00:15:58.240 --> 00:16:01.640
zone будут маленькие subnets и есть вероятность того,

00:16:01.640 --> 00:16:05.240
что не хватит IP адресов для обслуживания вашей

00:16:05.240 --> 00:16:06.240
нагрузки.

00:16:06.240 --> 00:16:10.720
Если же это будет равномерно, то вы не будете привязаны

00:16:10.720 --> 00:16:16.640
к одной конкретной availability zone и можете перекидывать

00:16:16.640 --> 00:16:20.560
основные нагрузки на любую из существующих availability

00:16:20.560 --> 00:16:21.560
zone.

00:16:21.560 --> 00:16:26.220
Далее, следующий best practice это то, что в рамках cidre

00:16:26.220 --> 00:16:31.880
блока VPC рекомендуется оставить некоторый запас.

00:16:31.880 --> 00:16:39.560
То есть, знайте, что VPC Cidre Блок и subnet Cidre Блок, он

00:16:39.560 --> 00:16:42.640
настраивается в самом начале, является обязательным

00:16:42.640 --> 00:16:46.800
параметром и далее он не может быть изменен.

00:16:46.800 --> 00:16:50.080
В случае subnet не так критично, потому что вы можете этот

00:16:50.080 --> 00:16:54.440
удалить и создать новый большего размера, а с VPC

00:16:54.440 --> 00:16:58.480
все намного сложнее, потому что вам в этом случае придется

00:16:58.480 --> 00:17:02.960
всю вашу инфраструктуру от одного VPC, который поменьше,

00:17:02.960 --> 00:17:05.600
переносить на VPC новую, которая побольше.

00:17:05.600 --> 00:17:09.360
Это прям большая проблема, поэтому в самом начале

00:17:09.360 --> 00:17:14.000
рекомендуется большой запас взять для размера VPC.

00:17:14.000 --> 00:17:18.240
Тем более мы за размеры VPC не оплачиваем, поэтому

00:17:18.240 --> 00:17:22.040
есть такая возможность брать большой запас.

00:17:22.040 --> 00:17:24.520
Если вы говорите, какой именно запас рекомендуется

00:17:24.520 --> 00:17:31.160
брать, я рекомендую отталкиваться от следующих показателей.

00:17:31.160 --> 00:17:34.480
Если вы только-только начинающий стартап, неизвестно какие

00:17:34.480 --> 00:17:37.200
нагрузки будут, вы можете попробовать теоретически

00:17:37.200 --> 00:17:44.360
рассчитать нагрузку на первые 100, либо 1000, либо

00:17:44.360 --> 00:17:46.080
10 тысяч пользователей.

00:17:46.080 --> 00:17:50.560
Далее уже примерно расчет этих нагрузок даст понять,

00:17:50.560 --> 00:17:52.400
какой объем ресурсов вам нужен.

00:17:52.400 --> 00:17:57.980
И теперь представьте, что рассчитанный эталонный

00:17:57.980 --> 00:18:02.320
объем нагрузок увеличится в 1000 раз, и в этом случае

00:18:02.320 --> 00:18:06.760
что произойдет с вашей инфраструктурой, каких размеров она должна

00:18:06.760 --> 00:18:10.640
быть, чтобы обслужить эти нагрузки.

00:18:10.640 --> 00:18:13.180
Исходя из этого вы можете прикинуть оптимальный

00:18:13.180 --> 00:18:15.960
размер вашего VPC, чтобы в будущем не пришлось его

00:18:15.960 --> 00:18:16.960
пересоздавать.

00:18:16.960 --> 00:18:21.400
Если же у вас уже есть нагрузки либо в другом AWS аккаунте,

00:18:21.400 --> 00:18:25.760
может быть старый VPC, или вы с локальной инфраструктуры

00:18:25.760 --> 00:18:28.460
мигрируете в облако, то в этом случае у вас скорее

00:18:28.460 --> 00:18:32.360
всего уже есть определенные нагрузки, они стабильные,

00:18:32.360 --> 00:18:35.560
и ожидается, что по мере роста компании ваши нагрузки

00:18:35.560 --> 00:18:36.960
также будут расти.

00:18:36.960 --> 00:18:41.320
В этом случае нет необходимости переможать на 1000, это достаточно

00:18:41.320 --> 00:18:42.320
большой запас.

00:18:42.320 --> 00:18:46.380
В этом случае достаточно представить нагрузки в

00:18:46.380 --> 00:18:50.960
100 раз больше, и в этом случае вы поймете, в каких местах

00:18:50.960 --> 00:18:54.520
какие ресурсы потребуют масштабирования.

00:18:54.520 --> 00:18:58.400
А какая-то часть ресурсов, она может остаться такой

00:18:58.400 --> 00:19:01.240
же и сильно масштабироваться не будет.

00:19:01.240 --> 00:19:04.760
Исходя из этого вы поймете, какой размер инфраструктуры

00:19:04.760 --> 00:19:07.460
будет, какое количество ресурсов и соответственно

00:19:07.460 --> 00:19:09.960
IP адресов вам будет нужно.

00:19:09.960 --> 00:19:14.560
И исходя из этого вы подберете оптимальный размер сидроблока

00:19:14.560 --> 00:19:15.560
вашего VPC.

00:19:15.560 --> 00:19:23.200
И последний best practice, он также является логичным,

00:19:23.200 --> 00:19:26.640
но не всегда учитывается компаниями.

00:19:26.640 --> 00:19:30.320
Часто бывает такое, что компания начинает мигрировать

00:19:30.320 --> 00:19:34.200
в облаке, у нее есть один AWS аккаунт, далее создается

00:19:34.200 --> 00:19:37.560
другой AWS аккаунт и другой департамент также начинает

00:19:37.560 --> 00:19:44.280
работать в другом AWS аккаунте со своим VPC, со своей инфраструктурой.

00:19:44.280 --> 00:19:47.480
Естественно в какой-то момент возникает вопрос,

00:19:47.480 --> 00:19:49.160
можно ли это все объединить.

00:19:49.160 --> 00:19:54.680
Так вот в случае, если у вас сидроблоки VPC из разных

00:19:54.680 --> 00:19:58.520
аккаунтов пересекаются, то вы никак не сможете между

00:19:58.520 --> 00:20:01.320
собой соединить, это практически будет нереально.

00:20:01.320 --> 00:20:07.880
Поэтому необходимо, чтобы IT архитектор в компании

00:20:07.880 --> 00:20:11.320
либо технический директор всегда учитывал эти моменты,

00:20:11.320 --> 00:20:17.080
проходило это все через него централизовано и диапазоны

00:20:17.080 --> 00:20:21.600
IP адресов, то есть сидроблоки для VPC, они выдавались так,

00:20:21.600 --> 00:20:23.720
чтобы не было пересечений.

00:20:23.720 --> 00:20:26.840
В этом случае в будущем, даже если у вас будут отдельные

00:20:26.840 --> 00:20:29.920
AWS аккаунты и потом вы решите все объединить, у вас не

00:20:29.920 --> 00:20:33.960
будет проблем со соединением этих VPC между собой.

00:20:33.960 --> 00:20:38.360
В случае же, если такая ситуация произошла, то

00:20:38.360 --> 00:20:42.800
единственное решение это ту VPC, которую проще перенести

00:20:42.800 --> 00:20:47.680
на другой VPC с сидроблоком не пересекающимся с существующими

00:20:47.680 --> 00:20:50.400
VPC, мигрировать.

00:20:50.400 --> 00:20:57.160
Это может потребовать достаточно много времени и трудозатрат

00:20:57.160 --> 00:21:02.400
от команды, поэтому у вас есть возможность, зная

00:21:02.400 --> 00:21:07.000
эти нюансы, в самом начале двигаться в правильном

00:21:07.000 --> 00:21:13.960
направлении и избежать возможных проблем в будущем.

00:21:13.960 --> 00:21:18.400
Давайте теперь подробнее поговорим про VPC диплоймент,

00:21:18.400 --> 00:21:21.540
то есть каким образом мы можем настроить VPC в зависимости

00:21:21.540 --> 00:21:25.600
от нашего приложения, размера компании, команды и так далее.

00:21:25.600 --> 00:21:29.400
Самый старый и традиционный подход это использовать

00:21:29.400 --> 00:21:34.240
один AWS аккаунт и все наши нагрузки, всю нашу инфраструктуру

00:21:34.240 --> 00:21:37.560
хостить в одном VPC.

00:21:37.560 --> 00:21:41.760
Это не рекомендуемый подход, но для маленьких команд,

00:21:41.760 --> 00:21:46.040
небольших команд и компании, оно может подойти.

00:21:46.040 --> 00:21:49.280
Более продвинутый вариант это multiple VPC, когда в одном

00:21:49.280 --> 00:21:54.440
AWS аккаунте у вас создаются отдельные VPC, таким образом

00:21:54.440 --> 00:21:57.960
вы ваши нагрузки изолируете друг от друга, но тем не

00:21:57.960 --> 00:22:02.280
менее эти нагрузки находятся в одном AWS аккаунте.

00:22:02.280 --> 00:22:05.160
Этот подход также подходит для небольших команд и

00:22:05.160 --> 00:22:07.840
дает возможность кратно масштабироваться в будущем,

00:22:07.840 --> 00:22:10.360
то есть никак не будет ограничивать команду.

00:22:10.360 --> 00:22:15.040
И самый продвинутый и рекомендуемый вариант это multiple accounts, когда

00:22:15.040 --> 00:22:20.520
у вас каждый environment вашего приложения диплоится в

00:22:20.520 --> 00:22:23.920
одном VPC в отдельном AWS аккаунте.

00:22:23.920 --> 00:22:28.720
Это хорошо подходит в принципе для любого размера компании,

00:22:28.720 --> 00:22:33.520
но особо рекомендуется для крупных организаций,

00:22:33.520 --> 00:22:36.600
компаний, где есть несколько команд, несколько департаментов

00:22:36.600 --> 00:22:39.720
и в этом случае каждая команда может двигаться независимо

00:22:39.720 --> 00:22:40.800
друг от друга.

00:22:40.800 --> 00:22:43.520
Тем не менее они все будут объединены между собой

00:22:43.520 --> 00:22:49.140
и могут управляться централизованно.

00:22:49.140 --> 00:22:52.240
На текущий момент есть очень много кастомных решений,

00:22:52.240 --> 00:22:56.840
инструментов, а также нативных сервисов, которые помогают

00:22:56.840 --> 00:23:00.720
управлять это большое количество AWS аккаунтов.

00:23:00.720 --> 00:23:05.960
Самый яркий пример это AWS Organizations и Control Tower.

00:23:05.960 --> 00:23:09.320
Это те сервисы, которые активно развиваются и очень

00:23:09.320 --> 00:23:14.320
сильно упрощают нам работу с несколькими AWS аккаунтами.

00:23:14.320 --> 00:23:16.840
Давайте приведу пример, что может находиться в

00:23:16.840 --> 00:23:18.360
разных AWS аккаунтах.

00:23:18.360 --> 00:23:23.600
Представьте у вас B2C приложение, ее используют пользователи,

00:23:23.600 --> 00:23:28.640
физические лица и в этом случае в каждом AWS аккаунте

00:23:28.640 --> 00:23:31.760
может находиться отдельный environment.

00:23:31.760 --> 00:23:36.480
Например представим в первом у нас Dev среда, во втором

00:23:36.480 --> 00:23:41.400
у нас среда тестирования, в третьем у нас Pre-Prot и в

00:23:41.400 --> 00:23:44.680
самом последнем у нас Prot среда, где вы обслуживаете

00:23:44.680 --> 00:23:46.040
боевые нагрузки.

00:23:46.040 --> 00:23:49.680
Другой пример, если вы B2B компания, то в этом случае

00:23:49.680 --> 00:23:53.240
у вас вашими партнерами являются другие компании.

00:23:53.240 --> 00:23:56.360
Для этих компаний вы можете создавать, выделять несколько

00:23:56.360 --> 00:24:01.400
AWS аккаунтов, в каждой из которых будет та или иная

00:24:01.400 --> 00:24:02.400
среда.

00:24:02.400 --> 00:24:07.080
Например у вас есть партнер компания A, крупный партнер,

00:24:07.080 --> 00:24:12.120
для него вы выделили 3 AWS аккаунта для каждого environment.

00:24:12.120 --> 00:24:18.080
Например для компании A для тестовой среды один аккаунт,

00:24:18.080 --> 00:24:26.280
для второго аккаунта мы загрузим среду разработки

00:24:26.280 --> 00:24:31.160
и в третьей у нас будет находиться Prot среда для этой компании.

00:24:31.160 --> 00:24:37.560
В этом случае нагрузки на среде разработки никак

00:24:37.560 --> 00:24:43.680
не отразятся на нагрузке в продакшенном среде.

00:24:43.680 --> 00:24:47.400
Таким образом вы максимально изолируете ваши нагрузки

00:24:47.400 --> 00:24:51.880
друг от друга и это может также быть полезным в рамках

00:24:51.880 --> 00:24:56.320
некоторых регуляторных требований, которые запрещают

00:24:56.320 --> 00:25:00.960
или рекомендуют нагрузки от разных компаний либо

00:25:00.960 --> 00:25:08.500
в зависимости от среды отделять внутри облака.

00:25:08.500 --> 00:25:13.120
Мы с вами знаем, что у каждого сервиса есть различные

00:25:13.120 --> 00:25:14.120
лимиты.

00:25:14.120 --> 00:25:16.120
Лимиты бывают soft и hard.

00:25:16.120 --> 00:25:18.680
Soft это те, которые могут быть увеличены, hard это

00:25:18.680 --> 00:25:20.800
те, которые не могут быть увеличены.

00:25:20.800 --> 00:25:26.680
Нужно всегда помнить о hard-лимитах, но есть яркий пример лимита

00:25:26.680 --> 00:25:28.720
в рамках Amazon VPC.

00:25:28.720 --> 00:25:31.720
Он часто приходит на экзамене, поэтому рекомендуется

00:25:31.720 --> 00:25:32.720
его запомнить.

00:25:32.720 --> 00:25:39.160
Для работы оно также вам поможет, но вы всегда можете

00:25:39.160 --> 00:25:43.140
открыть соответствующий сервис, посмотреть какие

00:25:43.140 --> 00:25:46.840
лимиты есть у любого из сервисов и дальше принимать

00:25:46.840 --> 00:25:50.960
решение во время вашей работы.

00:25:50.960 --> 00:25:51.960
Какой это лимит?

00:25:51.960 --> 00:25:57.300
Это то, что в рамках одного AWS аккаунта для каждого

00:25:57.300 --> 00:26:01.680
региона вы можете создавать не более 5 VPC.

00:26:01.680 --> 00:26:05.840
Этот лимит является soft, поэтому если вы сделаете

00:26:05.840 --> 00:26:08.560
запрос, то вам этот лимит могут увеличить.

00:26:08.560 --> 00:26:15.560
Отлично, мы с вами добрались до конца второй части нашей

00:26:15.560 --> 00:26:19.360
сегодняшней лекции и подробнее проговорили про сервис

00:26:19.360 --> 00:26:22.740
VPC, остановились на том, что такое CIDR блок, рассмотрели

00:26:22.740 --> 00:26:27.000
компонент VPC сабнеты и теперь двигаемся дальше к третьей

00:26:27.000 --> 00:26:31.000
части нашей сегодняшней лекции.

00:26:31.000 --> 00:26:33.160
Мы с вами начинаем третью часть нашей сегодняшней

00:26:33.160 --> 00:26:40.120
лекции и здесь посмотрим нюансы, связанные с подключением

00:26:40.120 --> 00:26:44.560
интернета к нашим ресурсам внутри VPC.

00:26:44.560 --> 00:26:49.200
Итак, мы говорили, что мы создаем VPC, внутри VPC создаются

00:26:49.200 --> 00:26:53.320
сабнеты и есть два вида сабнета public и private.

00:26:53.320 --> 00:26:58.480
Здесь очень важный момент, при создании сабнета мы

00:26:58.480 --> 00:27:04.000
нигде не ставим галочку, нет такого переключателя,

00:27:04.000 --> 00:27:06.480
который делает сабнет public или private.

00:27:06.480 --> 00:27:10.680
Мы лишь в названии сабнета указываем он public или private,

00:27:10.680 --> 00:27:15.040
подразумевая, что в случае указания public сабнета мы

00:27:15.040 --> 00:27:18.440
будем проводить дополнительные настройки, чтобы фактически

00:27:18.440 --> 00:27:20.080
сделать его public.

00:27:20.080 --> 00:27:24.660
Что такое public сабнет, это когда у ресурсов в этом

00:27:24.660 --> 00:27:28.640
сабнете есть выход в интернет и обратное тоже верно, из

00:27:28.640 --> 00:27:31.480
интернета до ресурсов в public сабнете тоже можно

00:27:31.480 --> 00:27:34.100
добраться, то есть обратиться напрямую.

00:27:34.100 --> 00:27:40.060
Когда мы говорим private сабнет, то там обратный случай,

00:27:40.060 --> 00:27:43.940
ресурсы находящиеся в private сабнете не могут напрямую

00:27:43.940 --> 00:27:47.260
выйти в интернет и также из интернета к этим ресурсам

00:27:47.260 --> 00:27:52.080
добраться также невозможно.

00:27:52.080 --> 00:27:55.880
Давайте теперь рассмотрим основные шаги, которые

00:27:55.880 --> 00:28:02.080
позволяют наш сабнет сделать фактически public.

00:28:02.080 --> 00:28:05.240
Для этого необходимо использовать компонент

00:28:05.240 --> 00:28:08.040
нетворка, называется интернет гейтвей.

00:28:08.040 --> 00:28:11.680
Интернет гейтвей создается как отдельный ресурс и привязывается

00:28:11.680 --> 00:28:14.280
к VPC.

00:28:14.280 --> 00:28:18.240
Создание интернет гейтвей это самый первый шаг.

00:28:18.240 --> 00:28:23.680
Этот сервис компонент является менеджед, поэтому вам достаточно

00:28:23.680 --> 00:28:29.160
ее создать, а далее горизонтальное масштабирование, высокая

00:28:29.160 --> 00:28:35.280
доступность и все дополнительные работы связанные с обеспечением

00:28:35.280 --> 00:28:38.320
работоспособности интернет гейтвея, она ложится на

00:28:38.320 --> 00:28:39.600
плечи AWS.

00:28:39.600 --> 00:28:41.680
Вам больше о нем переживать не нужно.

00:28:41.680 --> 00:28:46.920
Вторым шагом, который позволяет наш сабнет сделать паблик

00:28:46.920 --> 00:28:51.240
это настроить раутинг рулы.

00:28:51.240 --> 00:28:54.080
� аутинг рулы создаются в рамках road table.

00:28:54.080 --> 00:28:59.980
Road table это то, что описывает как трафик может передвигаться

00:28:59.980 --> 00:29:01.480
внутри вашего VPC.

00:29:01.480 --> 00:29:05.480
В самом начале, когда вы создаете VPC, создается

00:29:05.480 --> 00:29:07.500
main road table стандартный.

00:29:07.500 --> 00:29:10.040
� екомендуется создавать кастомный road table и уже

00:29:10.040 --> 00:29:11.200
его изменять.

00:29:11.200 --> 00:29:14.100
Более того, для каждого сабнета рекомендуется создавать

00:29:14.100 --> 00:29:15.480
отдельный road table.

00:29:15.480 --> 00:29:24.400
Это позволит вам выдать только те рулы, доступы,

00:29:24.400 --> 00:29:26.680
которые достаточно для конкретного сабнета.

00:29:26.680 --> 00:29:33.800
Итак, мы вторым шагом создаем custom road table и в этом custom

00:29:33.800 --> 00:29:38.720
road table прописываем routing rule.

00:29:38.720 --> 00:29:44.340
В этом routing rule как destination, то есть назначение, мы указываем

00:29:44.340 --> 00:29:45.340
интернет.

00:29:45.340 --> 00:29:48.480
В нашем случае это будет IP адрес со всеми нулями

00:29:48.480 --> 00:29:49.480
слеш ноль.

00:29:49.480 --> 00:29:51.840
То есть это обозначение интернета.

00:29:51.840 --> 00:29:54.160
CIDR блок интернета.

00:29:54.160 --> 00:29:57.160
А как target указываем наш интернет gateway.

00:29:57.160 --> 00:30:04.040
Таким образом, все ресурсы, находящиеся в паблик сабнете

00:30:04.040 --> 00:30:10.240
при обращении по сети к ресурсу из интернета, посмотрит

00:30:10.240 --> 00:30:13.740
в наш road table, увидит, что этот трафик направляется

00:30:13.740 --> 00:30:17.560
на интернет gateway и таким образом интернет gateway,

00:30:17.560 --> 00:30:20.880
приняв этот трафик, дальше пересылает ее в интернет

00:30:20.880 --> 00:30:32.000
и возвращает ответ обратно этому ресурсу.

00:30:32.000 --> 00:30:34.360
Следующий компонент, который хотелось бы вместе с вами

00:30:34.360 --> 00:30:37.120
разобрать, это elastic IP адрес.

00:30:37.120 --> 00:30:41.320
Эластик IP адрес это статический публичный IPv4 адрес, который

00:30:41.320 --> 00:30:45.480
может быть привязан к ресурсам вашем VPC.

00:30:45.480 --> 00:30:49.400
Представим случай, у вас есть приложение, в паблик

00:30:49.400 --> 00:30:53.080
сабнете находится веб-тир, обрабатывает его EC2 instance

00:30:53.080 --> 00:30:57.000
с таким-то приватным IP адресом и к нему привязан эластик

00:30:57.000 --> 00:30:58.000
IP адрес.

00:30:58.000 --> 00:31:03.180
По этому статическому IP адресу, ваша пользователь обращается

00:31:03.180 --> 00:31:05.960
к вашему приложению.

00:31:05.960 --> 00:31:09.120
Далее представим, что у вас возникли проблемы с

00:31:09.120 --> 00:31:14.000
вашим веб-тир и вы срочно создали другой EC2 instance и

00:31:14.000 --> 00:31:17.120
для того, чтобы не менять конфигурации приложения,

00:31:17.120 --> 00:31:19.720
не менять код приложения, не просить пользователя

00:31:19.720 --> 00:31:24.800
обращаться к другому IP адресу, вы можете с легкостью

00:31:24.800 --> 00:31:30.040
этот IP адрес перепривязать к другому EC2 instance и прозрачно

00:31:30.040 --> 00:31:32.560
для всех, для приложения и для ваших пользователей

00:31:32.560 --> 00:31:35.520
они смогут успешно дальше продолжать работать, даже

00:31:35.520 --> 00:31:41.080
не заметив изменения EC2 instance, обрабатывающего их

00:31:41.080 --> 00:31:42.080
запросы.

00:31:42.080 --> 00:31:52.240
Следующий компонент Network это NAT Gateway.

00:31:52.240 --> 00:31:55.720
Он используется в тех случаях, когда мы хотим предоставить

00:31:55.720 --> 00:32:00.280
доступ в интернет ресурсам из private subnet, так чтобы

00:32:00.280 --> 00:32:03.760
из интернета к ресурсам в этом private subnet не могли

00:32:03.760 --> 00:32:05.360
напрямую обратиться.

00:32:05.360 --> 00:32:09.760
Такое возможно и для того, чтобы это реализовать,

00:32:09.760 --> 00:32:11.200
нужно выполнить несколько шагов.

00:32:11.200 --> 00:32:14.340
Самым первым делом в public subnet у вас уже должен быть

00:32:14.340 --> 00:32:16.760
настроен выход в интернет.

00:32:16.760 --> 00:32:20.520
Для этого мы помним, первым шагом создается subnet, далее

00:32:20.520 --> 00:32:23.120
обязательно создается Internet Gateway, привязывается

00:32:23.120 --> 00:32:24.120
к VPC.

00:32:24.120 --> 00:32:27.760
После этого для public subnet создается отдельный кастомный

00:32:27.760 --> 00:32:33.900
routing table и в этом routing table создается routing rule, который

00:32:33.900 --> 00:32:39.440
ассоциирован с этим subnet и в руле мы указываем, что

00:32:39.440 --> 00:32:46.080
как destination у нас указывается интернет, а как target указывается

00:32:46.080 --> 00:32:47.080
Internet Gateway.

00:32:47.080 --> 00:32:50.200
То есть мы выходим в интернет через Internet Gateway.

00:32:50.200 --> 00:32:52.700
После того, как мы все эти действия сделаем, у нас

00:32:52.700 --> 00:32:57.840
появляется доступ в интернет у ресурсов в public subnet и он

00:32:57.840 --> 00:33:01.520
фактически становится public, не только в названии.

00:33:01.520 --> 00:33:08.780
Теперь если мы говорим про вторую часть, это создание

00:33:08.780 --> 00:33:12.400
NAT Gateway, он создается в public subnet.

00:33:12.400 --> 00:33:17.280
Далее из private subnet у нас уже будет создан кастомный

00:33:17.280 --> 00:33:21.520
route table, в нем создается routing rule, который как destination

00:33:21.520 --> 00:33:25.360
укажет интернет, а как target укажет NAT Gateway.

00:33:25.360 --> 00:33:31.280
Как только NAT Gateway он получит запрос от инстенсов в private

00:33:31.280 --> 00:33:37.160
subnet, посмотрит на route table для своего subnet, увидит,

00:33:37.160 --> 00:33:40.680
что этот запрос должен быть направлен дальше в Internet

00:33:40.680 --> 00:33:44.040
Gateway и соответственно этот трафик направит дальше.

00:33:44.040 --> 00:33:48.080
Через Internet Gateway мы выйдем в интернет, ответ придет

00:33:48.080 --> 00:33:53.000
обратно к Internet Gateway, Internet Gateway направит его к NAT Gateway

00:33:53.000 --> 00:33:57.160
и NAT Gateway окончательный последний шаг вернет этот

00:33:57.160 --> 00:34:01.560
трафик, ответ на запрос инстанцу, находящемуся

00:34:01.560 --> 00:34:07.360
в private subnet.

00:34:07.360 --> 00:34:09.360
Давайте проведем небольшой квиз.

00:34:09.360 --> 00:34:12.380
Здесь нам необходимо для четырех видов нагрузок

00:34:12.380 --> 00:34:15.880
определить, где они должны находиться, в private или в

00:34:15.880 --> 00:34:17.560
public subnet.

00:34:17.560 --> 00:34:21.020
Вы можете остановить это видео и подумать некоторое

00:34:21.020 --> 00:34:23.760
время, как только будете готовы можете продолжить.

00:34:23.760 --> 00:34:32.520
Отлично, я думаю вы все ответили правильно, давайте

00:34:32.520 --> 00:34:33.520
проверим.

00:34:33.520 --> 00:34:38.920
Как data source, instances рекомендуется использовать private subnet?

00:34:38.920 --> 00:34:43.640
Это верно, так как из интернета доступ к нашим data store

00:34:43.640 --> 00:34:47.480
instances не нужно, они наоборот должны быть максимально

00:34:47.480 --> 00:34:48.480
защищены.

00:34:48.480 --> 00:34:52.640
В этом случае мы располагаем эти instances в private subnet.

00:34:52.640 --> 00:34:56.440
Далее batch processing instances это также относится к backend

00:34:56.440 --> 00:35:00.600
обработке и в этом случае из интернета к этим instance

00:35:00.600 --> 00:35:02.000
обращаться не нужно.

00:35:02.000 --> 00:35:05.800
В этом случае мы указываем private subnet.

00:35:05.800 --> 00:35:09.400
Для третьего случая уже вы по названию видите ответ

00:35:09.400 --> 00:35:14.280
backend instances, они находятся на backend и также находятся

00:35:14.280 --> 00:35:15.640
в private subnet.

00:35:15.640 --> 00:35:19.840
Единственный случай это web application instances, они в

00:35:19.840 --> 00:35:23.760
зависимости от вашей архитектуры могут находиться либо в

00:35:23.760 --> 00:35:26.720
public subnet либо в private subnet.

00:35:26.720 --> 00:35:30.640
Я бы хотел обратить ваше внимание, что для большинства

00:35:30.640 --> 00:35:34.840
видов нагрузок и для самых сложных нагрузок мы используем

00:35:34.840 --> 00:35:39.320
private subnets, а лишь только для вебтира мы используем

00:35:39.320 --> 00:35:42.080
или даже в этом случае можем не использовать public

00:35:42.080 --> 00:35:43.080
subnets.

00:35:43.080 --> 00:35:48.240
В связи с этим при создании subnets заранее зная какой

00:35:48.240 --> 00:35:52.660
он будет public либо private вам рекомендуется создавать

00:35:52.660 --> 00:35:59.840
размеры public subnets меньше, а размеры private subnets больше.

00:35:59.840 --> 00:36:07.840
Таким образом вы с большей долей вероятности не исчерпаете

00:36:07.840 --> 00:36:15.240
диапазон доступных IP адресов для каждого из subnets.

00:36:15.240 --> 00:36:20.040
Следующий и пожалуй последний из основных компонентов

00:36:20.040 --> 00:36:22.840
VPC это bastion host.

00:36:22.840 --> 00:36:29.960
Bastion host используется для того, чтобы пользователи из офиса

00:36:29.960 --> 00:36:37.600
либо из домашнего компьютера могли подключаться к инфраструктуре

00:36:37.600 --> 00:36:38.920
находящейся в облаке.

00:36:38.920 --> 00:36:44.020
В этом случае в public subnet создается так называемый

00:36:44.020 --> 00:36:48.320
bastion host это EC2 instance для которого открыть доступ

00:36:48.320 --> 00:36:55.680
по 22 порту то есть SSH трафик на определенный range IP адресов.

00:36:55.680 --> 00:37:00.400
Если вы подключаетесь из локального офиса то

00:37:00.400 --> 00:37:03.560
у вашего офиса скорее всего есть некоторые pool адресов

00:37:03.560 --> 00:37:10.120
из которых вы выходите в интернет и вы можете для

00:37:10.120 --> 00:37:13.360
этого bastion host указать эти IP адреса которые могут

00:37:13.360 --> 00:37:15.400
обращаться по 22 порту.

00:37:15.400 --> 00:37:18.640
Все другие порты они должны быть закрыты.

00:37:18.640 --> 00:37:23.020
В этом случае из офиса можно будет подключиться

00:37:23.020 --> 00:37:27.600
к этому bastion host далее с этого bastion host вы можете

00:37:27.600 --> 00:37:31.200
обратиться к любому из instance будь то в public subnet

00:37:31.200 --> 00:37:33.680
или в private subnet.

00:37:33.680 --> 00:37:38.840
Здесь следует обратить внимание что bastion host является

00:37:38.840 --> 00:37:42.640
точкой входа из интернета оно максимально подвержено

00:37:42.640 --> 00:37:47.040
атакам извне поэтому необходимо использовать все возможные

00:37:47.040 --> 00:37:51.640
методы для обеспечения большей безопасности.

00:37:51.640 --> 00:37:58.280
Мы должны настроить security группы, network ACL и все другие

00:37:58.280 --> 00:38:01.680
компоненты которые у нас есть в наличии.

00:38:01.680 --> 00:38:05.240
Про безопасность мы с вами поговорим в последней части

00:38:05.240 --> 00:38:06.400
нашей сегодняшней лекции.

00:38:06.400 --> 00:38:12.880
В этой части мы подробно остановимся на таких компонентах

00:38:12.880 --> 00:38:16.640
VPC как security группы и network ACL.

00:38:16.640 --> 00:38:21.320
Это две основные компоненты которые помогают нам настроить

00:38:21.320 --> 00:38:24.880
многоуровневую защиту в рамках нашего VPC.

00:38:24.880 --> 00:38:27.000
Начнем мы с security группы.

00:38:27.000 --> 00:38:31.840
Security группы это firewall который привязывается на уровне

00:38:31.840 --> 00:38:36.160
instance то есть вы указываете какому instance его привязать.

00:38:36.160 --> 00:38:40.040
Важно понимать что один instance может быть привязан

00:38:40.040 --> 00:38:43.360
только к одной security группы в один момент времени.

00:38:43.360 --> 00:38:46.800
А одна и та же security группа может быть использована

00:38:46.800 --> 00:38:48.480
различными instance.

00:38:48.480 --> 00:38:53.280
Security группы являются stateful firewall это значит что запоминается

00:38:53.280 --> 00:38:54.280
состояние.

00:38:54.280 --> 00:38:59.920
Если говорить другими словами то тот трафик который был

00:38:59.920 --> 00:39:06.440
разрушен inbound traffic он вне зависимости от того какой

00:39:06.440 --> 00:39:10.080
outbound traffic разрешен все равно отправит ответ.

00:39:10.080 --> 00:39:11.480
Обратное тоже верно.

00:39:11.480 --> 00:39:15.960
Если у нас разрешен outbound traffic то вне зависимости от

00:39:15.960 --> 00:39:19.560
того какие inbound рула прописаны мы все равно получим обратный

00:39:19.560 --> 00:39:20.560
ответ.

00:39:20.560 --> 00:39:32.320
Если же трафик иницируется со стороны instance то здесь

00:39:32.320 --> 00:39:33.520
уже по другому.

00:39:33.520 --> 00:39:39.680
Если у нас outbound traffic запрещен но inbound traffic разрешен то

00:39:39.680 --> 00:39:43.120
этому instance могут обращаться только извне и получать

00:39:43.120 --> 00:39:44.120
ответ.

00:39:44.120 --> 00:39:49.040
Но сам instance так как нет outbound разрешенных трафика

00:39:49.040 --> 00:39:55.880
то он не может никуда в наружу обращаться.

00:39:55.880 --> 00:39:59.400
Вы можете создавать кастомные security группы есть дефолтовые

00:39:59.400 --> 00:40:03.840
security группы при создании сабнетов и по умолчанию

00:40:03.840 --> 00:40:08.960
весь inbound трафик он запрещен а весь outbound трафик он разрешен.

00:40:08.960 --> 00:40:15.600
Если же вам нужно предоставить outbound трафик ограниченный

00:40:15.600 --> 00:40:21.440
то вы можете удалить outbound rule в дефолтовой security группе

00:40:21.440 --> 00:40:24.440
или рекомендуется создать кастомную security группу

00:40:24.440 --> 00:40:30.760
и специально для этих instance с определенной одинаковой

00:40:30.760 --> 00:40:36.080
роли создать security группы с соответствующими inbound

00:40:36.080 --> 00:40:41.760
и outbound рулами.

00:40:41.760 --> 00:40:43.000
Давайте рассмотрим пример.

00:40:43.000 --> 00:40:46.480
У нас есть кастомная security группа она привязана к

00:40:46.480 --> 00:40:50.680
EC2 instance в паблик сабнете у этого instance есть приватный

00:40:50.680 --> 00:40:52.400
и публичный IP адрес.

00:40:52.400 --> 00:41:01.240
Так как у subnet прописан routing rule до интернет гейтвея

00:41:01.240 --> 00:41:04.720
также интернет гейтвеи привязаны к нашему VPC то

00:41:04.720 --> 00:41:09.040
этот EC2 instance может обращаться в интернет.

00:41:09.040 --> 00:41:14.280
Но давайте посмотрим что же у нас прописано в кастомной

00:41:14.280 --> 00:41:15.280
security группе.

00:41:15.280 --> 00:41:20.200
Как вы видите outbound трафика нет значит instance не может

00:41:20.200 --> 00:41:24.560
обращаться в интернет но при этом прописан inbound

00:41:24.560 --> 00:41:31.840
rule единственный это HTTP трафик по 80 порту и доступ

00:41:31.840 --> 00:41:33.680
предоставляется со всего интернета.

00:41:33.680 --> 00:41:37.200
Таким образом к этому instance из интернета по публичному

00:41:37.200 --> 00:41:40.880
IP адресу могут обратиться.

00:41:40.880 --> 00:41:44.720
Так как security группа это стоит full firewall то ответ

00:41:44.720 --> 00:41:50.160
успешно вернется но при этом EC2 instance самостоятельно

00:41:50.160 --> 00:41:53.720
инициировать запрос в интернет не может так как не прописан

00:41:53.720 --> 00:41:55.520
outbound трафик.

00:41:55.520 --> 00:42:02.800
Для того чтобы понять трафик разрешен или нет оцениваются

00:42:02.800 --> 00:42:08.800
и проверяются все рулы в security группе.

00:42:08.800 --> 00:42:12.040
Например если к нам пришел пришел какой-то inbound трафик

00:42:12.040 --> 00:42:15.360
то все рулы в рамках inbound трафика они проверяются

00:42:15.360 --> 00:42:19.600
в том случае если она разрешается то трафик проходит.

00:42:19.600 --> 00:42:22.400
Это же относится к outbound трафику.

00:42:22.400 --> 00:42:26.920
Есть также такое понятие как chaining security groups идея

00:42:26.920 --> 00:42:32.720
в том что для каждого типа EC2 instance в зависимости

00:42:32.720 --> 00:42:36.320
от того к какому тиру она относится создавать отдельные

00:42:36.320 --> 00:42:37.520
security группы.

00:42:37.520 --> 00:42:41.520
Например есть у нас web tier security группа которая содержит

00:42:41.520 --> 00:42:48.720
inbound rule он разрешает доступ из интернета по 80 и 443 порту

00:42:48.720 --> 00:42:53.960
это соответственно HTTP и HTTPS трафик.

00:42:53.960 --> 00:43:01.200
Далее он разрешает доступ по SSH через 22 порт на диапазон

00:43:01.200 --> 00:43:07.640
IP адресов вашей корпоративной среды.

00:43:07.640 --> 00:43:11.880
Таким образом с локального офиса вы можете обращаться

00:43:11.880 --> 00:43:15.520
и подключаться к instance в web tier.

00:43:15.520 --> 00:43:19.560
Далее у нас есть отдельная security группа которая предназначена

00:43:19.560 --> 00:43:21.920
для instance application уровня.

00:43:21.920 --> 00:43:26.240
В этом случае вы прописываете inbound rule также доступ по

00:43:26.240 --> 00:43:33.320
SSH это 22 порт из диапазона корпоративных IP адресов.

00:43:33.320 --> 00:43:39.360
И более того прописываете inbound rule по 8000 порту HTTP

00:43:39.360 --> 00:43:43.720
трафик и при этом сурсом является наш web tier.

00:43:43.720 --> 00:43:49.320
Исходя из этого мы видим что к application tier EC2 instance

00:43:49.320 --> 00:43:56.920
могут обратиться только трафик исходящие из web tier.

00:43:56.920 --> 00:44:01.360
По такой же логике создается security группа для database

00:44:01.360 --> 00:44:02.360
tier.

00:44:02.360 --> 00:44:09.320
Мы создаем inbound rule для подключения по SSH а также

00:44:09.320 --> 00:44:13.740
создаем дополнительный inbound rule по порту 3306 это

00:44:13.740 --> 00:44:18.240
стандартный порт для базы данных mayscale и как source

00:44:18.240 --> 00:44:20.400
указываем application tier.

00:44:20.400 --> 00:44:25.220
Здесь вы видите что EC2 instance из web tier соответствующие

00:44:25.220 --> 00:44:30.160
security группы не могут обратиться напрямую к database tier а могут

00:44:30.160 --> 00:44:32.400
обратиться только к application tier.

00:44:32.400 --> 00:44:36.560
И соответственно все те EC2 instance с application tier могут

00:44:36.560 --> 00:44:42.440
обратиться к database уровню по определенному порту.

00:44:42.440 --> 00:44:52.160
Следующим компонентом который помогает предоставить

00:44:52.160 --> 00:44:55.600
дополнительный уровень безопасности в рамках VPC

00:44:55.600 --> 00:44:57.560
это Network ACLs.

00:44:57.560 --> 00:45:01.480
Network ACLs расшифруется как Network Access Control Lists.

00:45:01.480 --> 00:45:03.840
Оно работает на уровне сабнета.

00:45:03.840 --> 00:45:07.000
У каждого сабнета может быть привязано только

00:45:07.000 --> 00:45:11.800
один Network ACL тогда как один Network ACL может использоваться

00:45:11.800 --> 00:45:12.920
несколькими сабнетами.

00:45:12.920 --> 00:45:18.980
Если же во время настройки VPC сабнетов и не указали

00:45:18.980 --> 00:45:25.220
настройки Network ACL то к сабнету привяжется дефолтовый

00:45:25.220 --> 00:45:29.200
Network ACL который разрешает весь входящий и исходящий

00:45:29.200 --> 00:45:30.420
трафик.

00:45:30.420 --> 00:45:36.440
Следует различать что Network ACL является stateless firewall

00:45:36.440 --> 00:45:40.120
таким образом он не запоминает состояние то есть откуда

00:45:40.120 --> 00:45:41.920
пришел запрос.

00:45:41.920 --> 00:45:49.160
Это говорит о том что входящий трафик он должен быть обязательно

00:45:49.160 --> 00:45:55.600
разрушен в outbound рулах для того чтобы ваш ответ дошел

00:45:55.600 --> 00:45:58.160
до получателя.

00:45:58.160 --> 00:46:01.440
И обратный случай когда вы что-то запрашиваете

00:46:01.440 --> 00:46:04.700
извне помимо того что вы открываете outbound трафик

00:46:04.700 --> 00:46:07.760
чтобы обратиться к сторонним ресурсам вам необходимо

00:46:07.760 --> 00:46:14.560
также по тому же порту и протоколу открыть inbound

00:46:14.560 --> 00:46:25.460
трафик и только в этом случае вы сможете получать ответ.

00:46:25.460 --> 00:46:29.760
При необходимости вы можете создавать Custom Network ACLs

00:46:29.760 --> 00:46:35.240
в этом случае по умолчанию для Custom Network ACL все входящий

00:46:35.240 --> 00:46:38.520
и исходящий трафик она запрещается.

00:46:38.520 --> 00:46:43.280
При необходимости вы можете добавить правила которые

00:46:43.280 --> 00:46:46.760
разрушают по тому или другому порту.

00:46:46.760 --> 00:46:54.200
Здесь вы видите пример что inbound трафик сотым приоритетом

00:46:54.200 --> 00:46:59.460
указано SSH подключение которое разрешает из определенного

00:46:59.460 --> 00:47:00.460
CIDR блока.

00:47:00.460 --> 00:47:04.160
В нашем случае мы видим CIDR блок размера 32 это говорит

00:47:04.160 --> 00:47:06.920
о том что указан конкретный IP адрес.

00:47:06.920 --> 00:47:12.200
Далее мы видим в конце приоритет звездочка это тот рул который

00:47:12.200 --> 00:47:14.120
отрабатывает в самом конце.

00:47:14.120 --> 00:47:17.520
Мы с вами говорили ранее что Security группы они проверяют

00:47:17.520 --> 00:47:20.920
все рулы если это inbound трафика то проверяются все рулы

00:47:20.920 --> 00:47:25.080
inbound рулы в случае это outbound трафик проверяется все

00:47:25.080 --> 00:47:27.440
outbound рулы.

00:47:27.440 --> 00:47:32.400
Когда мы говорим про Network ACL он проходит по всем

00:47:32.400 --> 00:47:36.640
рулам соответствующим в порядке приоритета и в

00:47:36.640 --> 00:47:39.880
тот момент когда он видит правила которые либо разрешают

00:47:39.880 --> 00:47:44.000
либо запрещают то оно продолжает с ним и остальные

00:47:44.000 --> 00:47:52.160
оставшиеся правила не рассматривает.

00:47:52.160 --> 00:47:58.560
Давайте рассмотрим типовой трафик который проходит

00:47:58.560 --> 00:48:02.880
через несколько компонентов в рамках VPC.

00:48:02.880 --> 00:48:05.680
Представим у нас есть наши пользователи они делают

00:48:05.680 --> 00:48:09.960
запрос по соответствующему IP адресу либо по доменному

00:48:09.960 --> 00:48:10.960
имению.

00:48:10.960 --> 00:48:14.240
Этот запрос приходит к интернет гейтвею далее интернет

00:48:14.240 --> 00:48:17.640
гейтвей направляет трафик в road table.

00:48:17.640 --> 00:48:21.920
Road table определяет можем ли мы этот трафик пустить

00:48:21.920 --> 00:48:22.920
или нет.

00:48:22.920 --> 00:48:27.240
Далее если все хорошо мы двигаемся дальше до того

00:48:27.240 --> 00:48:32.000
как мы попадем в subnet мы добираемся до Network ACL.

00:48:32.000 --> 00:48:36.200
Проверяется все inbound рулы если все хорошо то разрешается

00:48:36.200 --> 00:48:39.200
трафик и мы доходим до subnet.

00:48:39.200 --> 00:48:41.640
Внутри subnet у нас есть наши institute инстанции.

00:48:41.640 --> 00:48:46.120
До institute инстанция есть security группы таким образом

00:48:46.120 --> 00:48:50.760
мы вначале как только попадаем в subnet проверяем соответствующую

00:48:50.760 --> 00:48:51.840
security группу.

00:48:51.840 --> 00:48:57.760
Если разрешается inbound трафик то трафик пропускается

00:48:57.760 --> 00:49:01.360
и наш запрос доходит до institute инстанция.

00:49:01.360 --> 00:49:04.320
На уровне institute инстанция этот запрос обрабатывается

00:49:04.320 --> 00:49:08.680
и что происходит когда оно дает ответ.

00:49:08.680 --> 00:49:12.080
В этом случае он также доходит до security группы.

00:49:12.080 --> 00:49:16.640
Мы с вами помним что security группа это stateful firewall.

00:49:16.640 --> 00:49:21.560
Значит в этом случае так как запрос был извне outbound

00:49:21.560 --> 00:49:23.480
рулы не проверяется.

00:49:23.480 --> 00:49:27.800
Если бы запрос исходил изначально от institute инстанция

00:49:27.800 --> 00:49:30.240
то outbound рулы проверились бы.

00:49:30.240 --> 00:49:33.400
А inbound рулы соответственно там пропустились бы.

00:49:33.400 --> 00:49:37.240
В этом случае outbound рулы не проверяются.

00:49:37.240 --> 00:49:39.640
Дальше мы доходим до уровня subnet.

00:49:39.640 --> 00:49:42.480
От subnet мы доходим до Network ACL.

00:49:42.480 --> 00:49:45.600
На стороне Network ACL обязательно проверяются outbound рулы так

00:49:45.600 --> 00:49:47.400
как это stateless firewall.

00:49:47.400 --> 00:49:51.760
Если все хорошо мы доходим до road table и road table далее

00:49:51.760 --> 00:49:58.800
направляет трафик через интернет gateway до пользователей

00:49:58.800 --> 00:50:02.640
которые отправили изначальный запрос.

00:50:02.640 --> 00:50:06.560
Вы видите что у нас как минимум два уровня безопасности.

00:50:06.560 --> 00:50:11.680
Более того у нас есть road table который может определять

00:50:11.680 --> 00:50:13.480
можно ли этот трафик пускать или нет.

00:50:13.480 --> 00:50:16.320
То есть несколько уровней безопасности в рамках нашего

00:50:16.320 --> 00:50:21.400
одного VPC что является best practice и рекомендуется к

00:50:21.400 --> 00:50:22.400
использованию.

00:50:22.400 --> 00:50:31.200
На этом слайде небольшое повторение чтобы закрепить

00:50:31.200 --> 00:50:34.680
как необходимо создать публичный subnet.

00:50:34.680 --> 00:50:37.220
Самым первым делом нам необходимо создать интернет

00:50:37.220 --> 00:50:42.120
gateway и привязать его к VPC.

00:50:42.120 --> 00:50:45.960
Далее происходит настройка road table.

00:50:45.960 --> 00:50:48.560
Мы должны как destination указать интернет.

00:50:48.560 --> 00:50:51.920
Обозначение интернета это IP адрес со всеми нулями

00:50:51.920 --> 00:50:56.560
slash ноль и как target указывается интернет gateway.

00:50:56.560 --> 00:51:00.880
Здесь далее обратить нужно внимание что у EC2 Instance есть

00:51:00.880 --> 00:51:05.160
публичный IP адрес либо elastic IP адрес который не меняется.

00:51:05.160 --> 00:51:10.320
Публичный IP адрес который выдаётся EC2 Instance он динамический

00:51:10.320 --> 00:51:13.600
и в случае пересоздания Instance может измениться.

00:51:13.600 --> 00:51:18.160
Также если мы останавливаем Instance и после запускаем

00:51:18.160 --> 00:51:25.360
то публичный IP адрес также может измениться и выдаться

00:51:25.360 --> 00:51:29.280
тот публичный IP адрес который на момент запуска доступен.

00:51:29.280 --> 00:51:33.480
Но следует помнить что при перезагрузке Instance публичный

00:51:33.480 --> 00:51:34.800
IP адрес сохраняется.

00:51:34.800 --> 00:51:40.960
И последний шаг следует удостовериться что на уровне

00:51:40.960 --> 00:51:46.520
EC2 Instance security группы разрешают этот трафик, а на уровне

00:51:46.520 --> 00:51:52.000
сабнета Network ACL также разрешает inbound и outbound трафик.

00:51:52.000 --> 00:51:56.700
Отлично на этом мы добрались до конца четвертой части

00:51:56.700 --> 00:51:58.360
нашей сегодняшней лекции.

00:51:58.360 --> 00:52:04.240
Это заключительная часть на этом мы совершаем всю

00:52:04.240 --> 00:52:05.520
сегодняшнюю лекцию.

00:52:05.520 --> 00:52:10.620
Подробнее разобрали сервис VPC все компоненты которые

00:52:10.620 --> 00:52:13.840
могут быть созданы в рамках этого VPC.

00:52:13.840 --> 00:52:20.560
Далее мы познакомились с компонентами Security группы,

00:52:20.560 --> 00:52:25.080
Network ACL и другими основными компонентами которые помогают

00:52:25.080 --> 00:52:30.920
нам построить безопасную и соответствующую всем

00:52:30.920 --> 00:52:34.680
best practice локальную сеть в облаке.

00:52:34.680 --> 00:52:40.760
На этом слайде вы видите дополнительные источники,

00:52:40.760 --> 00:52:43.820
вам достаточно идти ключевые слова вбить в поисковик

00:52:43.820 --> 00:52:52.760
и вы в первой ссылке увидите необходимый материал.

00:52:52.760 --> 00:52:55.240
На этом мы завершаем нашу сегодняшнюю лекцию.

00:52:55.240 --> 00:52:56.480
Спасибо за внимание.

00:52:56.480 --> 00:53:13.720
Увидимся с вами на следующих наших активностях.