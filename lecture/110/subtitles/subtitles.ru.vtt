WEBVTT

00:00:00.000 --> 00:00:05.400
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной лекции.

00:00:05.400 --> 00:00:08.720
Мы с вами начинаем серию
лекций, посвящённые Networking.

00:00:08.720 --> 00:00:16.760
На этой неделе мы поговорим
про настройку сети в облаке AWS.

00:00:16.760 --> 00:00:21.160
На второй неделе у нас не будет лекций,
но будет объёмная лабораторная работа.

00:00:21.160 --> 00:00:26.365
Она будет включать все те знания,
которые вы получили на предыдущих

00:00:26.389 --> 00:00:31.120
лекциях, а также материалы,
пройденные на последней лекции.

00:00:31.120 --> 00:00:39.680
На третьей неделе мы рассмотрим сервисы и варианты
подключения локальной сети к сети в облаке AWS.

00:00:39.680 --> 00:00:45.600
Итак, давайте начнём. Сегодняшняя 
лекция состоит из четырёх частей.

00:00:45.600 --> 00:00:50.448
В первой части мы рассмотрим
следующие улучшения нашей архитектуры

00:00:50.472 --> 00:00:55.320
в облаке, которые мы будем
проделывать в рамках лабораторных работ.

00:00:55.320 --> 00:01:01.320
Во второй части подробнее познакомимся
с сервисом VPC и его возможностями.

00:01:01.320 --> 00:01:07.343
В третьей части мы рассмотрим нюансы,
связанные с VPC и его компонентами,

00:01:07.367 --> 00:01:12.720
которые дают нам возможность
настроить подключение к интернету.

00:01:12.720 --> 00:01:22.400
В последней части, четвёртой, мы рассмотрим нюансы,
связанные с обеспечением безопасности нашего VPC.

00:01:22.400 --> 00:01:35.440
В первой части мы обсудим изменение инфраструктуры
в облаке AWS в рамках лабораторных работ.

00:01:35.440 --> 00:01:42.280
Вы видите, что у нас появились новые компоненты,
это VPC, Internet gateway, NAT gateway и три subnets.

00:01:42.280 --> 00:01:48.588
Это всё работает согласованно и, во-первых,
даёт большую безопасность, а во-вторых,

00:01:48.612 --> 00:01:54.920
все те ресурсы, к которым нужен выход
в интернет, также остались с этим доступом.

00:01:54.920 --> 00:02:06.120
Если говорить про бизнес-кейс, то работа в кафе
продвигается хорошо, клиентов становится больше.

00:02:06.120 --> 00:02:11.695
София и Нихил освободились
от своих основных работ и начали

00:02:11.719 --> 00:02:18.160
обсуждение по дальнейшему развитию
IT-инфраструктуры в облаке AWS.

00:02:18.160 --> 00:02:25.508
Они посоветовались с постоянными посетителями
кафе, которые работают с AWS, в нашем случае

00:02:25.532 --> 00:02:32.880
это Оливия, она является Solutions Architect и,
выслушав текущее состояние инфраструктуры

00:02:32.880 --> 00:02:39.188
наших главных героев, она подсказала, что
следует обратить особое внимание правильной

00:02:39.212 --> 00:02:45.520
настройке VPC, то есть сети и всех ее
компонентов, чтобы обезопасить инфраструктуру.

00:02:45.520 --> 00:02:49.473
Также она посоветовала
для удаленного подключения и

00:02:49.497 --> 00:02:54.480
возможности проводить некоторые
работы настроить Bastion Host.

00:02:54.480 --> 00:03:00.080
Что такое Bastion Host и другие компоненты
мы с вами узнаем в нашей сегодняшней лекции.

00:03:00.080 --> 00:03:08.120
И мы сейчас переходим ко второй
части нашей сегодняшней лекции.

00:03:08.120 --> 00:03:13.880
Во второй части мы подробнее познакомимся
с сервисом VPC и её компонентами.

00:03:13.880 --> 00:03:20.288
Что такое VPC? VPC расшифровывается 
как Virtual Private Cloud и

00:03:20.312 --> 00:03:26.720
оно нам предоставляет логически
изолированную часть в облаке AWS.

00:03:26.720 --> 00:03:33.408
Оно максимально приближено к локальной
сети, которую мы с вами настраивали много

00:03:33.432 --> 00:03:40.120
раз дома, на работе и AWS дает возможность
удаленно настроить это в облаке AWS.

00:03:40.120 --> 00:03:46.608
У нас есть возможность выбирать
CIDR блоки, то есть какой диапазон

00:03:46.632 --> 00:03:52.520
IP адресов мы хотим использовать
для нашей локальной сети.

00:03:52.520 --> 00:03:59.360
Мы также можем создавать любое количество
subnets в рамках размера нашего VPC.

00:03:59.360 --> 00:04:08.680
Внутри VPC мы можем настроить необходимые правила,
чтобы трафик мог перемещаться в таком или ином виде.

00:04:08.680 --> 00:04:14.777
Есть также все необходимые
компоненты для обеспечения безопасности

00:04:14.801 --> 00:04:20.240
на уровне subnet, либо на
уровне отдельно взятых ресурсов.

00:04:21.240 --> 00:04:29.720
Отличие при работе с AWS от локальных работ - это
то, что вам нет необходимости работать с железом.

00:04:29.720 --> 00:04:35.360
То есть вы не будете подключать кабель
к сети, как-то их готовить и так далее.

00:04:35.360 --> 00:04:39.480
Все эти работы они уже проведены
на стороне дата-центра AWS,

00:04:39.480 --> 00:04:45.928
уже все готово к использованию и вы
удаленно и достаточно быстро можете

00:04:45.952 --> 00:04:52.400
настроить локальную сеть в облаке в
зависимости от вашей бизнес-задачи.

00:04:54.400 --> 00:04:58.840
VPC создается в рамках
определенного AWS региона.

00:04:58.840 --> 00:05:04.520
То есть вы не можете создать VPC, который
будет работать в нескольких AWS регионах.

00:05:04.520 --> 00:05:09.560
Если же вам нужны cross-region
взаимодействия, то в каждом

00:05:09.560 --> 00:05:14.880
регионе создается отдельная VPC и
эти VPC вы соединяете между собой.

00:05:14.880 --> 00:05:18.860
Как это делать мы с вами пройдем
на следующих наших занятиях.

00:05:18.860 --> 00:05:24.480
Если говорить про availability
zones, то для VPC доступны все

00:05:24.480 --> 00:05:28.880
availability zones в рамках региона,
на котором оно было создано.

00:05:28.880 --> 00:05:33.880
Вы указываете все либо некоторые
из availability zones, с которыми

00:05:33.880 --> 00:05:39.320
вы будете работать и
соответственно ресурсы в рамках этого

00:05:39.320 --> 00:05:45.600
VPC могут быть созданы в
той или иной availability zone.

00:05:45.600 --> 00:05:51.368
Зачастую во время создания VPC
указывают как минимум две availability zones,

00:05:51.392 --> 00:05:57.160
что дает возможность построить highly
available инфраструктуру в облаке AWS.

00:05:57.160 --> 00:06:03.840
Таким образом, вы заранее обезопасите себя
от возможных проблем в рамках availability zone.

00:06:03.840 --> 00:06:10.380
В случае если что-то произойдет с
одной availability zone, другая часть

00:06:10.404 --> 00:06:16.760
вашей инфраструктуры продолжит
работать во второй availability zone.

00:06:19.560 --> 00:06:25.000
Во время создания VPC обязательно
необходимо указать CIDR блок.

00:06:25.000 --> 00:06:32.880
CIDR блок - это диапазон IP адресов
доступных для ресурсов создаваемых внутри VPC.

00:06:32.880 --> 00:06:38.920
Расшифруется как Classless Inter-domain routing.
CIDR блок обозначается следующим форматом.

00:06:38.920 --> 00:06:47.960
Указывается начальный IP адрес и
через слеш указывается размер CIDR блока.

00:06:47.960 --> 00:06:51.520
Размер CIDR блока
может быть от 0 до 32.

00:06:51.520 --> 00:06:57.280
0 - это самый большой теоретически
возможный CIDR блок, а 32 - это

00:06:57.280 --> 00:07:00.520
самый маленький, который
состоит из одного IP адреса.

00:07:00.520 --> 00:07:10.440
Если вы посмотрите примеры, первая строчка это все
нули и IP адрес, а также размерность CIDR блока 0.

00:07:10.440 --> 00:07:20.440
Оно является фактически всем интернетом и
затрагивает все теоретически возможные IPv4 адреса.

00:07:20.440 --> 00:07:29.788
Если мы говорим про CIDR блок размера 32, то
здесь у нас один единственный IP адрес и тот адрес,

00:07:29.812 --> 00:07:39.160
который начальный и является адресом внутри
этого CIDR блока. В нашем случае - это 10.22.33.44.

00:07:39.160 --> 00:07:46.640
Давайте рассмотрим другой пример. Достаточно 
частый кейс, это CIDR блоки размера 24.

00:07:46.640 --> 00:07:55.240
Для этого CIDR блока доступны
256 последовательных IPv4 адресов.

00:07:55.240 --> 00:08:05.661
Если мы говорим, что у нас начальный IP
адрес 10.22.33.0, то есть вы видите последний

00:08:05.685 --> 00:08:15.360
компонент IP адреса 0, то самым
последним является 255, то есть 10.22.33.255.

00:08:15.360 --> 00:08:23.160
Таким образом в этом CIDR блоке ровно 256 IP адресов
с учетом того, что IP адрес начинается с нуля.

00:08:23.160 --> 00:08:31.000
Чтобы проще это обозначать, вместо последнего
четвертого компонента указываем * звездочку.

00:08:31.000 --> 00:08:39.640
Таким образом 10.22.33.* говорит нам о
том, что в этом CIDR блоке 256 IP адресов.

00:08:39.640 --> 00:08:42.680
Давайте рассмотрим еще
один популярный пример.

00:08:42.680 --> 00:08:52.560
Это CIDR блок размера 16 и в этом
случае он содержит 65536 IP адресов.

00:08:52.560 --> 00:09:04.600
Это высчитывается
следующим образом.

00:09:04.600 --> 00:09:16.800
Нам необходимо от 32 отнять размер нашего
CIDR блока и возвести в эту степень двойки.

00:09:16.800 --> 00:09:22.000
В нашем случае это
будет 2 в степени 16.

00:09:22.000 --> 00:09:28.560
Оно в себе содержит 65000 адресов и для
простоты обозначается следующим образом.

00:09:28.560 --> 00:09:36.820
Первые два компонента указывается и оставшиеся
два, третий и четвертый, указывается как звездочка.

00:09:36.820 --> 00:09:43.058
Таким образом мы понимаем,
что каждый из третьего и четвертого

00:09:43.082 --> 00:09:49.320
компонента IP адреса может
принимать значение от нуля до 255.

00:09:49.320 --> 00:10:00.440
Если мы говорим касательно AWS, то минимальный
размер CIDR блока в рамках AWS - это 28.

00:10:00.440 --> 00:10:06.921
28 - это 16 IP адресов.
Следует обратить внимание, что

00:10:06.945 --> 00:10:14.160
AWS резервирует для системного
использования 5 IP адресов.

00:10:14.160 --> 00:10:21.428
Таким образом в CIDR блоке 28 у
вас теоретически есть 16 IP адресов, а

00:10:21.452 --> 00:10:28.720
в AWS вы отнимаете еще 5 адресов и
для вас будут доступны 11 IP адресов.

00:10:28.720 --> 00:10:34.720
Самый большой максимально возможный 
CIDR блок в рамках AWS - это 16.

00:10:34.720 --> 00:10:40.400
Оно содержит в себе 65536 IP адресов.
Это число запоминать не нужно.

00:10:40.400 --> 00:10:47.576
И если говорить фактическое
количество IP адресов доступных

00:10:47.600 --> 00:10:55.520
для вас в AWS, то вы отнимаете
также 5 IP адресов, будет 65531.

00:10:55.520 --> 00:11:03.680
Вам нет необходимости запоминать количество 
IP адресов в том или ином CIDR блоке.

00:11:03.680 --> 00:11:09.480
Достаточно знать формулу. Повторюсь, 
мы это проходили в предыдущих лекциях.

00:11:09.480 --> 00:11:22.205
Идея в том, что вы берете размер, пусть это будет
24, используйте следующую формулу: 32-24 равняется

00:11:22.229 --> 00:11:34.440
8 и вы возводите полученное значение в эту
степень двойку. Два в степени 8. Оно равняется 256.

00:11:34.440 --> 00:11:38.153
При необходимости, зная
формулу, можете рассчитать какое

00:11:38.177 --> 00:11:41.760
количество IP адресов
доступно в любом из CIDR блоков.

00:11:41.760 --> 00:11:46.080
Я вам рекомендую запомнить лишь
некоторые самые популярные CIDR блоки.

00:11:46.080 --> 00:11:51.840
Это как обозначается весь
интернет - все нули, как обозначается

00:11:51.840 --> 00:11:59.720
один единственный IP адрес -
это слеш 32 и несколько CIDR

00:11:59.720 --> 00:12:04.280
блоков это размера 28, что
он состоит из 16 IP адресов.

00:12:04.280 --> 00:12:12.848
Потом CIDR блок размера 24, что
он состоит из 256 IP адресов и самый

00:12:12.872 --> 00:12:21.440
большой возможный - это /16,
который состоит из 65 тысяч IP адресов.

00:12:24.240 --> 00:12:30.800
Мы с вами помним, что VPC является некоторым
изолированным периметром внутри облака AWS.

00:12:30.800 --> 00:12:35.080
Subnets же входят в
определенный VPC и их следует

00:12:35.104 --> 00:12:39.880
больше воспринимать как
контейнеры или логические группы.

00:12:39.880 --> 00:12:43.040
Между этими группами вы
можете настраивать routing policy.

00:12:43.040 --> 00:12:49.840
Routing policy мы с вами пройдем в
следующей части нашей сегодняшней лекции.

00:12:49.840 --> 00:12:55.840
Когда вы создаете subnets, вам также обязательно
как и для VPC, необходимо указать CIDR блок.

00:12:55.840 --> 00:13:01.640
CIDR блоки subnet-ов не должны пересекаться
между собой. Это также верно для VPC.

00:13:01.640 --> 00:13:08.280
CIDR блоки ваших VPC не должны
пересекаться между собой в рамках AWS аккаунта.

00:13:08.280 --> 00:13:12.760
VPC работает поверх нескольких
availability zone, но в рамках одного региона.

00:13:12.760 --> 00:13:19.840
А subnets работают в определенной availability
zone и привязываются к нему во время создания.

00:13:19.840 --> 00:13:30.480
В рамках availability zone можете создать
необходимое количество subnets, нет ограничений.

00:13:30.480 --> 00:13:43.720
Единственное ограничение - это учитывать размеры 
вашего VPC, а также размеры ваших subnets.

00:13:43.720 --> 00:13:50.729
На примере справа вы видите,
что у нас есть VPC со следующим

00:13:50.753 --> 00:13:57.640
CIDR блоком. CIDR блок 
размера 22 - это 1024 IP адресов.

00:13:57.640 --> 00:14:03.040
Далее, у нас есть 4 subnets, 
2 public subnets, 2 private subnets.

00:14:03.040 --> 00:14:13.131
По одному public subnet и по одному private
subnet расположились в каждой availability

00:14:13.155 --> 00:14:23.960
zone и у каждого subnet есть свой CIDR блок
размера 24. 24 - он состоит из 256 IP адресов.

00:14:23.960 --> 00:14:36.440
А мы с вами помним, что AWS резервирует для себя 5
IP адресов, поэтому для нас доступны 251 IP адрес.

00:14:36.440 --> 00:14:41.000
Давайте остановимся на основных best
practices, связанных с настройкой VPC.

00:14:41.000 --> 00:14:45.000
Рекомендуется в самом начале
для VPC подключить как минимум

00:14:45.000 --> 00:14:49.160
две или более availability zone
и строить ваше приложение

00:14:49.160 --> 00:14:53.360
таким образом, чтобы оно
работало в нескольких availability zone.

00:14:53.360 --> 00:14:59.360
Таким образом, сразу в начале ваше
приложение будет высоко доступным.

00:14:59.360 --> 00:15:04.852
Если же вы начнете с одной availability
zone, то в дальнейшем как только вы

00:15:04.876 --> 00:15:10.368
решите, что ваше приложение должно
работать в нескольких availability zone,

00:15:10.392 --> 00:15:16.216
уже у вас будет какое-то готовое
приложение, будут готовые нагрузки и это будет

00:15:16.240 --> 00:15:21.840
дольше по времени и трудозатратнее
изменять вашу существующую архитектуру.

00:15:21.840 --> 00:15:29.528
Следствием этого best practices
является то, что рекомендуется в

00:15:29.552 --> 00:15:37.240
различных availability zone создавать
subnets одинаковых размеров.

00:15:37.240 --> 00:15:43.310
Это что-то логичное, но бывает
такое, что создается в основной

00:15:43.334 --> 00:15:50.600
availability zone большие subnets
большего размера, а в других поменьше.

00:15:50.600 --> 00:15:54.197
Если это будет проблемой в
будущем, если же возникнут

00:15:54.221 --> 00:15:58.443
проблемы с availability zone,
то у вас в других availability

00:15:58.467 --> 00:16:02.129
zone будут маленькие
subnets и есть вероятность того,

00:16:02.153 --> 00:16:06.240
что не хватит IP адресов для
обслуживания вашей нагрузки.

00:16:06.240 --> 00:16:13.888
Если же это будет равномерно, то вы не
будете привязаны к одной конкретной availability

00:16:13.912 --> 00:16:21.560
zone и можете перекидывать основные нагрузки 
на любую из существующих availability zone.

00:16:21.560 --> 00:16:31.880
Далее, следующий best practice - в рамках CIDR
блока VPC рекомендуется оставить некоторый запас.

00:16:31.880 --> 00:16:39.474
То есть, знайте, что VPC CIDR блок и
subnet CIDR блок настраиваются в самом

00:16:39.498 --> 00:16:46.800
начале, является обязательным
параметром и далее не может быть изменен.

00:16:46.800 --> 00:16:51.239
В случае subnet не так критично,
потому что вы можете этот subnet

00:16:51.263 --> 00:16:56.188
удалить и создать новый большего
размера, а с VPC все намного сложнее,

00:16:56.212 --> 00:17:01.032
потому что вам в этом случае придется
всю вашу инфраструктуру от одного

00:17:01.056 --> 00:17:05.600
VPC, который поменьше, переносить
на VPC новую, которая побольше.

00:17:05.600 --> 00:17:14.000
Это прям большая проблема, поэтому в самом начале
рекомендуется большой запас взять для размера VPC.

00:17:14.000 --> 00:17:22.040
Тем более мы за размеры VPC не оплачиваем,
поэтому есть такая возможность брать большой запас.

00:17:22.040 --> 00:17:31.160
На вопрос, какой именно запас рекомендуется брать,
рекомендую отталкиваться от следующих показателей.

00:17:31.160 --> 00:17:38.851
Если вы начинающий стартап, неизвестно
какие нагрузки будут, вы можете попробовать

00:17:38.875 --> 00:17:46.080
теоретически рассчитать нагрузку на первые
100, либо 1000, либо 10 тысяч пользователей.

00:17:46.080 --> 00:17:52.400
Далее, уже примерный расчет этих нагрузок
даст понять, какой объем ресурсов вам нужен.

00:17:52.400 --> 00:18:01.508
Теперь представьте, что рассчитанный эталонный
объем нагрузок увеличится в 1000 раз, что

00:18:01.532 --> 00:18:10.640
произойдет с вашей инфраструктурой, каких размеров
она должна быть, чтобы обслужить эти нагрузки.

00:18:10.640 --> 00:18:16.960
Исходя из этого можете прикинуть оптимальный размер
VPC, чтобы в будущем не пришлось его пересоздавать.

00:18:16.960 --> 00:18:21.386
Если же у вас уже есть нагрузки
либо в другом AWS аккаунте,

00:18:21.410 --> 00:18:25.760
может быть старый VPC, или
вы с локальной инфраструктуры

00:18:25.760 --> 00:18:31.348
мигрируете в облако, то в этом случае у вас
скорее всего уже есть определенные нагрузки,

00:18:31.372 --> 00:18:36.960
они стабильные, и ожидается, что по мере
роста компании ваши нагрузки также будут расти.

00:18:36.960 --> 00:18:42.320
В этом случае нет необходимости перемножать
на 1000, это достаточно большой запас.

00:18:42.320 --> 00:18:48.408
В этом случае, достаточно представить
нагрузки в 100 раз больше, и в этом

00:18:48.432 --> 00:18:54.520
случае вы поймете, в каких местах
какие ресурсы потребуют масштабирования.

00:18:54.520 --> 00:19:01.240
А какая-то часть ресурсов может остаться
такой же и сильно масштабироваться не будет.

00:19:01.240 --> 00:19:05.654
Исходя из этого вы поймете, какой
размер инфраструктуры будет, какое

00:19:05.678 --> 00:19:09.960
количество ресурсов и соответственно
IP адресов вам будет нужно.

00:19:09.960 --> 00:19:15.560
И исходя из этого вы подберете
оптимальный размер CIDR блока вашего VPC.

00:19:15.560 --> 00:19:26.640
И последний best practice также является
логичным, но не всегда учитывается компаниями.

00:19:26.640 --> 00:19:30.693
Часто бывает такое, что
компания начинает мигрировать в

00:19:30.717 --> 00:19:35.222
облаке, у нее есть один AWS
аккаунт, далее создается другой

00:19:35.246 --> 00:19:39.751
AWS аккаунт и другой департамент
также начинает работать в

00:19:39.775 --> 00:19:44.280
другом AWS аккаунте со своим
VPC, со своей инфраструктурой.

00:19:44.280 --> 00:19:49.160
Естественно, в какой-то момент возникает
вопрос, можно ли это все объединить.

00:19:49.160 --> 00:19:55.228
Так вот в случае, если у вас CIDR блоки
VPC из разных аккаунтов пересекаются,

00:19:55.252 --> 00:20:01.320
то вы никак не сможете между собой
соединить, это практически будет нереально.

00:20:01.320 --> 00:20:06.260
Поэтому необходимо, чтобы
IT архитектор в компании либо

00:20:06.284 --> 00:20:12.508
технический директор всегда
учитывал эти моменты, проходило это все

00:20:12.532 --> 00:20:17.785
через него централизовано и
диапазоны IP адресов, то есть

00:20:17.809 --> 00:20:23.720
CIDR блоки для VPC, выдавались
так, чтобы не было пересечений.

00:20:23.720 --> 00:20:28.828
В этом случае в будущем, даже если у вас
будут отдельные AWS аккаунты и потом вы

00:20:28.852 --> 00:20:33.960
решите все объединить, у вас не будет
проблем с соединением этих VPC между собой.

00:20:33.960 --> 00:20:42.258
В случае же, если такая ситуация произошла, то
единственное решение - это ту VPC, которую проще

00:20:42.282 --> 00:20:50.400
перенести на другой VPC с CIDR блоком не
пересекающимся с существующими VPC, мигрировать.

00:20:50.400 --> 00:21:02.400
Это может потребовать много времени и трудозатрат
от команды, поэтому у вас есть возможность, зная

00:21:02.400 --> 00:21:13.960
эти нюансы, в самом начале двигаться в правильном
направлении и избежать возможных проблем в будущем.

00:21:13.960 --> 00:21:19.600
Давайте теперь подробнее поговорим про
VPC deployment, то есть каким образом мы можем

00:21:19.624 --> 00:21:25.600
настроить VPC в зависимости от нашего приложения,
 размера компании, команды и так далее.

00:21:25.600 --> 00:21:31.701
Самый старый и традиционный подход
- это использовать один AWS аккаунт

00:21:31.725 --> 00:21:37.560
и все наши нагрузки, всю нашу
инфраструктуру хостить в одном VPC.

00:21:37.560 --> 00:21:46.040
Это не рекомендуемый подход, но для маленьких,
небольших команд и компании, оно может подойти.

00:21:46.040 --> 00:21:54.440
Более продвинутый вариант - Multiple VPCs, в одном
AWS аккаунте создаются отдельные VPC, таким образом

00:21:54.440 --> 00:22:02.280
вы нагрузки изолируете друг от друга, но тем не
менее эти нагрузки находятся в одном AWS аккаунте.

00:22:02.280 --> 00:22:06.308
Этот подход также подходит для
небольших команд и дает возможность кратно

00:22:06.332 --> 00:22:10.360
масштабироваться в будущем, то есть
никак не будет ограничивать команду.

00:22:10.360 --> 00:22:15.040
И самый продвинутый и рекомендуемый
вариант - это Multiple accounts, когда

00:22:15.040 --> 00:22:23.920
у вас каждый environment вашего приложения
диплоится в одном VPC в отдельном AWS аккаунте.

00:22:23.920 --> 00:22:33.520
Это подходит для любого размера компании, но особо
рекомендуется для крупных организаций, компаний,

00:22:33.520 --> 00:22:40.800
где есть несколько команд, департаментов и каждая
 команда двигается независимо друг от друга.

00:22:40.800 --> 00:22:49.140
Тем не менее они все будут объединены между 
собой и могут управляться централизованно.

00:22:49.140 --> 00:22:54.692
На текущий момент есть очень много
кастомных решений, инструментов, а также

00:22:54.716 --> 00:23:00.720
нативных сервисов, которые помогают
управлять большое количество AWS аккаунтов.

00:23:00.720 --> 00:23:05.960
Самый яркий пример - это AWS
Organizations и AWS Control Tower.

00:23:05.960 --> 00:23:14.320
Это те сервисы, которые активно развиваются и
очень упрощают работу с несколькими AWS аккаунтами.

00:23:14.320 --> 00:23:18.360
Давайте приведу пример, что может
находиться в разных AWS аккаунтах.

00:23:18.360 --> 00:23:25.048
Представьте у вас B2C приложение, ее
используют пользователи, физические лица

00:23:25.072 --> 00:23:31.760
и в этом случае в каждом AWS аккаунте
может находиться отдельный environment.

00:23:31.760 --> 00:23:38.927
Например, представим в первом у нас Dev среда,
 во втором у нас среда тестирования, в третьем

00:23:38.951 --> 00:23:46.040
у нас Pre-Prod и в самом последнем у нас Prod 
среда, где вы обслуживаете боевые нагрузки.

00:23:46.040 --> 00:23:53.240
Другой пример, если вы B2B компания, то в этом
случае вашими партнерами являются другие компании.

00:23:53.240 --> 00:23:57.808
Для этих компаний вы можете
создавать, выделять несколько

00:23:57.832 --> 00:24:02.400
AWS аккаунтов, в каждой из
которых будет та или иная среда.

00:24:02.400 --> 00:24:07.080
Например, у вас есть партнер
компания A, крупный партнер,

00:24:07.080 --> 00:24:12.120
для него вы выделили 3 AWS
аккаунта для каждого environment.

00:24:12.120 --> 00:24:18.080
Например, для компании A
для тестовой среды один аккаунт,

00:24:18.080 --> 00:24:26.280
для второго аккаунта мы
загрузим среду разработки

00:24:26.280 --> 00:24:31.160
и в третьей у нас будет находиться
Prod среда для этой компании.

00:24:31.160 --> 00:24:43.680
В этом случае нагрузки на среде разработки
никак не отразятся на нагрузке в Production среде.

00:24:43.680 --> 00:24:49.715
Таким образом, вы максимально
изолируете ваши нагрузки друг от друга

00:24:49.739 --> 00:24:55.504
и это может также быть полезным
в рамках некоторых регуляторных

00:24:55.528 --> 00:25:01.294
требований, которые запрещают
или рекомендуют нагрузки от разных

00:25:01.318 --> 00:25:06.900
компаний либо в зависимости
от среды отделять внутри облака.

00:25:08.500 --> 00:25:16.120
Мы с вами знаем, что у каждого сервиса есть
различные лимиты. Лимиты бывают soft и hard.

00:25:16.120 --> 00:25:20.800
Soft - это те, которые могут быть увеличены,
hard - это те, которые не могут быть увеличены.

00:25:20.800 --> 00:25:28.720
Нужно всегда помнить о hard лимитах, но
есть яркий пример лимита в рамках Amazon VPC.

00:25:28.720 --> 00:25:32.720
Он часто приходит на экзамене,
поэтому рекомендуется его запомнить.

00:25:32.720 --> 00:25:43.140
Для работы оно также вам поможет, но вы всегда
можете открыть соответствующий сервис, посмотреть

00:25:43.140 --> 00:25:50.960
какие лимиты есть у любого из сервисов и дальше
принимать решение во время вашей работы.

00:25:50.960 --> 00:26:01.680
Какой это лимит? В рамках одного AWS аккаунта для
каждого региона вы можете создавать не более 5 VPC.

00:26:01.680 --> 00:26:08.560
Этот лимит является soft, поэтому если вы
сделаете запрос, то вам этот лимит могут увеличить.

00:26:08.560 --> 00:26:15.807
Отлично, мы с вами добрались до конца второй
части нашей сегодняшней лекции и подробнее

00:26:15.831 --> 00:26:22.740
проговорили про сервис VPC, остановились
на том, что такое CIDR блок, рассмотрели

00:26:22.740 --> 00:26:31.000
компонент VPC, subnets и теперь двигаемся
дальше к третьей части нашей сегодняшней лекции.

00:26:31.000 --> 00:26:37.815
Мы с вами начинаем третью часть нашей
сегодняшней лекции и здесь посмотрим

00:26:37.839 --> 00:26:44.560
нюансы, связанные с подключением
интернета к нашим ресурсам внутри VPC.

00:26:44.560 --> 00:26:53.320
Итак, мы создаем VPC, внутри VPC создаются subnets
и есть два вида public subnet и private subnet.

00:26:53.320 --> 00:27:00.121
Здесь очень важный момент, при
создании subnet мы нигде не ставим галочку,

00:27:00.145 --> 00:27:06.480
нет такого переключателя, который
делает subnet public или private.

00:27:06.480 --> 00:27:15.040
Мы лишь в названии subnet-а указываем он public или
private, подразумевая, что в случае указания public

00:27:15.040 --> 00:27:20.080
subnet, мы будем проводить дополнительные
настройки, чтобы фактически сделать его public.

00:27:20.080 --> 00:27:28.640
Что такое public subnet, это когда у ресурсов в этом
subnet-е есть выход в интернет и обратное тоже

00:27:28.640 --> 00:27:34.100
верно, из интернета до ресурсов в public subnet тоже
можно добраться, то есть обратиться напрямую.

00:27:34.100 --> 00:27:40.060
Когда мы говорим private
subnet, то там обратный случай,

00:27:40.060 --> 00:27:46.281
ресурсы находящиеся в private subnet
не могут напрямую выйти в интернет

00:27:46.305 --> 00:27:52.080
и также из интернета к этим
ресурсам добраться также невозможно.

00:27:52.080 --> 00:28:02.080
Давайте теперь рассмотрим основные шаги, которые
позволяют наш subnet сделать фактически public.

00:28:02.080 --> 00:28:08.040
Для этого необходимо использовать компонент
Network-а, называется Internet gateway.

00:28:08.040 --> 00:28:14.280
Internet gateway создается как
отдельный ресурс и привязывается к VPC.

00:28:14.280 --> 00:28:18.240
Создание Internet gateway
- это самый первый шаг.

00:28:18.240 --> 00:28:23.680
Этот компонент является
managed, поэтому вам достаточно

00:28:23.680 --> 00:28:29.160
ее создать, а далее горизонтальное
масштабирование, высокая

00:28:29.160 --> 00:28:35.280
доступность и все дополнительные
работы, связанные с обеспечением

00:28:35.280 --> 00:28:41.680
работоспособности Internet gateway, она ложится на
плечи AWS. Вам больше о нем переживать не нужно.

00:28:41.680 --> 00:28:51.240
Вторым шагом, который позволяет наш
subnet сделать public, это настроить routing rules.

00:28:51.240 --> 00:28:56.153
Routing rules создаются в рамках 
Route tables. Route table - это

00:28:56.177 --> 00:29:01.480
то, что описывает как трафик может
передвигаться внутри вашего VPC.

00:29:01.480 --> 00:29:07.500
В самом начале, когда вы создаете VPC,
создается main route table стандартный.

00:29:07.500 --> 00:29:11.200
Рекомендуется создавать custom
route table и уже его изменять.

00:29:11.200 --> 00:29:15.480
Более того, для каждого subnet
рекомендуется создавать отдельный route table.

00:29:15.480 --> 00:29:26.680
Это позволит вам выдать только те rules, доступы,
которые достаточно для конкретного subnet-а.

00:29:26.680 --> 00:29:38.720
Итак, мы вторым шагом создаем custom route table
и в этом custom route table прописываем routing rule.

00:29:38.720 --> 00:29:45.340
В этом routing rule как destination, то
есть назначение, мы указываем интернет.

00:29:45.340 --> 00:29:49.480
В нашем случае это будет IP
адрес со всеми нулями слеш ноль.

00:29:49.480 --> 00:29:57.160
То есть это обозначение CIDR блока интернета.
А как target указываем наш Internet gateway.

00:29:57.160 --> 00:30:05.603
Таким образом, все ресурсы, находящиеся
в public subnet при обращении по сети

00:30:05.627 --> 00:30:14.070
к ресурсу из интернета, посмотрит в
наш route table, увидит, что этот трафик

00:30:14.094 --> 00:30:22.754
направляется на Internet gateway и
таким образом Internet gateway, приняв этот

00:30:22.778 --> 00:30:32.000
трафик, дальше пересылает ее в интернет
и возвращает ответ обратно этому ресурсу.

00:30:32.000 --> 00:30:37.120
Следующий компонент, который хотелось бы
вместе с вами разобрать, это Elastic IP address.

00:30:37.120 --> 00:30:40.943
Elastic IP address - это
статический публичный IPv4

00:30:40.967 --> 00:30:45.480
адрес, который может быть
привязан к ресурсам в вашем VPC.

00:30:45.480 --> 00:30:51.978
Представим случай, у вас есть приложение, в
public subnet-e находится Web tier, обрабатывает

00:30:52.002 --> 00:30:58.000
его EC2 инстанс с таким-то приватным IP
адресом и к нему привязан Elastic IP адрес.

00:30:58.000 --> 00:31:05.960
По этому статическому IP адресу, ваш
пользователь обращается к вашему приложению.

00:31:05.960 --> 00:31:14.000
Далее представим, что у вас возникли проблемы с 
Web tier и вы срочно создали другой EC2 instance и

00:31:14.000 --> 00:31:19.720
чтобы не менять конфигурации приложения, не
менять код приложения, не просить пользователя

00:31:19.720 --> 00:31:24.868
обращаться к другому IP адресу,
вы можете с легкостью этот

00:31:24.892 --> 00:31:30.040
IP адрес перепривязать к
другому EC2 инстансу и прозрачно

00:31:30.040 --> 00:31:35.520
для всех, для приложения и пользователей они
смогут успешно дальше продолжать работать, даже

00:31:35.520 --> 00:31:42.080
не заметив изменения EC2 инстанса,
обрабатывающего их запросы.

00:31:42.080 --> 00:31:52.240
Следующий компонент
Network - это NAT Gateway.

00:31:52.240 --> 00:31:58.823
Он используется в тех случаях, когда мы хотим
предоставить доступ в интернет ресурсам из private

00:31:58.847 --> 00:32:05.360
subnet, так чтобы из интернета к ресурсам в
этом private subnet не могли напрямую обратиться.

00:32:05.360 --> 00:32:11.200
Такое возможно и для того, чтобы это
реализовать, нужно выполнить несколько шагов.

00:32:11.200 --> 00:32:16.760
Самым первым делом в public subnet у вас
уже должен быть настроен выход в интернет.

00:32:16.760 --> 00:32:20.271
Для этого мы помним, первым
шагом создается subnet, далее

00:32:20.295 --> 00:32:24.120
обязательно создается Internet
Gateway, привязывается к VPC.

00:32:24.120 --> 00:32:30.683
После этого для public subnet создается
отдельный кастомный routing table и в этом

00:32:30.707 --> 00:32:37.189
route table создается routing rule,
который ассоциирован с этим subnet и в rule

00:32:37.213 --> 00:32:43.239
мы указываем, что как destination у
нас указывается интернет, а как target

00:32:43.263 --> 00:32:50.200
указывается Internet Gateway. То есть мы 
выходим в интернет через Internet Gateway.

00:32:50.200 --> 00:32:55.848
После того, как мы все эти действия
сделаем, у нас появляется доступ в интернет у

00:32:55.872 --> 00:33:01.520
ресурсов в public subnet и он фактически
становится public, не только в названии.

00:33:01.520 --> 00:33:12.400
Теперь если мы говорим про вторую часть, это
создание NAT Gateway, он создается в public subnet.

00:33:12.400 --> 00:33:18.868
Далее из private subnet у нас уже будет
создан кастомный route table, в нем создается

00:33:18.892 --> 00:33:25.360
routing rule, который как destination укажет
интернет, а как target укажет NAT Gateway.

00:33:25.360 --> 00:33:29.485
Как только NAT Gateway
получит запрос от инстансов в

00:33:29.509 --> 00:33:34.363
private subnet, посмотрит на
route table для своего subnet,

00:33:34.387 --> 00:33:38.785
увидит, что этот запрос
должен быть направлен дальше в

00:33:38.809 --> 00:33:44.040
Internet Gateway и соответственно
этот трафик направит дальше.

00:33:44.040 --> 00:33:48.080
Через Internet Gateway мы
выйдем в интернет, ответ придет

00:33:48.080 --> 00:33:53.000
обратно к Internet Gateway, Internet
Gateway направит его к NAT Gateway

00:33:53.000 --> 00:33:57.160
и NAT Gateway окончательный
последний шаг вернет этот

00:33:57.160 --> 00:34:06.060
трафик, ответ на запрос инстансу,
находящемся в private subnet.

00:34:07.360 --> 00:34:12.380
Давайте проведем небольшой квиз. Здесь 
нам необходимо для четырех видов нагрузок

00:34:12.380 --> 00:34:17.560
определить, где они должны
находиться, в private или в public subnet.

00:34:17.560 --> 00:34:23.760
Вы можете остановить это видео и подумать некоторое
время, как только будете готовы можете продолжить.

00:34:23.760 --> 00:34:33.520
Отлично, я думаю вы все ответили
правильно, давайте проверим.

00:34:33.520 --> 00:34:38.920
Как Data store instances рекомендуется
использовать private subnet.

00:34:38.920 --> 00:34:43.640
Это верно, так как из интернета
доступ к нашим data store

00:34:43.640 --> 00:34:48.480
instances не нужно, они наоборот
должны быть максимально защищены.

00:34:48.480 --> 00:34:52.640
В этом случае мы располагаем
эти инстансы в private subnet.

00:34:52.640 --> 00:34:57.343
Далее, Batch-processing instances
также относится к backend обработке

00:34:57.367 --> 00:35:02.000
и в этом случае из интернета к
этим инстансам обращаться не нужно.

00:35:02.000 --> 00:35:05.800
В этом случае мы
указываем private subnet.

00:35:05.800 --> 00:35:11.011
Для третьего случая уже вы по
названию видите ответ Backend instances,

00:35:11.035 --> 00:35:15.640
они находятся на backend и
также находятся в private subnet.

00:35:15.640 --> 00:35:20.911
Единственный случай - это Web
application instances, они в зависимости от

00:35:20.935 --> 00:35:26.720
вашей архитектуры могут находиться
либо в public subnet либо в private subnet.

00:35:26.720 --> 00:35:30.472
Я бы хотел обратить ваше
внимание, что для большинства

00:35:30.496 --> 00:35:34.603
видов нагрузок и для самых
сложных нагрузок мы используем

00:35:34.627 --> 00:35:38.661
private subnets, а лишь только
для Web tier мы используем

00:35:38.685 --> 00:35:43.080
или даже в этом случае можем
не использовать public subnets.

00:35:43.080 --> 00:35:51.448
В связи с этим при создании subnets, заранее
зная какой он будет public либо private, вам

00:35:51.472 --> 00:35:59.840
рекомендуется создавать размеры public
subnets меньше, а размеры private subnets больше.

00:35:59.840 --> 00:36:07.736
Таким образом вы с большей
долей вероятности не исчерпаете

00:36:07.760 --> 00:36:15.240
диапазон доступных IP
адресов для каждого из subnets.

00:36:15.240 --> 00:36:22.840
Следующий и пожалуй последний из
основных компонентов VPC - это Bastion hosts.

00:36:22.840 --> 00:36:29.960
Bastion hosts используется для того,
чтобы пользователи из офиса либо из

00:36:29.960 --> 00:36:38.920
домашнего компьютера могли подключаться
к инфраструктуре находящейся в облаке.

00:36:38.920 --> 00:36:44.020
В этом случае в public subnet
создается так называемый

00:36:44.020 --> 00:36:48.320
Bastion host это EC2 instance,
для которого открыт доступ

00:36:48.320 --> 00:36:55.680
по 22 порту, то есть SSH трафик,
на определенный range IP адресов.

00:36:55.680 --> 00:37:03.560
Если вы подключаетесь из локального офиса, то
у вашего офиса скорее всего есть некоторый пул

00:37:03.560 --> 00:37:09.684
адресов, из которых вы выходите в
интернет и вы можете для этого bastion

00:37:09.708 --> 00:37:15.400
host указать эти IP адреса, которые
могут обращаться по 22 порту.

00:37:15.400 --> 00:37:23.020
Все другие порты должны быть закрыты.
В этом случае из офиса можно будет подключиться

00:37:23.020 --> 00:37:28.338
к этому bastion host, далее с этого
bastion host вы можете обратиться

00:37:28.362 --> 00:37:33.680
к любому из инстансов будь то в
public subnet или в private subnet.

00:37:33.680 --> 00:37:38.379
Здесь следует обратить
внимание, что bastion host является

00:37:38.403 --> 00:37:42.855
точкой входа из интернета,
оно максимально подвержено

00:37:42.879 --> 00:37:46.950
атакам извне, поэтому
необходимо использовать все

00:37:46.974 --> 00:37:51.640
возможные методы для
обеспечения большей безопасности.

00:37:51.640 --> 00:38:01.680
Мы должны настроить security группы, network ACL и
другие компоненты, которые у нас есть в наличии.

00:38:01.680 --> 00:38:06.400
Про безопасность мы с вами поговорим в
последней части нашей сегодняшней лекции.

00:38:06.400 --> 00:38:16.640
В этой части мы подробно остановимся на таких
компонентах VPC как security группы и network ACL.

00:38:16.640 --> 00:38:24.880
Это две основные компоненты, которые помогают нам
настроить многоуровневую защиту в рамках нашего VPC.

00:38:24.880 --> 00:38:31.840
Начнем мы с Security groups. Security groups -
это firewall, который привязывается на уровне

00:38:31.840 --> 00:38:36.160
инстанса, то есть вы указываете
к какому инстансу его привязать.

00:38:36.160 --> 00:38:43.360
Важно понимать, что один инстанс может быть привязан
только к одной security группе в один момент времени.

00:38:43.360 --> 00:38:48.480
А одна и та же security группа может
быть использована различными инстансами.

00:38:48.480 --> 00:38:54.280
Security группы являются stateful firewall,
это значит, что запоминается состояние.

00:38:54.280 --> 00:38:59.920
Если говорить другими словами,
то тот трафик, который был

00:38:59.920 --> 00:39:05.732
разрешен inbound traffic, он вне
зависимости от того какой outbound

00:39:05.756 --> 00:39:11.480
traffic разрешен, все равно отправит
 ответ. Обратное тоже верно.

00:39:11.480 --> 00:39:15.835
Если у нас разрешен outbound
traffic, то вне зависимости от того

00:39:15.859 --> 00:39:20.560
какие inbound rules прописаны, мы
все равно получим обратный ответ.

00:39:20.560 --> 00:39:33.520
Если же трафик иницируется со
стороны инстанса, то здесь уже по-другому.

00:39:33.520 --> 00:39:39.680
Если у нас outbound traffic запрещен,
но inbound traffic разрешен, то

00:39:39.680 --> 00:39:44.120
к этому инстансу могут обращаться
только извне и получать ответ.

00:39:44.120 --> 00:39:55.880
Но сам инстанс так как нет разрешенного outbound
трафика, то он не может никуда в наружу обращаться.

00:39:55.880 --> 00:40:02.557
Вы можете создавать кастомные security группы,
есть дефолтовые security группы при создании

00:40:02.581 --> 00:40:08.960
subnets и по умолчанию весь inbound трафик
запрещен, а весь outbound трафик разрешен.

00:40:08.960 --> 00:40:17.325
Если же вам нужно предоставить outbound
трафик ограниченный, то вы можете удалить

00:40:17.349 --> 00:40:25.610
outbound rule в дефолтовой security
группе или рекомендуется создать кастомную

00:40:25.634 --> 00:40:33.738
security группу и специально для этих
EC2 инстансов с определенной одинаковой

00:40:33.762 --> 00:40:41.760
ролью создать security группы с
соответствующими inbound и outbound rules.

00:40:41.760 --> 00:40:46.480
Давайте рассмотрим пример. У нас есть 
кастомная security группа она привязана к

00:40:46.480 --> 00:40:52.400
EC2 инстансу в public subnet-e, у этого
инстанса есть приватный и публичный IP адрес.

00:40:52.400 --> 00:41:01.240
Так как у subnet прописан
routing rule до Internet gateway,

00:41:01.240 --> 00:41:09.040
также Internet gateway привязан к нашему VPC, то
этот EC2 инстанс может обращаться в интернет.

00:41:09.040 --> 00:41:15.280
Но давайте посмотрим, что же у нас
прописано в кастомной security группе.

00:41:15.280 --> 00:41:24.468
Как вы видите outbound трафика нет, значит
инстанс не может обращаться в интернет, но при этом

00:41:24.492 --> 00:41:33.680
прописан inbound rule это HTTP трафик по 80
порту и доступ предоставляется со всего интернета.

00:41:33.680 --> 00:41:40.880
Таким образом к этому инстансу из интернета
по публичному IP адресу могут обратиться.

00:41:40.880 --> 00:41:50.160
Так как security группа это statefull firewall, то
ответ успешно вернется, но при этом EC2 инстанс

00:41:50.160 --> 00:41:55.520
самостоятельно инициировать запрос в интернет не
может, так как не прописан outbound трафик.

00:41:55.520 --> 00:42:08.800
Чтобы понять трафик разрешен или нет, оцениваются
и проверяются все rules в security группе.

00:42:08.800 --> 00:42:15.360
Например, если к нам пришел какой-то inbound трафик,
то все rules в рамках inbound трафика проверяются,

00:42:15.360 --> 00:42:22.400
в том случае, если она разрешается, то трафик
проходит. Это же относится к outbound трафику.

00:42:22.400 --> 00:42:29.704
Есть также такое понятие как chaining security
groups, идея в том, что для каждого типа EC2

00:42:29.728 --> 00:42:37.520
инстанса в зависимости от того к какому tier она
относится создавать отдельные security группы.

00:42:37.520 --> 00:42:45.239
Например, есть у нас Web tier security
группа, которая содержит inbound rule, он

00:42:45.263 --> 00:42:53.960
разрешает доступ из интернета по 80 и 443
порту, это соответственно HTTP и HTTPS трафик.

00:42:53.960 --> 00:43:07.640
Далее, он разрешает доступ по SSH через 22 порт
на диапазон IP адресов вашей корпоративной среды.

00:43:07.640 --> 00:43:15.520
Таким образом с локального офиса вы можете
обращаться и подключаться к инстансам в Web tier.

00:43:15.520 --> 00:43:21.920
Далее, у нас есть отдельная security группа, которая
предназначена для инстансов Application уровня.

00:43:21.920 --> 00:43:27.608
В этом случае, вы прописываете
inbound rule также доступ

00:43:27.632 --> 00:43:33.320
по SSH, это 22 порт из диапазона
корпоративных IP адресов.

00:43:33.320 --> 00:43:38.508
И более того прописываете
inbound rule по 8000 порту

00:43:38.532 --> 00:43:43.720
HTTP трафик и при этом
Source является наш Web tier.

00:43:43.720 --> 00:43:50.710
Исходя из этого мы видим, что
к Application tier EC2 инстансам

00:43:50.734 --> 00:43:56.920
могут обратиться только
трафик исходящий из Web tier.

00:43:56.920 --> 00:44:02.360
По такой же логике создается
security группа для Database tier.

00:44:02.360 --> 00:44:09.320
Мы создаем inbound rule для
подключения по SSH, а также

00:44:09.320 --> 00:44:14.848
создаем дополнительный inbound
rule по порту 3306, это стандартный

00:44:14.872 --> 00:44:20.400
порт для базы данных MySQL и
как source указываем Application tier.

00:44:20.400 --> 00:44:26.459
Здесь вы видите, что EC2 инстансы из Web
tier соответствующей security группы не могут

00:44:26.483 --> 00:44:32.400
обратиться напрямую к Database tier, а
могут обратиться только к Application tier.

00:44:32.400 --> 00:44:37.408
И, соответственно, все те
EC2 инстансы с Application tier

00:44:37.432 --> 00:44:42.440
могут обратиться к Database
уровню по определенному порту.

00:44:42.440 --> 00:44:48.963
Следующим компонентом,
который помогает предоставить

00:44:48.987 --> 00:44:57.560
дополнительный уровень безопасности
в рамках VPC это Network ACLs.

00:44:57.560 --> 00:45:03.840
Network ACLs расшифруется как Network Access
Control Lists. Оно работает на уровне subnet-a.

00:45:03.840 --> 00:45:08.436
У каждого subnet-a может быть
привязан только один Network ACL, тогда

00:45:08.460 --> 00:45:12.920
как один Network ACL может
использоваться несколькими subnet-aми.

00:45:12.920 --> 00:45:21.806
Если же во время настройки VPC, subnet-ов,
вы не указали настройки Network ACL, то к subnet

00:45:21.830 --> 00:45:30.420
привяжется дефолтовый Network ACL, который
разрешает весь входящий и исходящий трафик.

00:45:30.420 --> 00:45:36.244
Следует различать, что Network
ACL является stateless firewall, таким

00:45:36.268 --> 00:45:41.920
образом он не запоминает состояние,
то есть откуда пришел запрос.

00:45:41.920 --> 00:45:49.495
Это говорит о том, что входящий
трафик он должен быть обязательно

00:45:49.519 --> 00:45:58.160
разрешен в outbound rules для того,
чтобы ваш ответ дошел до получателя.

00:45:58.160 --> 00:46:05.020
И обратный случай, когда вы что-то
запрашиваете извне, помимо того

00:46:05.044 --> 00:46:11.798
что вы открываете outbound
трафик, чтобы обратиться к сторонним

00:46:11.822 --> 00:46:18.681
ресурсам, вам необходимо также
по тому же порту и протоколу открыть

00:46:18.705 --> 00:46:25.460
inbound трафик и только в этом
случае вы сможете получать ответ.

00:46:25.460 --> 00:46:31.762
При необходимости вы можете создавать
Custom Network ACLs в этом случае по

00:46:31.786 --> 00:46:38.520
умолчанию для Custom Network ACL все
входящий и исходящий трафик запрещается.

00:46:38.520 --> 00:46:46.760
При необходимости вы можете добавить правила,
которые разрешают по тому или другому порту.

00:46:46.760 --> 00:46:53.755
Здесь вы видите пример, что inbound
трафик сотым приоритетом указано

00:46:53.779 --> 00:47:00.460
SSH подключение, которое
разрешает из определенного CIDR блока.

00:47:00.460 --> 00:47:06.920
В нашем случае, мы видим CIDR блок размера 32,
это говорит о том, что указан конкретный IP адрес.

00:47:06.920 --> 00:47:14.120
Далее, мы видим в конце приоритет звездочка,
это тот rule, который отрабатывает в самом конце.

00:47:14.120 --> 00:47:20.768
Мы с вами говорили ранее, что Security группы
проверяют все rules, если это inbound трафик,

00:47:20.792 --> 00:47:27.440
то проверяются все inbound rules, в случае
outbound трафика проверяется все outbound rules.

00:47:27.440 --> 00:47:33.537
Когда мы говорим про Network ACL
он проходит по всем соответствующим

00:47:33.561 --> 00:47:38.564
правилам в порядке приоритета
и в тот момент, когда он

00:47:38.588 --> 00:47:44.134
видит правила, которые либо
разрешают, либо запрещают, то оно

00:47:44.158 --> 00:47:50.260
продолжает с ним и остальные
оставшиеся правила не рассматривает.

00:47:52.160 --> 00:48:02.880
Давайте рассмотрим типовой трафик, который
проходит через несколько компонентов в рамках VPC.

00:48:02.880 --> 00:48:10.960
Представим, есть пользователи, они делают запрос по
соответствующему IP адресу либо по доменному имени.

00:48:10.960 --> 00:48:17.640
Этот запрос приходит к Internet gateway, далее
Internet gateway направляет трафик в route table.

00:48:17.640 --> 00:48:22.920
Route table определяет, можем
ли мы этот трафик пустить или нет.

00:48:22.920 --> 00:48:32.000
Далее, если все хорошо, двигаемся дальше, до того
как мы попадем в subnet мы добираемся до Network ACL.

00:48:32.000 --> 00:48:39.200
Проверяется все inbound rules, если все хорошо,
то разрешается трафик и мы доходим до subnet.

00:48:39.200 --> 00:48:46.120
Внутри subnet у нас есть наши EC2 инстансы.
До EC2 инстанса есть security группы, таким образом

00:48:46.120 --> 00:48:51.840
мы вначале как только попадаем в subnet
проверяем соответствующую security группу.

00:48:51.840 --> 00:49:01.360
Если разрешается inbound трафик, то трафик
пропускается и наш запрос доходит до EC2 инстанса.

00:49:01.360 --> 00:49:08.680
На уровне EC2 инстанса этот запрос обрабатывается
и что происходит, когда оно дает ответ.

00:49:08.680 --> 00:49:16.640
В этом случае он также доходит до security группы.
Мы помним, что security группа это stateful firewall.

00:49:16.640 --> 00:49:23.480
Значит в этом случае так как запрос
был извне, outbound rules не проверяется.

00:49:23.480 --> 00:49:30.240
Если бы запрос исходил изначально от EC2
инстанса, то outbound rules проверились бы.

00:49:30.240 --> 00:49:37.240
А inbound rules, соответственно, пропустились бы.
В этом случае outbound rules не проверяются.

00:49:37.240 --> 00:49:42.480
Дальше мы доходим до уровня subnet.
От subnet мы доходим до Network ACL.

00:49:42.480 --> 00:49:47.400
На стороне Network ACL обязательно проверяются
outbound rules, так как это stateless firewall.

00:49:47.400 --> 00:49:55.008
Если все хорошо, мы доходим до route
table и route table далее направляет трафик

00:49:55.032 --> 00:50:02.640
через Internet gateway до пользователей,
которые отправили изначальный запрос.

00:50:02.640 --> 00:50:06.560
Вы видите, что у нас как
минимум два уровня безопасности.

00:50:06.560 --> 00:50:13.480
Более того у нас есть route table, который может
определять можно ли этот трафик пускать или нет.

00:50:13.480 --> 00:50:17.750
То есть несколько уровней
безопасности в рамках нашего одного

00:50:17.774 --> 00:50:22.400
VPC, что является best practice и
рекомендуется к использованию.

00:50:22.400 --> 00:50:34.680
На этом слайде небольшое повторение, чтобы
закрепить как необходимо создать public subnet.

00:50:34.680 --> 00:50:42.120
Самым первым делом нам необходимо
создать Internet gateway и привязать его к VPC.

00:50:42.120 --> 00:50:48.560
Далее происходит настройка route table.
Мы должны как destination указать интернет.

00:50:48.560 --> 00:50:56.560
Обозначение интернета это IP адрес со всеми нулями
слэш ноль и как target указывается Internet gateway.

00:50:56.560 --> 00:51:00.477
Далее, нужно обратить
внимание, что у EC2 инстанса есть

00:51:00.501 --> 00:51:05.160
публичный IP адрес либо elastic
IP адрес, который не меняется.

00:51:05.160 --> 00:51:08.850
Публичный IP адрес, который
выдаётся EC2 инстансом,

00:51:08.874 --> 00:51:13.600
динамический и в случае пересоздания
инстанса может измениться.

00:51:13.600 --> 00:51:18.160
Также если мы останавливаем
инстанс и после запускаем,

00:51:18.160 --> 00:51:25.360
то публичный IP адрес также
может измениться и выдаться

00:51:25.360 --> 00:51:29.280
тот публичный IP адрес, который
на момент запуска доступен.

00:51:29.280 --> 00:51:34.800
Но следует помнить, что при перезагрузке
инстанса публичный IP адрес сохраняется.

00:51:34.800 --> 00:51:40.960
И последний шаг следует
удостовериться, что на уровне

00:51:40.960 --> 00:51:46.520
EC2 инстанса security группы
разрешают этот трафик, а на уровне

00:51:46.520 --> 00:51:52.000
subnet-a Network ACL также
разрешает inbound и outbound трафик.

00:51:52.000 --> 00:51:58.360
Отлично, на этом мы добрались до конца
четвертой части нашей сегодняшней лекции.

00:51:58.360 --> 00:52:05.520
Это заключительная часть, на этом
мы завершаем всю сегодняшнюю лекцию.

00:52:05.520 --> 00:52:13.840
Подробнее разобрали сервис VPC, все компоненты,
которые могут быть созданы в рамках этого VPC.

00:52:13.840 --> 00:52:20.560
Далее, мы познакомились с
компонентами Security группы,

00:52:20.560 --> 00:52:25.080
Network ACL и другими основными
компонентами, которые помогают

00:52:25.080 --> 00:52:34.680
нам построить безопасную и соответствующую
всем best practice-ам локальную сеть в облаке.

00:52:34.680 --> 00:52:43.820
На этом слайде видите дополнительные источники,
достаточно эти ключевые слова вбить в поисковик

00:52:43.820 --> 00:52:55.240
и в первой ссылке увидите необходимый материал.
На этом мы завершаем нашу сегодняшнюю лекцию.

00:52:55.240 --> 00:52:58.720
Спасибо за внимание. Увидимся с вами 
на следующих наших активностях.