Қайырлы күн, құрметті студенттер! Сізді келесі дәрісте көргеніме қуаныштымын. Біз Networking-ке арналған дәрістер сериясын бастаймыз. Осы аптада AWS бұлтында желіні орнату туралы сөйлесетін боламыз. Екінші аптада дәріс болмайды, бірақ ауқымды зертханалық жұмыстар болады. Оған алдыңғы дәрістерде алған барлық білімдеріңіз, сондай-ақ соңғы дәрісте қарастырылған материалдар кіреді. Үшінші аптада AWS бұлтындағы желіге жергілікті желіні қосуға арналған сервистер мен опцияларды қарастырамыз. Ендеше, бастайық. Бүгінгі дәріс төрт бөлімнен тұрады. Бірінші бөлімде зертханалық жұмыстың аясында жасайтын бұлттағы архитектурадағы келесі жақсартуларды қарастырамыз. Екінші бөлімде VPC сервисін және оның мүмкіндіктерін егжей-тегжейлі қарастырамыз. Үшінші бөлімде VPC және оның құрамдас бөліктерімен байланысты нюанстарды қарастырамыз, бұл Интернет қосылымын баптауға мүмкіндігін береді. Ал соңғы төртінші бөлімде, VPC қауіпсіздігін қамтамасыз етуге байланысты нюанстарды қарастырамыз. Дәрісіміздің бірінші бөлімінде зертханалық жұмыстың бөлігі ретінде AWS бұлтындағы инфрақұрылымды өзгертуді талқылаймыз. Бізде жаңа компоненттер VPC, Internet gateway, NAT gateway және үш subnet бар екенін көріп тұрсыз. Мұның бәрі үйлесімді жұмыс істейді, біріншіден, қауіпсіздікті қамтамасыз етеді, екіншіден, Интернетке қосылуды қажет ететін барлық ресурстар бар, олар да осы қолжетімділікке ие. Бизнес-кейс туралы айтатын болсақ, кафеде жұмыс жақсы жүріп жатыр, клиенттер көп. София мен Никхил күнделікті жұмысынан босап, AWS бұлтындағы IT-инфрақұрылымын одан әрі дамытуды талқылай бастады. Олар AWS-пен жұмыс істейтін кафеге тұрақты келушілермен кеңесті, біздің жағдайда бұл Оливия, ол Solutions Architect және біздің басты кейіпкерлеріміздің инфрақұрылымының қазіргі жағдайын тыңдағаннан кейін ол VPC дұрыс бапталуына,яғни инфрақұрылымды қорғау үшін желі және оның барлық компоненттеріне ерекше назар аударуды ұсынды. Ол, сондай-ақ, қашықтан қосылу және кейбір жұмыстарды орындау мүмкіндігі үшін Bastion Host-ті орнатуға кеңес берді. Бүгінгі дәрісімізде Bastion Host және басқа компоненттердің не екенін білеміз. Ал енді дәрісіміздің екінші бөліміне көшеміз. Дәрісіміздің екінші бөлімінде VPC сервисі мен оның құрамдас бөліктерін егжей-тегжейлі қарастырамыз. VPC дегеніміз не? VPC толығымен Virtual Private Cloud және ол AWS бұлтындағы логикалық оқшауланған бөлікті ұсынады. Бұл үйде, жұмыста орнататын жергілікті желіге мүмкіндігінше жақын және AWS оны AWS бұлтында қашықтан баптауға мүмкіндік береді. Бізде CIDR блоктарын таңдау мүмкіндігі бар, яғни жергілікті желі үшін қандай IP мекенжайлар ауқымын пайдаланғымыз келеді. Сондай-ақ, VPC өлшемі аясында subnet-тердің кез келген санын жасай аламыз. VPC ішінде қажетті ережелерді баптай аламыз, осылайша трафик әр жолмен тасымалдана алады. Сондай-ақ, subnet деңгейінде немесе жеке ресурстар деңгейінде қауіпсіздікті қамтамасыз ету үшін барлық қажетті құрамдас бөліктер бар. AWS-пен жұмыс істеу мен жергілікті жұмыс арасындағы айырмашылық мынада: аппараттық құралдармен жұмыс істеудің қажеті жоқ. Яғни, сіз кабельді желіге қоспайсыз, оларды дайындамайсыз және т.б. Бұл жұмыстың барлығы AWS дата-центрі жағында орындалды, барлығы пайдалануға дайын және бизнес тапсырмаңызға байланысты бұлтта жергілікті желіні қашықтан және жылдам орнатуға болады. VPC белгілі бір AWS аймағында жасалады. Яғни, бірнеше AWS аймақтарында жұмыс істейтін VPC жасай алмайсыз. Cross-region әрекеттесу қажет болса, әр аймақта бөлек VPC жасалады және VPC-лерді бір-біріне қосасыз. Мұны қалай жасау керектігін келесі сабақтарымызда қарастырамыз. Егер availability zone туралы айтатын болсақ, онда барлық availability zone-лар сол жасалған аймақтағы VPC үшін қолжетімді болады. Сіз жұмыс істейтін availability zone-лардың барлығын немесе кейбірін көрсетесіз және сәйкесінше осы VPC ішіндегі ресурстар сол немесе басқа availability zone-да жасалуы мүмкін. Көбінесе VPC құру кезінде кем дегенде екі availability zone көрсетіледі, бұл AWS бұлтында highly available инфрақұрылымды құруға мүмкіндік береді. Осылайша өзіңізді availability zone-дағы ықтимал мәселелерден алдын ала қорғайсыз. Бір availability zone-да бірдеңе болса, инфрақұрылымыңыздың басқа бөлігі екінші availability zone-да жұмысын жалғастырады. VPC жасаған кезде CIDR блогын көрсету керек. CIDR блогы - VPC ішінде жасалған ресурстар үшін қолжетімді IP мекенжайларының ауқымы болып табылады. Classless Inter-domain routing дегенді білдіреді. CIDR блогы келесі форматпен көрсетіледі. Бастапқы IP мекенжайы көрсетіледі және CIDR блок өлшемі қиғаш сызық арқылы көрсетіледі. CIDR блогының өлшемі 0-ден 32-ге дейін болуы мүмкін. 0 - теориялық мүмкін болатын ең үлкен CIDR блогы, ал 32 - бір IP мекенжайынан тұратын ең кішісі. Мысалдарды қарасаңыз, бірінші жолда барлық нөлдер және IP мекенжайы, CIDR блоктың өлшемі 0 болады. Бұл іс жүзінде бүкіл Интернет және барлық теориялық мүмкін болатын IPv4 мекенжайларына әсер етеді. Егер біз 32 өлшемді CIDR блогы туралы айтатын болсақ, онда бізде бір IP мекенжайы бар және бастапқы мекенжай осы CIDR блогының ішіндегі мекенжай болып табылады. Біздің жағдайда бұл 10.22.33.44. Басқа мысалды қарастырайық. Өте кең таралған жағдай - 24 өлшемді CIDR блоктары. Осы CIDR блогы үшін қол жетімді 256 дәйекті IPv4 мекенжайы бар. Біздің бастапқы IP мекенжайымыз 10.22.33.0 десек, яғни IP мекенжайының соңғы құрамдас бөлігі 0 екенін көресіз, онда ең соңғысы 255, яғни 10.22.33.255. Осылайша, бұл CIDR блогында IP мекенжайы нөлден басталатынын ескере отырып, дәл 256 IP мекенжайы бар. Оны белгілеуді жеңілдету үшін соңғы төртінші компоненттің орнына * жұлдызшаны белгілейміз. Осылайша, 10.22.33.* осы CIDR блогында 256 IP мекенжайы бар екенін білдіреді. Тағы бір танымал мысалды қарастырайық. Бұл 16 өлшемді CIDR блогы және бұл жағдайда оның құрамында 65536 IP мекенжайы бар. Бұл келесідей есептеледі. CIDR блогының өлшемін 32-ден алып тастап, оны екінің дәрежесіне дейін көтеруіміз керек. Біздің жағдайда 2 және дәрежеде 16 болады. Ол 65 000 мекенжайды қамтиды және қарапайымдылық үшін келесідей белгіленген. IP мекенжайының алғашқы екі құрамдас бөлігі, ал қалған екеуі, үшінші және төртіншісі жұлдызша ретінде көрсетіледі. Осылайша, IP мекенжайының үшінші және төртінші құрамдастарының әрқайсысы нөлден 255-ке дейінгі мәнді қабылдай алатынын түсінеміз. Егер AWS туралы айтатын болсақ, онда AWS ішіндегі ең аз CIDR блок өлшемі 28 құрайды. 28 - 16 IP мекенжайы. AWS жүйелі пайдалану үшін 5 IP мекенжайын сақтайтынын ескеріңіз. Осылайша, 28 CIDR блогында теориялық түрде 16 IP мекенжайы бар, ал AWS-те тағы 5 мекенжайды алып тастайсыз және 11 IP мекенжайы қолжетімді болады. AWS ішіндегі ең үлкен мүмкін болатын CIDR блогы - 16. Оның құрамында 65536 IP мекенжайы бар. Бұл санды есте сақтаудың қажеті жоқ. Егер AWS жүйесінде қол жетімді IP мекенжайларының нақты саны туралы айтатын болсақ, онда 5 IP мекенжайын алып тастайсыз, ол 65531 болады. Белгілі бір CIDR блогында қанша IP мекенжайы бар екенін есте сақтаудың қажеті жоқ. Ол үшін формуланы білу жеткілікті. Қайталап айтайын, бұл туралы алдыңғы дәрістерде қарастырдық. Идея мынада, бір өлшемді аласыз, мысалы, 24 болсын, келесі формуланы қолданыңыз: 32-24 = 8-ге тең және алынған мәнді екінің дәрежесіне дейін көтересіз. Екінің 8 дәрежесі. Ол 256-ға тең. Қажет болғанда, формуланы білсеңіз, CIDR блоктарының кез келгенінде қанша IP мекенжайы бар екенін есептей аласыз. Мен ең танымал CIDR блоктарының кейбірін ғана есте сақтауды ұсынамын. Бүкіл Интернет - барлық нөлдер, бір IP мекенжайы - қиғаш сызық 32 және 16 IP мекенжайынан тұратын 28 өлшемді бірнеше CIDR блоктары. Содан кейін CIDR блогының өлшемі 24, яғни ол 256 IP мекенжайынан тұрады және ең үлкені /16, ол 65 мың IP мекенжайынан тұрады. VPC - AWS бұлтының ішіндегі кейбір оқшауланған периметр екенін есте ұстаймыз. Subnets белгілі бір VPC-дің бөлігі болып табылады және оларды контейнерлер немесе логикалық топтар ретінде көбірек қарастыру керек. Осы топтардың арасында routing policy баптауға болады. Routing policy дәрісіміздің келесі бөлімінде қарастырамыз. Subnets жасағанда, VPC сияқты, CIDR блогын көрсету керек. Subnet-тердің CIDR блоктары бір-бірімен қабаттаспауы керек. Бұл VPC-ге де қатысты. VPC-дің CIDR блоктары AWS аккаунтында бір-бірімен қабаттаспау керек. VPC бірнеше availability zone үстінде жұмыс істейді, бірақ бір аймақтың аясында. Ал subnets белгілі бір availability zone-да жұмыс істейді және оны жасау кезінде байланыстырылады. Availability zone-да subnet-тердің қажетті санын жасауға болады. Мұнда ешқандай шектеулер жоқ. Жалғыз шектеу - VPC өлшемдерін, сондай-ақ subnet-тердің өлшемдерін ескеру. Оң жақтағы мысалда келесі CIDR блогы бар VPC бар екенін көруге болады. CIDR блок өлшемі 22 - 1024 IP мекенжайы. Әрі қарай, 4 subnet, 2 public subnet және 2 private subnet бар. Бір public subnet және бір private subnet әрбір availability zone-да орналасқан және әрбір subnet-те 24 өлшемді CIDR блогы бар. 24 - ол 256 IP мекенжайынан тұрады. AWS өзі үшін 5 IP мекенжайын сақтайтынын есте ұстаймыз, сондықтан 251 IP мекенжайы қолжетімді. VPC орнатуға қатысты негізгі best practice қарастырайық. Ең басында VPC-ге кемінде екі немесе одан да көп availability zone қосу және қолданбаны бірнеше availability zone-да жұмыс істейтіндей етіп құру ұсынылады. Осылайша қосымшаңыз басынан бастап жоғары қолжетімді болады. Егер бір availability zone-дан бастасаңыз, болашақта қосымшаңыз бірнеше availability zone-да жұмыс істеуі керек деп шешкен кезде, сізде дайын қосымшаның қандай да бір түрі болады, дайын жүктемелер болады және бар архитектураны өзгерту үшін ұзағырақ және көп еңбекті қажет етеді. Бұл best practice нәтижесі - әртүрлі availability zone- да бірдей өлшемдегі subnet жасау ұсынылады. Бұл қисынды нәрсе, бірақ үлкенірек өлшемдегі subnet-тер негізгі availability zone-да, ал басқаларында кішірек subnet-тер жасалатын жағдайлар болады. Болашақта бұл проблема болса, availability zone қатысты мәселелер туындаса, басқа availability zone-да сізде шағын subnets болады және жүктемеңізге қызмет көрсету үшін IP мекенжайлары жеткіліксіз болуы мүмкін. Егер ол біркелкі болса, белгілі бір availability zone-ға байланбайсыз және негізгі жүктемелерді кез келген availability zone-ға тасымалдай аласыз. Әрі қарай, келесі best practice VPC-дің CIDR блогы аясында кейбір орын қалдыру ұсынылады. Яғни, VPC CIDR блогы және subnet CIDR блогы ең басында бапталынатын міндетті параметр болып табылатынын және одан әрі өзгертуге болмайтынын ескеріңіз. Subnet жағдайында бұл соншалықты маңызды емес, өйткені осы subnet-ті жойып, үлкенірек өлшемді жаңасын жасай аласыз, бірақ VPC-де бәрі әлдеқайда күрделі, өйткені бұл жағдайда бүкіл инфрақұрылымды кішірек VPC-ден жаңа үлкен VPC-ге тасымалдауға тура келеді. Бұл шын мәнінде үлкен мәселе, сондықтан ең басында VPC өлшеміне үлкен резерв алу ұсынылады. Сондай-ақ, VPC өлшемдері үшін төлем жасамаймыз, сондықтан үлкен резервті алуға мүмкіндік бар. Қанша резерв алу ұсынылады деп сұрасаңыз, келесі көрсеткіштерден бастауды ұсынамын. Егер жаңадан стартап бастасаңыз, жүктеменің қандай болатыны белгісіз, алғашқы 100, немесе 1000 немесе 10 мың пайдаланушы үшін жүктемені теориялық түрде есептеп көруге болады. Әрі қарай, бұл жүктемелерді шамамен есептеу сізге қанша ресурстар қажет екенін көрсетеді. Енді елестетіп көріңізші, жүктемелердің есептелген анықтамалық көлемі 1000 есе артады және бұл жағдайда сіздің инфрақұрылымыңыз не болады, бұл жүктемелерге қызмет көрсету үшін қандай өлшем болуы керек. Осыған сүйене отырып, болашақта қайта жасаудың қажеті болмас үшін VPC оңтайлы өлшемін бағалай аласыз. Егер басқа AWS аккаунтында, мүмкін ескі VPC-де жүктемелер болса немесе жергілікті инфрақұрылымнан бұлтқа көшіп жатсаңыз, онда бұл жағдайда белгілі бір жүктемелер болуы мүмкін, олар тұрақты және компания дамыған сайын жұмыс жүктемеңіз де артады. Бұл жағдайда 1000-ға көбейтудің қажеті жоқ, бұл өте үлкен резерв. Яғни, 100 есе үлкен жүктемелерді елестету жеткілікті және бұл жағдайда қай жерде қандай ресурстар масштабтауды қажет ететінін түсінесіз. Бірақ кейбір ресурстар сол күйінде қалуы мүмкін және көп масштабталмайды. Осыған сүйене отырып, инфрақұрылымның өлшемі қандай болатынын, қанша ресурстар және сәйкесінше IP мекенжайлары қажет болатынын түсінесіз. Осының негізінде, VPC үшін оңтайлы CIDR блок өлшемін таңдайсыз. Және соңғы best practice, бұл да қисынды, бірақ компаниялар әрқашан ескермейді. Көп жағдайда компания бұлтқа көшуді бастайды, оның бір AWS аккаунты бар, содан кейін басқа AWS аккаунты жасалады және басқа департамент те өзінің жеке VPC, өз инфрақұрылымы бар басқа AWS аккаунтында жұмыс істей бастайды. Әрине, бір сәтте осының бәрін біріктіру мүмкін бе деген сұрақ туындайды. Сонымен, егер әртүрлі аккаунттардағы VPC CIDR блоктары қиылысса, оларды бір-бірімен байланыстыра алмайсыз, бұл іс жүзінде мүмкін емес. Сондықтан компаниядағы IT архитектор немесе техникалық директор әрқашан осы мәселелерді ескеруі керек және IP мекенжай диапазоны, яғни VPC үшін CIDR блоктары қиылысулар болмайтындай етіп шығарылады. Бұл жағдайда, болашақта бөлек AWS аккаунттары болса да, содан кейін бәрін біріктіруді шешсеңіз де, бұл VPC-лерді бір-біріне қосуда қиындықтар болмайды. Егер мұндай жағдай орын алса, онда жалғыз шешім бар, VPC-мен қабаттаспайтын CIDR блогы бар басқа VPC-ге көшіру болып табылады. Бұл командадан көп уақыт пен күш-жігерді қажет етуі мүмкін, сондықтан осы нюанстарды біле отырып, ең басында дұрыс бағытта қозғалуға және болашақта ықтимал проблемаларды болдырмауға мүмкіндік бар. Енді VPC deployment туралы толығырақ сөйлесейік, яғни қолданбаға, компания көлеміне, командаға және т.б. байланысты VPC баптау әдісі. Ең көне және дәстүрлі тәсіл - бір AWS аккаунтын пайдалану және барлық жүктемелерімізді, бүкіл инфрақұрылымымызды бір VPC-де орналастыру. Бұл тәсіл ұсынылмайды, бірақ шағын командалар мен компаниялар үшін қолайлы болуы мүмкін. Неғұрлым жетілдірілген опция - Multiple VPCs, бір AWS аккаунтында бөлек VPC жасағанда, жүктемелеріңіз бір-бірінен оқшауланады, бірақ соған қарамастан бұл жүктемелер бір AWS аккаунтында орналасқан. Бұл тәсіл шағын командалар үшін де қолайлы және болашақта бірнеше рет масштабтауға мүмкіндік береді, яғни ол команданы ешбір жолмен шектемейді. Және ең жетілдірілген және ұсынылған опция - Multiple accounts, егер қолданбаңыздың әрбір environment-і бөлек AWS аккаунтында бір VPC-де орналастырылған болса. Бұл негізінен кез келген көлемдегі компания үшін өте қолайлы, бірақ әсіресе ірі ұйымдар, бірнеше командалар, бірнеше бөлімдер бар компаниялар үшін ұсынылады және бұл жағдайда әрбір команда бір-бірінен тәуелсіз жұмыс істей алады. Дегенмен, олардың барлығы өзара байланысты болады және орталықтан басқаруға болады. Қазіргі уақытта AWS аккаунттарын басқаруға көмектесетін көптеген реттелетін шешімдер, құралдар, сонымен қатар көптеген жергілікті сервистер бар. Ең жарқын мысал - AWS Organizations және AWS Control Tower. Бұл - белсенді дамып келе жатқан және бірнеше AWS аккаунттарымен жұмысымызды айтарлықтай жеңілдететін сервистер. Әр түрлі AWS аккаунттарында не болуы мүмкін екендігі туралы мысал келтірейік. Сізде B2C қосымшасы бар екенін елестетіп көріңіз, оны пайдаланушылар, жеке адамдар пайдаланады және бұл жағдайда әрбір AWS аккаунтында жеке environment болуы мүмкін. Мысалы, елестетіп көрейік, біріншіде Dev ортасы бар, екіншісінде тестілеу ортасы бар, үшіншіде Pre-Prod және соңғысында соңғы жүктемелерге қызмет көрсететін Prod ортасы бар. Тағы бір мысал, егер B2B компаниясы болсаңыз, онда бұл жағдайда серіктестеріңіз басқа компаниялар болып табылады. Бұл компаниялар үшін әрқайсысында бір орта болатын бірнеше AWS аккаунтын жасауға және бөлуге болады. Мысалы, сізде A компаниясы, ірі серіктес бар, әр environment үшін 3 AWS аккаунтын бөлгенсіз. Мысалы, A компаниясы үшін тест ортасы үшін бір аккаунт бар, екінші аккаунт үшін әзірлеу ортасын жүктейміз, ал үшіншісінде осы компания үшін Prod ортасы болады. Бұл жағдайда әзірлеу ортасының жүктемесі Production ортасының жүктемесіне ешқандай әсер етпейді. Осылайша, жүктемелеріңізді бір-бірінен мүмкіндігінше оқшаулайсыз және бұл әртүрлі компаниялардың жүктемелеріне тыйым салатын немесе ұсынатын немесе қоршаған ортаға байланысты бұлт ішінде бөлінетін кейбір нормативтік талаптарға сәйкес пайдалы болуы мүмкін. Біз әр сервистің әртүрлі шегі бар екенін білеміз. Олар soft және hard болады. Soft - арттыруға болатындары, hard - арттыруға болмайтындары. Сіз әрқашан hard шектеулер туралы есте ұстауыңыз керек, бірақ Amazon VPC ішіндегі шектеудің нақты мысалы бар. Бұл емтиханда жиі кездеседі, сондықтан оны есте сақтау ұсынылады. Бұл жұмыста да көмектеседі, бірақ әрқашан сәйкес сервисті ашып, кез келген сервистің қандай шектеулері бар екенін көре аласыз, содан кейін жұмыс барысында шешім қабылдай аласыз. Бұл қандай шектеу? Бұл әрбір аймақ үшін бір AWS аккаунты ішінде 5 VPC-ден көп жасай алмайсыз. Бұл шектеу soft, сондықтан сұрау жасасаңыз, бұл шектеу ұлғайтылуы мүмкін. Жақсы, дәрісіміздің екінші бөлімінің соңына жеттік және VPC сервисі туралы толығырақ сөйлестік, CIDR блогы деген не екенін айттық, VPC, subnets құрамдас бөлігін қарастырдық, енді дәрісіміздің үшінші бөліміне көшеміз. Біз дәрісіміздің үшінші бөлімін бастаймыз және мұнда Интернетті VPC ішіндегі ресурстарымызға қосуға байланысты нюанстарды қарастырамыз. Сонымен, біз VPC жасаймыз, VPC ішінде subnets жасалады және public subnet, private subnet деген екі түрі бар. Мұнда өте маңызды мәселе бар: subnet құру кезінде біз еш жерде құсбелгі қоймаймыз, subnet-ті public немесе private ететін қосқыш жоқ. Біз тек subnet атауында оның public немесе private екенін көрсетеміз, бұл public деп көрсетсек, оны шын мәнінде жалпыға ортақ ету үшін қосымша параметрлерді жасайтынымызды білдіреді. Public subnet - бұл subnet-тегі ресурстардың Интернетке қол жеткізуі және керісінше де дұрыс, Интернеттен public subnet-тегі ресурстарға да қол жеткізуге болады, яғни олармен тікелей байланысасыз. Private subnet десек, онда керісінше жағдай орын алады: private subnet-те орналасқан ресурстар Интернетке тікелей кіре алмайды және бұл ресурстарға Интернеттен қол жеткізу мүмкін емес. Енді subnet-ті public жасауға мүмкіндік беретін негізгі қадамдарды қарастырайық. Ол үшін Internet gateway деп аталатын Network компонентін пайдалану керек. Internet gateway бөлек ресурс ретінде жасалады және VPC-мен байланысады. Internet gateway құру - ең бірінші қадам. Бұл компонент managed, сондықтан оны жасау жеткілікті, содан кейін көлденең масштабтау, жоғары қолжетімділік және Internet gateway функционалдығын қамтамасыз етумен байланысты барлық қосымша жұмыс AWS иығына түседі. Ол үшін енді уайымдаудың қажеті жоқ. Subnet-ті жалпыға ортақ етуге мүмкіндік беретін екінші қадам routing rules баптау болып табылады. Routing rules Route tables аясында жасалады. Route table - трафиктің VPC ішінде қалай қозғалатынын сипаттайды. Ең басында VPC жасаған кезде стандартты main route table жасалады. Custom route table жасап, оны өзгерту ұсынылады. Сонымен қатар, әрбір subnet үшін бөлек route table жасау ұсынылады. Бұл subnet үшін жеткілікті болатын ережелер мен рұқсаттарды ғана шығаруға мүмкіндік береді. Сонымен, екінші қадамда custom route table жасаймыз және осы custom route table-де routing rule жазамыз. Бұл routing rule-де destination ретінде интернетті, яғни межелі орын ретінде көрсетеміз. Біздің жағдайда бұл барлық нөлдерден кейін қиғаш сызық нөлден тұратын IP мекенжайы болады. Яғни, бұл Интернеттің CIDR блогының белгісі. Ал target ретінде біз Internet gateway көрсетеміз. Осылайша, public subnet-те орналасқан барлық ресурстар желі арқылы Интернеттен ресурсқа қол жеткізген кезде, біздің route table-ге қарап, бұл трафиктің Internet gateway-ге жіберілгенін көреді, осылайша Internet gateway осы трафикті алып, содан кейін оны Интернетке жібереді және жауапты осы ресурсқа қайтарады. Қарастыратын келесі компонент - Elastic IP address. Elastic IP address - VPC ресурстарымен байланыстырылатын тұрақты жалпы IPv4 мекенжайы. Келесі жағдайды елестетіп көрейік, сізде қосымша бар, public subnet-тe Web tier бар, оны жеке IP мекенжайы бар EC2 инстансы өңдейді және оған Elastic IP мекенжайы тіркелген. Бұл статикалық IP мекенжайы арқылы пайдаланушы қосымшаңызға кіреді. Әрі қарай, Web tier-де ақаулар бар деп елестетіп көріңіз және шұғыл түрде басқа EC2 инстансын жасадыңыз және қолданба конфигурациясын өзгертпеу, кодын өзгертпеу, пайдаланушыдан басқа IP мекенжайына кіруді сұрамау үшін осы IP мекенжайын басқа EC2 инстансына тіркей аласыз және барлығы үшін, қолданба үшін және сіздің пайдаланушыларыңыз үшін олар EC2 инстансының сұрауларын өңдеудегі өзгерісті байқамай-ақ сәтті жұмысын жалғастыра алады. Келесі Network компоненті - NAT Gateway. Ол private subnet-тегі ресурстарға Интернеттен тікелей қол жеткізу мүмкін болмайтындай, private subnet-тегі ресурстарға Интернет қатынасын ұсынғымыз келген жағдайларда қолданылады. Бұл мүмкін және оны жүзеге асыру үшін бірнеше қадамдарды орындау қажет. Ең бірінші істеу керек қадам - public subnet-те Интернетке кіруді баптау. Мұны істеу үшін бірінші қадам subnet құрамыз, содан кейін Internet Gateway жасап, VPC-ге байланыстыру керек. Осыдан кейін public subnet үшін жеке реттелетін routing table жасалады және осы subnet-пен байланыстырылған route table-де routing rule жасалады және ережеде біз destination ретінде Интернет, ал target ретінде Internet Gateway көрсетеміз. Яғни, Интернетке Internet Gateway арқылы кіреміз. Осы қадамдардың барлығын орындағаннан кейін public subnet-тегі ресурстар үшін Интернетке қол жеткізе аламыз және ол тек атымен ғана емес, шын мәнінде public болады. Енді екінші бөлік туралы айтатын болсақ, бұл NAT Gateway құру, ол public subnet-те жасалады. Әрі қарай, private subnet-тен реттелетін route table құрдық, онда routing rule жасалады, ол destination ретінде Интернетті, ал target ретінде NAT Gateway көрсетеді. NAT Gateway private subnet-тегі инстанстардан сұрауды алған бойда, ол өзінің subnet үшін route table-ге қарайды, бұл сұрау одан әрі Internet Gateway-ге жіберілу керек екенін көреді және сәйкесінше бұл трафикті әрі қарай бағыттайды. Internet Gateway арқылы Интернетке қол жеткіземіз, жауап Internet Gateway-ге оралады, Internet Gateway оны NAT Gateway-ге жібереді, және соңғы қадам NAT Gateway private subnet-те орналасқан инстансының сұрауына жауапты қайтарады. Кішкене квиз өткізейік. Мұнда жүктемелердің төрт түрі үшін олар private немесе public subnet-те орналасуы керек екенін анықтауымыз керек. Сіз бұл видеоны тоқтатып, біраз уақыт ойланып, дайын болғаннан кейін жалғастыра аласыз. Жақсы, бәріне дұрыс жауап бердіңіз деп ойлаймын, тексеріп көрейік. Data store instances ретінде private subnet пайдалану ұсынылады. Бұл дұрыс, өйткені біздің Data store instances-тарымызға Интернеттен қол жеткізудің қажеті жоқ, керісінше олар барынша қорғалған болуы керек. Бұл жағдайда бұл инстанстарды private subnet-те орналастырамыз. Әрі қарай, Batch-processing instances та backend өңдеуге қатысты және бұл жағдайда Интернеттен бұл инстанстарға қол жеткізудің қажеті жоқ. Бұл жағдайда private subnet көрсетеміз. Үшінші жағдайда жауаптың аты бойынша Backend instances көре аласыз, олар backend-те және private subnet-те орналасқан. Жалғыз жағдай - Web application instances, олар архитектураға байланысты public subnet-те немесе private subnet-те орналасуы мүмкін. Мен назарларыңызды жүктемелердің көптеген түрлері үшін және ең күрделі жүктемелер үшін private subnets қолданатынымызға аударғым келеді, бірақ тек Web tier үшін немесе тіпті бұл жағдайда public subnets пайдаланбауымыз мүмкін. Осыған байланысты subnets жасау кезінде оның public немесе private болатынын алдын ала біле отырып, кішірек public subnets пен үлкенірек private subnets жасау ұсынылады. Осылайша subnet-тердің әрқайсысы үшін қол жетімді IP мекенжайларының ауқымын тауыспайсыз. Келесі негізгі VPC компоненті - Bastion hosts. Bastion hosts кеңседегі немесе үйдегі компьютердегі пайдаланушыларға бұлтта орналасқан инфрақұрылымға қосылуға мүмкіндік беру үшін пайдаланылады. Бұл жағдайда public subnet-те Bastion host құрылады, бұл 22 порт арқылы IP мекенжайларының белгілі бір диапазонына SSH трафигі арқылы кіруге болатын EC2 инстанс. Егер жергілікті кеңседен қосылсаңыз, кеңсеңізде Интернетке кіретін белгілі бір мекенжайлар пулы болуы мүмкін және 22 портқа қол жеткізе алатын осы Bastion host үшін осы IP мекенжайларын көрсете аласыз. Барлық басқа порттар жабық болуы керек. Бұл жағдайда кеңседен осы bastion host-қа қосылуға болады, содан кейін осы bastion host-тан public subnet-те немесе private subnet-те болсын инстанстардың кез келгеніне қол жеткізуге болады. Бұл жерде айта кететін жайт, bastion host Интернеттен кіру нүктесі болып табылады, ол сырттан келетін шабуылдарға ең сезімтал, сондықтан қауіпсіздікті қамтамасыз ету үшін барлық мүмкін әдістерді қолдану қажет. Біз security топтарын, network ACL және бар барлық басқа құрамдастарды баптауымыз керек. Бүгінгі дәрісіміздің соңғы бөлімінде қауіпсіздік туралы айтатын боламыз. Бұл бөлімде security топтары және network ACL сияқты VPC компоненттеріне егжей-тегжейлі тоқталамыз. Бұл - VPC ішінде көп деңгейлі қауіпсіздікті орнатуға көмектесетін екі негізгі компонент. Біз Security groups-тан бастаймыз. Security groups - инстанс деңгейінде байланыстырылған firewall, яғни оны қай инстансқа байланыстыру керектігін көрсетесіз. Бір инстансты бір уақытта тек бір security тобына тағайындауға болатындығын түсіну маңызды. Бір security тобын әртүрлі инстанстар пайдалана алады. Security топтары stateful firewall болып табылады, бұл күйдің есте қалатынын білдіреді. Басқаша айтқанда, inbound трафикке рұқсат етілген трафик, қандай outbound трафикке рұқсат етілгеніне қарамастан, бәрібір жауап жібереді. Керісінше де дұрыс. Егер бізде outbound traffic рұқсат болса, онда қандай inbound rules көрсетілгеніне қарамастан, біз бәрібір қайта жауабын аламыз. Егер трафик инстанс жағынан басталса, онда басқаша болады. Егер outbound traffic-ке тыйым салынса, бірақ inbound traffic рұқсат етілсе, онда бұл инстансқа тек сырттан қол жеткізуге және жауап алуға болады. Бірақ инстанстың өзі рұқсат етілген outbound трафигі болмағандықтан, ол сырттан ешбір жерге қол жеткізе алмайды. Кастомдық security топтарын жасауға болады, subnets жасау кезінде әдепкі security топтары бар және әдепкі бойынша барлық inbound трафикке тыйым салынады және барлық outbound трафикке рұқсат етіледі. Шектеулі outbound трафикті қамтамасыз ету қажет болса, әдепкі security тобындағы outbound rule-ды жоюға болады немесе кастомдық security тобын жасау және арнайы осы EC2 инстанстары үшін сәйкес келетін inbound және outbound rules бар security топтарын жасау ұсынылады. Бір мысалды қарастырайық. Бізде кастомдық security тобы бар, ол public subnet-тегі EC2 инстансына байланысты, бұл инстанстың жеке және жалпыға ортақ IP мекенжайы бар. Subnet-те Internet gateway-ге дейін орнатылған routing rule болғандықтан және Internet gateway біздің VPC-ге де байланысты болғандықтан, бұл EC2 инстансы Интернетке қол жеткізе алады. Енді кастомдық security тобымызда не жазылғанын көрейік. Көріп отырғаныңыздай, outbound трафигі жоқ, бұл инстанстың Интернетке қол жеткізе алмайтынын білдіреді, бірақ inbound rule тіркелген, бұл 80 портындағы HTTP трафигі және кіру бүкіл Интернеттен қамтамасыз етіледі. Осылайша, бұл инстансқа оның жалпыға ортақ IP мекенжайы арқылы Интернеттен кіруге болады. Security тобы statefull firewall болғандықтан, жауап сәтті қайтарылады, бірақ outbound трафик тіркелмегендіктен, EC2 инстансы Интернетке сұрауды өзі бастауы мүмкін емес. Трафикке рұқсат етілген немесе жоқ екенін түсіну үшін security тобындағы барлық rules тексеріледі. Мысалы, егер қандай да бір inbound трафик келсе, онда inbound трафигіндегі барлық ережелер тексеріледі, рұқсат етілсе, трафик өтеді. Бұл outbound трафикке де қатысты. Chaining security groups сияқты ұғым бар, оның идеясы EC2 инстансының әрбір түрі үшін оның қай деңгейге жататынына байланысты бөлек security топтарын жасау. Мысалы, inbound rule қамтитын Web tier security бар, ол 80 және 443 порттары арқылы Интернеттен кіруге мүмкіндік береді, бұл сәйкесінше HTTP және HTTPS трафигі. Әрі қарай, ол корпоративтік ортаңыздағы IP мекенжайлар ауқымына 22 порт арқылы SSH қатынасына мүмкіндік береді. Осылайша, жергілікті кеңседен Web tier-дегі инстанстарға қол жеткізуге және қосылуға болады. Әрі қарай, Application деңгейінің инстанстарға арналған жеке security тобы бар. Бұл жағдайда SSH арқылы кіру үшін inbound rule көрсетесіз, бұл корпоративтік IP мекенжайларының ауқымындағы 22-порт. Сонымен қатар, сіз 8000 портында HTTP трафигі үшін inbound rule тіркейсіз, ал Source біздің Web tier болып табылады. Осының негізінде тек Web tier-ден шығатын трафик Application tier EC2 инстанстарына қол жеткізе алатынын көреміз. Дәл осындай логиканы пайдаланып, Database tier үшін security тобы жасалады. Біз SSH арқылы қосылу үшін inbound rule жасаймыз, сонымен қатар 3306 портында қосымша inbound rule жасаймыз, бұл MySQL дерекқорының стандартты порты және source ретінде Application tier көрсетіңіз. Мұнда сәйкес security тобының Web tier-дегі EC2 инстанстары Database tier деңгейіне тікелей қол жеткізе алмайтынын, бірақ тек Application tier қол жеткізе алатынын көресіз. Тиісінше, Application tier бар барлық EC2 инстанстары белгілі бір порттағы Database деңгейіне қол жеткізе алады. VPC ішінде қауіпсіздіктің қосымша деңгейін қамтамасыз етуге көмектесетін келесі құрамдас Network ACL болып табылады. Network ACLs — Network Access Control Lists дегенді білдіреді. Ол subnet деңгейінде жұмыс істейді. Әрбір subnet онымен байланыстырылған тек бір Network ACL болуы мүмкін, ал бір Network ACL бірнеше subnet-термен пайдаланылуы мүмкін. Егер VPC және subnet орнату кезінде Network ACL параметрлерін көрсетпесеңіз, онда барлық кіріс және шығыс трафикке мүмкіндік беретін әдепкі Network ACL subnet-ке бекітіледі. Айта кету керек, Network ACL stateless firewall болып табылады, сондықтан ол күйді, яғни сұрау қайдан келгенін есте сақтамайды. Бұл сіздің жауабыңыз алушыға жетуі үшін outbound rules-те кіріс трафикке рұқсат етілуі керек дегенді білдіреді. Керісінше, сіз сырттан сұраған кезде, үшінші тарап ресурстарына қол жеткізу үшін outbound трафикті ашқаныңыздан басқа, сол порт пен протоколда inbound трафикті ашуыңыз керек және тек осы жағдайда ғана жауап ала аласыз. Қажет болса, Custom Network ACLs жасай аласыз, бұл жағдайда әдепкі бойынша, Custom Network ACL үшін барлық кіріс және шығыс трафикке тыйым салынады. Қажет болса, сол немесе басқа портқа рұқсат беретін ережелерді қосуға болады. Мұнда сіз жүзінші басымдығы бар inbound трафик белгілі бір CIDR блогынан мүмкіндік беретін SSH қосылымымен көрсетілген мысалды көресіз. Біздің жағдайда 32 өлшемді CIDR блогын көреміз, бұл белгілі бір IP мекенжайы көрсетілгенін көрсетеді. Әрі қарай, соңында басымдық жұлдызшасын көреміз, бұл ең соңында өңделетін rule. Security топтары барлық ережелерді тексеретінін, егер ол inbound трафик болса, онда барлық inbound rules тексерілетінін, outbound трафик жағдайында барлық outbound rules тексерілетінін бұрын айттық. Network ACL туралы айтатын болсақ, ол барлық сәйкес ережелерді басымдылық ретімен өткізеді және рұқсат беретін немесе жоққа шығаратын ережелерді көрген кезде, ол онымен жалғастырады және қалған ережелерді қарастырмайды. VPC ішіндегі бірнеше компоненттер арқылы өтетін әдеттегі трафикті қарастырайық. Біздің пайдаланушыларымыз бар деп елестетіп көрейік, олар сәйкес IP мекенжайына немесе домендік атқа сұраныс жасайды. Бұл сұрау Internet gateway-ке келеді, содан кейін Internet gateway трафикті route table-ге жібереді. Route table бұл трафикке рұқсат бере алатынымызды немесе болмайтынымызды анықтайды. Әрі қарай, бәрі жақсы болса, біз жалғастырамыз, subnet-ке өтер алдында, Network ACL-ге барамыз. Барлық inbound rules тексеріледі, егер бәрі жақсы болса, онда трафикке рұқсат етіледі және біз subnet-ке жетеміз. Subnet ішінде бізде EC2 инстанстары бар. EC2 инстансына дейін security топтары бар, сондықтан алдымен subnet-ке кірген бойда сәйкес security тобын тексереміз. Inbound трафикке рұқсат етілсе, трафик өтеді және біздің сұрауымыз EC2 инстансына жетеді. EC2 инстансы деңгейінде бұл сұрау өңделеді және ол жауап бергенде келесі жағдай болады. Бұл жағдайда ол security тобына да жетеді. Security тобының stateful firewall екенін есте ұстаймыз. Бұл дегеніміз, сұрау сырттан болғандықтан, outbound rules тексерілмейді. Егер сұрау бастапқыда EC2 инстансынан келсе, outbound rules тексерілген болар еді. Ал inbound rules, тиісінше, өткізілмейді. Бұл жағдайда outbound rules тексерілмейді. Содан кейін біз subnet деңгейіне жетеміз. Subnet-тен біз Network ACL-ге жетеміз. Network ACL жағында outbound rules міндетті түрде тексеріледі, себебі бұл stateless firewall. Егер бәрі жақсы болса, біз route table-ге жетеміз, содан кейін route table трафикті Internet gateway арқылы бастапқы сұрауды жіберген пайдаланушыларға жібереді. Бізде қауіпсіздіктің кем дегенде екі деңгейі бар екенін көруге болады. Оның үстіне бізде бұл трафикке рұқсат етілетінін немесе болмайтынын анықтайтын route table бар. Яғни, біздің бір VPC ішіндегі қауіпсіздіктің бірнеше деңгейі, бұл best practice және пайдалануға ұсынылады. Бұл слайдта public subnet-ті құру туралы шағын қайталау бар. Бізге ең бірінші істеу керек нәрсе - Internet gateway жасау және оны VPC-ге байланыстыру. Содан кейін route table бапталынады. Біз destination ретінде Интернетті көрсетуіміз керек. Интернеттің белгіленуі - барлық нөлдер нөлдік қиғаш сызықтары бар IP мекенжайы және target ретінде Internet gateway көрсетілген. Әрі қарай, EC2 инстансында жалпыға ортақ IP мекенжайы немесе өзгермейтін elastic IP мекенжайы бар екеніне назар аудару керек. EC2 инстансы беретін жалпы IP мекенжайы динамикалық болып табылады және инстансты қайта жасағанда өзгеруі мүмкін. Сондай-ақ, егер біз инстансты тоқтатып, содан кейін оны қайта іске қоссақ, жалпыға ортақ IP мекенжайы да өзгеруі мүмкін және іске қосу кезінде қол жетімді жалпы IP мекенжайы шығарылады. Бірақ инстансты қайта іске қосқанда жалпыға ортақ IP мекенжайы сақталатынын есте ұстаған жөн. Және соңғы қадам - EC2 инстансы деңгейінде security топтары осы трафикке, ал subnet-те Network ACL деңгейінде inbound және outbound трафикке рұқсат беретініне көз жеткізу. Жақсы, осымен бүгінгі дәрісіміздің төртінші бөлімі аяқталды. Бұл соңғы бөлім, осымен бүгінгі дәрісті де аяқтаймыз. Біз VPC сервисін және осы VPC ішінде жасауға болатын барлық құрамдастарды қарастырдық. Әрі қарай, Security тобының құрамдастарымен, Network ACL және барлық best practice-терге сәйкес келетін, бұлтта қауіпсіз жергілікті желіні құруға көмектесетін басқа да негізгі компоненттермен таныстық. Бұл слайдта қосымша дереккөздерді көресіз, бұл кілт сөздерді іздеу жүйесіне енгізу жеткілікті және бірінші сілтемеде қажетті материалды көресіз. Осымен бүгінгі дәрісіміз аяқталды. Назарларыңызға рахмет. Келесі белсенділіктерде кездескенше.