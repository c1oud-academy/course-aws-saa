WEBVTT

00:00:00.000 --> 00:00:06.760
Добрый день, уважаемые студенты! Я рад вас
всех видеть на очередной лекции. Это продолжение

00:00:06.760 --> 00:00:12.560
предыдущей темы недели, а именно Compute 
Layer. Проговорим про сервисы, связанные с

00:00:12.560 --> 00:00:17.440
вычислениями. Это вторая и заключительная 
часть. Итак, давайте начнем.

00:00:21.440 --> 00:00:28.600
В сегодняшней лекции мы разберем оставшиеся
две части, связанные с сервисом Amazon EC2.

00:00:28.600 --> 00:00:35.840
Первая относится к существующим моделям
оплаты, а вторая часть - про Placement Groups.

00:00:35.840 --> 00:00:43.320
Это как управлять физическим расположением
серверов, которые мы запрашиваем в рамках EC2.

00:00:43.320 --> 00:00:54.080
Далее, мы поближе познакомимся с Spot инстансами
нашей Демо активности и будет лабораторная работа.

00:00:54.080 --> 00:01:00.280
Это - Challenge Lab, в котором вы получите
минимальное количество инструкции и по большей

00:01:00.280 --> 00:01:05.720
части будете самостоятельно решать данную 
вам задачу. То есть, есть бизнес-задача и вы

00:01:05.720 --> 00:01:14.880
технически попытаетесь ее решить. Тема лабораторной
работы - это создание динамического веб-сайта для

00:01:14.880 --> 00:01:25.360
нашего кафе. Будут отдельные две активности, Lab
Intro и Lab Review. Начинаем с вами седьмую секцию.

00:01:25.360 --> 00:01:33.080
Потому что в рамках одной большой темы у
нас идет сквозная номерация секции. Сейчас мы

00:01:33.080 --> 00:01:42.960
поговорим про доступные модели оплаты для
сервиса Amazon EC2. Существует пять различных моделей

00:01:42.960 --> 00:01:49.760
оплаты. Мы сейчас остановимся на каждой из них и
подробнее разберем. Самое первое - это On-Demand

00:01:49.760 --> 00:01:58.600
Instances используется для непостоянных, временных
или кратковременных нагрузок. Тарификация идет

00:01:58.600 --> 00:02:05.240
посекундная или почасовая, в зависимости
от типа вашего инстанса. Приведу пример.

00:02:05.240 --> 00:02:15.640
Например, вам необходимо произвести некоторые
 ресурсоемкие расчеты. Вам требуется 100

00:02:15.640 --> 00:02:25.280
инстансов определенного типа на три часа. В сумме
 300 часов. Благодаря тому, что тарификация идет

00:02:25.280 --> 00:02:33.880
почасовая либо посекундная, у вас
есть возможность эти расчеты провести

00:02:33.880 --> 00:02:44.720
максимально выгодно. Вы даете запрос на API AWS,
поднимаете 100 инстансов, запускаете ваше задание.

00:02:44.720 --> 00:02:52.680
После того как они отрабатывают вы можете
вернуть через несколько часов ваши арендованные

00:02:52.680 --> 00:02:59.840
инстансы обратно и в конце месяца придет счет на
оплату только на эти 300 часов для определенного

00:02:59.840 --> 00:03:08.680
типа инстанса согласно тарифу. Это максимально
выгодная модель оплаты, в случае если у вас ничего

00:03:08.680 --> 00:03:16.360
не известно по вашим нагрузкам. Более того вы
ничего не оплачиваете наперед, вы оплачиваете

00:03:16.360 --> 00:03:29.120
только пост фактум, то, что вы использовали.
Следующая модель оплаты - это Reserved Instances.

00:03:29.120 --> 00:03:36.880
Идея в том, что вы на один год, либо на три года
заключаете договор с AWS о том, что вы на этот

00:03:36.880 --> 00:03:47.080
период арендуете некоторый объем вычислительных
мощностей. Таким образом, зная, что вы целый год

00:03:47.080 --> 00:03:57.720
либо три года обязались арендовать и соответственно
оплачивать эти инстансы, AWS может легче

00:03:57.720 --> 00:04:02.840
планировать развитие своих дата-центров, своей
глобальной инфраструктуры и, соответственно, за

00:04:02.840 --> 00:04:11.960
эту помощь готова давать значительные скидки.
Давайте теперь рассмотрим пример, когда есть

00:04:11.960 --> 00:04:21.280
смысл покупать Reserved Instances. Представим, что
вы онлайн магазин, продаете одежду и в течение дня в

00:04:21.280 --> 00:04:32.760
обычные дни нагрузка требует 10 рабочих
поднятых EC2 инстансов. Ночью, когда все спят,

00:04:32.760 --> 00:04:39.760
тем не менее у вас есть определенная нагрузка и
как минимум три инстанса всегда задействованы.

00:04:39.760 --> 00:04:49.680
Таким образом, вы знаете, что 24 на 7 как минимум
 три инстанса у вас работают. Эти три инстанса

00:04:49.680 --> 00:04:58.480
идеально подходят под модель Reserved Instances,
так как вы в любом случае оплачиваете эти три

00:04:58.480 --> 00:05:06.720
инстанса 24 на 7. Если это Reserved Instances, то
тогда вы бы получили значительные скидки за это.

00:05:06.720 --> 00:05:22.920
Я хотел также отметить понятия как AURI, PURI и NURI.
Что же это такое? Это различные варианты оплаты

00:05:22.920 --> 00:05:32.560
ваших Reserved Instances. AURI - это All Up-front
Reserved Instances. Идея в том, что вы все то,

00:05:32.560 --> 00:05:40.480
что должны оплатить в рамках времени, год или три
года, на указанное количество инстансов всю сумму

00:05:40.480 --> 00:05:49.480
оплачиваете сразу. В случае с PURI согласно названию
Partial Up-front Reserved Instances, вы оплачиваете

00:05:49.480 --> 00:05:56.040
50 процентов сразу, а оставшиеся 50 процентов
оплачиваете ежемесячно. И самое последнее это

00:05:56.040 --> 00:06:02.160
NURI - No Up-front Reserved Instances. Идея в том,
что вы ничего не оплачиваете заранее, вы лишь только

00:06:02.160 --> 00:06:11.880
заключаете контракт и ежемесячно также как и On
Demand Instances оплачиваете выделенный объем

00:06:11.880 --> 00:06:18.680
вычислительных мощностей. В этом случае минимальная
скидка. Максимальная скидка выдается, если

00:06:18.680 --> 00:06:29.120
выбираете All Up-front Reserved Instances на три года
и обратный случай, самая минимальная скидка выдается,

00:06:29.120 --> 00:06:42.080
при No Up-front Reserved Instances на один год.
Третья модель оплаты - это Savings Plans.

00:06:42.080 --> 00:06:49.640
Она относительно новая. Идея в том, что вы также
заключаете контракт на один год либо на три года,

00:06:49.640 --> 00:06:57.000
но есть некоторые особенности работы Savings
Plans, которые делают ее более гибким решением нежели

00:06:57.000 --> 00:07:04.800
Reserved Instances. Здесь участвуют такие сервисы
как Amazon EC2, AWS Lambda и AWS Fargate. Если вы

00:07:04.800 --> 00:07:10.280
используете один или несколько этих сервисов,
то можете посмотреть в сторону Savings Plans.

00:07:10.280 --> 00:07:18.200
Идея ее в том, что вы привязываетесь к соотношению
доллар на час. Таким образом есть возможность

00:07:18.200 --> 00:07:26.400
с легкостью менять типы инстансов. Это является
достаточно хорошим преимуществом при планировании

00:07:26.400 --> 00:07:41.520
на год либо на три года вперед. Четвертая модель
оплаты - это Spot Instances. Это та модель оплаты,

00:07:41.520 --> 00:07:48.280
которая дает максимальную скидку - до 90 процентов.
Идея в том, что в больших дата-центрах AWS

00:07:48.280 --> 00:07:55.000
не всегда все железо утилизируется, то есть
используется клиентами AWS. Поэтому они зря

00:07:55.000 --> 00:07:59.288
простаивают. Для того чтобы 
они зря не простаивали, AWS

00:07:59.312 --> 00:08:03.600
предлагает вам для использования
со значительной скидкой.

00:08:03.600 --> 00:08:12.440
Но есть определенный нюанс. Так как вы запускаете
с очень большой скидкой, то при необходимости

00:08:12.440 --> 00:08:21.080
этих инстансов для On-demand использования, вам
 для каждого инстанса персонально придет за две

00:08:21.080 --> 00:08:29.960
минуты нотификация о том, что через две минуты этот
Spot Instances будет отключен так как ее передадут

00:08:29.960 --> 00:08:38.080
другому клиенту в рамках On-demand pricing.
И соответственно вам нужно в рамках этих двух

00:08:38.080 --> 00:08:46.120
минут ваши любые работы отключить, либо заменить
ее на другой тип инстанса. Если подобное поведение

00:08:46.120 --> 00:08:52.440
инстансов нормально для вас или вы можете
подготовить ваше решение таким образом, чтобы

00:08:52.440 --> 00:08:59.240
не влияло на бизнес, то вы можете запускать ваши
вычислительные мощности со значительными скидками.

00:08:59.240 --> 00:09:10.640
Оплата происходит посекундной тарификацией с
минимум 60 секунд для инстансов Amazon Linux или

00:09:10.640 --> 00:09:19.320
Ubuntu. Для всех других операционных систем
тарификация почасовая и округление происходит

00:09:19.320 --> 00:09:26.960
к ближайшему часу, то есть если вы запустили
только что, то она округлится до одного часа.

00:09:28.960 --> 00:09:41.280
Есть также еще одна разновидность Spot - это Spot
 Blocks. Идея ее в том, что вы можете запросить

00:09:41.280 --> 00:09:47.960
некоторое количество инстансов также со скидкой,
только не 90 процентов, а в районе 40-50 процентов

00:09:47.960 --> 00:09:54.920
что тоже хорошо, вы можете указать конкретное
количество времени, которое вам необходимо от

00:09:54.920 --> 00:10:02.880
одного до шести часов после чего они автоматически
отключатся, при необходимости большего времени вам

00:10:02.880 --> 00:10:12.920
нужно запросить еще раз. В этом случае вы заранее
определяете время жизни и эти инстансы не могут

00:10:12.920 --> 00:10:20.320
быть отключены или затребованы AWS до окончания
этого времени, но вы также видите, что вы не можете

00:10:20.320 --> 00:10:29.000
24 на 7 использовать Spot Block инстансы, так как
по характеру они также считаются кратковременными,

00:10:29.000 --> 00:10:36.840
с небольшой продолжительностью жизни. Идея
этих Spot Blocks также заключается в том, что есть

00:10:36.840 --> 00:10:45.240
инстансы, которые простаивают и в случае если
все инстансы запрошены по другим моделям оплаты,

00:10:45.240 --> 00:10:55.200
то запрос по Spot даст ошибку о том, что на текущий
момент свободных Spot инстансов нет в наличии.

00:10:55.200 --> 00:11:04.300
Поэтому при использовании любых Spot инстансов,
будь это Spot инстансы либо Spot Block, вам

00:11:04.300 --> 00:11:14.760
необходимо планировать дополнительно что делать
в случае если эти инстансы недоступны. Следующая

00:11:14.760 --> 00:11:22.360
и последняя модель оплаты - это Dedicated
Hosts, это тот случай когда вам физически нужно

00:11:22.360 --> 00:11:32.400
единолично владеть EC2 машиной, то есть нельзя,
чтобы другие AWS клиенты совместно использовали

00:11:32.400 --> 00:11:41.760
физически один сервер в дата-центре AWS. Какие
же это требования могут быть? Самые популярные -

00:11:41.760 --> 00:11:47.840
это требования лицензирования, если вы используете
какое-то уникальное ПО, также это могут быть

00:11:47.840 --> 00:11:53.600
регуляторные требования либо любые другие
требования в рамках той сферы, в которой вы

00:11:53.600 --> 00:12:02.680
работаете. Вы видите, что даже в этом случае AWS
 предлагает от себя решение - это Dedicated Hosts.

00:12:02.680 --> 00:12:13.760
Так как при реализации Dedicated Hosts AWS на
единицу пространства в дата-центре располагает менее

00:12:13.760 --> 00:12:19.780
мощные инстансы, чем она могла бы расположить
и поделить виртуально между несколькими AWS

00:12:19.780 --> 00:12:29.160
клиентами, то очевидно модель оплаты Dedicated
Hosts дороже чем On Demand инстансы, но у

00:12:29.160 --> 00:12:36.720
некоторых компаний есть эти требования и она
никак не может ее по-другому переиграть и для

00:12:36.720 --> 00:12:41.640
того чтобы не нарушать свои требования,
она вынуждена использовать Dedicated Hosts.

00:12:46.760 --> 00:12:53.044
В рамках Dedicated Instances есть два
варианта, Dedicated Instances и Dedicated

00:12:53.068 --> 00:12:58.948
Hosts. Dedicated Hosts отличается
тем, что предоставляет больше контроля

00:12:58.972 --> 00:13:05.054
над вашими инстансами и более того с
Dedicated Hosts вы можете использовать

00:13:05.078 --> 00:13:11.160
модель оплаты Reserved Instances.
В Dedicated Instances этой возможности нет,

00:13:11.160 --> 00:13:18.320
но тем не менее она также предоставляет вам
изолированный единоличный доступ к серверам AWS.

00:13:18.320 --> 00:13:29.880
Для достижения максимальной выгоды использования
сервиса Amazon EC2 рекомендуется комбинировать модели

00:13:29.880 --> 00:13:37.760
оплаты. Для тех ваших нагрузок, которые не
меняются 24 на 7 и постоянные, рекомендуется

00:13:37.760 --> 00:13:47.480
использовать Reserved Instances или Savings Plans.
Для других нагрузок, которые можно запланировать,

00:13:47.480 --> 00:13:57.520
которые не часто появляются, например, это
предпраздничные дни, когда люди больше делают

00:13:57.520 --> 00:14:02.280
покупок, в этом случае на все сайты, которые
продают одежду, бытовую технику и так далее

00:14:02.280 --> 00:14:08.600
растет нагрузка и все компании знают, что эта
нагрузка там растет на определенный процент.

00:14:08.600 --> 00:14:14.320
Зная это, на все нагрузки поверх, которые
временные или кратковременные, вы можете запустить

00:14:14.320 --> 00:14:21.280
с On Demand моделью оплаты. После того
как пройдет эта нагрузка, вы останетесь с теми

00:14:21.280 --> 00:14:26.680
инстансами, которые взяли с большой скидкой
через Reserved Instances или Savings Plans.

00:14:26.680 --> 00:14:37.080
Есть также другой тип расходов, которые можно
легко прервать, которые можно легко восстановить.

00:14:37.080 --> 00:14:47.120
Для таких нагрузок рекомендуется использовать
Spot Instances. На этом мы подробнее разобрали

00:14:47.120 --> 00:14:52.840
различные модели оплаты в рамках сервиса 
Amazon EC2. Мы двигаемся к следующей секции.

00:14:52.840 --> 00:15:02.840
Мы с вами добрались до восьмой секции и сейчас
поговорим про Placement Groups. Это та возможность,

00:15:02.840 --> 00:15:11.520
которая дает вам контроль определять как будут
расположены физически ваши инстансы в Availability

00:15:11.520 --> 00:15:19.600
zone. Существует три различных стратегии. Cluster
- это одна крайность, Partition, Strategy - это

00:15:19.600 --> 00:15:26.600
некоторая золотая середина и Spread - это
другая крайность расположения ваших инстансов.

00:15:26.600 --> 00:15:34.920
Давайте подробнее остановимся на каждой стратегии.
Итак, Cluster Placement Group - это та стратегия,

00:15:34.920 --> 00:15:41.480
которая помогает расположить ваши инстансы
максимально близко друг к другу. В этом случае у

00:15:41.480 --> 00:15:50.320
них общая сеть, по сети они расположены максимально
близко, таким образом и канал шире и задержки при

00:15:50.320 --> 00:15:57.920
передаче данных минимальны. Для некоторых
типов приложения это необходимо, поэтому вы будете

00:15:57.920 --> 00:16:05.480
использовать Cluster Placement Group. Нюанс, который
нужно помнить, некоторые компоненты инфраструктуры

00:16:05.480 --> 00:16:12.560
дата-центра будут общими для всех этих инстансов
 и в случае выхода из строя этого железа,

00:16:12.560 --> 00:16:18.240
часть или все ваши инстансы могут быть 
недоступными. В этом случае вам нужно будет

00:16:18.240 --> 00:16:28.240
поднимать эти инстансы в другой availability zone.
Следующая стратегия - это Partition Placement

00:16:28.240 --> 00:16:36.360
Group является некоторой золотой середины. Идея
в том, что мы по сравнению с предыдущей стратегией

00:16:36.360 --> 00:16:45.280
пытаемся распределить риск того что приложение
станет недоступным из-за какого-то общего железа и

00:16:45.280 --> 00:16:53.880
определяем некоторое количество партиций и в
каждой партиций находится определенное количество

00:16:53.880 --> 00:17:04.320
инстансов. Более того эти партиций могут
быть расположены в нескольких availability zone.

00:17:04.320 --> 00:17:10.000
Таким образом часть инстансов могут эффективно
взаимодействовать между собой так как находятся

00:17:10.000 --> 00:17:18.520
близко. Но есть также другая партиция, которая
никак физически не связана с другой партицией

00:17:18.520 --> 00:17:25.360
и в случае падения одной партиций, всех ее
инстансов или части, другие партиций не пострадают.

00:17:25.360 --> 00:17:37.640
Следующая стратегия - это Spread Placement Group -
это другая крайность расположения ваших инстансов.

00:17:37.640 --> 00:17:44.920
Идея ее в том, что каждый инстанс строго
располагается в отдельной стойке серверов.

00:17:44.920 --> 00:17:53.040
Таким образом поломка определенного железа
маловероятно повлияет на несколько инстансов.

00:17:53.040 --> 00:18:01.480
Эта placement группа также может быть распространена
на несколько availability zone. Таким образом мы

00:18:01.480 --> 00:18:11.080
завершаем последнюю нашу секцию и мы разобрали
какие стратегии распределения инстансов в рамках

00:18:11.080 --> 00:18:18.320
availability zone существует и в каких случаях
нужно использовать ту или иную стратегию.

00:18:18.320 --> 00:18:26.200
Перед тем как мы закончим сегодняшнюю лекцию, я
бы хотел пару слов сказать о Challenge Lab. В рамках

00:18:26.200 --> 00:18:34.800
лабораторной работы мы будем создавать динамический
веб-сайт для нашего кафе. Согласно кейсу, после

00:18:34.800 --> 00:18:41.120
запуска статического веб-сайта все было отлично, все
клиенты были рады, и теперь они попросили добавить

00:18:41.120 --> 00:18:46.960
возможность онлайн заказа на нашем веб-сайте.
Это требует серьезных доработок,

00:18:46.960 --> 00:18:53.400
так как до этого сайт был статический, а сейчас
должен быть динамический, и требует написания

00:18:53.400 --> 00:18:59.680
некоторого приложения. В рамках лабораторной
работы само приложение мы писать не будем,

00:18:59.680 --> 00:19:06.040
оно предварительно было создано для нас, но
все что касается инфраструктуру AWS мы будем

00:19:06.040 --> 00:19:13.560
проделывать вместе с вами. Вы здесь видите краткое
описание семи заданий, которые мы будем выполнять

00:19:13.560 --> 00:19:23.240
в рамках Challenge Lab, а также видите
инфраструктуру, которую мы в итоге получим.

00:19:23.240 --> 00:19:28.582
Если вкратце, то у нас будет instance,
приложение запущенный на EC2 сервере,

00:19:28.606 --> 00:19:33.520
будет отдельная база данных, также
мы будем создавать дополнительные

00:19:33.520 --> 00:19:40.600
ресурсы такие как VPC, Public Subnet,
Security Groups для успешного запуска нашего

00:19:40.600 --> 00:19:47.960
приложения и вся эта инфраструктура находится
на одном регионе. В рамках задания нам также нужно

00:19:47.960 --> 00:19:55.160
будет склонировать нашу инфраструктуру в
другом регионе и в будущем, согласно кейсу, мы будем

00:19:55.160 --> 00:20:00.760
использовать первый регион как Dev environment,
а второй регион как Prod environment. Таким образом

00:20:00.760 --> 00:20:06.320
на Dev environment будем разрабатывать новый
функционал, тестировать и после передавать на

00:20:06.320 --> 00:20:14.840
Prod environment. И там будет запускаться самая
корректная актуальная версия сайта, также будет

00:20:14.840 --> 00:20:29.160
отдельно храниться база реальных клиентов пекарни.
На этом мы завершаем серию лекций посвященных

00:20:29.160 --> 00:20:39.480
вычислениям. Мы достаточно подробно разобрали сервис
Amazon EC2 - это один из самых основных сервисов,

00:20:39.480 --> 00:20:49.080
связанных с вычислениями. Надеюсь вы получили
более полное представление. На этом слайде вы

00:20:49.080 --> 00:20:56.160
видите полезные ссылки, отдельно ссылку вбивать
не нужно, достаточно ключевые слова, которые вы

00:20:56.160 --> 00:21:03.880
видите, вбить в поисковик и нужная страница будет
в выдаче первая нерекламная ссылка. На этом мы

00:21:03.880 --> 00:21:09.720
завершаем сегодняшнюю лекцию. Спасибо за 
внимание! Увидимся на следующих активностях.
