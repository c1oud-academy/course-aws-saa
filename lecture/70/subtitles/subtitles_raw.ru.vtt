WEBVTT

00:00:00.000 --> 00:00:06.760
Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной лекции. Это продолжение

00:00:06.760 --> 00:00:12.560
предыдущей темы недели, а именно Compute Layer. Проговорим про сервисы, связанные с

00:00:12.560 --> 00:00:17.440
вычислениями. Это вторая и заключительная часть. Итак, давайте начнем.

00:00:21.440 --> 00:00:28.600
В сегодняшней лекции мы разберем оставшиеся две части, связанные с сервисом Amazon EC2. Первая,

00:00:28.600 --> 00:00:35.840
она относится к существующим моделям оплаты, а вторая часть это про Placement Groups. Это то,

00:00:35.840 --> 00:00:43.320
как мы можем управлять физическим расположением серверов, которые мы запрашиваем в рамках EC2.

00:00:43.320 --> 00:00:54.080
Далее мы поближе познакомимся с spot-инстанциями нашей демо-активности и будет у нас лабораторная

00:00:54.080 --> 00:01:00.280
работа. Это Challenge Lab, в котором вы получите минимальное количество инструкции и по большей

00:01:00.280 --> 00:01:05.720
части будете самостоятельно решать данную вам задачу. То есть, есть бизнес-задача и вы

00:01:05.720 --> 00:01:14.880
технически пытаетесь ее решить. Тема лабораторной работы это создание динамического веб-сайта для

00:01:14.880 --> 00:01:25.360
нашего кафе. Будет отдельные две активности, Lab Intro и Lab Review. Начинаем с вами седьмую секцию.

00:01:25.360 --> 00:01:33.080
Седьмая, потому что в рамках одной большой темы у нас идет сквозная номерация секции. Сейчас мы

00:01:33.080 --> 00:01:42.960
поговорим про доступные модели оплаты для сервиса Amazon EC2. Существует пять различных моделей

00:01:42.960 --> 00:01:49.760
оплаты. Мы сейчас остановимся на каждой из них и подробнее разберем. Самое первое это on-demand

00:01:49.760 --> 00:01:58.600
instances используется для нагрузок непостоянных, временных или кратковременных. Торификация идет

00:01:58.600 --> 00:02:05.240
по секундной или по часовой, в зависимости от типа вашего инстанца. Приведу пример.

00:02:05.240 --> 00:02:15.640
Например вам необходимо произвести некоторые ресурсоемкие расчеты. Вам требуется 100

00:02:15.640 --> 00:02:25.280
инстанцев определенного типа на три часа. В сумме 300 часов. Благодаря тому, что троификация идет

00:02:25.280 --> 00:02:33.880
по часовой либо по секундной, у вас есть возможность эту операцию эти расчеты провести

00:02:33.880 --> 00:02:44.720
максимально выгодно. Вы даете запрос на API AWS, поднимаете 100 инстанцев, запускаете ваше задание.

00:02:44.720 --> 00:02:52.680
После того как они отрабатывают вы можете вернуть через сколько-то часов ваши арендованные

00:02:52.680 --> 00:02:59.840
инстанции обратно и в конце месяца придет счет на оплату только на эти 300 часов для определенного

00:02:59.840 --> 00:03:08.680
типа инстанца согласно тарифу. Это максимально выгодная модель оплаты в случае если у вас ничего

00:03:08.680 --> 00:03:16.360
не известно по вашим нагрузкам. Более того вы ничего не оплачиваете наперед, вы оплачиваете

00:03:16.360 --> 00:03:29.120
только пост фактум то что вы использовали. Следующая модель оплаты это Reserved Instances.

00:03:29.120 --> 00:03:36.880
Идея в том что вы на один год либо на три года садитесь на договор с AWS о том что вы на этот период

00:03:36.880 --> 00:03:47.080
арендуете некоторый объем вычислительных мощностей. Таким образом, зная что вы целый год

00:03:47.080 --> 00:03:57.720
либо три года обязались арендовать и соответственно оплачивать эти инстанции AWS может легче

00:03:57.720 --> 00:04:02.840
планировать развитие своих дата центров, своей глобальной инфраструктуры и соответственно за

00:04:02.840 --> 00:04:11.960
эту помощь готова давать значительные скидки. Давайте теперь рассмотрим пример когда есть

00:04:11.960 --> 00:04:21.280
смысл покупать Reserved Instances. Представим что вы онлайн магазин продаете одежду и в течение дня в

00:04:21.280 --> 00:04:32.760
обычные дни нагрузка требует 10 EC2 инстанцев рабочих поднятых. Ночью когда все спят тем не

00:04:32.760 --> 00:04:39.760
менее у вас есть определенная нагрузка и три инстанца всегда задействованы как минимум. Таким

00:04:39.760 --> 00:04:49.680
образом вы знаете что 24 на 7 как минимум три инстанца всегда у вас работают. Эти три инстанца

00:04:49.680 --> 00:04:58.480
идеально подходят под модель Reserved Instances так как вы в любом случае оплачиваете эти три

00:04:58.480 --> 00:05:06.720
инстанца 24 на 7. Если бы это были Reserved Instances, то тогда вы бы еще получили значительные скидки за это.

00:05:06.720 --> 00:05:22.920
Я бы хотел также здесь отметить такие понятия как Auri, Puri и Nuri. Что же это такое? Это различные

00:05:22.920 --> 00:05:32.560
варианты оплаты ваших Reserved Instances. Auri это All Up Front Reserved Instances. Идея в том что вы все то что

00:05:32.560 --> 00:05:40.480
должны оплатить в рамках времени год или три года на указанное количество инстанцев всю сумму

00:05:40.480 --> 00:05:49.480
оплачиваете сразу. В случае с Puri согласно названию Partial Up Front Reserved Instances вы оплачиваете 50

00:05:49.480 --> 00:05:56.040
процентов сразу, а оставшиеся 50 процентов оплачиваете ежемесячно. И самое последнее это

00:05:56.040 --> 00:06:02.160
Nuri No Up Front Reserved Instances. Идея в том что вы ничего не оплачиваете заранее вы лишь только

00:06:02.160 --> 00:06:11.880
садитесь на контракт и ежемесячно также как и On Demand Instances оплачиваете выделенный объем

00:06:11.880 --> 00:06:18.680
вычислительных мощностей. В этом случае минимальная скидка. Максимальная скидка дается в случае если

00:06:18.680 --> 00:06:29.120
вы выбираете All Up Front Reserved Instances на три года и обратная самая минимальная скидка получается

00:06:29.120 --> 00:06:42.080
когда вы берете No Up Front Reserved Instances на один год. Третья модель оплаты это Savings Plans. Она

00:06:42.080 --> 00:06:49.640
относительно новая. Идея в том что вы также садитесь на контракт на один год либо на три года,

00:06:49.640 --> 00:06:57.000
но есть некоторые особенности работы Savings Plans которые делают ее более гибким решением нежели

00:06:57.000 --> 00:07:04.800
Reserved Instances. Здесь участвуют такие сервисы как Amazon EC2 AWS Lambda и AWS Fargate. Если вы

00:07:04.800 --> 00:07:10.280
используете один или несколько этих сервисов то можете посмотреть в сторону Savings Plans. Идея

00:07:10.280 --> 00:07:18.200
ее в том что вы привязываетесь к соотношению доллар на час. Таким образом есть возможность

00:07:18.200 --> 00:07:26.400
с легкостью менять типы инстанцев. Что является достаточно хорошим преимуществом при планировании

00:07:26.400 --> 00:07:41.520
на год либо на три года вперед. Четвертая модель оплаты это Spot Instances. Это та модель оплаты

00:07:41.520 --> 00:07:48.280
которая дает максимальную скидку до 90 процентов скидки. Идея в том что в больших дата-центрах AWS

00:07:48.280 --> 00:07:55.000
не всегда все железо утилизируется. То есть используется клиентами AWS. Поэтому они зря

00:07:55.000 --> 00:08:03.600
простаивают. AWS чтобы они зря не простаивали дает со значительной скидкой вам в использовании. Но

00:08:03.600 --> 00:08:12.440
есть определенный нюанс. Так как вы запускаете с очень большой скидкой то при необходимости

00:08:12.440 --> 00:08:21.080
этих инстанцев для on-demand использования вам для каждого инстанца персонально придет за две

00:08:21.080 --> 00:08:29.960
минуты нотификация о том что через две минуты этот Spot Instances будет отключен. Так как ее передадут

00:08:29.960 --> 00:08:38.080
другому клиенту в рамках on-demand прайсинга. И соответственно вам нужно в рамках этих двух

00:08:38.080 --> 00:08:46.120
минут ваши любые работы отключить либо заменить ее на другой тип инстанца. Если подобное поведение

00:08:46.120 --> 00:08:52.440
инстанцев нормально для вас или вы можете подготовить ваше решение таким образом чтобы

00:08:52.440 --> 00:08:59.240
не влияло на бизнес то вы можете запускать ваши ввечислительные мощности со значительными скидками.

00:08:59.240 --> 00:09:10.640
Оплата происходит с по секундной тарификации с минимум 60 секунд для инстанцев Amazon Linux или

00:09:10.640 --> 00:09:19.320
Ubuntu. Для всех других операционных систем тарификация происходит по часовой и округление

00:09:19.320 --> 00:09:26.960
происходит к ближайшему часу то есть если вы запустили только что она округлиться до одного часа.

00:09:26.960 --> 00:09:41.280
Есть также еще одна разновидность Spot это Spot Blocks. Идея ее в том что вы можете запросить

00:09:41.280 --> 00:09:47.960
некоторое количество инстанцев также со скидкой это не 90 процентов это в районе 40-50 процентов

00:09:47.960 --> 00:09:54.920
что тоже хорошо вы можете указать конкретное количество времени которое вам необходимо от

00:09:54.920 --> 00:10:02.880
одного до шести часов после чего они автоматически отключится при необходимости большего времени вам

00:10:02.880 --> 00:10:12.920
нужно запросить еще раз. В этом случае вы заранее определяете время жизни и эти инстанции не могут

00:10:12.920 --> 00:10:20.320
быть отключены или затребованы AWS до окончания этого времени но вы также видите что вы не можете

00:10:20.320 --> 00:10:29.000
24 на 7 использовать Spot Block инстанции так как по характеру они также считаются кратковременными

00:10:29.000 --> 00:10:36.840
с небольшой продолжительностью жизни. Идея этих Spot Blocks также заключается в том что есть

00:10:36.840 --> 00:10:45.240
инстанции которые простаивают и в случае если все инстанции запрошены по другим моделям оплаты

00:10:45.240 --> 00:10:55.200
то запрос по Spot даст вам ошибку о том что на текущий момент свободных Spot Инстанций нет в наличии

00:10:55.200 --> 00:11:04.300
поэтому при использовании любых Spot Инстанций будь это Spot Инстанции либо Spot Block вам

00:11:04.300 --> 00:11:14.760
необходимо планировать дополнительно что делать в случае если эти инстанции недоступны. Следующее

00:11:14.760 --> 00:11:22.360
и последняя модель оплаты это Dedicated Hosts это тот случай когда вам физически нужно

00:11:22.360 --> 00:11:32.400
единолично владеть EC2 машиной то есть нельзя чтобы другие AWS клиенты совместно использовали

00:11:32.400 --> 00:11:41.760
физически один сервер в дата центре AWS. Какие же это требования могут быть? Самые популярные это

00:11:41.760 --> 00:11:47.840
требования лицензирования если вы используете какое-то уникальное ПО также это могут быть

00:11:47.840 --> 00:11:53.600
регуляторные требования либо любые другие требования в рамках той сферы в которой вы

00:11:53.600 --> 00:12:02.680
работаете. Вы видите что даже в этом случае AWS предлагает от себя решение это Dedicated Hosts

00:12:02.680 --> 00:12:13.760
так как при реализации Dedicated Hosts AWS на единицу пространства в дата центре располагает менее

00:12:13.760 --> 00:12:19.780
мощные инстанции чем она могла бы расположить и поделить виртуально между несколькими AWS

00:12:19.780 --> 00:12:29.160
клиентами то очевидно модель оплаты Dedicated Hosts она дороже чем On Demand Инстанции но у

00:12:29.160 --> 00:12:36.720
некоторых компаний есть эти требования и она никак не может ее по-другому переиграть и для

00:12:36.720 --> 00:12:41.640
того чтобы не нарушать свои требования она вынуждена использовать Dedicated Hosts.

00:12:46.760 --> 00:12:56.640
В рамках Dedicated Instances есть два варианта это Dedicated Instances и Dedicated Hosts. Dedicated Hosts

00:12:56.640 --> 00:13:03.880
отличается тем что предоставляет больше контроль над вашими инстанциями и более того с Dedicated

00:13:03.880 --> 00:13:11.160
Hosts вы можете использовать модель оплаты Reserved Instances. В Dedicated Instances этой возможности нет

00:13:11.160 --> 00:13:18.320
но тем не менее она также предоставляет вам изолированный единоличный доступ к серверам AWS.

00:13:18.320 --> 00:13:29.880
Для достижения максимальной выгоды использования сервиса Amazon EC2 рекомендуется комбинировать модели

00:13:29.880 --> 00:13:37.760
оплаты. Для тех ваших нагрузок которые не меняются 24 на 7 и постоянные рекомендуется

00:13:37.760 --> 00:13:47.480
использовать Reserved Instances или Savings Plans. Для других нагрузок которые можно запланировать

00:13:47.480 --> 00:13:57.520
которые не часто появляются например это предпраздничные дни когда люди больше делают

00:13:57.520 --> 00:14:02.280
покупок в этом случае на все сайты которые продают одежду, бытовую технику и так далее

00:14:02.280 --> 00:14:08.600
растет нагрузка и все компании знают что эта нагрузка там растет на определенный процент.

00:14:08.600 --> 00:14:14.320
Зная это на все нагрузки поверх которые временные кратковременные вы можете запустить

00:14:14.320 --> 00:14:21.280
с On Demand моделью оплаты. После того как пройдет эта нагрузка вы останетесь с теми

00:14:21.280 --> 00:14:26.680
инстанциями которые взяли с большой скидкой через Reserved Instances или Savings Plans.

00:14:26.680 --> 00:14:37.080
Есть также другой тип расходов которые можно легко прервать, которые можно легко восстановить.

00:14:37.080 --> 00:14:47.120
Для таких нагрузок рекомендуется использовать Spot Instances. На этом мы подробнее разобрали

00:14:47.120 --> 00:14:52.840
различные модели оплаты в рамках сервиса Amazon EC2. Мы двигаемся к следующей секции.

00:14:52.840 --> 00:15:02.840
Мы с вами добрались до восьмой секции и сейчас поговорим про Placement Groups. Это та возможность

00:15:02.840 --> 00:15:11.520
которая дает вам контроль определять как будут расположены физически ваши инстанции в Availability

00:15:11.520 --> 00:15:19.600
зоне. Существует три различных стратегии. Cluster это одна крайность, Partition, Strategy это

00:15:19.600 --> 00:15:26.600
некоторая золотая середина и Spread это другая крайность расположения ваших инстанций. Давайте

00:15:26.600 --> 00:15:34.920
подробнее остановимся на каждой стратегии. Итак Cluster Placement Group это та стратегия

00:15:34.920 --> 00:15:41.480
которая помогает расположить ваши инстанции максимально близко друг к другу. В этом случае

00:15:41.480 --> 00:15:50.320
у них общая сеть по сети они расположены максимально близко таким образом и канал шире и задержки при

00:15:50.320 --> 00:15:57.920
передаче данных минимальны. Для некоторых типов приложения это необходимо поэтому вы будете

00:15:57.920 --> 00:16:05.480
использовать Cluster Placement Group. Нюанс который нужно помнить это некоторые компоненты инфраструктуры

00:16:05.480 --> 00:16:12.560
дата центра они будут общими для всех этих инстанций и в случае выхода из строя этого железа

00:16:12.560 --> 00:16:18.240
часть или все ваши инстанции могут быть недоступными. В этом случае вам нужно будет

00:16:18.240 --> 00:16:28.240
поднимать эти инстанции в другой availability зоне. Следующая стратегия это Partition Placement

00:16:28.240 --> 00:16:36.360
Group является некоторой золотой середины. Идея в том что мы по сравнению с предыдущей стратегией

00:16:36.360 --> 00:16:45.280
пытаемся распределить риск того что приложение станет недоступным из-за какого-то общего железа и

00:16:45.280 --> 00:16:53.880
определяем некоторое количество партий и в каждой партий находятся определенное количество

00:16:53.880 --> 00:17:04.320
инстанций. Более того эти партий они могут быть расположены в нескольких availability зонах

00:17:04.320 --> 00:17:10.000
таким образом часть инстанцев могут эффективно взаимодействовать между собой так как находятся

00:17:10.000 --> 00:17:18.520
близко. Но есть также другая партий которая никак физически не связана с другой партий

00:17:18.520 --> 00:17:25.360
и в случае падения одной партий всех ее инстанцев или части другие партий не пострадают.

00:17:25.360 --> 00:17:37.640
Следующая стратегия это Spread Placement Group это другая крайность расположения ваших инстанцев.

00:17:37.640 --> 00:17:44.920
Идея ее в том что каждый инстанц строго располагается в отдельной стойке серверов таким

00:17:44.920 --> 00:17:53.040
образом поломка определенного железа она маловероятно повлияет на несколько инстанцев.

00:17:53.040 --> 00:18:01.480
Эта placement группа также может быть распространена на несколько availability зон. Таким образом мы

00:18:01.480 --> 00:18:11.080
завершаем последнюю нашу секцию и мы разобрали какие стратегии распределения инстанцев в рамках

00:18:11.080 --> 00:18:18.320
availability зон существует и в каких случаях нужно использовать тот или ту или иную стратегию.

00:18:18.320 --> 00:18:26.200
Перед тем как мы закончим сегодняшнюю лекцию я бы хотел пару слов сказать о Challenge Lab. В рамках

00:18:26.200 --> 00:18:34.800
лабораторной работы мы будем создавать динамический веб-сайт для нашего кафе. Согласно кейсу после

00:18:34.800 --> 00:18:41.120
запуска статического веб-сайта все было отлично все клиенты были рады теперь они попросили добавить

00:18:41.120 --> 00:18:46.960
возможность онлайн заказа на нашем веб-сайте. Это требует некоторых серьезных доработок так как

00:18:46.960 --> 00:18:53.400
до этого был сайт статический сейчас он должен быть динамический внутри какая-то логика и требует

00:18:53.400 --> 00:18:59.680
написание некоторого приложения. В рамках лабораторной работы само приложение мы писать не будем

00:18:59.680 --> 00:19:06.040
она предварительно была приготовлена для нас но все что касается инфраструктуру VWS мы будем

00:19:06.040 --> 00:19:13.560
проделывать вместе с вами. Вы здесь видите краткое описание семи заданий которые мы будем выполнять

00:19:13.560 --> 00:19:23.240
в рамках Challenge Lab а также видите ту инфраструктуру которую мы в итоге получим. Если вкратце то у нас

00:19:23.240 --> 00:19:33.520
будет instance приложение запущены на EC2 сервере будет отдельная база данных также мы будем создавать

00:19:33.520 --> 00:19:40.600
дополнительные ресурсы такие как VPC, Public Subnet, Security группы для успешного запуска нашего

00:19:40.600 --> 00:19:47.960
приложения и вся эта инфраструктура находится на одном регионе. В рамках задания нам также

00:19:47.960 --> 00:19:55.160
нужно будет склонировать нашу инфраструктуру в другом регионе и в будущем согласно кейсу мы

00:19:55.160 --> 00:20:00.760
будем использовать первый регион как Dev environment, а второй регион как Prot environment. Таким

00:20:00.760 --> 00:20:06.320
образом на Dev environment будем разрабатывать новый функционал, тестировать и после передавать на

00:20:06.320 --> 00:20:14.840
Prot environment. На Prot environment будет запускаться самая корректная актуальная версия сайта также

00:20:14.840 --> 00:20:29.160
будет отдельно храниться база реальных клиентов пекарни. На этом мы завершаем серию лекций посвященных

00:20:29.160 --> 00:20:39.480
вычислениям. Мы достаточно подробно разобрали сервис Amazon EC2 это один из самых основных сервисов

00:20:39.480 --> 00:20:49.080
связанных с вычислениями. Надеюсь вы получили более полное представление. На этом слайде вы

00:20:49.080 --> 00:20:56.160
видите полезные ссылки отдельно ссылку вбивать не нужно достаточно ключевые слова которые вы

00:20:56.160 --> 00:21:03.880
видите вбить в поисковик и нужная страница будет в выдаче первая нерекламная ссылка. На этом мы

00:21:03.880 --> 00:21:09.120
завершаем нашу сегодняшнюю лекцию. Спасибо за внимание увидимся с вами на следующих наших

00:21:09.120 --> 00:21:09.720
активностях.