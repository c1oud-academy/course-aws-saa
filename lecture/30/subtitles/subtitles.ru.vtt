WEBVTT

00:00:00.000 --> 00:00:05.000
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной лекции.

00:00:05.000 --> 00:00:09.000
Тема сегодняшней лекции -
это введение в Cloud Architecting.

00:00:09.000 --> 00:00:15.000
Итак, давайте начнем.
Сегодняшняя лекция состоит из четырех частей.

00:00:15.000 --> 00:00:19.000
В первой части мы познакомимся
с облачной архитектурой.

00:00:19.000 --> 00:00:25.000
Во второй части поговорим о документе
AWS Well-Architected Framework.

00:00:25.000 --> 00:00:32.000
В третьей части разберем best practices и
антипаттерны при построении решений в облаке AWS.

00:00:32.000 --> 00:00:35.251
Здесь хотелось бы отметить,
что эти best practices также

00:00:35.275 --> 00:00:39.000
применимы при работе с любыми
другими облачными провайдерами.

00:00:39.000 --> 00:00:43.488
В самой последней части мы
вспомним, что же такое глобальная

00:00:43.512 --> 00:00:48.000
инфраструктура AWS и узнаем
дополнительно новую информацию.

00:00:48.000 --> 00:00:56.000
На этом слайде вы видите пример
типовой архитектуры в облаке AWS.

00:00:56.000 --> 00:01:01.488
Если сейчас вам некоторые
моменты непонятны, не переживайте,

00:01:01.512 --> 00:01:07.000
так как это конечный результат
работы над текущим курсом.

00:01:07.000 --> 00:01:11.619
С каждым занятием мы будем изучать
какую-то определенную часть из этой

00:01:11.643 --> 00:01:17.000
архитектуры и понимать как она работает,
для чего она есть в этой архитектуре.

00:01:17.000 --> 00:01:23.679
В будущем, после прохождения наших
курсов, используя полученные знания,

00:01:23.703 --> 00:01:30.000
познакомившись с определенным
количеством основных AWS сервисов,

00:01:30.000 --> 00:01:34.655
у вас будет возможность
самостоятельно строить, поднимать

00:01:34.679 --> 00:01:40.000
архитектуру в облаке AWS такой
же сложности, либо еще сложнее.

00:01:40.000 --> 00:01:45.488
Касательно других сервисов, все те навыки
изучения сервисов, которые вы получите

00:01:45.512 --> 00:01:51.000
на наших курсах, пригодятся вам для
более быстрого изучения новых AWS сервисов.

00:01:51.000 --> 00:01:56.027
Таким образом, вы не будете ничем
ограничены и будете в состоянии

00:01:56.051 --> 00:02:01.000
построить архитектуру абсолютно
любой сложности в облаке AWS.

00:02:01.000 --> 00:02:08.000
Мы с вами начинаем первую часть сегодняшней
лекции и поговорим, что такое облачная архитектура.

00:02:08.000 --> 00:02:19.000
Давайте обратимся к истории, чтобы понять важность
построения правильной облачной архитектуры.

00:02:19.000 --> 00:02:25.067
В 2000 году, когда e-commerce
бизнес Амазона бурно развивался,

00:02:25.091 --> 00:02:32.000
и, чтобы поддерживать этот веб-сайт,
развивалась и IT инфраструктура.

00:02:32.000 --> 00:02:41.000
Но сам бизнес очень бурно рос, что IT
решения не поспевали за развитием бизнеса.

00:02:41.000 --> 00:02:49.127
На тот момент, CEO компании AWS Энди
Ясси в одном из интервью сказал, что все те

00:02:49.151 --> 00:02:58.000
инструменты, сервисы, которые поддерживают
веб-сайт, это какой-то беспорядок и хаос.

00:02:58.000 --> 00:03:05.159
Очень сложно было что-то планировать
наперед и как-то отдельно рассматривать какой-то

00:03:05.183 --> 00:03:12.000
кусочек инфраструктуры, чтобы ее можно
было развивать. Она была сильно связана.

00:03:12.000 --> 00:03:24.000
Как решение собрались лучшие специалисты и
написали некоторый документ, который описывает API.

00:03:24.000 --> 00:03:31.619
Это позволило стандартизировать
какую-то часть инфраструктуры и

00:03:31.643 --> 00:03:40.000
появился хорошо задокументированный,
понятный для всех команд API.

00:03:40.000 --> 00:03:48.155
Проблемы на самом деле все не решились, осталась
проблема того, что написанные компоненты, сервисы,

00:03:48.179 --> 00:03:56.000
либо инструменты, они не переиспользовались.
За счет этого команды двигались очень медленно.

00:03:56.000 --> 00:04:03.488
Один из ярких примеров, проект рассчитан
на три месяца, за три месяца было написано

00:04:03.512 --> 00:04:11.000
лишь три компонента. Это - компонент работы
с базами данных, с серверами и с хранением.

00:04:11.000 --> 00:04:18.000
Таким образом команда даже не
добралась до бизнесовой части этого проекта.

00:04:18.000 --> 00:04:23.776
То есть все двигалось очень медленно.
В результате было решено

00:04:23.800 --> 00:04:31.000
разработать внутренние сервисы, которые
развивались определенной командой.

00:04:31.000 --> 00:04:40.000
Эти сервисы объединяли вокруг себя
группу API и отвечали за некоторые IT ресурсы.

00:04:40.000 --> 00:04:45.488
Как пример, мы знаем, что у нас есть
самый популярный сервис Amazon EC2 и

00:04:45.512 --> 00:04:51.000
в этом случае IT ресурсом является
сервер, то есть вычислительные мощности.

00:04:51.000 --> 00:04:57.238
Таким образом команды внутри AWS
поделились на два лагеря. Одна часть команд

00:04:57.262 --> 00:05:04.000
разрабатывала внутренние сервисы и
отвечала за корректную работу этого сервиса,

00:05:04.000 --> 00:05:09.112
а другие команды развивали сам продукт,
то есть веб-сайт Amazon. Но при этом

00:05:09.136 --> 00:05:15.000
команды двигались очень быстро, так как
переиспользовали готовые внутренние сервисы.

00:05:15.000 --> 00:05:24.488
В результате Amazon решил дать возможность
всем компаниям переиспользовать эти

00:05:24.512 --> 00:05:34.000
внутренние сервисы и в 2006 году была
анонсирована AWS со своими ресурсами.

00:05:34.000 --> 00:05:40.835
Итак, возвращаясь к понятию облачная
архитектура, следует понимать,

00:05:40.859 --> 00:05:48.282
это практика построения IT инфраструктуры
в облаке с применением всех доступных

00:05:48.306 --> 00:05:55.591
облачных сервисов и возможностей
функционала для того, чтобы удовлетворить

00:05:55.615 --> 00:06:02.000
технические требования, а также
бизнесовые требования компании.

00:06:02.000 --> 00:06:10.301
Построением облачных архитектур занимаются
облачные архитекторы. Задача облачных архитекторов:

00:06:10.325 --> 00:06:18.000
первая - это вести диалог с бизнесом для
того, чтобы понять, что необходимо сделать.

00:06:18.000 --> 00:06:26.255
Далее, вторая задача - это
разработать архитектуру, черновичный

00:06:26.279 --> 00:06:36.000
вариант в виде схемы и удостовериться,
что технически это можно решить.

00:06:36.000 --> 00:06:42.815
И третья задача - это вести диалог с
командой разработки для того, чтобы

00:06:42.839 --> 00:06:51.000
убедиться, что все, что нарисовано на
схеме было реализовано точно в таком же виде.

00:06:51.000 --> 00:07:01.056
В результате этих работ облачного архитектора,
компания достигает своих бизнес целей, а команда

00:07:01.080 --> 00:07:06.528
разработки достигает своих технических
целей и является фактически

00:07:06.552 --> 00:07:12.000
некоторым связующим звеном
бизнеса и технических команд.

00:07:12.000 --> 00:07:16.109
На этом мы подошли к
концу первой части и основной

00:07:16.133 --> 00:07:21.000
идеей здесь является, что
же такое облачная архитектура.

00:07:21.000 --> 00:07:26.559
Облачная архитектура - это когда
облачный архитектор используя все

00:07:26.583 --> 00:07:33.000
доступные средства, в нашем случае
это сервисы и функционал сервисов AWS,

00:07:33.000 --> 00:07:43.000
построить IT архитектуру таким образом, чтобы решить
и технические задачи и самое главное задачи бизнеса.

00:07:43.000 --> 00:07:48.488
Я напоминаю, что на стороне AWS
есть более 200 различных сервисов,

00:07:48.512 --> 00:07:54.000
что позволяет вам строить
архитектуру абсолютно любой сложности.

00:07:54.000 --> 00:07:58.919
Самое главное, нужен
достаточный опыт и знания,

00:07:58.943 --> 00:08:05.000
чтобы правильно компоновать и
комбинировать между собой эти сервисы.

00:08:05.000 --> 00:08:11.659
Мы с вами переходим ко второй части
нашей сегодняшней лекции и подробнее

00:08:11.683 --> 00:08:19.000
остановимся на документе, который
называется AWS Well-Architected Framework.

00:08:19.000 --> 00:08:23.834
AWS Well-Architected Framework -
это некоторый документ, который

00:08:23.858 --> 00:08:30.000
рассматривает идеальную архитектуру в
облаке AWS с точки зрения 5 направлений.

00:08:30.000 --> 00:08:35.243
Первое направление - это Security,
второе - Operational excellence,

00:08:35.267 --> 00:08:41.000
третье - Reliability, четвертое - Performance
efficiency и пятое - это Cost optimization.

00:08:41.000 --> 00:08:48.866
Для каждого направления была написана
отдельная инструкция, так называемый

00:08:48.890 --> 00:08:56.000
white paper и в нем описывается
все рекомендуемые командами AWS,

00:08:56.000 --> 00:09:01.224
best practices, антипаттерны
для того, чтобы быть

00:09:01.248 --> 00:09:08.000
максимально приближены к
идеальной архитектуре в облаке AWS.

00:09:08.000 --> 00:09:15.000
Давайте сейчас остановимся на каждой
из этих направлений более подробно.

00:09:15.000 --> 00:09:22.000
Первое направление - это Security. Здесь
необходимо запомнить несколько основных моментов.

00:09:22.000 --> 00:09:27.488
Первое - это то, что нам необходимо
выдавать права для сущностей,

00:09:27.512 --> 00:09:33.000
как сущности могут выступать
пользователи, роли либо же сервисы.

00:09:33.000 --> 00:09:41.000
И выдавать права и доступы только в необходимом
объеме, так называемый least privilege principle.

00:09:41.000 --> 00:09:45.000
Второе - это необходимо
обеспечить traceability.

00:09:45.000 --> 00:09:49.988
Идея в том, что в случае
поломки одного из компонентов,

00:09:50.012 --> 00:09:55.000
эта поломка может быть
следствием предыдущей поломки.

00:09:55.000 --> 00:09:59.754
Таким образом необходимо
обеспечить видимость этой цепочки для

00:09:59.778 --> 00:10:05.000
того, чтобы однозначно и оперативно
определить источник проблемы.

00:10:05.000 --> 00:10:08.988
То есть самый первый компонент,
который сломался и привел

00:10:09.012 --> 00:10:13.000
к тому, что следующие компоненты
тоже после него сломались.

00:10:13.000 --> 00:10:20.000
И третий пункт - это то, что нам необходимо
обеспечить безопасность на всех слоях.

00:10:20.000 --> 00:10:25.988
А именно это то, что данные должны
храниться в зашифрованном виде,

00:10:26.012 --> 00:10:32.000
а также данные должны передаваться
в защищённом зашифрованном виде.

00:10:32.000 --> 00:10:38.000
Второе направление -
это Operational excellence.

00:10:38.000 --> 00:10:43.000
Идея в том, что нам необходимо
добиться видимости нашей инфраструктуры.

00:10:43.000 --> 00:10:47.000
Это делается за счет
метрик и за счет логов.

00:10:47.000 --> 00:10:51.488
Когда у нас есть на руках эти
данные, мы можем анализировать и

00:10:51.512 --> 00:10:56.000
понимать насколько хорошо и
эффективно работает наша система.

00:10:56.000 --> 00:11:01.073
В случае, если некоторые
наши IT ресурсы не соответствуют

00:11:01.097 --> 00:11:05.715
по типу и за счет этого
работают не эффективно,

00:11:05.739 --> 00:11:10.858
мы это можем увидеть и можем
небольшими шагами её улучшать

00:11:10.882 --> 00:11:16.000
и подгонять под специфичные
на наш IT продукт нагрузки.

00:11:16.000 --> 00:11:26.494
Этот процесс будет происходить постоянно.
Невозможно добиться до идеального состояния,

00:11:26.518 --> 00:11:38.000
потому как нагрузки меняются, продукты постоянно
развиваются, появляются разные компоненты.

00:11:38.000 --> 00:11:43.293
Но идея этого направления в
том, что мы должны обеспечить

00:11:43.317 --> 00:11:49.178
этот процесс необходимыми
данными и соответственно небольшими

00:11:49.202 --> 00:11:54.589
шагами с каждым разом
улучшать и оптимизировать размеры

00:11:54.613 --> 00:12:00.000
нашей инфраструктуры, даже
если когда нагрузки меняются.

00:12:00.000 --> 00:12:04.486
Следующее направление - это Reliability.
Идея этого направления в том,

00:12:04.510 --> 00:12:09.488
что нам необходимо строить IT
инфраструктуру таким образом,

00:12:09.512 --> 00:12:14.071
что в случае поломки мы оперативно
понимали где эта поломка произошла и в

00:12:14.095 --> 00:12:19.000
лучшем случае обеспечить автоматическое
восстановление инфраструктуры.

00:12:19.000 --> 00:12:24.988
То есть в случае нехватки IT ресурсов
с увеличением нагрузки система

00:12:25.012 --> 00:12:31.000
должна динамически увеличивать
количество вычислительных ресурсов.

00:12:31.000 --> 00:12:39.488
В случае когда у нас выходит из строя
одна availability зона, инфраструктура должна

00:12:39.512 --> 00:12:48.000
быть способна продолжать корректно
работать на другой availability зоне и так далее.

00:12:48.000 --> 00:12:52.000
Четвертое направление -
это Performance efficiency.

00:12:52.000 --> 00:12:57.988
Идея этого направления в том, что нам
необходимо в зависимости от нашей бизнес задачи

00:12:58.012 --> 00:13:04.000
и технической задачи подобрать инструмент,
с которым мы ее будем решать, а не наоборот.

00:13:04.000 --> 00:13:11.191
Я несколько раз упоминал, что на стороне
AWS есть более 200 сервисов, которые доступны

00:13:11.215 --> 00:13:19.000
для нас и одним из примеров может быть наличие
более 7 сервисов связанных с базами данных.

00:13:19.000 --> 00:13:23.136
Таким образом в зависимости
от того какие у вас данные, как к

00:13:23.160 --> 00:13:27.780
этим данным идет обращение,
какая частота обращения, как часто эти

00:13:27.804 --> 00:13:32.107
данные записываются или наоборот
считываются, вы можете понять

00:13:32.131 --> 00:13:37.000
какая из существующих сервисов
баз данных вам подойдет больше всего.

00:13:43.000 --> 00:13:47.000
Последнее, пятое направление
- это Cost optimization.

00:13:47.000 --> 00:13:54.988
Это одно из самых моих любимых направлений.
Связано это с тем, что при корректной работе в

00:13:55.012 --> 00:14:03.000
этом направлении мы сможем максимально
раскрыть потенциал работы с облачными технологиями.

00:14:03.000 --> 00:14:07.488
Идея этого направления в
том, что мы должны обеспечить

00:14:07.512 --> 00:14:12.000
видимость для чего и кем
создаются те или иные ресурсы.

00:14:12.000 --> 00:14:18.583
За счет этого мы понимаем
насколько эффективно работают те

00:14:18.607 --> 00:14:26.000
или иные компоненты, команды
или даже IT ресурсы в облаке AWS.

00:14:26.000 --> 00:14:32.759
Таким образом, получив эту видимость,
мы можем исключить избыточные расходы

00:14:32.783 --> 00:14:40.000
на облачную инфраструктуру.
На этом мы добрались до AWS Well-Architected Tool.

00:14:40.000 --> 00:14:46.022
Да, это еще один специальный
сервис, который включается на

00:14:46.046 --> 00:14:52.068
уровне AWS аккаунта и говорит
о том, насколько хорошо или

00:14:52.092 --> 00:14:58.534
плохо мы построили IT инфраструктуру
по сравнению с идеальной

00:14:58.558 --> 00:15:05.000
IT инфраструктурой, описанной
в Well-Architected Framework.

00:15:05.000 --> 00:15:18.000
Мы добрались до конца второй части нашей 
лекции. Давайте вспомним основные моменты.

00:15:18.000 --> 00:15:22.988
AWS Well-Architected Framework -
это некоторый документ, который

00:15:23.012 --> 00:15:28.000
описывает идеальную инфраструктуру
по мнению архитекторов AWS.

00:15:28.000 --> 00:15:35.000
Она описана в пяти различных направлениях, каждый
из которых состоит из некоторых best practices.

00:15:35.000 --> 00:15:40.988
Я ранее говорил, что этот документ
описан по мнению архитекторов AWS и

00:15:41.012 --> 00:15:47.000
здесь подразумевается то, что этот
документ не видит вашего контекста.

00:15:47.000 --> 00:15:52.488
Поэтому слепо следовать этим
рекомендациям не следует, так как не все

00:15:52.512 --> 00:15:58.000
рекомендации одинаково будут
эффективны для конкретно вашего случая.

00:15:58.000 --> 00:16:07.988
Поэтому надо знать, что есть такие рекомендации,
отдельно применять каждую для своего случая и в

00:16:08.012 --> 00:16:18.000
случае, если это действительно дает ту эффективность,
которую вы ожидаете, следует ее исполнить

00:16:18.000 --> 00:16:25.570
и реализовать. Есть также AWS Well-Architected
Tool, который автоматически позволяет некоторые

00:16:25.594 --> 00:16:33.000
best practices видеть, насколько вы следуете
или не следуете в рамках вашего AWS аккаунта.

00:16:33.000 --> 00:16:39.000
Мы с вами добрались до третьей
части нашей сегодняшней лекции.

00:16:39.000 --> 00:16:46.000
Здесь мы будем говорить про best practices и
антипаттерны при построении решений в облаке AWS.

00:16:46.000 --> 00:16:51.402
Основная мысль этой части в
том, что вам необходимо понимать,

00:16:51.426 --> 00:16:58.000
действительно ли тот или иной best
practice подходит для вашего случая.

00:16:58.000 --> 00:17:02.988
Более того, любой best practice
требует ее реализации и в

00:17:03.012 --> 00:17:08.000
этом случае есть определенные
жертвы, которые вы понесете.

00:17:08.000 --> 00:17:12.488
Например, это могут быть время,
которое потратит команда разработки,

00:17:12.512 --> 00:17:17.000
либо команда облачных инженеров
на реализацию этого best practices.

00:17:17.000 --> 00:17:24.000
Другой момент может быть в том, что вы увеличите
свои расходы на облачную инфраструктуру и так далее.

00:17:24.000 --> 00:17:28.147
Поэтому всегда при рассмотрении
best practices нужно понимать, какие

00:17:28.171 --> 00:17:33.000
недостатки она с собой приносит и
понимать, действительно ли оно того стоит.

00:17:33.000 --> 00:17:37.988
Для того, чтобы лучше понять
смысл каждого best practices,

00:17:38.012 --> 00:17:43.000
мы будем приводить антипаттерны
того, как не следует делать.

00:17:43.000 --> 00:17:52.000
Таким образом, вы лучше поймете в
сравнении, как должно быть и как не должно быть.

00:17:52.000 --> 00:17:57.000
В этой части мы рассмотрим 10 best practices.
Итак, давайте начнем.

00:17:57.000 --> 00:18:05.415
Первый best practice - это Enable scalability.
Идея в том, что ваша инфраструктура должна

00:18:05.439 --> 00:18:10.375
быть способной автоматически меняться
в размерах, как в сторону увеличения,

00:18:10.399 --> 00:18:15.000
так и в сторону уменьшения,
в зависимости от нагрузки.

00:18:15.000 --> 00:18:22.524
Если у вас инфраструктура построена следующим
образом, как на слайде: у вас есть пользователи,

00:18:22.548 --> 00:18:30.000
они дают некоторую нагрузку на вашу инфраструктуру,
есть определенное количество настроенных серверов.

00:18:30.000 --> 00:18:35.738
Далее у вас есть администратор,
который может получать по тем или иным

00:18:35.762 --> 00:18:42.000
каналам связи уведомления о том, что
сервера испытывают большие нагрузки.

00:18:42.000 --> 00:18:47.153
Далее, этот администратор
подключается к инфраструктуре,

00:18:47.177 --> 00:18:52.988
настраивает вручную сервер и
подключает к балансировке.

00:18:53.012 --> 00:18:58.494
Это - не есть best practice, так как
оно не выгодно с точки зрения

00:18:58.518 --> 00:19:04.000
затрат, так как сюда еще и
входит время работы специалиста.

00:19:04.000 --> 00:19:11.653
Более того, оно подвержено человеческому фактору, то
есть пока администратор подключится, нагрузки могут

00:19:11.677 --> 00:19:20.000
превысить порог и приложение перестанет отвечать.
В этом случае будет поздно новый сервер поднимать.

00:19:20.000 --> 00:19:25.571
Другой момент - это то, что
администратор забыл отключить сервера,

00:19:25.595 --> 00:19:32.000
а нагрузка уже давно упала. В этом 
случае вы будете нести избыточные расходы.

00:19:32.000 --> 00:19:39.028
Правильный вариант - это использовать все
необходимые инструменты и доступные сервисы AWS,

00:19:39.052 --> 00:19:46.000
чтобы динамически увеличивать количество
серверов, либо уменьшать, когда нагрузки нет.

00:19:46.000 --> 00:19:51.232
Вы видите пример, что есть
пользователи, от них приходят

00:19:51.256 --> 00:19:56.488
запросы, есть текущие серверы,
на которых балансируется

00:19:56.512 --> 00:20:01.838
нагрузка и в случае увеличения
нагрузки выше определенного

00:20:01.862 --> 00:20:07.000
порога приходят уведомления
на соответствующий сервис.

00:20:07.000 --> 00:20:10.488
Этот сервис автоматически
поднимает необходимое количество

00:20:10.512 --> 00:20:14.000
серверов, чтобы каждый запрос
пользователей был обработан.

00:20:14.000 --> 00:20:20.123
И обратный случай, когда пользователи
завершают свои покупки или действия на

00:20:20.147 --> 00:20:26.271
вашем сайте и уходят, то срабатывает
обратная ситуация: приходит уведомление

00:20:26.295 --> 00:20:32.300
сервису масштабирования о том, что
нагрузка на сервера спала и этот сервис

00:20:32.324 --> 00:20:38.000
может отключать лишние сервера,
для того чтобы не нести эти расходы.

00:20:38.000 --> 00:20:45.741
Следующий best practice - это Automate your 
environment. Идея - там где это возможно

00:20:45.765 --> 00:20:55.000
автоматически создавать, уничтожать, а также
конфигурировать ресурсы в вашей инфраструктуре.

00:20:55.000 --> 00:21:02.618
Рассмотрим антипаттерн. Он очень похож на
антипаттерн на предыдущем слайде, но отличается

00:21:02.642 --> 00:21:10.000
тем, что ваш сервер может словить некоторую
внутреннюю ошибку и перестать работать.

00:21:10.000 --> 00:21:14.699
В этом случае количество рабочих
серверов становится меньше. Представим,

00:21:14.723 --> 00:21:19.023
что вы настроили уведомление
вашему администратору, подключается

00:21:19.047 --> 00:21:24.181
администратор и начинает восстанавливать
этот сервер, либо начинает создавать

00:21:24.205 --> 00:21:29.000
новый, чтобы потом спокойно сесть и
разобраться с поломанным сервером.

00:21:29.000 --> 00:21:36.202
И это происходит в то время, когда происходит ошибка
и поломка в системе. Это может быть ночью, утром,

00:21:36.226 --> 00:21:44.000
днем и в нерабочее время вашего специалиста.
Это является антипаттерном, так как есть очевидные

00:21:44.000 --> 00:21:48.861
недостатки. Первое - вам необходимо
поверх дополнительно оплачивать

00:21:48.885 --> 00:21:53.155
время работы вашего специалиста.
Это могут быть оплата за

00:21:53.179 --> 00:21:58.078
сверхурочные часы.
Другой момент - здесь есть человеческий фактор,

00:21:58.102 --> 00:22:03.000
то есть человек может быть
недоступен или не успеть, не заметить.

00:22:03.000 --> 00:22:08.174
Таким образом, состояние вашей
инфраструктуры зависит от одного или

00:22:08.198 --> 00:22:14.000
нескольких специалистов, которые не
смогут в нужный момент подключиться.

00:22:14.000 --> 00:22:20.379
Обратная ситуация - best practice - как
рекомендуется сделать, это использовать

00:22:20.403 --> 00:22:26.701
имеющиеся средства, а именно сервис
Auto Scaling, для того, чтобы определять

00:22:26.725 --> 00:22:33.559
проблемные сервера, убирать эти сервера в
сторону, вместо них поднимать необходимое

00:22:33.583 --> 00:22:40.000
количество серверов, которые точно
будут работать, так как только настроены.

00:22:40.000 --> 00:22:46.988
Опционально могут еще отправить уведомление
администратору о том, что такое-то количество с

00:22:47.012 --> 00:22:50.494
такими-то ID-шниками сервера
были поломаны и вместо них

00:22:50.518 --> 00:22:54.000
были подняты следующие
сервера с такими-то ID-шниками.

00:22:54.000 --> 00:22:59.232
Это best practice, который не
вынуждает специалиста подключаться во

00:22:59.256 --> 00:23:04.488
время поломки, дает возможность
не вводить специалиста в стрессовое

00:23:04.512 --> 00:23:09.744
состояние, а сохранить ваши
поломанные сервера отдельно в сторонке,

00:23:09.768 --> 00:23:15.000
при этом продолжать обрабатывать
успешно запросы ваших пользователей.

00:23:15.000 --> 00:23:22.988
В тот момент, когда начнется рабочий день,
специалист уже получит уведомление и сразу

00:23:23.012 --> 00:23:31.000
пойдет смотреть на сервера, которые были
отложены в сторону, разбираться в проблеме.

00:23:31.000 --> 00:23:35.000
Следующий, третий best practice
- это Treat resources as disposable.

00:23:35.000 --> 00:23:39.988
Идея в том, что нам необходимо
воспринимать нашу инфраструктуру,

00:23:40.012 --> 00:23:45.000
наши IT ресурсы не как железо
hardware, а больше как software.

00:23:45.000 --> 00:23:49.488
Таким образом, мы не
привязаны к железу и это приводит

00:23:49.512 --> 00:23:54.000
к тому, что каждый IT ресурс
может быть легко заменен.

00:23:54.000 --> 00:24:00.549
А это в свою очередь позволит
нам динамически управлять

00:24:00.573 --> 00:24:07.000
нашими IT ресурсами, что
доступно в облачной среде.

00:24:07.000 --> 00:24:12.000
Следующий, четвертый best practice
- это Use loosely coupled components.

00:24:12.000 --> 00:24:17.651
Идея этого best practice в том, что нам
необходимо строить инфраструктуру таким образом,

00:24:17.675 --> 00:24:23.000
чтобы каждый компонент был связан с
наименьшим количеством соседних компонентов.

00:24:23.000 --> 00:24:27.000
Для того, чтобы это понять,
давайте рассмотрим антипаттерн.

00:24:27.000 --> 00:24:33.000
Представим, что у нас есть слой веб-серверов, у
нас есть слой back-end, то есть application сервера.

00:24:33.000 --> 00:24:42.000
И каждый сервер слоя веб-серверов
сильно связан с серверами back-end.

00:24:42.000 --> 00:24:49.488
Это приводит к тому, что при
замене, обновлении одного из

00:24:49.512 --> 00:24:57.000
компонентов в веб-слое нам
необходимо учитывать все связи

00:24:57.000 --> 00:25:02.943
и если требуется изменение на стороне
соседних связанных компонентов,

00:25:02.967 --> 00:25:10.000
то необходимо произвести это изменение в
нескольких соседних компонентах, не в одном.

00:25:10.000 --> 00:25:15.000
Это может быть дорого,
сложно и не всегда реализуемо.

00:25:15.000 --> 00:25:23.540
Более того, при сильно связанной архитектуре
если какой-то компонент ломается, он может

00:25:23.564 --> 00:25:33.000
повлечь за собой волну поломок, и потенциально
все связанные компоненты также могут сломаться.

00:25:33.000 --> 00:25:38.533
И так далее: все поломанные
уже от исходной поломки, исходного

00:25:38.557 --> 00:25:45.000
компонента, они также может привести
к поломке следующих компонентов.

00:25:45.000 --> 00:25:51.488
В итоге вся инфраструктура может просто
упасть из-за какой-то маленькой ошибки

00:25:51.512 --> 00:25:58.000
на уровне одного компонента.
Это очень рискованно, это является антипаттерном.

00:25:58.000 --> 00:26:03.988
Лучшим решением best practice
является то, что мы строим каждый

00:26:04.012 --> 00:26:10.000
компонент минимально связанный
с другими соседними компонентами.

00:26:10.000 --> 00:26:15.488
Это позволяет достаточно
безопасно, дешево и эффективно

00:26:15.512 --> 00:26:21.000
заменять, удалять либо
обновлять каждый из компонентов.

00:26:21.000 --> 00:26:30.000
Примерами сервисов, которые позволяют нам строить
слабосвязные архитектуры, являются ELB, Amazon SQS.

00:26:30.000 --> 00:26:37.000
Это сервис очередей сообщения, о которых мы
будем говорить на следующих наших занятиях.

00:26:41.000 --> 00:26:45.000
Следующий пятый best practice -
это Design Services, Not Servers.

00:26:45.000 --> 00:26:49.450
Идея в том, что в самом начале
в период активной разработки

00:26:49.474 --> 00:26:55.000
рекомендуется смотреть в сторону
Managed Services, Serverless Services

00:26:55.000 --> 00:27:01.000
или любых других сервисов AWS, которые
потенциально смогут разгрузить вашу команду.

00:27:01.000 --> 00:27:03.988
То есть команде нет
необходимости разрабатывать тот или

00:27:04.012 --> 00:27:07.000
иной технический функционал,
технический инструмент.

00:27:07.000 --> 00:27:10.646
За счет этого команда может
сконцентрироваться на написании

00:27:10.670 --> 00:27:14.000
бизнес-логики, которая
будет решать задачи бизнеса.

00:27:14.000 --> 00:27:18.988
Это в свою очередь позволит
раньше выйти на рынок, раньше начать

00:27:19.012 --> 00:27:24.000
зарабатывать в компании и в
целом это правильное направление.

00:27:24.000 --> 00:27:33.000
Далее уже в период пассивной разработки,
когда основной функционал разработан и задач

00:27:33.000 --> 00:27:41.000
не так много, есть рекомендация
пересмотреть структуру расходов на облако.

00:27:41.000 --> 00:27:47.488
Если окажется, что определенный
сервис не соразмерно потребляет

00:27:47.512 --> 00:27:54.000
много денег, в этом случае вы
можете сделать некоторый расчет.

00:27:54.000 --> 00:27:59.006
Например, для реализации
сервиса очереди сообщений вы

00:27:59.030 --> 00:28:05.000
можете посмотреть расходы
AWS, далее посмотреть и прикинуть,

00:28:05.000 --> 00:28:08.781
сколько подобный функционал,
внутренний инструмент будет

00:28:08.805 --> 00:28:13.000
разрабатывать ваша команда
либо отдельно взятый специалист.

00:28:13.000 --> 00:28:17.488
В случае, когда эти расходы
сопоставимы, вы можете делать расчет на

00:28:17.512 --> 00:28:22.000
краткосрочный период, среднесрочный
период и долгосрочный период.

00:28:22.000 --> 00:28:27.561
В случае, если окажется, что написание
внутреннего решения окажется выгодным,

00:28:27.585 --> 00:28:33.000
в этот момент вы можете потихоньку
переходить на собственные разработки.

00:28:33.000 --> 00:28:36.988
Почему не рекомендуется
делать это с самого начала?

00:28:37.012 --> 00:28:41.000
Так это то, что вся ваша команда
может оказаться в состоянии,

00:28:41.000 --> 00:28:47.988
что они разрабатывают некоторые технические
инструменты и зависнуть на этом этапе

00:28:48.012 --> 00:28:55.000
и даже не добраться до написания
бизнес-логики для решения ваших бизнес-задач.

00:28:55.000 --> 00:28:59.529
Это в свою очередь может
поставить крест на будущем вашей

00:28:59.553 --> 00:29:04.000
компании и компания может
в результате обанкротиться.

00:29:08.000 --> 00:29:12.000
Следующий, шестой best practice -
это Choose the right database solution.

00:29:12.000 --> 00:29:17.342
Идея этого best practices в
том, что при работе с облачными

00:29:17.366 --> 00:29:24.000
технологиями у нас имеется в
распоряжении несколько десятков сервисов,

00:29:24.000 --> 00:29:31.000
которые позволяют хранить,
обрабатывать, анализировать данные.

00:29:31.000 --> 00:29:35.488
И в зависимости от того, как ваши
данные используются, как часто

00:29:35.512 --> 00:29:40.000
записываются, как часто считываются,
какой объем данных ожидается,

00:29:40.000 --> 00:29:47.000
потенциально до каких размеров ваши данные
могут вырасти, какие требования по передаче данных,

00:29:47.000 --> 00:29:54.000
какие требования по количеству одновременных
подключений к вашим данным и так далее,

00:29:54.000 --> 00:29:59.034
вы можете подобрать оптимальный 
сервис. И с учетом того,

00:29:59.058 --> 00:30:04.000
что расходы на вычислительные
мощности и базы данных

00:30:04.000 --> 00:30:14.000
могут с легкостью доходить до 50% всех ваших
расходов на облако, выбрав в самом начале пути

00:30:14.000 --> 00:30:23.000
верное решение, вы можете сразу получить большую
выгоду и в будущем не нести избыточные расходы.

00:30:27.000 --> 00:30:31.000
Следующий best practice -
это Avoid single points of failure.

00:30:31.000 --> 00:30:35.650
Идея в том, что вам необходимо строить
вашу инфраструктуру таким образом,

00:30:35.674 --> 00:30:40.000
что в критически важных местах у
вас есть некоторая избыточность.

00:30:40.000 --> 00:30:48.000
Здесь понимается то, что в случае поломки
критических узлов есть запасной вариант

00:30:48.000 --> 00:30:56.000
и в случае поломки этого критического узла вся
система не остановится, а продолжит работать.

00:30:56.000 --> 00:31:05.000
Примерами могут быть, когда мы хостим наше
решение на нескольких availability зонах, либо в

00:31:05.000 --> 00:31:12.000
той же availability зоне, но у нас есть, например,
в случае базы данных есть основная база данных,

00:31:12.000 --> 00:31:21.000
а рядом стоит standby копия, которая при
необходимости может стать master базой и

00:31:21.000 --> 00:31:33.000
продолжить принимать запросы от ваших приложений.
Следующий best practice - это Optimize for cost.

00:31:33.000 --> 00:31:36.427
Идея этого best practice в
том, что вам необходимо

00:31:36.451 --> 00:31:41.000
использовать возможности,
предоставляемые облачным провайдерам,

00:31:41.000 --> 00:31:47.000
а именно то, что предоставляется
широкий выбор типов инстансов,

00:31:47.000 --> 00:31:55.000
широкий выбор сервисов, которые
автоматически масштабируют вашу инфраструктуру.

00:31:55.000 --> 00:32:00.488
Таким образом, экспериментируя с
типами IT ресурсов и их комбинациями, можно

00:32:00.512 --> 00:32:06.000
построить такую инфраструктуру, которая
идеально подходит вашим нагрузкам.

00:32:06.000 --> 00:32:10.000
В случае когда мы говорим локальный
дата-центр таких возможностей может не быть,

00:32:10.000 --> 00:32:14.251
так как выделение под ваш
аккаунт, под вашу организацию

00:32:14.275 --> 00:32:19.000
дополнительных IT ресурсов
может занимать некоторое время.

00:32:19.000 --> 00:32:24.592
В нем могут присутствовать некоторые
человеческие факторы, например, нужно завести

00:32:24.616 --> 00:32:30.000
заявку, отправить ее в техподдержку
для того, чтобы вам выделили эти ресурсы.

00:32:30.000 --> 00:32:34.988
Либо даже если там все
автоматизировано, то размеры дата-центра

00:32:35.012 --> 00:32:40.000
несравнимо малы по сравнению с
глобальной инфраструктурой AWS.

00:32:40.000 --> 00:32:46.000
Поэтому ожидать, что там будет большой
выбор типов тех же серверов не стоит.

00:32:46.000 --> 00:32:53.488
Он будет скорее всего намного меньше
и будет мало вариантов, с которыми вы

00:32:53.512 --> 00:33:01.000
сможете поэкспериментировать.
Следующий best practice - это Use caching.

00:33:01.000 --> 00:33:05.657
Идея в том, что во всех тех местах,
где можно организовать кэширование

00:33:05.681 --> 00:33:10.000
необходимо это делать.
Есть для этого несколько важных причин.

00:33:10.000 --> 00:33:15.073
Первое - это то, что когда данные
извлекаются с оригинального

00:33:15.097 --> 00:33:20.000
источника, они могут
видоизменяться, трансформироваться.

00:33:20.000 --> 00:33:24.000
И для этого необходимо потратить
больше вычислительных ресурсов.

00:33:24.000 --> 00:33:28.223
Это требует большего времени
и, соответственно, все будет

00:33:28.247 --> 00:33:33.000
стоить дороже, нежели вы
извлечете с кэша готовый результат.

00:33:33.000 --> 00:33:38.000
Другой момент - это то, что кэш сервера они
могут находиться ближе к вашим пользователям.

00:33:38.000 --> 00:33:47.000
Таким образом, и пользователи получат данные
быстрее и вы также сэкономите на Network трафике.

00:33:47.000 --> 00:33:51.488
Так как он значительно
уменьшится и вам нет необходимости

00:33:51.512 --> 00:33:56.000
для каждого запроса обращаться
к оригинальному источнику.

00:33:56.000 --> 00:34:06.000
Примерами может быть использование сервиса
CloudFront, глобальный CDN, Content Delivery Network.

00:34:06.000 --> 00:34:14.988
Также если мы говорим про кэширование
можно назвать сервис ElastiCache, когда можем

00:34:15.012 --> 00:34:24.000
настроить Redis либо Memcached ресурс
для того, чтобы разгрузить вашу базу данных.

00:34:28.000 --> 00:34:33.000
Самый последний, десятый best
practice - это Secure your entire infrastructure.

00:34:33.000 --> 00:34:38.560
Основная идея этого best practice связана
с тем, что нам необходимо обеспечить

00:34:38.584 --> 00:34:44.000
безопасность на каждом уровне нашей 
инфраструктуры. Приведу пару примеров.

00:34:44.000 --> 00:34:48.274
Первый пример - необходимо
обеспечить шифрование ваших данных

00:34:48.298 --> 00:34:53.000
не только во время хранения, но
и во время передачи этих данных.

00:34:53.000 --> 00:35:02.258
Другой пример - необходимо следовать принципу Least
Privilege, когда вы выдаёте права роли пользователям

00:35:02.282 --> 00:35:11.000
либо какому-либо сервису только в том объёме,
который нужно для выполнения определённой задачи.

00:35:11.000 --> 00:35:19.000
Следующий пример - необходимо включить MFA где 
это возможно. MFA - Multi-Factor Authentication.

00:35:19.000 --> 00:35:28.769
Таким образом, события, которые могут быть
катастрофическими либо являются критическими,

00:35:28.793 --> 00:35:38.000
вы можете дополнительно обезопасить
проверкой личности конкретного пользователя.

00:35:38.000 --> 00:35:43.000
Другой пример - это
использование Managed Services.

00:35:43.000 --> 00:35:51.488
Managed Services - это когда большую часть
рутинного администрирования берет на себя

00:35:51.512 --> 00:36:00.000
AWS, а нам как пользователям необходимо
обеспечить корректную настройку этих сервисов.

00:36:00.000 --> 00:36:05.519
Таким образом, настройка
безопасности, установка, обновление

00:36:05.543 --> 00:36:12.000
патчей безопасности, это все
ложится на плечи облачного провайдера.

00:36:12.000 --> 00:36:21.988
Другой пример - это то, что необходимо логировать
все действия связанные с критическими ресурсами, так

00:36:22.012 --> 00:36:32.000
чтобы в нужный момент вы могли определить кто,
когда, как, для чего обращался к конкретным ресурсам.

00:36:32.000 --> 00:36:39.000
На этом мы добрались до конца третьей части
нашей лекции. Мы рассмотрели 10 best practices.

00:36:39.000 --> 00:36:45.000
Для каждого best practices рассмотрели антипаттерн
и несколько примеров, чтобы лучше ее освоить.

00:36:45.000 --> 00:36:53.399
Я надеюсь, вы лучше поняли, что такое best
practices, как это связано с облачной архитектурой

00:36:53.423 --> 00:37:01.000
и в будущем это вам будет помогать при
построении своей архитектуры в облаке AWS.

00:37:01.000 --> 00:37:04.801
А мы с вами плавно переходим к
последней четвертой части нашей

00:37:04.825 --> 00:37:09.000
сегодняшней лекции и поговорим
про глобальную инфраструктуру AWS.

00:37:09.000 --> 00:37:15.936
Мы эту тему затрагивали на
предыдущем курсе Cloud Practitioner.

00:37:15.960 --> 00:37:22.000
Сейчас ее повторим и добавим
некоторые новые нюансы.

00:37:22.000 --> 00:37:27.488
Начнем мы с понятия AWS Regions.
Region - это некоторая физическая

00:37:27.512 --> 00:37:33.000
географическая локация, которая
изолирована от других регионов.

00:37:33.000 --> 00:37:46.000
Всего в мире есть более 20 AWS Regions. Каждый AWS
Region состоит из двух или более availability zone.

00:37:46.000 --> 00:37:54.000
Regions, связанные между собой,
отдельно специально выделены сетью AWS.

00:37:54.000 --> 00:37:59.565
Так как регионы изолированы друг
от друга, то задачу репликации или

00:37:59.589 --> 00:38:06.000
передачи данных между регионами вам
необходимо настраивать самостоятельно.

00:38:06.000 --> 00:38:12.232
Для этого имеются все средства, лишь
требуется дополнительная настройка,

00:38:12.256 --> 00:38:18.488
она недоступна нативно.
В случае с availability zone во время настройки

00:38:18.512 --> 00:38:24.788
некоторых ресурсов вы там же можете
выбрать какие availability zone этот

00:38:24.812 --> 00:38:31.000
сервис будет использовать.
В случае с регионами такой опции не будет.

00:38:31.000 --> 00:38:39.000
В мире есть разные типы AWS регионов. Большее 
количество регионов это стандартные регионы.

00:38:39.000 --> 00:38:46.000
Есть также два региона относящихся к
Китаю, то есть так называемые AWS China.

00:38:46.000 --> 00:38:54.000
Они изолированы от всего остального
мира и развивается отдельно.

00:38:54.000 --> 00:39:00.488
Зачастую мы наблюдаем то, что любой
сервис, который находится в AWS China

00:39:00.512 --> 00:39:07.000
на год или более отстает по развитию
по сравнению с регионами вне Китая.

00:39:07.000 --> 00:39:19.488
Есть еще другой тип региона это AWS GovCloud.
Это специально созданный регион для

00:39:19.512 --> 00:39:32.000
хостинга IT инфраструктур связанных с
государственными учреждениями в Америке.

00:39:32.000 --> 00:39:40.000
Теперь давайте рассмотрим следующий элемент
глобальной инфраструктуры AWS - availability zone.

00:39:40.000 --> 00:39:46.488
Availability zone относится к определенному 
региону. Если мы говорим, что у нас

00:39:46.512 --> 00:39:53.000
есть глобальная AWS, у нее есть несколько
десятков регионов, например, eu-west-1.

00:39:53.000 --> 00:40:00.339
У этого региона есть несколько availability
zone и примером availability zone является

00:40:00.363 --> 00:40:09.000
eu-west-1a. То есть название availability zone это
название региона плюс некоторая буква алфавита.

00:40:09.000 --> 00:40:12.988
Когда мы говорим про availability
zone, каждая availability zone

00:40:13.012 --> 00:40:17.000
состоит как минимум из одного,
а то и нескольких дата-центров.

00:40:17.000 --> 00:40:21.488
Таким образом, вероятность того,
что availability zone станет недоступной

00:40:21.512 --> 00:40:26.000
маловероятна, не говоря уже о том,
что весь регион станет недоступным.

00:40:26.000 --> 00:40:34.000
Но есть в мире некоторые очень критические нагрузки,
которые ни в коем случае не должны быть прерваны.

00:40:34.000 --> 00:40:42.233
В этих случаях компании развертывают свою
инфраструктуру на нескольких регионах. Это очень

00:40:42.257 --> 00:40:51.000
дорого, но когда есть бизнес задача и некоторые
требования, то подобные инфраструктуры тоже имеют

00:40:51.000 --> 00:40:58.623
место быть. Availability зоны в рамках региона
связаны между собой специальной связкой

00:40:58.647 --> 00:41:06.000
и данные могут передаваться на больших
скоростях между этими availability зонами.

00:41:06.000 --> 00:41:15.988
Следующий достаточно новый компонент глобальной
инфраструктуры - это AWS local zones. Идея local

00:41:16.012 --> 00:41:26.000
zones в том, что оно является мини регионом,
который находится в какой-то отдаленной локации.

00:41:26.000 --> 00:41:35.348
В случае, если на ближайшем расстоянии не имеется
AWS регионов, а вам нужно, чтобы в определенной

00:41:35.372 --> 00:41:44.000
местности в рамках страны был доступен AWS, в
этом случае вам в помощь придет AWS local zones.

00:41:44.000 --> 00:41:48.988
То есть разворачивается мини
дата-центр, который доступен для

00:41:49.012 --> 00:41:54.000
вас и вы можете использовать
эти ресурсы в рамках вашей страны.

00:41:54.000 --> 00:42:02.000
Для некоторых случаев нагрузок и
бизнесов это достаточно интересное решение.

00:42:02.000 --> 00:42:08.000
Теперь мы переходим к следующему компоненту
внутри availability зоны - это дата-центры.

00:42:08.000 --> 00:42:14.695
Дата-центры - это как раз таки то место,
где находятся все наши сервера, хранятся

00:42:14.719 --> 00:42:22.000
все данные на этих серверах и это наименьший
компонент глобальной инфраструктуры AWS.

00:42:22.000 --> 00:42:25.809
Если мы говорим о размерах
дата-центров, то каждый дата-центр как

00:42:25.833 --> 00:42:30.000
минимум содержит несколько десятков 
тысяч серверов. Эти сервера могут

00:42:30.000 --> 00:42:38.488
быть очень мощными, так как происходит процесс
виртуализации и один мощный сервер может быть

00:42:38.512 --> 00:42:47.000
разделен и предоставлен для вас как несколько
разных маленьких инстансов. Таким образом понимая,

00:42:47.000 --> 00:42:57.563
что дата-центр это физически ограниченное
пространство, то AWS старается каждый кусочек

00:42:57.587 --> 00:43:09.198
использовать максимально выгодно и соответственно
каждый сервер будет максимально мощным,

00:43:09.222 --> 00:43:19.514
если умножать на то количество, которое я говорил
ранее, это несколько десятков тысяч таких мощных

00:43:19.538 --> 00:43:31.000
серверов, то представьте какие масштабы
вычислительных мощностей доступны в рамках лишь

00:43:31.000 --> 00:43:36.727
одного дата-центра. Следующим отдельно стоящим
компонентом глобальной инфраструктуры AWS

00:43:36.751 --> 00:43:43.000
и которая относится к CDN, то есть Content Delivery
Network является AWS Points of presence.

00:43:43.000 --> 00:43:48.988
Они непосредственно относятся к
сервису Amazon CloudFront и выделяют

00:43:49.012 --> 00:43:55.000
несколько разных видов.
Это Edge locations и Regional edge caches.

00:43:55.000 --> 00:44:01.538
Отличается тем, что Edge locations - это
наиболее ближайшие к вашим потенциальным

00:44:01.562 --> 00:44:09.000
пользователям кэш сервера и данные максимально
быстро передаются именно с Edge locations.

00:44:09.000 --> 00:44:14.528
Далее, чуть-чуть отдаленные
кэш сервера - это Regional edge

00:44:14.552 --> 00:44:21.036
caches, туда попадают те данные,
которые не так часто запрашиваются

00:44:21.060 --> 00:44:27.018
как данные в Edge locations, но
тем не менее запрашиваются и

00:44:27.042 --> 00:44:33.000
они агрегируются на более
масштабной географической местности,

00:44:33.000 --> 00:44:39.988
то есть объединяют в себе не частые
данные из нескольких Edge locations.

00:44:40.012 --> 00:44:47.000
На карте вы видите также Multiple edge
locations, выделенные фиолетовым цветом.

00:44:47.000 --> 00:45:00.600
Это как раз таки те локации, в которых очень
хорошо развит AWS, очень активно используется

00:45:00.624 --> 00:45:13.000
сервис Amazon CloudFront и вы видите,
что на этом слайде они выделены отдельно.

00:45:13.000 --> 00:45:19.177
На этом мы подошли к концу последней части
нашей сегодняшней лекции. Мы рассмотрели

00:45:19.201 --> 00:45:25.000
глобальную инфраструктуру AWS,
основные ее компоненты и для чего они нужны.

00:45:25.000 --> 00:45:33.143
На этом мы подошли к концу нашей
сегодняшней лекции, разобрали достаточно важные

00:45:33.167 --> 00:45:41.000
основные понятия, которые вам помогут
легче освоить следующие наши лекции.

00:45:41.000 --> 00:45:48.000
Здесь вы можете увидеть несколько полезных
ссылок для более углубленного изучения пройденных

00:45:48.000 --> 00:45:55.488
материалов. На этом хотелось бы
завершить нашу сегодняшнюю сессию.

00:45:55.512 --> 00:46:01.000
Спасибо за внимание. Увидимся с вами 
на следующих наших активностях.
