Қайырлы күн, құрметті студенттер!
Барлықтарыңызды келесі дәрісте көргеніме қуаныштымын.
Бүгінгі дәрісіміздің тақырыбы - Cloud Architecting, яғни бұлтты архитектураға кіріспе.
Ендеше, бастайық.
Бүгінгі дәріс төрт бөлімнен тұрады.
Бірінші бөлімде бұлтты архитектурамен танысамыз.
Екінші бөлімде біз AWS Well-Architected Framework құжаты туралы айтатын боламыз.
Үшінші бөлімде AWS бұлтында шешімдерді құру кезінде best practices пен антипаттерндерді талдаймыз.
Бұл best practices-тер кез келген басқа бұлттық провайдерлермен жұмыс істегенде де қолданылатынын атап өткім келеді.
Соңғы бөлімде жаһандық AWS инфрақұрылымы ұғымының анықтамасын еске түсіреміз және қосымша жаңа ақпаратты меңгереміз.
Бұл слайдта AWS бұлтындағы әдеттегі архитектураның мысалын көріп тұрмыз.
Егер кейбір тармақтар қазір сізге түсініксіз болса, алаңдамаңыз, өйткені бұл - ағымдағы курс бойынша жұмыстың соңғы нәтижесі.
Әр сабақта біз осы архитектураның белгілі бір бөлігін зерттеп, оның қалай жұмыс істейтінін, неге бұл архитектурада орын алғанын түсінеміз.
Болашақта курстарды аяқтағаннан кейін, алынған білімдерді пайдалана отырып, негізгі AWS сервистерінің белгілі бір санымен танысқаннан кейін, сізде AWS бұлтында осындай немесе одан да күрделі архитектураны дербес құру және баптау мүмкіндігі болады.
Басқа сервистерге қатысты курстарымызда алатын барлық сервисті зерттеу дағдылары жаңа AWS сервистерін жылдам үйрену үшін сізге пайдалы болады.
Осылайша, сіз ештеңемен шектелмейсіз және AWS бұлтында кез келген күрделіліктің архитектурасын құра аласыз.
Біз бүгінгі дәрістің бірінші бөлімін бастаймыз және бұлт архитектурасы туралы сөйлесеміз.
Дұрыс бұлт архитектурасын құрудың маңыздылығын түсіну үшін тарихқа көз жүгіртейік.
2000 жылы Amazon электрондық коммерция бизнесі өркендеген кезде, веб-сайтты қолдау үшін IT инфрақұрылымы да дамыды.
Бірақ бизнестің өзі қарқынды дамып келе жатқаны сонша, IT шешімдері бизнестің дамуына ілесе алмады.
Сол кезде AWS компаниясының CEO қызметкері Энди Джасси өз сұхбатында веб-сайтты қолдайтын барлық құралдар мен сервистер қандай да бір тәртіпсіздік пен хаос екенін айтты.
Кез келген әрекетті алдын ала жоспарлау және оны дамыту үшін қандай да бір инфрақұрылымды бөлек қарастыру өте қиын болды.
Ол тығыз байланған болатын.
Шешім ретінде ең жақсы мамандар жиналып, API сипаттайтын құжат жазылды.
Бұл инфрақұрылымның кейбір бөлігін стандарттауға мүмкіндік берді және барлық командаларға түсінікті, жақсы құжатталған API пайда болды.
Шындығында, барлық мәселелер шешілмеді, мәселе жазбаша құрамдас бөліктердің, сервистердің немесе құралдардың қайта пайдаланылмауы болды.
Осыған байланысты жұмыс өте баяу жүрді.
Жарқын мысалдардың бірі – жоба үш айға есептелген, ал сол үш айдың ішінде тек үш компонент жазылған болатын.
Бұл - дерекқорлармен, серверлермен және қоймалармен жұмыс істейтін құрамдас бөлігі.
Осылайша, команда бұл жобаның іскерлік бөлігіне де жете алмады.
Яғни, бәрі өте баяу жүрді.
Нәтижесінде белгілі бір топ әзірлеген ішкі сервистерді дамыту туралы шешім қабылданды.
Бұл сервистер API тобын біріктірді және кейбір IT ресурстарына жауапты болды.
Мысал ретінде, бізде ең танымал Amazon EC2 сервисі бар екенін білеміз және бұл жағдайда IT ресурсы - сервер, яғни есептеу қуаты болып табылады.
Осылайша, AWS құрамындағы командалар екі лагерьге бөлінді.
Командалардың бір бөлігі ішкі сервистерді әзірледі және осы сервистің дұрыс жұмыс істеуіне жауапты болды, ал басқа командалар өнімнің өзін, яғни Amazon веб-сайтын әзірледі.
Нәтижесінде командалар өте жылдам қозғалды, өйткені олар дайын ішкі сервистерді қайта пайдаланды.
Осылайша Amazon барлық компанияларға осы ішкі сервистерді қайта пайдалану мүмкіндігін беру туралы шешім қабылдады және 2006 жылы AWS өзінің ресурстарын жариялады.
Сонымен, бұлтты архитектура тұжырымдамасына қайта оралсақ, бұл компанияның техникалық, сондай-ақ бизнес талаптарын қанағаттандыру үшін барлық қолжетімді бұлттық сервистер мен функционалдық мүмкіндіктерді пайдалана отырып, бұлтта IT инфрақұрылымын құру тәжірибесі екенін түсінуіңіз керек.
Бұлт архитектурасын құрумен бұлтты архитекторлар айналысады.
Бұлтты архитекторлардың міндеті: біріншісі - не істеу керектігін түсіну үшін бизнеспен диалог жүргізу.
Келесі кезекте, екінші міндет - схема түрінде архитектураның жобалық нұсқасын әзірлеу және оны техникалық түрде шешуге болатындығына көз жеткізу.
Үшінші міндет - кестеде көрсетілген барлық тапсырмалар дәл сол түрде жүзеге асырылатындығына көз жеткізу үшін әзірлеушілер тобымен диалог жүргізу.
Бұлтты архитектордың осы жұмысының нәтижесінде компания өзінің іскерлік мақсаттарына жетеді, ал әзірлеушілер тобы техникалық мақсаттарына жетеді және іс жүзінде бұлтты архитектор бизнес пен техникалық командалар арасындағы қандай да бір байланыстырушы болып табылады.
Осымен біз бірінші бөлімнің соңына жеттік және мұндағы негізгі идея - бұлтты архитектура түсінігі.
Бұлтты архитектура түсінігінің идеясы - бұлт архитекторы қол жетімді барлық құралдарды, біздің жағдайда бұл AWS сервистері мен функционалдығын пайдалана отырып, техникалық мәселелерді де, ең бастысы, бизнес мәселелерін де шешетіндей IT архитектурасын құрастырады.
AWS жағында 200-ден астам әртүрлі сервистер бар екенін еске саламын, бұл кез келген күрделіліктегі архитектураны құруға мүмкіндік береді.
Ең бастысы, бұл сервистерді бір-бірімен дұрыс құрастыру және біріктіру үшін сізге жеткілікті тәжірибе мен білім қажет.
Енді дәрісіміздің екінші бөліміне көшеміз және AWS Well-Architected Framework деп аталатын құжатты мұқият қарастырамыз.
AWS Well-Architected Framework - бұл AWS бұлтындағы мінсіз архитектураны 5 жақты көзқараспен қарайтын құжат.
Бірінші бағыт - бұл Security, екінші - Operational excellence, үшінші - Reliability, төртінші - Performance efficiency және бесінші - бұл Cost optimization.
Әрбір бағыт үшін white paper деп аталатын жеке нұсқаулық жазылған және ол AWS бұлтындағы мінсіз архитектураға мүмкіндігінше жақын болу үшін AWS командалары ұсынған барлық best practices пен антипаттерндерді сипаттайды.
Енді осы бағыттардың әрқайсысын толығырақ қарастырайық.
Бірінші бағыт - бұл Security.
Мұнда есте сақтау керек бірнеше негізгі тармақтар бар.
Біріншісі - біз ұйымдарға құқықтар беруіміз керек, ұйым ретінде пайдаланушылар, рөлдер немесе сервистер болуы мүмкін.
Және тек қажетті көлемде ғана құқықтар мен қолжетімділікті беру керек, яғни least privilege principle ұстану керек.
Екіншіден - traceability қамтамасыз ету қажет.
Идеясы мынада: егер құрамдастардың бірі істен шықса, бұл сәтсіздік алдыңғы сәтсіздіктің салдары болуы мүмкін.
Осылайша, мәселенің қайда екенін анық және жылдам анықтау үшін осы тізбектің жалпы көрінісін қамтамасыз ету қажет.
Яғни, ең бірінші бұзылған компонент және одан кейінгі компоненттердің де бұзылуына әкелген құрамдас бөлікті анықтау қажет.
Ал үшінші тармақ – біз барлық деңгейлерде қауіпсіздікті қамтамасыз етуіміз керек.
Атап айтқанда, деректер шифрланған түрде сақталуы керек, сонымен қатар деректер қауіпсіз шифрланған түрде жіберілуі керек.
Екінші бағыт - бұл Operational excellence.
Идеясы - бізге инфрақұрылымның жалпы көрінісіне қол жеткізу керек.
Бұл көрсеткіштер мен журналдар (логтар) арқылы жасалады.
Бұл деректер көз алдымызда болғанда, біз жүйеміздің қаншалықты жақсы және тиімді жұмыс істейтінін талдап, түсіне аламыз.
Егер біздің кейбір IT ресурстарымыз түрі бойынша сәйкес келмесе және нәтижесінде тиімді жұмыс істемесе, біз мұны көре аламыз және оны шағын қадамдармен жақсартып, IT өніміміздің жүктемелеріне тән реттей аламыз.
Бұл - тұрақты түрде жүретін процесс.
Мінсіз күйге жету мүмкін емес, өйткені жүктемелер  әрдайым өзгеріп тұрады, өнімдер үнемі дамып отырады және жаңадан әртүрлі компоненттер пайда болады.
Бірақ бұл бағыттың идеясы мынада: біз бұл процесті қажетті деректермен қамтамасыз етуіміз керек және сәйкесінше, жүктемелер өзгерсе де, шағын қадамдармен инфрақұрылымымыздың көлемін үлкейтіп, оңтайландыруымыз керек.
Келесі бағыт - бұл Reliability.
Бұл бағыттың идеясы - бізге IT инфрақұрылымын бұзылған жағдайда бұзылудың қай жерде болғанын тез түсінетіндей етіп құруымыз керек және инфрақұрылымды автоматты түрде қалпына келтіруді қамтамасыз етуіміз керек.
Яғни, жүктеменің артуы кезінде IT ресурстарының тапшылығы жағдайында жүйе есептеу ресурстарының көлемін динамикалық түрде арттыру керек.
Бір availability zone істен шыққан жағдайда, инфрақұрылым басқа availability zone-да дұрыс жұмысын жалғастыра алуы керек және т.б.
Төртінші бағыт - бұл Performance efficiency.
Бұл бағыттың идеясы - біздің бизнес мәселесі мен техникалық мәселеге байланысты, біз оны шешетін құралды таңдауымыз керек, керісінше емес.
Мен AWS жағында бізге қол жетімді 200-ден астам сервис бар екенін бірнеше рет айттым және мысал ретінде дерекқорға қатысты 7-ден астам сервистің болуы еді.
Осылайша, сізде қандай деректер бар екеніне, бұл деректерге қалай қол жеткізілетініне, қол жеткізу жиілігі қандай, бұл деректер қаншалықты жиі жазылады немесе, керісінше, оқылады, сіз қолданыстағы дерекқор сервистерінің қайсысы сіз үшін ең қолайлы екенін түсіне аласыз.
Соңғы, бесінші бағыт - бұл Cost optimization.
Бұл менің сүйікті бағыттарымның бірі.
Себебі, осы бағытта дұрыс жұмыс жасасақ, бұлтты технологиялармен жұмыс істеудің әлеуетін барынша арттыруға болады.
Бұл бағыттың идеясы - біз белгілі бір ресурстарды не үшін және кім жасағанын көруді қамтамасыз етуіміз керек.
Осының арқасында біз белгілі бір құрамдас бөліктердің, командалардың немесе тіпті IT ресурстарының AWS бұлтында қаншалықты тиімді жұмыс істейтінін түсінеміз.
Осылайша, бұл көріністі алу арқылы біз бұлтты инфрақұрылымның қажетсіз шығындарын қысқарта аламыз.
Енді біз AWS Well-Architected Tool түсінігіне келдік.
Иә, бұл AWS аккаунты деңгейінде қосылатын тағы бір арнайы сервис және Well-Architected Framework-те сипатталған мінсіз IT инфрақұрылымымен салыстырғанда IT инфрақұрылымын қаншалықты жақсы немесе нашар құрғанымызды көрсетеді.
Осымен, бүгінгі дәрісімздің екінші бөлімін аяқтадық.
Негізгі тармақтарды еске түсірейік.
AWS Well-Architected Framework - AWS архитекторларының пікірі бойынша мінсіз инфрақұрылымды сипаттайтын құжат.
Ол әрқайсысы best practices-тен тұратын бес түрлі бағытта сипатталған.
Мен бұл құжаттың AWS архитекторларының пікірі бойынша сипатталғанын және бұл құжат сіздің контекстіңізді көрмейтінін бұрын айттым.
Сондықтан, сіз бұл ұсыныстарды толық дерлік орындамауыңыз керек, өйткені барлық ұсыныстар сіздің нақты жағдайыңыз үшін бірдей тиімді бола бермейді.
Жалпы сіз осындай ұсыныстардың бар екенін білуіңіз керек, әрқайсысын жеке жағдайда қолданып, егер ол шынымен сіз күткен нәтиже берсе, оны ұстанып, жүзеге асыруыңыз керек.
Сондай-ақ, AWS аккаунты аясында best practices-ті қаншалықты ұстанатыныңызды автоматты түрде көруге мүмкіндік беретін AWS Well-Architected Tool бар.
Бүгінгі дәрісіміздің үшінші бөліміне де жеттік.
Мұнда AWS бұлтында шешімдерді құру кезінде best practices пен антипаттерндер туралы айтатын боламыз.
Бұл бөлімнің негізгі мәні мынада - сіз best practices сіздің ісіңізге шынымен сәйкес келетінін түсінуіңіз керек.
Сонымен қатар, кез келген best practices оны жүзеге асыруды талап етеді және бұл жағдайда белгілі бір кемшіліктер болуы мүмкін.
Мысалы, әзірлеу тобы немесе бұлттық инженерлер тобы осы best practices-ті енгізуге жұмсайтын уақыт болуы мүмкін.
Тағы бір мысал, бұлтты инфрақұрылымға кететін шығындарыңыз артуы мүмкін және т.б. 
Сондықтан, әрқашан best practices-ті қарастырған кезде, сіз оның қандай кемшіліктері бар екенін және бұл шынымен де оған тұрарлық па екенін түсінуіңіз керек.
Әрбір best practices-тің мәнін жақсырақ түсіну үшін біз не істемеу керектігінің, яғни антипаттерндердің мысалын береміз.
Осылайша, сіз қалай болу және болмау керектігін салыстырмалы түрде жақсырақ түсінесіз.
Бұл бөлімде біз 10 best practices қарастырамыз.
Ендеше, бастайық.
Бірінші best practice - бұл Enable scalability.
Идея мынада: сіздің инфрақұрылымыңыз жүктемеге байланысты көлемін автоматты түрде үлкейтіп немесе кішірейіп өзгерте алуы керек.
Егер сіздің инфрақұрылымыңыз слайдтағы суреттегідей құрылған болса: сізде пайдаланушылар бар, олар сіздің инфрақұрылымыңызға біршама жүктеме түсіреді, және бапталған серверлердің белгілі бір саны бар.
Содан кейін сізде серверлер үлкен жүктемеде екендігі туралы байланыс арналары арқылы хабарландырулар алатын әкімші бар.
Әрі қарай, бұл әкімші инфрақұрылымға қосылады, серверді қолмен баптайды және оны теңгерімдеуге қосады.
Бұл - best practice емес, яғни шығын тұрғысынан тиімді емес, өйткені оған маманның жұмыс уақыты да кіреді.
Оның үстіне, адам факторы бар, яғни әкімші қосылайын деп жатқан кезде жүктеме белгілі бір шекті деңгейден асып кетуі мүмкін, нәтижесінде қолданба жауап беруді тоқтатуы әбден мүмкін.
Бұл жағдайда жаңа серверді баптау тым кеш болады.
Тағы бір мәселе, жүктеме әлдеқашан төмендегенде, әкімші серверлерді өшіруді ұмытып кетуі мүмкін.
Бұл жағдайда да сіз артық шығындарға ұшырайсыз.
Дұрыс шешім - серверлер санын динамикалық түрде көбейту немесе жүктеме болмаған кезде оларды азайту үшін барлық қажетті құралдар мен қол жетімді AWS сервистерін пайдалану.
Пайдаланушылар бар, олардан сұраулар келеді, жүктеме теңдестірілетін ағымдағы серверлер бар және жүктеме белгілі бір шекті деңгейден жоғарыласа, тиісті сервиске хабарландырулар жіберілетінін көресіз.
Бұл сервис серверлердің қажетті санын автоматты түрде баптайды, осылайша әрбір пайдаланушы сұраныстары өңделеді.
Ал пайдаланушылар сіздің сайтыңыздағы әрекеттерін аяқтап, шыққанан кейін, керісінше жағдай орын алады: масштабтау сервисіне серверлердегі жүктеме азайғаны туралы хабарлама келеді және бұл сервис шығын болмас үшін қосымша серверлерді өшіре алады.
Келесі best practice - бұл Automate your environment.
Идеясы - мүмкіндігінше инфрақұрылымыңыздағы ресурстарды автоматты түрде құру, жою және баптау.
Келесі антипаттернді қарастырайық.
Ол алдыңғы слайдтағы антипаттернге өте ұқсас, бірақ серверіңізде кейбір ішкі қателер болып қалса, жұмысын тоқтатуы мүмкін екендігімен ерекшеленеді.
Бұл жағдайда жұмыс істейтін серверлердің саны азаяды.
Сіз өзіңіздің әкімшіңізге хабарландыру орнатқаныңызды елестетіп көрейік, әкімші қосылып, осы серверді қалпына келтіре бастайды немесе жаңасын жасай бастайды, содан кейін ол жалғыз отырып, бұзылған сервермен жұмыс істей алады.
Және бұл жүйеде қате және бұзылу болған уақытта орын алады.
Бұл түнде, таңертең, күндізгі уақытта немесе маманның жұмыс уақытынан тыс уақытта болуы мүмкін.
Бұл - антипаттерн, өйткені айқын кемшіліктері бар.
Біріншіден, маманның жұмыс уақыты үшін қосымша ақы төлеу керек.
Бұл қосымша жұмыс уақыты үшін төлемді қамтуы мүмкін.
Тағы бір айта кететін жайт, бұл жерде адам факторы бар, яғни адамның қосыла алмауы немесе үлгермеуі, байқамауы мүмкін.
Осылайша, сіздің инфрақұрылымыңыздың жағдайы қажетті уақытта қосыла алмайтын бір немесе бірнеше мамандарға байланысты болып қалады.
Қарама-қарсы жағдай - best practice - проблемалық серверлерді анықтау үшін осы серверлерді жойып, орнына жаңа бапталған, міндетті түрде жұмыс істейтін серверлердің қажетті санын орнату үшін, қол жетімді құралдарды, атап айтқанда Auto Scaling сервисін пайдалану.
Қажет болса, олар сондай-ақ әкімшіге белгілі бір сервер ID-і бар бірнеше серверлер бұзылғаны және олардың орнына басқа бір ID-і бар келесі серверлер орнатылғаны туралы хабарлама жібере алады.
Бұл маманды бұзылу кезінде қосылуға мәжбүрлемейтін best practice, маманды күйзеліске ұшыратпауға, бірақ пайдаланушы сұрауларын өңдеуді жалғастыра отырып, бұзылған серверлерді бөлек ұстауға мүмкіндік береді.
Жұмыс күні басталған кезде маман хабарландыру алады және мәселені түсіну үшін дереу бөлек алынған серверлерді қарап шығады.
Келесі, үшінші best practice - бұл Treat resources as disposable.
Идея мынада: біз өз инфрақұрылымымызды, IT ресурстарымызды hardware ретінде емес, software ретінде қабылдауымыз керек.
Осылайша, біз аппараттық құралдарға байланысты емеспіз және бұл әрбір IT ресурсты оңай ауыстыруға болатындығына әкеледі.
Ал бұл, өз кезегінде, бұлттық ортада қолжетімді IT ресурстарды динамикалық басқаруға мүмкіндік береді. 
Келесі, төртінші best practice - бұл Use loosely coupled components.
Бұл best practice-тің идеясы - біз инфрақұрылымды әрбір құрамдас көршілес құрамдас бөліктердің ең аз санына қосылатындай етіп құруымыз керек.
Мұны түсіну үшін антипаттернді қарастырайық.
Бізде веб-серверлердің деңгейі, back-end деңгейі бар деп елестетіп көрейік, яғни application серверлер бар.
Ал веб-сервер деңгейіндегі әрбір сервер back-end серверлеріне жоғары дәрежеде қосылған.
Бұл веб-деңгейдегі құрамдастардың бірін ауыстыру немесе жаңарту кезінде біз барлық қосылымдарды ескеруіміз керек екеніне әкеледі: егер көрші қосылған компоненттердің жағында өзгерту қажет болса, онда бұл өзгерісті бір ғана емес, бірнеше көршілес құрамдастарда енгізу қажет.
Бұл қымбат, қиын және әрқашан қолжетімді емес болуы мүмкін.
Сонымен қатар, тығыз байланыстырылған архитектурада, егер құрамдас үзілсе, ол сәтсіздіктер толқынын тудыруы мүмкін және сынған құрамдаспен байланысты барлық компоненттер де үзілуі мүмкін.
Және сол сияқты: бастапқы істен шыққан құрамдас бөліктер, бастапқы компонент, келесі құрамдастардың бұзылуына әкелуі мүмкін.
Нәтижесінде, бір құрамдас деңгейіндегі кішкене қатеге байланысты бүкіл инфрақұрылым істен шығуы мүмкін.
Бұл өте қауіпті, сондықтан бұл - антипаттерн.
Best practice - біз әрбір құрамдас бөлікті басқа көршілес құрамдас бөліктермен әлсіз байланысты етіп құрастырамыз.
Бұл компоненттердің әрқайсысын қауіпсіз, арзан және тиімді ауыстыруға, жоюға немесе жаңартуға мүмкіндік береді.
Бізге әлсіз байланысқан архитектураларды құруға мүмкіндік беретін сервистердің мысалдары ELB, Amazon SQS болып табылады.
Бұл келесі сабақтарымызда айтатын хабарламалар кезегі сервисі.
Келесі, бесінші best practice - бұл Design Services, Not Servers.
Идея мынада: ең басында, белсенді даму кезеңінде, Managed Services, Serverless Services немесе сіздің командаңыздың жұмысын жеңілдететін кез келген басқа AWS сервистерін таңдау ұсынылады.
Яғни, командаға техникалық функционалдылықты немесе техникалық құралды әзірлеу қажет емес.
Осының арқасында команда бизнес мәселелерін шешетін бизнес логикасын жазуға шоғырлана алады.
Бұл өз кезегінде нарыққа ертерек шығуға, компанияға ақша табуды ерте бастауға мүмкіндік береді және жалпы бұл дұрыс бағыт.
Әрі қарай, пассивті даму кезеңінде, негізгі функционалдылық әзірленген және тапсырмалар көп болмаған кезде, бұлтқа арналған шығындар құрылымын қайта қарау туралы ұсыныс бар.
Егер белгілі бір сервис мөлшерсіз түрде көп ақшаны тұтынатыны анықталса, сізге кейбір есептеулерді жасауға тура келеді.
Мысалы, хабарламалар кезегі сервисін іске асыру үшін AWS шығындарын қарап, сіздің командаңыз немесе жеке маман осындай функционалдылықты немесе ішкі құралды қанша уақытта әзірлейтінін қарап, бағалауыңызға болады.
Бұл шығындар салыстырмалы болған жағдайда сіз қысқа мерзімді, орта мерзімді және ұзақ мерзімді кезеңге есептеулер жасай аласыз.
Егер ішкі шешімді жазу тиімді болатыны анықталса, өзіңіздің әзірлемелеріңізді дамытуға баяу көшуге болады.
Неліктен мұны басынан бастап жасау ұсынылмайды?
Дәл осы жерде сіздің бүкіл командаңыз кейбір техникалық құралдарды әзірлеу кезеңінде тұрып қалуы мүмкін және бизнес мәселелерін шешу үшін бизнес логикасын жазуға да жете алмайды.
Бұл өз кезегінде сіздің компанияңыздың болашағына нүкте қоюы мүмкін және нәтижесінде компания банкротқа ұшырауы мүмкін.
Келесі, алтыншы best practice - бұл Choose the right database solution.
Бұл best practice идеясы мынада: бұлттық технологиялармен жұмыс істегенде бізде деректерді сақтауға, өңдеуге және талдауға мүмкіндік беретін бірнеше ондаған сервистер бар.
Сіздің деректеріңіз қалай пайдаланылатынына, қаншалықты жиі жазылатынына, қаншалықты жиі оқылатынына, деректердің қандай көлемі күтілуде, деректеріңіздің қаншалықты көлемді болуы мүмкін екеніне, деректерді тасымалдау талаптары қандай, деректеріңізге бір уақытта қосылу санына қойылатын талаптар қандай және т.б. шарттарға байланысты оңтайлы сервисті таңдауға болады.
Есептеу және дерекқор шығындары жалпы бұлттық шығындардың 50%-на дейін жетуі мүмкін екенін ескере отырып, бастапқыда дұрыс шешімді таңдау артық шығындарсыз бірден үлкен пайда табуға көмектеседі.
Келесі best practice - бұл Avoid single points of failure.
Идеясы - сіз өзіңіздің инфрақұрылымыңызды сыни жерлерде аздап артық болатындай етіп құруыңыз керек.
Бұл жерде түсінілетін нәрсе, сыни түйіндер бұзылған жағдайда резервтік опция бар, ал бұл сыни түйін бұзылған жағдайда бүкіл жүйе тоқтамай, жұмысын жалғастырады.
Мысалы, біз шешімімізді бір немесе бірнеше availability zone-да орналастырамыз, бірақ бізде, мысалы, дерекқор жағдайында негізгі дерекқор бар және оның жанында standby көшірме бар, ол қажет болған жағдайда master дерекқорға айналып, қолданбаларыңыздан сұрауларды қабылдауды жалғастыра алады.
Келесі best practice - бұл Optimize for cost.
Бұл best practice идеясы - бұлт провайдерлері ұсынатын мүмкіндіктерді пайдалану қажет, атап айтқанда олар инстанс түрлерінің кең таңдауын, инфрақұрылымды автоматты түрде масштабтайтын сервистердің кең таңдауын қамтамасыз етеді.
Осылайша, IT ресурстарының түрлерімен және олардың комбинацияларымен тәжірибе жасау арқылы сіз жұмыс жүктемеңізге өте ыңғайлы инфрақұрылымды құра аласыз.
Жергілікті дата-центр туралы айтатын болсақ, мұндай мүмкіндіктер болмауы мүмкін, өйткені аккаунтыңызға, ұйымыңызға қосымша IT ресурстарын бөлу біраз уақытты алуы мүмкін.
Бұл кейбір адами факторларды қамтуы мүмкін, мысалы, бұл ресурстар сізге бөлінуі үшін сұрауды ашып, оны техникалық қолдау қызметіне жіберуіңіз керек.
Немесе онда бәрі автоматтандырылған болса да, дата-центрдің көлемі жаһандық AWS инфрақұрылымымен салыстырғанда өте кішкентай.
Сондықтан сервер түрлерінің үлкен таңдауы болады деп күтпеу керек.
Ол әлдеқайда аз болуы мүмкін және тәжірибе жасау үшін бірнеше ғана нұсқалар болуы мүмкін.
Келесі best practice - бұл Use caching.
Идеясы - кэштеуді ұйымдастыруға болатын барлық жерлерде мұны істеу керек.
Мұның бірнеше маңызды себептері бар.
Біріншісі - деректер бастапқы көзден алынған кезде олар өзгере алады немесе түрленіп кетуі мүмкін.
Ол үшін көбірек есептеу ресурстарын жұмсау керек.
Бұл көп уақытты қажет етеді және сәйкесінше, кэштен дайын нәтижені шығарғаннан гөрі бәрі қымбатқа түседі.
Тағы бір мәселе, сервер кэші пайдаланушыларыңызға жақынырақ болуы мүмкін.
Осылайша, пайдаланушылар деректерді тезірек алады және сіз Network трафикті үнемдейсіз.
Өйткені ол айтарлықтай азаяды және әрбір сұрау үшін бастапқы дереккөзге хабарласудың қажеті болмайды.
Мысалы, CloudFront сервисін пайдалану - бұл жаһандық CDN, Content Delivery Network.
Сондай-ақ, кэштеу туралы айтатын болсақ, дерекқорды босату үшін Redis немесе Memcached ресурсын баптай алатын ElastiCache сервисін айтуға болады.
Ең соңғы, оныншы best practice - бұл Secure your entire infrastructure.
Бұл best practice-тің негізгі идеясы - біз инфрақұрылымымыздың әрбір деңгейінде қауіпсіздікті қамтамасыз етуіміз керек.
Бірнеше мысал келтірейін.
Бірінші мысал - деректеріңізді сақтау кезінде ғана емес, сонымен бірге осы деректерді тасымалдау кезінде де шифрланғанын қамтамасыз ету қажет.
Басқа мысал - пайдаланушыларға немесе кез келген сервиске рөлдік құқықтарды белгілі бір тапсырманы орындау үшін қажетті көлемде ғана беру керек, яғни Least Privilege принципін сақтау керек.
Келесі мысал - мүмкіндігінше MFA қосылу керек кезде оны қосу болып табылады.
MFA - бұл Multi-Factor Authentication.
Осылайша, белгілі бір пайдаланушының жеке тұлғасын тексеру арқылы апатты немесе маңызды болуы мүмкін оқиғаларды қосымша қорғай аласыз.
Басқа мысал - бұл Managed Services қолдану.
Managed Services - AWS әкімшіліктің көпшілігін өзіне алады және біз бұлттық технологияларды және осы арнайы сервистерді пайдаланушылар ретінде осы сервистердің дұрыс бапталғанына көз жеткізуіміз керек.
Осылайша, қауіпсіздік конфигурациясы, орнату, қауіпсіздік патчтарын жаңарту, барлығы бұлттық провайдердің иығына түседі.
Тағы бір мысал, нақты ресурстарға кім, қашан, қалай және не үшін қол жеткізгенін дұрыс сәтте анықтау үшін маңызды ресурстарға қатысты барлық әрекеттерді тіркеу қажет.
Осымен бүгінгі дәрісіміздің үшінші бөлімін де аяқтадық.
Біз 10 best practices-ті қарастырдық.
Әрбір best practice үшін оны жақсы меңгеру үшін антипаттернді және бірнеше мысалдарды талқыладық.
Сіз best practice-тің не екенін, оның бұлттық архитектураға қалай қатысты екенін жақсырақ түсіндіңіз деп үміттенемін және болашақта бұл AWS бұлтында архитектураңызды құруға көмектеседі деп ойлаймын.
Енді дәрісіміздің соңғы төртінші бөліміне біртіндеп өтіп, жаһандық AWS инфрақұрылымы туралы сөйлесейік.
Біз бұл тақырыпты алдыңғы Cloud Practitioner курсында қозғаған болатынбыз.
Енді біз оны қайталап, жаңа нюанстарды қоса айтамыз.
AWS Regions тұжырымдамасынан бастайық.
Region - бұл басқа аймақтардан оқшауланған белгілі бір физикалық географиялық орын.
Әлемде 20-дан астам AWS Regions бар.
Әрбір AWS Region екі немесе одан да көп availability zone-нан тұрады.
Бір-бірімен байланысты аймақтар AWS желісі арқылы бөлек белгіленеді.
Аймақтар бір-бірінен оқшауланғандықтан, репликациялау немесе аймақтар арасында деректерді тасымалдау тапсырмасын өзіңіз баптауыңыз қажет.
Бұл үшін барлық құралдар бар, ол тек қосымша конфигурацияны қажет етеді, яғни жергілікті жерде қол жетімді емес.
Ал availability zone жағдайында кейбір ресурстарды орнату кезінде осы сервис қандай availability zone пайдаланатынын таңдауға болады.
Regions жағдайында мұндай нұсқа болмайды.
Дүние жүзінде AWS аймақтарының әртүрлі түрлері бар.
Көптеген аймақтар стандартты аймақтар болып табылады.
Сондай-ақ, Қытайға қатысты екі аймақ бар, яғни AWS China деп аталады.
Олар әлемнен оқшауланып, бөлек дамиды.
Біз жиі көретін құбылыс, AWS China-да жұмыс істейтін кез келген сервис Қытайдан тыс аймақтармен салыстырғанда дамудан бір жыл немесе одан да көп жылға артта қалады.
Аймақтың тағы бір түрі бар - AWS GovCloud.
Бұл - Америкадағы мемлекеттік мекемелермен байланысты IT инфрақұрылымдарды орналастыру үшін арнайы құрылған аймақ.
Енді AWS жаһандық инфрақұрылымының келесі элементін - availability zone қарастырайық.
Availability zone белгілі бір region-ға қатысты.
Егер бізде жаһандық AWS бар десек, оның бірнеше ондаған region бар, мысалы, eu-west-1.
Бұл region-да бірнеше availability zone бар және availability zone мысалы eu-west-1a болып табылады.
Яғни, availability zone атауы - бұл availability zone атауы және әліпбидің бір әрпі.
Availability zone туралы айтатын болсақ, әрбір availability zone кемінде бір немесе тіпті бірнеше дата-центрден тұрады.
Осылайша, бүкіл аймақты айтпағанда, availability zone-ның қолжетімсіз болуы екіталай.
Бірақ та әлемде ешбір жағдайда үзілмеуі керек өте маңызды жүктемелер де бар.
Мұндай жағдайларда компаниялар өздерінің инфрақұрылымын бірнеше аймақтарға орналастырады.
Бұл өте қымбат, бірақ іскерлік тапсырма және белгілі бір талаптар болған кезде мұндай инфрақұрылымдар да бар.
Region ішіндегі availability zone-лар арнайы сілтеме арқылы өзара байланысты және деректерді осы availability zone арасында жоғары жылдамдықпен тасымалдауға болады.
Жаһандық инфрақұрылымның келесі жаңа құрамдас бөлігі - бұл AWS local zones.
AWS local zones идеясы - бұл шалғай жерде орналасқан шағын аймақ.
Яғни, жақын жерде AWS Regions болмаса, бірақ елдегі белгілі бір аймақта қол жетімді болуы үшін AWS қажет болса, AWS local zones сізге көмекке келеді.
Яғни, сізге қолжетімді шағын дата-центр орналастырылады және сіз бұл ресурстарды өз еліңізде пайдалана аласыз.
Кейбір жұмыс жүктемелері мен бизнес үшін бұл өте қызықты шешім.
Енді біз availability zone ішіндегі келесі құрамдас - дата-центрді қарастырайық.
Дата-центрлер - біздің барлық серверлеріміз орналасқан, барлық деректер сол серверлерде сақталады және AWS ғаламдық инфрақұрылымының ең кіші құрамдас бөлігі болып табылады.
Егер біз дата-центрлердің көлемі туралы айтатын болсақ, онда әрбір дата-центрінде кем дегенде бірнеше ондаған мың серверлер бар.
Бұл серверлер өте қуатты болуы мүмкін, өйткені виртуализация процесі жүреді және бір қуатты серверді бірнеше түрлі шағын инстанстар ретінде бөліп, сізге ұсынуға болады.
Осылайша, дата-центр - физикалық шектеулі кеңістік екенін түсіне отырып, AWS кеңістіктің әрбір бөлігін мүмкіндігінше тиімді пайдалануға тырысады және сәйкесінше, әрбір сервер мүмкіндігінше қуатты болады, егер мен бұрын айтқан санға көбейтсек, бұл бірнеше ондаған мың осындай қуатты серверлер болса, бір дата-центрінде қол жетімді есептеу қуатының ауқымын елестетіп көріңізші.
AWS жаһандық инфрақұрылымының келесі бөлек құрамдас бөлігі және CDN-ге қатысты, яғни Content Delivery Network - бұл AWS Points of presence.
Олар Amazon CloudFront сервисіне тікелей қатысты және бірнеше түрлері бар.
Бұл Edge locations және Regional edge caches.
Оның айырмашылығы, Edge locations әлеуетті пайдаланушыларыңызға ең жақын сервер кэштері және деректер Edge locations-тан мүмкіндігінше жылдам тасымалданады.
Келесі, сәл алыс сервер кэштері Regional edge caches болып табылады, оларда Edge locations-тағы деректер сияқты жиі сұралмайтын, бірақ соған қарамастан сұралатын және олар үлкенірек географиялық аумақта біріктірілген, яғни олар жиі емес бірнеше Edge locations-тағы деректерді біріктіреді.
Сондай-ақ, картада күлгін түспен бөлектелген Multiple edge locations көресіз.
Бұл AWS өте жақсы дамыған, Amazon CloudFront сервисі өте белсенді қолданылатын орындар және сіз осы слайдта олардың бөлек белгіленгенін көре аласыз.
Осымен бүгінгі дәрісіміздің соңғы бөлімін аяқтадық.
Біз жаһандық AWS инфрақұрылымын, оның негізгі құрамдас бөліктерін және олар не үшін қажет екенін қарастырдық.
Осымен біз бүгінгі дәрісіміздің соңына жеттік, біз келесі дәрістерімізді оңай меңгеруге көмектесетін өте маңызды негізгі ұғымдарды талқыладық.
Мұнда қарастырылған материалдарды тереңірек зерттеу үшін бірнеше пайдалы сілтемелерді көре аласыз.
Осымен бүгінгі сессиямызды аяқтаймыз.
Назарларыңызға рахмет.
Келесі белсенділіктерімізде кездескенше!
