WEBVTT

00:00:00.000 --> 00:00:05.000
Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной лекции.

00:00:05.000 --> 00:00:09.000
Тема сегодняшней лекции это введение в Cloud Architecting.

00:00:09.000 --> 00:00:11.000
Итак, давайте начнем.

00:00:11.000 --> 00:00:15.000
Сегодняшняя лекция состоит из четырех частей.

00:00:15.000 --> 00:00:19.000
В первой части мы познакомимся, что же такое облачная архитектура.

00:00:19.000 --> 00:00:25.000
Во второй части поговорим о документе AWS Well-Architected Framework.

00:00:25.000 --> 00:00:32.000
В третьей части разберем best practices и антипаттерны при построении решений в облаке AWS.

00:00:32.000 --> 00:00:39.000
Здесь хотелось бы отметить, что эти best practices также применимы при работе с любыми другими облачными провайдерами.

00:00:39.000 --> 00:00:48.000
В самой последней части мы вспомним, что же такое глобальная инфраструктура AWS и узнаем что-то дополнительно новое для себя.

00:00:48.000 --> 00:00:56.000
На этом слайде вы видите пример типовой архитектуры в облаке AWS.

00:00:56.000 --> 00:01:07.000
И что-то если сейчас вам непонятно, не переживайте, так как это конечный результат работы над текущим курсом.

00:01:07.000 --> 00:01:17.000
С каждым занятием мы будем изучать какой-то определенный кусочек из этой архитектуры и понимать как оно работает, для чего оно есть в этой архитектуре.

00:01:17.000 --> 00:01:30.000
В будущем, после прохождения наших курсов, используя полученные знания, познакомившись с определенным количеством основных AWS сервисов,

00:01:30.000 --> 00:01:40.000
у вас будет возможность самостоятельно строить, поднимать архитектуру в облаке AWS такой же сложности, либо еще сложнее.

00:01:40.000 --> 00:01:51.000
Касательно других сервисов, все те навыки изучения сервисов, которые вы получите на наших курсах, пригодятся вам для более быстрого изучения новых AWS сервисов.

00:01:51.000 --> 00:02:01.000
Таким образом, вы не будете ограничены ничем и будете в состоянии построить архитектуру абсолютно любой сложности в облаке AWS.

00:02:01.000 --> 00:02:08.000
Мы с вами начинаем первую часть сегодняшней лекции и поговорим, что такое облачная архитектура.

00:02:08.000 --> 00:02:19.000
Для того, чтобы понять важность построения правильной облачной архитектуры, почему это нужно, почему это важно, давайте вспомним историю.

00:02:19.000 --> 00:02:32.000
В 2000 году, когда e-commerce бизнес Амазона бурно развивался, для того, чтобы поддерживать этот веб-сайт, развивалась и IT инфраструктура.

00:02:32.000 --> 00:02:41.000
Но сам бизнес очень бурно рос, что IT решения не поспевали за развитием бизнеса.

00:02:41.000 --> 00:02:58.000
На тот момент, CEO компании AWS Энди Ясси в одном из интервью сказал, что все те инструменты, сервисы, которые поддерживают веб-сайт, это какой-то беспорядок и хаос.

00:02:58.000 --> 00:03:09.000
Очень сложно было что-то планировать наперед и как-то отдельно рассматривать какой-то кусочек инфраструктуры, чтобы ее можно было развивать.

00:03:09.000 --> 00:03:12.000
Она была сильно связана.

00:03:12.000 --> 00:03:24.000
Как решение собрались лучшие специалисты и написали некоторый документ, который описывает API.

00:03:24.000 --> 00:03:40.000
Это позволило стандартизировать какую-то часть инфраструктуры и появился хорошо задокументированный, понятный для всех команд API.

00:03:40.000 --> 00:03:56.000
Проблемы на самом деле все не решились, осталась проблема того, что написанные компоненты, сервисы, инструменты, они не переиспользовались. За счет этого команды двигались очень медленно.

00:03:56.000 --> 00:04:11.000
Один из ярких примеров, проект рассчитан на три месяца, за три месяца было написано лишь три компонента, это компонент работы с базами данных, с серверами и с хранением.

00:04:11.000 --> 00:04:18.000
Таким образом команда даже не добралась до бизнесовой части этого проекта.

00:04:18.000 --> 00:04:31.000
То есть двигалось очень все медленно. В результате было решено разработать внутренние сервисы, которые развивались определенной командой.

00:04:31.000 --> 00:04:40.000
Эти сервисы объединяли вокруг себя группу API и отвечали за некоторые IT ресурсы.

00:04:40.000 --> 00:04:51.000
Как пример, мы знаем, что у нас есть самый популярный сервис EC2 и в этом случае IT ресурсом является сервер, то есть вычислительные мощности.

00:04:51.000 --> 00:05:04.000
Таким образом команды внутри WS, они поделились на два лагеря. Одна часть команд разрабатывала внутренние сервисы и отвечала за корректную работу этого сервиса,

00:05:04.000 --> 00:05:15.000
а другие команды они развивали сам продукт, то есть веб-сайт Amazon. Но при этом команды двигались очень быстро, так как переиспользовали готовые внутренние сервисы.

00:05:15.000 --> 00:05:34.000
В результате Amazon решил дать возможность всем компаниям переиспользовать эти внутренние сервисы и в 2006 году была анонсирована AWS со своими ресурсами.

00:05:34.000 --> 00:06:02.000
Итак, возвращаясь к понятию облачная архитектура, следует понимать, это практика построения IT инфраструктуры в облаке с применением всех доступных облачных сервисов и возможностей функционала для того, чтобы удовлетворить технические требования, а также бизнесовые требования компании.

00:06:02.000 --> 00:06:18.000
Построением облачных архитектор занимаются облачные архитекторы. Задача облачных архитекторов первая это вести диалог с бизнесом для того, чтобы понять, что необходимо сделать.

00:06:18.000 --> 00:06:36.000
Далее вторая задача это разработать вот эту архитектуру, черновичный вариант в виде схемы и удостовериться, что технически это можно решить.

00:06:36.000 --> 00:06:51.000
И третья задача это вести диалог с командой разработки для того, чтобы убедиться, что все, что нарисовано на схеме было реализовано точно в таком же виде.

00:06:51.000 --> 00:07:12.000
В результате этих работ облачного архитектора, компания достигает своих бизнес целей, а команда разработки достигает своих технических целей и является фактически некоторым связующим звеном бизнеса и технических команд.

00:07:12.000 --> 00:07:21.000
На этом мы подошли к концу первой части и основной идеей здесь является, что же такое облачная архитектура.

00:07:21.000 --> 00:07:33.000
Облачная архитектура это когда облачный архитектор используя все доступные средства, в нашем случае это сервисы и функционал сервисов AWS,

00:07:33.000 --> 00:07:43.000
построить IT архитектуру таким образом, чтобы решить и технические задачи и самое главное задачи бизнеса.

00:07:43.000 --> 00:07:54.000
Я напоминаю, что на стороне AWS есть более 200 различных сервисов, что позволяет вам строить архитектуру абсолютно любой сложности.

00:07:54.000 --> 00:08:05.000
Самое главное, нужен достаточно опыт и знания, чтобы правильно компоновать и комбинировать между собой эти сервисы.

00:08:05.000 --> 00:08:19.000
Мы с вами плавно переходим ко второй части нашей сегодняшней лекции и подробнее остановимся на документе, который называется AWS Well-Architected Framework.

00:08:19.000 --> 00:08:30.000
AWS Well-Architected Framework это некоторый документ, который рассматривает идеальную архитектуру в облаке AWS с точки зрения пяти направлений.

00:08:30.000 --> 00:08:41.000
Первое направление это security, второе operational excellence, третье reliability, четвертое performance efficiency и пятое это cost optimization.

00:08:41.000 --> 00:08:56.000
Для каждого направления была написана отдельная инструкция, так называемый white paper и в нем описывается все необходимые рекомендуемые командами AWS,

00:08:56.000 --> 00:09:08.000
best practices, анти паттерны для того, чтобы быть максимально приближены к идеальной архитектуре в облаке AWS.

00:09:08.000 --> 00:09:15.000
Давайте сейчас остановимся на каждой из этих направлений более подробно.

00:09:15.000 --> 00:09:22.000
Первое направление это security. Здесь необходимо запомнить несколько основных моментов.

00:09:22.000 --> 00:09:33.000
Первое это то, что нам необходимо выдавать права для сущностей, как сущности могут выступать пользователи, роли либо же сервисы.

00:09:33.000 --> 00:09:41.000
И выдавать права и доступы только в необходимом объеме, так называемый least privilege principle.

00:09:41.000 --> 00:09:45.000
Второе это необходимо обеспечить traceability.

00:09:45.000 --> 00:09:55.000
Идея в том, что в случае поломки одного из компонентов, эта поломка может быть следствием предыдущей поломки.

00:09:55.000 --> 00:10:05.000
Таким образом необходимо обеспечить видимость этой цепочки для того, чтобы однозначно и оперативно определить источник проблемы.

00:10:05.000 --> 00:10:13.000
То есть самый первый компонент, который сломался и привел к тому, что следующие компоненты тоже после него сломались.

00:10:13.000 --> 00:10:20.000
И третий пункт это то, что нам необходимо обеспечить безопасность на всех слоях.

00:10:20.000 --> 00:10:32.000
А именно это то, что данные должны храниться в зашифрованном виде, а также данные должны передаваться в защищённом зашифрованном виде.

00:10:32.000 --> 00:10:38.000
Второе направление это operational excellence.

00:10:38.000 --> 00:10:43.000
Идея в том, что нам необходимо добиться видимости нашей инфраструктуры.

00:10:43.000 --> 00:10:47.000
Это делается за счет метрик и за счет логов.

00:10:47.000 --> 00:10:56.000
Когда у нас есть на руках эти данные, мы можем анализировать и понимать насколько хорошо и эффективно работает наша система.

00:10:56.000 --> 00:11:16.000
В случае, если некоторые наши IT ресурсы не соответствуют по типу и за счет этого работать не эффективно, мы это можем увидеть и можем небольшими шагами её улучшать и подгонять под специфичные на наш IT продукт нагрузки.

00:11:16.000 --> 00:11:38.000
Этот процесс будет происходить постоянно. Невозможно добиться до идеального состояния, потому как нагрузки меняются, продукты постоянно развиваются, появляются разные компоненты.

00:11:38.000 --> 00:12:00.000
Но идея этого направления в том, что мы должны обеспечить этот процесс необходимыми данными и соответственно небольшими шагами с каждым разом улучшать и оптимизировать размеры нашей инфраструктуры, даже если когда нагрузки меняются.

00:12:00.000 --> 00:12:03.000
Следующее направление это reliability.

00:12:03.000 --> 00:12:19.000
Идея этого направления в том, что нам необходимо строить IT инфраструктуру таким образом, что в случае поломки мы оперативно понимали где эта поломка произошла и в лучшем случае обеспечить автоматическое восстановление инфраструктуры.

00:12:19.000 --> 00:12:31.000
То есть в случае нехватки IT ресурсов с увеличением нагрузки система должна динамически увеличивать количество вычислительных ресурсов.

00:12:31.000 --> 00:12:48.000
В случае когда у нас выходит из строя одна availability зона, инфраструктура должна быть способна продолжать корректно работать на другой availability зоне и так далее.

00:12:48.000 --> 00:12:52.000
Четвертое направление это performance efficiency.

00:12:52.000 --> 00:13:04.000
Идея этого направления в том, что нам необходимо в зависимости от нашей бизнес задачи и технической задачи подобрать инструмент с которым мы ее будем решать, а не наоборот.

00:13:04.000 --> 00:13:19.000
Я несколько раз упоминал, что на стороне AWS есть более 200 сервисов, которые доступны для нас и одним из примеров может быть наличие более 7 сервисов связанных с базами данных.

00:13:19.000 --> 00:13:37.000
Таким образом в зависимости от того какие у вас данные, как к этим данным идет обращение, какая частота обращения, как часто эти данные записываются или наоборот считываются, вы можете понять какая из существующих сервисов баз данных вам подойдет больше всего.

00:13:43.000 --> 00:13:47.000
Последнее, пятое направление это cost optimization.

00:13:47.000 --> 00:14:03.000
Это одно из самых моих любимых направлений связано это с тем, что при корректной работе в этом направлении мы сможем максимально раскрыть потенциал работы с облачными технологиями.

00:14:03.000 --> 00:14:12.000
Идея этого направления в том, что мы должны обеспечить видимость для чего и кем создаются те или иные ресурсы.

00:14:12.000 --> 00:14:26.000
За счет этого мы понимаем насколько эффективно работают те или иные компоненты, команды или даже ресурсы, IT ресурсы в облаке AWS.

00:14:26.000 --> 00:14:36.000
Таким образом, получив эту видимость, мы можем исключить избыточные расходы на облачную инфраструктуру.

00:14:36.000 --> 00:14:40.000
На этом мы добрались до AWS Well-Architected Tool.

00:14:40.000 --> 00:15:05.000
Да, это еще один сервис, специальный сервис, который включается на уровне AWS аккаунта и говорит о том, насколько хорошо или плохо мы построили IT инфраструктуру по сравнению с идеальной IT инфраструктуры, описанной в видео.

00:15:05.000 --> 00:15:15.000
Мы добрались до конца второй части нашей сегодняшней лекции.

00:15:15.000 --> 00:15:18.000
Давайте вспомним основные моменты.

00:15:18.000 --> 00:15:28.000
AWS Well-Architected Framework это некоторый документ, который описывает идеальную инфраструктуру по мнению архитекторов AWS.

00:15:28.000 --> 00:15:35.000
Она описана в пяти различных направлениях, каждый из которых состоит из некоторых best practices.

00:15:35.000 --> 00:15:47.000
Я ранее говорил, что этот документ описан по мнению архитекторов AWS и здесь подразумевается то, что этот документ не видит вашего контекста.

00:15:47.000 --> 00:15:58.000
Поэтому следовать этим рекомендациям не следует, так как не все рекомендации одинаково будут эффективны для конкретно вашего случая.

00:15:58.000 --> 00:16:18.000
Поэтому надо знать, что есть такие рекомендации, отдельно применять каждую для своего случая и в случае, если это действительно дает ту эффективность, которую вы ожидаете, следует ее исполнить и реализовать.

00:16:18.000 --> 00:16:33.000
Есть также AWS Well-Architected Tool, который автоматически позволяет некоторые best practices видеть, насколько вы следуете или не следуете в рамках вашего AWS аккаунта.

00:16:33.000 --> 00:16:39.000
Мы с вами добрались до третьей части нашей сегодняшней лекции.

00:16:39.000 --> 00:16:46.000
Здесь мы будем говорить про best practices и анти паттерны при построении решений в облаке AWS.

00:16:46.000 --> 00:16:58.000
Основная мысль этой части в том, что вам необходимо понимать, действительно ли тот или иной best practice подходит для вашего случая.

00:16:58.000 --> 00:17:08.000
Более того, любой best practice требует ее реализации и в этом случае есть определенные жертвы, которые вы понесете.

00:17:08.000 --> 00:17:17.000
Например, это могут быть время, которое потратит команда разработки, либо команда облачных инженеров на реализацию этого best practices.

00:17:17.000 --> 00:17:24.000
Другой момент может быть в том, что вы увеличите свои расходы на облачную инфраструктуру и так далее.

00:17:24.000 --> 00:17:33.000
Поэтому всегда при рассмотрении best practices нужно понимать, какие недостатки она с собой приносит и понимать, действительно ли оно стоит того.

00:17:33.000 --> 00:17:43.000
Для того, чтобы лучше понять смысл каждого best practices, мы будем приводить также анти паттерны, как же не следует делать.

00:17:43.000 --> 00:17:52.000
Таким образом, вы лучше поймете в сравнении, как должно быть и как не должно быть.

00:17:52.000 --> 00:17:57.000
В этой части мы рассмотрим 10 best practices. Итак, давайте начнем.

00:17:57.000 --> 00:18:15.000
Первый best practice это enable scalability. Идея в том, что ваша инфраструктура должна быть способной автоматически меняться в размерах, как в сторону увеличения, так и в сторону уменьшения, в зависимости от нагрузки.

00:18:15.000 --> 00:18:30.000
Если у вас инфраструктура построена следующим образом, как на картинке на слайде. У вас есть пользователи, они дают некоторую нагрузку на вашу инфраструктуру, есть определенное количество настроенных серверов.

00:18:30.000 --> 00:18:42.000
Далее у вас есть администратор, который может получать по тем или иным каналам связи уведомления о том, что сервера испытывают большие нагрузки.

00:18:42.000 --> 00:19:04.000
Далее этот администратор подключается к инфраструктуре, настраивает вручную сервер и подключает к балансировке. Это не есть best practice, так как оно не выгодно с точки зрения затрат, так как сюда еще и входит время работы специалиста.

00:19:04.000 --> 00:19:20.000
Более того, оно подвержено человеческому фактору, то есть пока администратор подключится, нагрузки могут превысить некоторые порог и приложение перестанет отвечать. В этом случае будет поздно новый сервер поднимать.

00:19:20.000 --> 00:19:32.000
Другой момент это то, что администратор забыл отключить сервера, а нагрузка уже давно упала. В этом случае вы будете нести избыточные расходы.

00:19:32.000 --> 00:19:46.000
Правильный вариант это использовать все необходимые инструменты и доступные сервисы AWS, чтобы динамически увеличивать количество серверов, либо уменьшать, когда нагрузки нет.

00:19:46.000 --> 00:20:07.000
Вы видите пример, что есть пользователи, от них приходят запросы, есть текущие серверы, на которых балансируется нагрузка и в случае увеличения нагрузки выше определенного порога приходят уведомления на соответствующий сервис.

00:20:07.000 --> 00:20:14.000
Этот сервис автоматически поднимает необходимое количество серверов, чтобы каждый запрос пользователей был обработан.

00:20:14.000 --> 00:20:38.000
И обратный случай, когда пользователи завершают свои покупки или действия на вашем сайте и уходят, то срабатывает обратная ситуация, приходит уведомление сервису масштабирования о том, что нагрузка на сервера спала и этот сервис может лишние сервера отключать, для того чтобы не нести эти расходы.

00:20:38.000 --> 00:20:55.000
Следующий best practice это automate your environment. Идея в том, что там где это возможно автоматически создавать, уничтожать, а также конфигурировать ваши ресурсы в вашей инфраструктуре.

00:20:55.000 --> 00:21:10.000
� ассмотрим анти паттерн. Он очень похожий как анти паттерн на предыдущем слайде, но отличается тем, что ваш сервер может словить некоторую внутреннюю ошибку и перестать работать.

00:21:10.000 --> 00:21:29.000
В этом случае количество рабочих серверов становится меньше и представим вы настроили уведомление вашему администратору, подключается администратор и начинает восстанавливать этот сервер, либо начинает создавать новые, чтобы потом спокойно сесть и разобраться с поломанным сервером.

00:21:29.000 --> 00:21:44.000
И это происходит в то время, когда происходит ошибка и поломка в системе. Это может быть ночью, утром, днем и в нерабочее время вашего специалиста. Это является анти паттерном, так как есть очевидные недостатки.

00:21:44.000 --> 00:22:03.000
Первое, что вам необходимо поверх дополнительно оплачивать время работы вашего специалиста. Это могут быть оплата за сверхурочные часы. Другой момент, что здесь есть человеческий фактор, то есть человек может быть недоступен или не успеть не заметить.

00:22:03.000 --> 00:22:14.000
Таким образом, состояние вашей инфраструктуры зависит от одного или нескольких специалистов, которые могут в нужный момент не подключиться.

00:22:14.000 --> 00:22:40.000
Обратная ситуация, как рекомендуется сделать, это использовать имеющиеся средства, а именно сервис автоскейлинга, для того, чтобы определять проблемные сервера, убирать эти сервера в сторону, вместо них поднимать необходимое количество серверов, которые точно будут работать, так как только настроены.

00:22:40.000 --> 00:22:54.000
Опционально могут еще отправить уведомление администратору о том, что такое-то количество с такими-то id-шниками сервера были поломаны и вместо них были подняты следующие сервера с такими-то id-шниками.

00:22:54.000 --> 00:23:15.000
Это best practice, который не вынуждает специалиста подключаться во время поломки, дает возможность не вводить специалиста в стрессовое состояние, а сохранить ваши поломанные сервера отдельно в сторонке, при этом продолжать обрабатывать успешно запросы ваших пользователей.

00:23:15.000 --> 00:23:31.000
В тот момент, когда начнется рабочий день, специалист уже получит уведомление и сразу пойдет смотреть на сервера, которые были отложены в сторону, разбираться в проблеме.

00:23:31.000 --> 00:23:35.000
Следующий, третий best practice это treat resources as disposable.

00:23:35.000 --> 00:23:45.000
Идея в том, что нам необходимо воспринимать нашу инфраструктуру, наши IT ресурсы не как железо, а больше как софтвэй.

00:23:45.000 --> 00:23:54.000
Таким образом, мы не привязаны к железу и это приводит к тому, что каждый IT ресурс может быть легко заменен.

00:23:54.000 --> 00:24:07.000
А это в свою очередь позволит нам динамически управлять нашими IT ресурсами, что доступно в облачной среде.

00:24:07.000 --> 00:24:12.000
Следующий, четвертый best practice это use loosely coupled components.

00:24:12.000 --> 00:24:23.000
Идея этого best practice в том, что нам необходимо строить инфраструктуру таким образом, чтобы каждый компонент был связан с наименьшим количеством соседних компонентов.

00:24:23.000 --> 00:24:27.000
Для того, чтобы это понять, давайте рассмотрим анти паттерн.

00:24:27.000 --> 00:24:33.000
Представим, что у нас есть слой веб-серверов, у нас есть слой бэкэнда, то есть application-сервера.

00:24:33.000 --> 00:24:42.000
И каждый сервер слоя веб-серверов сильно связан с серверами бэкэнда.

00:24:42.000 --> 00:24:57.000
Это приводит к тому, что при замене обновлении одного из компонентов в веб-слой нам необходимо учитывать все связи.

00:24:57.000 --> 00:25:10.000
И если требуется изменение на стороне соседних связанных компонентов, то необходимо произвести это изменение в нескольких соседних компонентах, не в одном.

00:25:10.000 --> 00:25:15.000
Это может быть дорого, сложно и не всегда реализуемо.

00:25:15.000 --> 00:25:33.000
Более того, если при сильно связанной архитектуре какой-то компонент ломается, оно может повлечь за собой волну поломок, и потенциально все связанные компоненты с поломанным компонентом также могут сломаться.

00:25:33.000 --> 00:25:45.000
И так далее. Все поломанные уже от исходной поломки, исходного компонента, они также может привести к поломке следующих компонентов.

00:25:45.000 --> 00:25:55.000
В итоге вся инфраструктура может просто упасть из-за какой-то маленькой ошибки на уровне одного компонента.

00:25:55.000 --> 00:25:58.000
Это очень рискованно, это является антипаттерном.

00:25:58.000 --> 00:26:10.000
Лучшим решением в бестпрактисе является то, что мы строим каждый компонент минимально связанный с другими соседними компонентами.

00:26:10.000 --> 00:26:21.000
Это позволяет достаточно безопасно, дешево и эффективно заменять, удалять либо обновлять каждый из компонентов.

00:26:21.000 --> 00:26:30.000
Примерами сервисов, которые позволяют нам строить слабосвязные архитектуры, являются ELB, SQS.

00:26:30.000 --> 00:26:37.000
Это сервис очередей сообщения, о которых мы будем говорить на следующих наших занятиях.

00:26:41.000 --> 00:26:45.000
Следующая пятая бестпрактис это Design Services, Not Servers.

00:26:45.000 --> 00:26:55.000
Идея в том, что в самом начале в период активной разработки рекомендуется смотреть в сторону Managed Services, Serverless Services

00:26:55.000 --> 00:27:01.000
или любых других сервисов AWS, которые потенциально смогут разгрузить вашу команду.

00:27:01.000 --> 00:27:07.000
То есть команде нет необходимости разрабатывать тот или иной технический функционал, технический инструмент.

00:27:07.000 --> 00:27:14.000
За счет этого команда может сконцентрироваться на написании бизнес-логики, которая будет решать задачи бизнеса.

00:27:14.000 --> 00:27:24.000
Это в свою очередь позволит раньше выйти на рынок, раньше начать зарабатывать в компании и в целом это правильное направление.

00:27:24.000 --> 00:27:33.000
Далее уже в период пассивной разработки, когда основной функционал разработан и задач не так много,

00:27:33.000 --> 00:27:41.000
есть рекомендация пересмотреть структуру расходов на облако.

00:27:41.000 --> 00:27:54.000
Если окажется, что определенный сервис не соразмерно потребляет много денег, в этом случае вы можете сделать некоторый расчет.

00:27:54.000 --> 00:28:05.000
Например, для реализации сервиса очереди сообщений вы можете посмотреть расходы AWS, далее посмотреть и прикинуть,

00:28:05.000 --> 00:28:13.000
сколько подобный функционал внутренний инструмент будет разрабатывать ваша команда либо отдельно взятый специалист.

00:28:13.000 --> 00:28:22.000
В случае, когда эти расходы сопоставимы, вы можете делать расчет на краткосрочный период, средний срочный период и долгосрочный период.

00:28:22.000 --> 00:28:33.000
В случае, если окажется, что написание внутреннего решения окажется выгодным, в этот момент вы можете потихоньку переходить на собственные разработки.

00:28:33.000 --> 00:28:41.000
Почему не рекомендуется делать это с самого начала? Так это то, что вся ваша команда может оказаться в состоянии,

00:28:41.000 --> 00:28:55.000
что они разрабатывают некоторые технические инструменты и зависнуть на этом этапе и даже не добраться до написания бизнес-логики для решения ваших бизнес-задач.

00:28:55.000 --> 00:29:04.000
Это в свою очередь может поставить крест на будущее вашей компании и компания может в результате обанкротиться.

00:29:08.000 --> 00:29:12.000
Следующий шестой best practice это Choose the right database solution.

00:29:12.000 --> 00:29:24.000
Идея этого best practices в том, что при работе с облачными технологиями у нас имеется в распоряжении несколько десятков сервисов,

00:29:24.000 --> 00:29:31.000
которые позволяют хранить, обрабатывать, анализировать данные.

00:29:31.000 --> 00:29:40.000
И в зависимости от того, как ваши данные используются, как часто записываются, как часто считываются, какой объем данных ожидается,

00:29:40.000 --> 00:29:47.000
потенциально до каких размеров ваши данные могут вырасти, какие требования по передаче данных,

00:29:47.000 --> 00:29:54.000
какие требования по количеству одновременных подключений к вашим данным и так далее.

00:29:54.000 --> 00:30:04.000
Вы можете подобрать оптимальный сервис и с учетом того, что расходы на вычислительные мощности и базы данных

00:30:04.000 --> 00:30:14.000
могут с легкостью доходить до 50% всех ваших расходов на облако, выбрав в самом начале пути верное решение,

00:30:14.000 --> 00:30:23.000
вы можете сразу получить большую выгоду и в будущем не нести избыточные расходы.

00:30:27.000 --> 00:30:31.000
Следующая best practice это avoid single point of failure.

00:30:31.000 --> 00:30:40.000
Идея в том, что вам необходимо строить вашу инфраструктуру таким образом, что в критически важных местах у вас есть некоторая избыточность.

00:30:40.000 --> 00:30:48.000
Здесь понимается то, что в случае поломки критических узлов есть запасной вариант

00:30:48.000 --> 00:30:56.000
и в случае поломки этого критического узла вся система не остановится, а продолжит работать.

00:30:56.000 --> 00:31:05.000
Примерами могут быть, когда мы хостим наше решение на нескольких availability зонах,

00:31:05.000 --> 00:31:12.000
либо в той же availability зоне, но у нас есть например в случае базы данных есть основная база данных,

00:31:12.000 --> 00:31:21.000
а рядом стоит standby копия, которая при необходимости может стать мастер базой

00:31:21.000 --> 00:31:25.000
и продолжить принимать запросы от ваших приложений.

00:31:30.000 --> 00:31:33.000
Следующая best practice это optimize for cost.

00:31:33.000 --> 00:31:41.000
Идея этого best practice в том, что вам необходимо использовать возможности, предоставляемые облачным провайдерам,

00:31:41.000 --> 00:31:47.000
а именно то, что предоставляется широкий выбор типов инстанцев,

00:31:47.000 --> 00:31:55.000
широкий выбор сервисов, которые автоматически масштабируют вашу инфраструктуру.

00:31:55.000 --> 00:32:03.000
Таким образом экспериментируя с типами IT ресурсов и их комбинациями можно построить такую инфраструктуру,

00:32:03.000 --> 00:32:06.000
которая идеально подходит вашим нагрузкам.

00:32:06.000 --> 00:32:10.000
В случае когда мы говорим локальный дата-центр таких возможностей может не быть,

00:32:10.000 --> 00:32:19.000
так как выделение под ваш аккаунт, под вашу организацию дополнительных IT ресурсов может занимать некоторое время.

00:32:19.000 --> 00:32:26.000
В нем могут присутствовать некоторые человеческие факторы, например, нужно завести заявку,

00:32:26.000 --> 00:32:30.000
отправить ее в техподдержку для того, чтобы вам выделили эти ресурсы.

00:32:30.000 --> 00:32:40.000
Либо даже если там все автоматизировано, то размеры дата-центра они несравнимо малы по сравнению с глобальной инфраструктурой AWS.

00:32:40.000 --> 00:32:46.000
Поэтому ожидать, что там будет большой выбор типов тех же серверов не стоит.

00:32:46.000 --> 00:32:56.000
Он будет скорее всего намного меньше и мало будет вариантов, с которыми вы можете поэкспериментировать.

00:32:59.000 --> 00:33:01.000
Следующая best practice это use caching.

00:33:01.000 --> 00:33:07.000
Идея в том, что во всех тех местах, где можно организовать кэширование необходимо это делать.

00:33:07.000 --> 00:33:10.000
Есть для этого несколько важных причин.

00:33:10.000 --> 00:33:20.000
Первое это то, что данные когда извлекаются с оригинального источника, они могут видоизменяться, трансформироваться.

00:33:20.000 --> 00:33:24.000
И для этого необходимо больше вычислительных ресурсов потратить.

00:33:24.000 --> 00:33:33.000
Это требует большего времени и соответственно все будет стоить дороже, нежели вы готовый результат извлечете с кэша.

00:33:33.000 --> 00:33:38.000
Другой момент это то, что кэш сервера они могут находиться ближе к вашим пользователям.

00:33:38.000 --> 00:33:47.000
Таким образом и пользователи получат данные быстрее и вы также сэкономите на Network трафике.

00:33:47.000 --> 00:33:56.000
Так как он значительно уменьшится и вам необходимо для каждого запроса ходить на оригинальный источник.

00:33:56.000 --> 00:34:06.000
Примерами может быть использование сервиса CloudFront это глобальный CDN Content Delivery Network.

00:34:06.000 --> 00:34:24.000
Также если мы говорим про кэширование можно назвать сервис Elastic Cache, когда можем настроить Redis либо Memcache ресурс для того чтобы разгрузить вашу базу данных.

00:34:28.000 --> 00:34:33.000
Самый последний, десятый best practice это Secure your entire infrastructure.

00:34:33.000 --> 00:34:42.000
Основная идея этого best practice связана с тем, что нам необходимо обеспечить безопасность на каждом уровне нашей инфраструктуры.

00:34:42.000 --> 00:34:44.000
Приведу пару примеров.

00:34:44.000 --> 00:34:53.000
Первый пример необходимо обеспечить шифрование ваших данных не только во время хранения, но и во время передачи этих данных.

00:34:53.000 --> 00:35:11.000
Другой пример необходимо следовать принципу List Privilege, когда вы выдаёте права роли пользователям либо какому-либо сервису только в том объёме, который нужно для выполнения определённой задачи.

00:35:11.000 --> 00:35:16.000
Следующий пример необходимо включить MFA там где это возможно.

00:35:16.000 --> 00:35:19.000
MFA это Multi-Factor Authentication.

00:35:19.000 --> 00:35:38.000
Таким образом, события, которые могут быть катастрофическими либо являются критическими, вы можете дополнительно обезопасить проверкой личности конкретного пользователя.

00:35:38.000 --> 00:35:43.000
Другой пример это использование Managed Services.

00:35:43.000 --> 00:36:00.000
Managed Services это когда большую часть рутинного администрирования берет на себя AWS, а нам как пользователям облачных технологий и этих конкретных сервисов необходимо обеспечить корректную настройку этих сервисов.

00:36:00.000 --> 00:36:12.000
Таким образом, настройка безопасности, установка, обновление патчей безопасности, это все ложится на плечи облачного провайдера.

00:36:12.000 --> 00:36:32.000
Другой пример это то, что необходимо логировать все действия связанные с критическими ресурсами, так чтобы в нужный момент вы могли определить кто, когда, как, для чего обращался к конкретным ресурсам.

00:36:32.000 --> 00:36:36.000
На этом мы добрались до конца третьей части нашей сегодняшней лекции.

00:36:36.000 --> 00:36:39.000
Мы рассмотрели 10 best practices.

00:36:39.000 --> 00:36:45.000
В этом best practices рассмотрели Antipattern и несколько примеров для того, чтобы лучше ее освоить.

00:36:45.000 --> 00:37:01.000
Я надеюсь, вы лучше поняли, что такое best practices, как это связано с облачной архитектурой и в будущем это вам будет помогать при построении своей архитектуры в облаке AWS.

00:37:01.000 --> 00:37:09.000
А мы с вами плавно переходим к последней четвертой части нашей сегодняшней лекции и поговорим про глобальную инфраструктуру AWS.

00:37:09.000 --> 00:37:22.000
Мы эту тему затрагивали на предыдущем курсе Cloud Practitioner. Сейчас ее повторим и добавим некоторые новые нюансы.

00:37:22.000 --> 00:37:33.000
Начнем мы с понятия AWS регион. � егион это некоторая физическая географическая локация, которая изолирована от других регионов.

00:37:33.000 --> 00:37:46.000
Всего в мире есть более 20 AWS регионов. Каждый AWS регион состоит из двух или более availability zone.

00:37:46.000 --> 00:37:54.000
� егионы, связанные между собой, отдельно специально выделены сетью AWS.

00:37:54.000 --> 00:38:06.000
Так как регионы изолированы друг от друга, то задачу репликации или передачи данных между регионами вам необходимо настраивать самостоятельно.

00:38:06.000 --> 00:38:24.000
Для этого имеются все средства, лишь требуется дополнительная настройка, она недоступна нативно. В случае с availability zone во время настройки некоторых ресурсов вы там же можете выбрать какие availability zone этот сервис будет использовать.

00:38:24.000 --> 00:38:31.000
В случае с регионами такой опции не будет.

00:38:31.000 --> 00:38:39.000
В мире есть разные типы AWS регионов. Большее количество регионов это стандартные регионы.

00:38:39.000 --> 00:38:46.000
Есть также два региона относящихся к Китаю, то есть так называемые AWS China.

00:38:46.000 --> 00:38:54.000
Она изолирована от всего остального мира и развивается отдельно.

00:38:54.000 --> 00:39:07.000
Зачастую мы наблюдаем то, что любой сервис, который находится в AWS China на год или более отстает по развитию по сравнению с регионами вне Китая.

00:39:07.000 --> 00:39:32.000
Есть еще другой тип региона это AWS GovCloud. Это специально созданный регион для хостинга IT инфраструктур связанных с государственными учреждениями в Америке.

00:39:32.000 --> 00:39:40.000
Теперь давайте рассмотрим следующий элемент глобальной инфраструктуры AWS это availability zone.

00:39:40.000 --> 00:39:53.000
Availability zone относится к определенному региону. Если мы говорим, что у нас есть глобальная AWS, у нее есть несколько десятков регионов, например, EU West 1.

00:39:53.000 --> 00:40:09.000
У этого региона есть несколько availability zone и примером availability zone является EU West 1A. То есть название availability zone это название региона плюс некоторая буква алфавита.

00:40:09.000 --> 00:40:17.000
Когда мы говорим про availability zone, каждая availability zone состоит как минимум из одного, а то и нескольких дата центров.

00:40:17.000 --> 00:40:26.000
Таким образом, вероятность того, что availability zone станет недоступной маловероятна, не говоря уже о том, что весь регион станет недоступным.

00:40:26.000 --> 00:40:34.000
Но есть в мире некоторые очень критические нагрузки, которые ни в коем случае не должны быть прерваны.

00:40:34.000 --> 00:40:51.000
В этих случаях компании развертывают свою инфраструктуру на нескольких регионах. Это очень дорого, но когда есть бизнес задача и некоторые требования, то подобные инфраструктуры тоже имеют место быть.

00:40:51.000 --> 00:41:06.000
Availability зоны в рамках региона, они связаны между собой специальной связкой и данные могут передаваться на больших скоростях между этими availability зонами.

00:41:06.000 --> 00:41:26.000
Следующий достаточно новый компонент глобальной инфраструктуры это AWS local zones. Идея local zones в том, что оно является мини регионом, который находится в какой-то отдаленной локации.

00:41:26.000 --> 00:41:44.000
То есть в случае, если на ближайшем расстоянии не имеется AWS регионов, а вам нужно, чтобы в определенной местности в рамках страны был доступен AWS, в этом случае вам в помощь придет AWS local zones.

00:41:44.000 --> 00:41:54.000
То есть разворачивается мини дата центр, который доступен для вас и вы можете использовать эти ресурсы в рамках вашей страны.

00:41:54.000 --> 00:42:02.000
Для некоторых случаев нагрузок и бизнесов это достаточно интересное решение.

00:42:02.000 --> 00:42:08.000
Теперь мы переходим к следующему компоненту внутри availability зоны, это дата центры.

00:42:08.000 --> 00:42:22.000
Дата центры это как раз таки то место, где находятся все наши сервера, хранятся все данные на этих серверах и это наименьший компонент глобальной инфраструктуры AWS.

00:42:22.000 --> 00:42:30.000
Если мы говорим о размерах дата центров, то каждый дата центр как минимум содержит несколько десятков тысяч серверов.

00:42:30.000 --> 00:42:47.000
Эти сервера могут быть очень мощными, так как происходит процесс виртуализации и один мощный сервер может быть разделен и предоставлен для вас как несколько разных маленьких инстанцев.

00:42:47.000 --> 00:43:12.000
Таким образом понимая, что дата центр это физически ограниченное пространство, то AWS старается каждый кусочек пространства использовать максимально выгодно и соответственно каждый сервер будет максимально мощным,

00:43:12.000 --> 00:43:31.000
если умножать на то количество, которое я говорил ранее, это несколько десятков тысяч таких мощных серверов, то вы можете представить какие масштабы вычислительных мощностей доступны в рамках лишь одного дата центра.

00:43:31.000 --> 00:43:43.000
Следующим отдельно стоящим компонентом глобальной инфраструктуры AWS и которая относится к CDN, то есть Content Delivery Network являются points of presence.

00:43:43.000 --> 00:43:55.000
Они непосредственно относятся к сервису Amazon CloudFront и выделяют несколько разных видов. Это edge locations и regional edge caches.

00:43:55.000 --> 00:44:09.000
Отличается тем, что edge locations это наиболее ближайшие к вашим потенциальным пользователям кэш сервера и данные максимально быстро передаются именно с edge locations.

00:44:09.000 --> 00:44:33.000
Далее чуть-чуть отдаленные кэш сервера это regional edge caches, туда попадают те данные, которые не так часто запрашиваются как данные в edge locations, но тем не менее запрашиваются и они агрегируются на более масштабной географической местности,

00:44:33.000 --> 00:44:47.000
то есть объединяют в себе не частые данные из нескольких edge locations. На карте вы видите также multiple edge locations выделенные фиолетовым цветом.

00:44:47.000 --> 00:45:13.000
Это как раз таки те локации, в которых очень хорошо развит AWS, очень активно используется сервис CloudFront и вы видите, что на этом слайде они выделены отдельно.

00:45:13.000 --> 00:45:25.000
На этом мы подошли к концу последней части нашей сегодняшней лекции. Мы рассмотрели глобальную инфраструктуру AWS, основные ее компоненты и для чего они нужны.

00:45:25.000 --> 00:45:41.000
На этом мы подошли к концу нашей сегодняшней лекции, разобрали достаточно важные основные понятия, которые вам помогут легче освоить следующие наши лекции.

00:45:41.000 --> 00:45:52.000
Здесь вы можете увидеть несколько полезных ссылок для более углубленного изучения пройденных материалов.

00:45:52.000 --> 00:46:17.000
На этом хотелось бы завершить нашу сегодняшнюю сессию. Спасибо за внимание. Увидимся с вами на следующих наших активностях.
