WEBVTT

00:00:00.000 --> 00:00:05.000
Қайырлы күн, құрметті студенттер!
Сіздерді келесі дәрісте көргеніме қуаныштымын.

00:00:05.000 --> 00:00:09.000
Бүгінгі дәрісіміздің тақырыбы - Cloud Architecting,
яғни бұлтты архитектураға кіріспе.

00:00:09.000 --> 00:00:15.000
Ендеше, бастайық.
Бүгінгі дәріс төрт бөлімнен тұрады.

00:00:15.000 --> 00:00:19.000
Бірінші бөлімде бұлтты
архитектурамен танысамыз.

00:00:19.000 --> 00:00:25.000
Екінші бөлімде біз AWS Well-Architected
Framework құжаты туралы айтатын боламыз.

00:00:25.000 --> 00:00:32.000
Үшінші бөлімде AWS бұлтында шешімдерді құру кезінде
best practices пен антипаттерндерді талдаймыз.

00:00:32.000 --> 00:00:35.762
Бұл best practices-тер кез келген
басқа бұлттық провайдерлермен

00:00:35.786 --> 00:00:39.000
жұмыс істегенде де
қолданылатынын атап өткім келеді.

00:00:39.000 --> 00:00:43.684
Соңғы бөлімде жаһандық AWS
инфрақұрылымы ұғымының анықтамасын

00:00:43.708 --> 00:00:48.000
еске түсіреміз және қосымша
жаңа ақпаратты меңгереміз.

00:00:48.000 --> 00:00:56.000
Бұл слайдта AWS бұлтындағы әдеттегі
архитектураның мысалын көріп тұрмыз.

00:00:56.000 --> 00:01:01.577
Егер кейбір тармақтар қазір
сізге түсініксіз болса, алаңдамаңыз,

00:01:01.601 --> 00:01:07.000
өйткені бұл - ағымдағы курс
бойынша жұмыстың соңғы нәтижесі.

00:01:07.000 --> 00:01:11.806
Әр сабақта біз осы архитектураның
белгілі бір бөлігін зерттеп, оның

00:01:11.830 --> 00:01:17.000
қалай жұмыс істейтінін, неге бұл
архитектурада орын алғанын түсінеміз.

00:01:17.000 --> 00:01:22.197
Болашақта курстарды аяқтағаннан
кейін, алынған білімдерді

00:01:22.221 --> 00:01:28.162
пайдалана отырып, негізгі AWS
сервистерінің белгілі бір санымен

00:01:28.186 --> 00:01:33.795
танысқаннан кейін, сізде AWS
бұлтында осындай немесе одан да

00:01:33.819 --> 00:01:40.000
күрделі архитектураны дербес
құру және баптау мүмкіндігі болады.

00:01:40.000 --> 00:01:45.488
Басқа сервистерге қатысты курстарымызда
алатын барлық сервисті зерттеу

00:01:45.512 --> 00:01:51.000
дағдылары жаңа AWS сервистерін
жылдам үйрену үшін сізге пайдалы болады.

00:01:51.000 --> 00:02:01.000
Осылайша, сіз шектелмей, AWS бұлтында кез
келген күрделіліктің архитектурасын құра аласыз.

00:02:01.000 --> 00:02:08.000
Біз бүгінгі дәрістің бірінші бөлімін бастаймыз
және бұлт архитектурасы туралы сөйлесеміз.

00:02:08.000 --> 00:02:19.000
Дұрыс бұлт архитектурасын құрудың
маңыздылығын түсіну үшін тарихқа көз жүгіртейік.

00:02:19.000 --> 00:02:25.488
2000 жылы Amazon электрондық
коммерция бизнесі өркендеген

00:02:25.512 --> 00:02:32.000
кезде, веб-сайтты қолдау үшін
IT инфрақұрылымы да дамыды.

00:02:32.000 --> 00:02:41.000
Бірақ бизнестің өзі қарқынды дамып келе жатқаны
сонша, IT шешімдері бизнестің дамуына ілесе алмады.

00:02:41.000 --> 00:02:48.881
Сол кезде AWS компаниясының CEO
қызметкері Энди Джасси өз сұхбатында веб-сайтты

00:02:48.905 --> 00:02:58.000
қолдайтын барлық құралдар мен сервистер
қандай да бір тәртіпсіздік пен хаос екенін айтты.

00:02:58.000 --> 00:03:04.482
Кез келген әрекетті алдын
ала жоспарлау және оны дамыту

00:03:04.506 --> 00:03:10.988
үшін қандай да бір
инфрақұрылымды бөлек қарастыру өте

00:03:11.012 --> 00:03:17.494
қиын болды. Ол тығыз байланған 
болатын. Шешім ретінде ең

00:03:17.518 --> 00:03:24.000
жақсы мамандар жиналып,
API сипаттайтын құжат жазылды.

00:03:24.000 --> 00:03:32.107
Бұл инфрақұрылымның кейбір бөлігін
стандарттауға мүмкіндік берді және

00:03:32.131 --> 00:03:40.000
барлық командаларға түсінікті,
жақсы құжатталған API пайда болды.

00:03:40.000 --> 00:03:48.034
Шындығында, барлық мәселелер шешілмеді,
мәселе жазбаша құрамдас бөліктердің, сервистердің

00:03:48.058 --> 00:03:56.000
немесе құралдардың қайта пайдаланылмауы болды.
Осыған байланысты жұмыс өте баяу жүрді.

00:03:56.000 --> 00:04:03.684
Жарқын мысалдардың бірі – жоба үш айға есептелген,
ал сол үш айдың ішінде тек үш компонент жазылған

00:04:03.708 --> 00:04:11.000
болатын. Бұл - дерекқорлармен, серверлермен
және қоймалармен жұмыс істейтін құрамдас бөлігі.

00:04:11.000 --> 00:04:18.000
Осылайша, команда бұл жобаның
іскерлік бөлігіне де жете алмады.

00:04:18.000 --> 00:04:24.140
Яғни, бәрі өте баяу жүрді.
Нәтижесінде белгілі бір топ

00:04:24.164 --> 00:04:31.000
әзірлеген ішкі сервистерді
дамыту туралы шешім қабылданды.

00:04:31.000 --> 00:04:40.000
Бұл сервистер API тобын біріктірді және
кейбір IT ресурстарына жауапты болды.

00:04:40.000 --> 00:04:45.256
Мысал ретінде, бізде ең танымал
Amazon EC2 сервисі бар екенін білеміз

00:04:45.280 --> 00:04:51.000
және бұл жағдайда IT ресурсы - сервер,
яғни есептеу қуаты болып табылады.

00:04:51.000 --> 00:04:57.019
Осылайша, AWS құрамындағы командалар
екі лагерьге бөлінді. Командалардың бір бөлігі

00:04:57.043 --> 00:05:02.988
ішкі сервистерді әзірледі және осы
сервистің дұрыс жұмыс істеуіне жауапты болды,

00:05:03.012 --> 00:05:08.663
ал басқа командалар өнімнің өзін, яғни
Amazon веб-сайтын әзірледі. Нәтижесінде

00:05:08.687 --> 00:05:15.000
командалар өте жылдам қозғалды, өйткені
олар дайын ішкі сервистерді қайта пайдаланды.

00:05:15.000 --> 00:05:24.901
Осылайша Amazon барлық компанияларға
осы ішкі сервистерді қайта пайдалану мүмкіндігін

00:05:24.925 --> 00:05:34.000
беру туралы шешім қабылдады және 2006
жылы AWS өзінің ресурстарын жариялады.

00:05:34.000 --> 00:05:41.104
Сонымен, бұлтты архитектура
тұжырымдамасына қайта оралсақ, бұл компанияның

00:05:41.128 --> 00:05:47.647
техникалық, сондай-ақ бизнес
талаптарын қанағаттандыру үшін барлық

00:05:47.671 --> 00:05:54.823
қолжетімді бұлттық сервистер мен
функционалдық мүмкіндіктерді пайдалана

00:05:54.847 --> 00:06:02.000
отырып, бұлтта IT инфрақұрылымын
құру тәжірибесі екенін түсінуіңіз керек.

00:06:02.000 --> 00:06:10.186
Бұлт архитектурасын құрумен бұлтты
архитекторлар айналысады. Бұлтты

00:06:10.210 --> 00:06:18.000
архитекторлардың міндеті: біріншісі - не істеу
керектігін түсіну үшін бизнеспен диалог жүргізу.

00:06:18.000 --> 00:06:26.363
Келесі кезекте, екінші міндет -
схема түрінде архитектураның жобалық

00:06:26.387 --> 00:06:36.000
нұсқасын әзірлеу және оны техникалық
түрде шешуге болатындығына көз жеткізу.

00:06:36.000 --> 00:06:43.643
Үшінші міндет - кестеде көрсетілген
барлық тапсырмалар дәл сол түрде жүзеге

00:06:43.667 --> 00:06:51.000
асырылатындығына көз жеткізу үшін
әзірлеушілер тобымен диалог жүргізу.

00:06:51.000 --> 00:06:56.487
Бұлтты архитектордың осы жұмысының
нәтижесінде компания өзінің іскерлік

00:06:56.511 --> 00:07:01.685
мақсаттарына жетеді, ал әзірлеушілер
тобы техникалық мақсаттарына

00:07:01.709 --> 00:07:06.601
жетеді және іс жүзінде бұлтты
архитектор бизнес пен техникалық

00:07:06.625 --> 00:07:12.000
командалар арасындағы қандай да
бір байланыстырушы болып табылады.

00:07:12.000 --> 00:07:21.000
Осымен біз бірінші бөлімнің соңына жеттік және
мұндағы негізгі идея - бұлтты архитектура түсінігі.

00:07:21.000 --> 00:07:25.918
Бұлтты архитектура түсінігінің
идеясы - бұлт архитекторы қол

00:07:25.942 --> 00:07:31.444
жетімді барлық құралдарды, біздің
жағдайда бұл AWS сервистері мен

00:07:31.468 --> 00:07:36.752
функционалдығын пайдалана
отырып, техникалық мәселелерді де,

00:07:36.776 --> 00:07:43.000
ең бастысы, бизнес мәселелерін де
шешетіндей IT архитектурасын құрастырады.

00:07:43.000 --> 00:07:48.488
AWS жағында 200-ден астам әртүрлі
сервистер бар екенін еске саламын,

00:07:48.512 --> 00:07:54.000
бұл кез келген күрделіліктегі
архитектураны құруға мүмкіндік береді.

00:07:54.000 --> 00:07:59.535
Ең бастысы, бұл сервистерді
бір-бірімен дұрыс құрастыру және

00:07:59.559 --> 00:08:05.000
біріктіру үшін сізге жеткілікті
тәжірибе мен білім қажет.

00:08:05.000 --> 00:08:12.819
Енді дәрісіміздің екінші бөліміне
көшеміз және AWS Well-Architected

00:08:12.843 --> 00:08:19.000
Framework деп аталатын
құжатты мұқият қарастырамыз.

00:08:19.000 --> 00:08:24.128
AWS Well-Architected
Framework - бұл AWS бұлтындағы

00:08:24.152 --> 00:08:30.000
мінсіз архитектураны 5 жақты
көзқараспен қарайтын құжат.

00:08:30.000 --> 00:08:34.956
Бірінші бағыт - бұл Security, екінші
- Operational excellence, үшінші -

00:08:34.980 --> 00:08:41.000
Reliability, төртінші - Performance
efficiency және бесінші - бұл Cost optimization.

00:08:41.000 --> 00:08:47.857
Әрбір бағыт үшін white paper
деп аталатын жеке нұсқаулық

00:08:47.881 --> 00:08:54.488
жазылған және ол AWS
бұлтындағы мінсіз архитектураға

00:08:54.512 --> 00:09:01.244
мүмкіндігінше жақын болу
үшін AWS командалары ұсынған

00:09:01.268 --> 00:09:08.000
барлық best practices пен
антипаттерндерді сипаттайды.

00:09:08.000 --> 00:09:15.000
Енді осы бағыттардың әрқайсысын
толығырақ қарастырайық.

00:09:15.000 --> 00:09:22.000
Бірінші бағыт - бұл Security. Мұнда есте
сақтау керек бірнеше негізгі тармақтар бар.

00:09:22.000 --> 00:09:27.109
Біріншісі - біз ұйымдарға
құқықтар беруіміз керек, ұйым

00:09:27.133 --> 00:09:33.000
ретінде пайдаланушылар, рөлдер
немесе сервистер болуы мүмкін.

00:09:33.000 --> 00:09:36.988
Және тек қажетті көлемде ғана
құқықтар мен қолжетімділікті

00:09:37.012 --> 00:09:41.000
беру керек, яғни least
privilege principle ұстану керек.

00:09:41.000 --> 00:09:48.214
Екіншіден - traceability қамтамасыз ету қажет.
Идеясы мынада: егер құрамдастардың

00:09:48.238 --> 00:09:55.000
бірі істен шықса, бұл сәтсіздік алдыңғы
сәтсіздіктің салдары болуы мүмкін.

00:09:55.000 --> 00:09:59.988
Осылайша, мәселенің қайда
екенін анық және жылдам анықтау

00:10:00.012 --> 00:10:05.000
үшін осы тізбектің жалпы
көрінісін қамтамасыз ету қажет.

00:10:05.000 --> 00:10:08.426
Яғни, ең бірінші бұзылған
компонент және одан кейінгі

00:10:08.450 --> 00:10:13.000
компоненттердің де бұзылуына
әкелген құрамдас бөлікті анықтау қажет.

00:10:13.000 --> 00:10:20.000
Ал үшінші тармақ – біз барлық деңгейлерде
қауіпсіздікті қамтамасыз етуіміз керек.

00:10:20.000 --> 00:10:26.236
Атап айтқанда, деректер шифрланған
түрде сақталуы керек, сонымен

00:10:26.260 --> 00:10:32.000
қатар деректер қауіпсіз
шифрланған түрде жіберілуі керек.

00:10:32.000 --> 00:10:37.081
Екінші бағыт - бұл
Operational excellence.

00:10:37.105 --> 00:10:43.000
Идеясы - бізге инфрақұрылымның
жалпы көрінісіне қол жеткізу керек.

00:10:43.000 --> 00:10:47.000
Бұл көрсеткіштер мен журналдар
(логтар) арқылы жасалады.

00:10:47.000 --> 00:10:53.991
Бұл деректер көз алдымызда болғанда, біз
жүйеміздің қаншалықты жақсы және тиімді

00:10:54.015 --> 00:11:01.006
жұмыс істейтінін талдап, түсіне аламыз.
Егер біздің кейбір IT ресурстарымыз түрі

00:11:01.030 --> 00:11:08.503
бойынша сәйкес келмесе және нәтижесінде
тиімді жұмыс істемесе, біз мұны көре аламыз

00:11:08.527 --> 00:11:16.000
және оны шағын қадамдармен жақсартып, IT
өніміміздің жүктемелеріне тән реттей аламыз.

00:11:16.000 --> 00:11:27.047
Бұл - тұрақты түрде жүретін процесс. Мінсіз күйге 
жету мүмкін емес, өйткені жүктемелер әрдайым

00:11:27.071 --> 00:11:38.000
өзгеріп тұрады, өнімдер үнемі дамып отырады
және жаңадан әртүрлі компоненттер пайда болады.

00:11:38.000 --> 00:11:43.842
Бірақ бұл бағыттың идеясы
мынада: біз бұл процесті қажетті

00:11:43.866 --> 00:11:49.399
деректермен қамтамасыз етуіміз керек
және сәйкесінше, жүктемелер өзгерсе

00:11:49.423 --> 00:12:00.000
де, шағын қадамдармен инфрақұрылымымыздың
көлемін үлкейтіп, оңтайландыруымыз керек.

00:12:00.000 --> 00:12:04.851
Келесі бағыт - бұл Reliability.
Бұл бағыттың идеясы - бізге IT

00:12:04.875 --> 00:12:09.726
инфрақұрылымын бұзылған жағдайда
бұзылудың қай жерде болғанын

00:12:09.750 --> 00:12:14.162
тез түсінетіндей етіп құруымыз
керек және инфрақұрылымды

00:12:14.186 --> 00:12:19.000
автоматты түрде қалпына
келтіруді қамтамасыз етуіміз керек.

00:12:19.000 --> 00:12:24.988
Яғни, жүктеменің артуы кезінде IT
ресурстарының тапшылығы жағдайында

00:12:25.012 --> 00:12:31.000
жүйе есептеу ресурстарының көлемін
динамикалық түрде арттыру керек.

00:12:31.000 --> 00:12:39.159
Бір availability zone істен шыққан
жағдайда, инфрақұрылым басқа

00:12:39.183 --> 00:12:48.000
availability zone-да дұрыс жұмысын
жалғастыра алуы керек және т.б.

00:12:48.000 --> 00:12:55.724
Төртінші бағыт - бұл Performance efficiency.
Бұл бағыттың идеясы - біздің бизнес мәселесі

00:12:55.748 --> 00:13:04.000
мен техникалық мәселеге байланысты, біз оны
шешетін құралды таңдауымыз керек, керісінше емес.

00:13:04.000 --> 00:13:11.488
Мен AWS жағында бізге қол жетімді
200-ден астам сервис бар екенін бірнеше рет

00:13:11.512 --> 00:13:19.000
айттым және мысал ретінде дерекқорға
қатысты 7-ден астам сервистің болуы еді.

00:13:19.000 --> 00:13:23.583
Осылайша, сізде қандай деректер
бар екеніне, бұл деректерге қалай қол

00:13:23.607 --> 00:13:28.189
жеткізілетініне, қол жеткізу жиілігі
қандай, бұл деректер қаншалықты

00:13:28.213 --> 00:13:32.629
жиі жазылады немесе, керісінше,
оқылады, сіз қолданыстағы дерекқор

00:13:32.653 --> 00:13:37.000
сервистерінің қайсысы сіз үшін
ең қолайлы екенін түсіне аласыз.

00:13:43.000 --> 00:13:52.531
Соңғы, бесінші бағыт - бұл Cost optimization.
Бұл менің сүйікті бағыттарымның бірі. Себебі, осы

00:13:52.555 --> 00:14:03.000
бағытта дұрыс жұмыс жасасақ, бұлтты
технологиялармен жұмыс істеудің әлеуетін барынша

00:14:03.000 --> 00:14:07.238
арттыруға болады. Бұл бағыттың 
идеясы - біз белгілі бір ресурстарды не

00:14:07.262 --> 00:14:12.000
үшін және кім жасағанын
көруді қамтамасыз етуіміз керек.

00:14:12.000 --> 00:14:18.629
Осының арқасында біз белгілі бір құрамдас 
бөліктердің, командалардың немесе

00:14:18.653 --> 00:14:26.000
тіпті IT ресурстарының AWS бұлтында
қаншалықты тиімді жұмыс істейтінін түсінеміз.

00:14:26.000 --> 00:14:32.385
Осылайша, бұл көріністі алу арқылы
біз бұлтты инфрақұрылымның қажетсіз

00:14:32.409 --> 00:14:40.000
шығындарын қысқарта аламыз. Енді біз 
AWS Well-Architected Tool түсінігіне келдік.

00:14:40.000 --> 00:14:46.346
Иә, бұл AWS аккаунты деңгейінде
қосылатын тағы бір арнайы

00:14:46.370 --> 00:14:52.488
сервис және Well-Architected
Framework-те сипатталған

00:14:52.512 --> 00:14:58.913
мінсіз IT инфрақұрылымымен
салыстырғанда IT инфрақұрылымын

00:14:58.937 --> 00:15:05.000
қаншалықты жақсы немесе
нашар құрғанымызды көрсетеді.

00:15:05.000 --> 00:15:18.000
Осымен, бүгінгі дәрісімздің екінші бөлімін 
аяқтадық. Негізгі тармақтарды еске түсірейік.

00:15:18.000 --> 00:15:22.988
AWS Well-Architected Framework
- AWS архитекторларының

00:15:23.012 --> 00:15:28.000
пікірі бойынша мінсіз
инфрақұрылымды сипаттайтын құжат.

00:15:28.000 --> 00:15:35.000
Ол әрқайсысы best practices-тен
тұратын бес түрлі бағытта сипатталған.

00:15:35.000 --> 00:15:41.128
Мен бұл құжаттың AWS архитекторларының
пікірі бойынша сипатталғанын

00:15:41.152 --> 00:15:47.000
және бұл құжат сіздің контекстіңізді
көрмейтінін бұрын айттым.

00:15:47.000 --> 00:15:52.488
Сондықтан, сіз бұл ұсыныстарды толық
дерлік орындамауыңыз керек, өйткені

00:15:52.512 --> 00:15:58.000
барлық ұсыныстар сіздің нақты жағдайыңыз 
үшін бірдей тиімді бола бермейді.

00:15:58.000 --> 00:16:06.869
Жалпы сіз осындай ұсыныстардың бар
екенін білуіңіз керек, әрқайсысын жеке жағдайда

00:16:06.893 --> 00:16:15.762
қолданып, егер ол шынымен сіз күткен
нәтиже берсе, оны ұстанып, жүзеге асыруыңыз

00:16:15.786 --> 00:16:24.940
керек. Сондай-ақ, AWS аккаунты аясында
best practices-ті қаншалықты ұстанатыныңызды

00:16:24.964 --> 00:16:33.000
автоматты түрде көруге мүмкіндік
беретін AWS Well-Architected Tool бар.

00:16:33.000 --> 00:16:39.709
Бүгінгі дәрісіміздің үшінші бөліміне де жеттік.
Мұнда AWS бұлтында шешімдерді

00:16:39.733 --> 00:16:46.000
құру кезінде best practices пен
антипаттерндер туралы айтатын боламыз.

00:16:46.000 --> 00:16:51.610
Бұл бөлімнің негізгі мәні
мынада - сіз best practices

00:16:51.634 --> 00:16:58.000
сіздің ісіңізге шынымен
сәйкес келетінін түсінуіңіз керек.

00:16:58.000 --> 00:17:03.067
Сонымен қатар, кез келген best
practices оны жүзеге асыруды талап

00:17:03.091 --> 00:17:08.000
етеді және бұл жағдайда белгілі
бір кемшіліктер болуы мүмкін.

00:17:08.000 --> 00:17:12.488
Мысалы, әзірлеу тобы немесе
бұлттық инженерлер тобы осы

00:17:12.512 --> 00:17:17.000
best practices-ті енгізуге
жұмсайтын уақыт болуы мүмкін.

00:17:17.000 --> 00:17:24.000
Тағы бір мысал, бұлтты инфрақұрылымға
кететін шығындарыңыз артуы мүмкін және т.б.

00:17:24.000 --> 00:17:28.776
Сондықтан, әрқашан best practices-ті
қарастырған кезде, сіз оның қандай кемшіліктері

00:17:28.800 --> 00:17:33.000
бар екенін және бұл шынымен де
оған тұрарлық па екенін түсінуіңіз керек.

00:17:33.000 --> 00:17:37.778
Әрбір best practices-тің мәнін
жақсырақ түсіну үшін біз не

00:17:37.802 --> 00:17:43.000
істемеу керектігінің, яғни
антипаттерндердің мысалын береміз.

00:17:43.000 --> 00:17:52.000
Осылайша, сіз қалай болу және болмау
керектігін салыстырмалы түрде жақсырақ түсінесіз.

00:17:52.000 --> 00:17:57.000
Бұл бөлімде біз 10 best practices 
қарастырамыз. Ендеше, бастайық.

00:17:57.000 --> 00:18:05.574
Бірінші best practice - бұл Enable scalability.
Идея мынада: сіздің инфрақұрылымыңыз

00:18:05.598 --> 00:18:15.000
жүктемеге байланысты көлемін автоматты
түрде үлкейтіп немесе кішірейіп өзгерте алуы керек.

00:18:15.000 --> 00:18:22.300
Егер сіздің инфрақұрылымыңыз слайдтағы суреттегідей
құрылған болса: сізде пайдаланушылар бар, олар

00:18:22.324 --> 00:18:30.000
сіздің инфрақұрылымыңызға біршама жүктеме түсіреді,
және бапталған серверлердің белгілі бір саны бар.

00:18:30.000 --> 00:18:35.988
Содан кейін сізде серверлер
үлкен жүктемеде екендігі туралы

00:18:36.012 --> 00:18:42.000
байланыс арналары арқылы
хабарландырулар алатын әкімші бар.

00:18:42.000 --> 00:18:51.202
Әрі қарай, әкімші инфрақұрылымға қосылады,
серверді қолмен баптайды және теңгерімдеуге қосады.

00:18:51.226 --> 00:18:55.854
Бұл - best practice емес, яғни
шығын тұрғысынан тиімді емес,

00:18:55.878 --> 00:19:01.031
өйткені оған маманның жұмыс 
уақыты да кіреді. Оның үстіне,

00:19:01.055 --> 00:19:05.839
адам факторы бар, яғни әкімші
қосылайын деп жатқан кезде

00:19:05.863 --> 00:19:10.646
жүктеме белгілі бір шекті деңгейден
асып кетуі мүмкін, нәтижесінде қолданба

00:19:10.670 --> 00:19:20.000
жауап беруді тоқтатуы әбден мүмкін. Бұл 
жағдайда жаңа серверді баптау тым кеш болады.

00:19:20.000 --> 00:19:26.198
Тағы бір мәселе, жүктеме әлдеқашан
төмендегенде, әкімші серверлерді өшіруді

00:19:26.222 --> 00:19:32.000
ұмытып кетуі мүмкін. Бұл жағдайда да 
сіз артық шығындарға ұшырайсыз.

00:19:32.000 --> 00:19:38.988
Дұрыс шешім - серверлер санын динамикалық
түрде көбейту немесе жүктеме болмаған кезде

00:19:39.012 --> 00:19:46.000
оларды азайту үшін барлық қажетті құралдар
мен қол жетімді AWS сервистерін пайдалану.

00:19:46.000 --> 00:19:56.064
Пайдаланушылар бар, олардан сұраулар келеді,
жүктеме теңдестірілетін ағымдағы серверлер бар және

00:19:56.088 --> 00:20:07.000
жүктеме белгілі бір шекті деңгейден жоғарыласа,
тиісті сервиске хабарландыру жіберілетінін көресіз.

00:20:07.000 --> 00:20:10.267
Бұл сервис серверлердің
қажетті санын автоматты түрде

00:20:10.291 --> 00:20:14.000
баптайды, осылайша әрбір
пайдаланушы сұраныстары өңделеді.

00:20:14.000 --> 00:20:19.491
Ал пайдаланушылар сіздің
сайтыңыздағы әрекеттерін аяқтап,

00:20:19.515 --> 00:20:25.988
шыққанан кейін, керісінше жағдай
орын алады: масштабтау сервисіне

00:20:26.012 --> 00:20:31.994
серверлердегі жүктеме азайғаны
туралы хабарлама келеді және

00:20:32.018 --> 00:20:38.000
бұл сервис шығын болмас үшін
қосымша серверлерді өшіре алады.

00:20:38.000 --> 00:20:46.661
Келесі best practice - бұл Automate your 
environment. Идеясы - мүмкіндігінше

00:20:46.685 --> 00:20:55.000
инфрақұрылымыңыздағы ресурстарды
автоматты түрде құру, жою және баптау.

00:20:55.000 --> 00:21:02.032
Келесі антипаттернді қарастырайық.
Ол алдыңғы слайдтағы антипаттернге өте ұқсас,

00:21:02.056 --> 00:21:10.000
бірақ серверіңізде кейбір ішкі қателер болып қалса,
жұмысын тоқтатуы мүмкін екендігімен ерекшеленеді.

00:21:10.000 --> 00:21:14.493
Бұл жағдайда жұмыс істейтін 
серверлердің саны азаяды. Сіз өзіңіздің

00:21:14.517 --> 00:21:19.625
әкімшіңізге хабарландыру орнатқаныңызды
елестетіп көрейік, әкімші қосылып,

00:21:19.649 --> 00:21:24.312
осы серверді қалпына келтіре бастайды
немесе жаңасын жасай бастайды,

00:21:24.336 --> 00:21:29.000
содан кейін ол жалғыз отырып,
бұзылған сервермен жұмыс істей алады.

00:21:29.000 --> 00:21:36.905
Және бұл жүйеде қате және бұзылу болған
уақытта орын алады. Бұл түнде, таңертең, күндізгі

00:21:36.929 --> 00:21:41.293
уақытта немесе маманның жұмыс
уақытынан тыс уақытта болуы мүмкін.

00:21:41.317 --> 00:21:45.680
Бұл - антипаттерн, өйткені
айқын кемшіліктері бар.

00:21:45.704 --> 00:21:49.893
Біріншіден, маманның жұмыс
уақыты үшін қосымша ақы төлеу керек.

00:21:49.917 --> 00:21:54.106
Бұл қосымша жұмыс уақыты
үшін төлемді қамтуы мүмкін.

00:21:54.130 --> 00:21:58.553
Тағы бір айта кететін жайт, бұл
жерде адам факторы бар, яғни

00:21:58.577 --> 00:22:03.000
адамның қосыла алмауы немесе
үлгермеуі, байқамауы мүмкін.

00:22:03.000 --> 00:22:08.573
Осылайша, сіздің инфрақұрылымыңыздың
жағдайы қажетті уақытта қосыла

00:22:08.597 --> 00:22:14.000
алмайтын бір немесе бірнеше
мамандарға байланысты болып қалады.

00:22:14.000 --> 00:22:20.076
Қарама-қарсы жағдай - best
practice - проблемалық серверлерді

00:22:20.100 --> 00:22:26.988
анықтау үшін осы серверлерді
жойып, орнына жаңа бапталған, міндетті

00:22:27.012 --> 00:22:33.494
түрде жұмыс істейтін серверлердің
қажетті санын орнату үшін, қол

00:22:33.518 --> 00:22:40.000
жетімді құралдарды, атап айтқанда
Auto Scaling сервисін пайдалану.

00:22:40.000 --> 00:22:47.025
Қажет болса, олар сондай-ақ әкімшіге белгілі бір
сервер ID-і бар бірнеше серверлер бұзылғаны және

00:22:47.049 --> 00:22:54.000
олардың орнына басқа бір ID-і бар келесі серверлер
орнатылғаны туралы хабарлама жібере алады.

00:22:54.000 --> 00:23:04.488
Бұл маманды бұзылу кезінде қосылуға мәжбүрлемейтін
best practice, маманды күйзеліске ұшыратпауға, бірақ

00:23:04.512 --> 00:23:15.000
пайдаланушы сұрауларын өңдеуді жалғастыра отырып,
бұзылған серверлерді бөлек ұстауға мүмкіндік береді.

00:23:15.000 --> 00:23:23.381
Жұмыс күні басталған кезде маман
хабарландыру алады және мәселені

00:23:23.405 --> 00:23:31.000
түсіну үшін дереу бөлек алынған
серверлерді қарап шығады.

00:23:31.000 --> 00:23:35.000
Келесі, үшінші best practice - бұл
Treat resources as disposable.

00:23:35.000 --> 00:23:39.988
Идея мынада: біз өз инфрақұрылымымызды, 
IT ресурстарымызды

00:23:40.012 --> 00:23:45.000
hardware ретінде емес, software
ретінде қабылдауымыз керек.

00:23:45.000 --> 00:23:49.488
Осылайша, біз аппараттық
құралдарға байланысты емеспіз және

00:23:49.512 --> 00:23:54.000
бұл әрбір IT ресурсты оңай
ауыстыруға болатындығына әкеледі.

00:23:54.000 --> 00:24:07.000
Ал бұл, өз кезегінде, бұлттық ортада қолжетімді IT
ресурстарды динамикалық басқаруға мүмкіндік береді.

00:24:07.000 --> 00:24:12.000
Келесі, төртінші best practice - бұл
Use loosely coupled components.

00:24:12.000 --> 00:24:17.645
Бұл best practice-тің идеясы - біз
инфрақұрылымды әрбір құрамдас көршілес

00:24:17.669 --> 00:24:23.000
құрамдас бөліктердің ең аз санына
қосылатындай етіп құруымыз керек.

00:24:23.000 --> 00:24:27.988
Мұны түсіну үшін антипаттернді қарастырайық.
Бізде веб-серверлердің деңгейі,

00:24:28.012 --> 00:24:33.000
back-end деңгейі бар деп елестетіп
көрейік, яғни application серверлер бар.

00:24:33.000 --> 00:24:42.000
Ал веб-сервер деңгейіндегі әрбір сервер back-end
серверлеріне жоғары дәрежеде қосылған.

00:24:42.000 --> 00:24:48.341
Бұл веб-деңгейдегі құрамдастардың
бірін ауыстыру немесе жаңарту

00:24:48.365 --> 00:24:55.629
кезінде біз барлық қосылымдарды
ескеруіміз керек екеніне әкеледі:

00:24:55.653 --> 00:25:02.815
егер көрші қосылған компоненттердің
жағында өзгерту қажет болса, онда бұл

00:25:02.839 --> 00:25:10.000
өзгерісті бір ғана емес, бірнеше
көршілес құрамдастарда енгізу қажет.

00:25:10.000 --> 00:25:15.000
Бұл қымбат, қиын және әрқашан
қолжетімді емес болуы мүмкін.

00:25:15.000 --> 00:25:23.601
Сонымен қатар, тығыз байланыстырылған
архитектурада, егер құрамдас үзілсе, ол сәтсіздіктер

00:25:23.625 --> 00:25:33.000
толқынын тудыруы мүмкін және сынған құрамдаспен
байланысты барлық компоненттер де үзілуі мүмкін.

00:25:33.000 --> 00:25:38.451
Және сол сияқты: бастапқы
істен шыққан құрамдас бөліктер,

00:25:38.475 --> 00:25:45.000
бастапқы компонент, келесі
құрамдастардың бұзылуына әкелуі мүмкін.

00:25:45.000 --> 00:25:51.049
Нәтижесінде, бір құрамдас деңгейіндегі
кішкене қатеге байланысты бүкіл

00:25:51.073 --> 00:25:58.000
инфрақұрылым істен шығуы мүмкін.
Бұл өте қауіпті, сондықтан бұл - антипаттерн.

00:25:58.000 --> 00:26:03.988
Best practice - біз әрбір
құрамдас бөлікті басқа көршілес

00:26:04.012 --> 00:26:10.000
құрамдас бөліктермен әлсіз
байланысты етіп құрастырамыз.

00:26:10.000 --> 00:26:15.688
Бұл компоненттердің әрқайсысын
қауіпсіз, арзан және тиімді

00:26:15.712 --> 00:26:21.000
ауыстыруға, жоюға немесе
жаңартуға мүмкіндік береді.

00:26:21.000 --> 00:26:25.223
Бізге әлсіз байланысқан
архитектураларды құруға мүмкіндік

00:26:25.247 --> 00:26:30.000
беретін сервистердің мысалдары
ELB, Amazon SQS болып табылады.

00:26:30.000 --> 00:26:37.000
Бұл келесі сабақтарымызда айтатын
хабарламалар кезегі сервисі.

00:26:41.000 --> 00:26:45.000
Келесі, бесінші best practice - бұл
Design Services, Not Servers.

00:26:45.000 --> 00:26:52.988
Идея мынада: ең басында, белсенді даму кезеңінде,
Managed Services, Serverless Services немесе

00:26:53.012 --> 00:27:01.000
сіздің командаңыздың жұмысын жеңілдететін кез
келген басқа AWS сервистерін таңдау ұсынылады.

00:27:01.000 --> 00:27:07.000
Яғни, командаға техникалық функционалдылықты
немесе техникалық құралды әзірлеу қажет емес.

00:27:07.000 --> 00:27:14.000
Осының арқасында команда бизнес мәселелерін
шешетін бизнес логикасын жазуға шоғырлана алады.

00:27:14.000 --> 00:27:19.112
Бұл өз кезегінде нарыққа ертерек
шығуға, компанияға ақша табуды

00:27:19.136 --> 00:27:24.000
ерте бастауға мүмкіндік береді
және жалпы бұл дұрыс бағыт.

00:27:24.000 --> 00:27:32.488
Әрі қарай, пассивті даму кезеңінде, негізгі
функционалдылық әзірленген және тапсырмалар

00:27:32.512 --> 00:27:41.000
көп болмаған кезде, бұлтқа арналған шығындар
құрылымын қайта қарау туралы ұсыныс бар.

00:27:41.000 --> 00:27:47.598
Егер белгілі бір сервис мөлшерсіз
түрде көп ақшаны тұтынатыны

00:27:47.622 --> 00:27:54.000
анықталса, сізге кейбір
есептеулерді жасауға тура келеді.

00:27:54.000 --> 00:28:00.610
Мысалы, хабарламалар кезегі сервисін іске асыру
үшін AWS шығындарын қарап, сіздің командаңыз

00:28:00.634 --> 00:28:07.988
немесе жеке маман осындай функционалдылықты
немесе ішкі құралды қанша уақытта

00:28:08.012 --> 00:28:14.994
әзірлейтінін қарап, бағалауыңызға болады.
Бұл шығындар салыстырмалы болған жағдайда

00:28:15.018 --> 00:28:22.000
сіз қысқа мерзімді, орта мерзімді және ұзақ
мерзімді кезеңге есептеулер жасай аласыз.

00:28:22.000 --> 00:28:29.482
Егер ішкі шешімді жазу тиімді болатыны
анықталса, өзіңіздің әзірлемелеріңізді

00:28:29.506 --> 00:28:36.988
дамытуға баяу көшуге болады. Неліктен 
мұны басынан бастап жасау ұсынылмайды?

00:28:37.012 --> 00:28:46.045
Дәл осы жерде сіздің бүкіл командаңыз кейбір
техникалық құралдарды әзірлеу кезеңінде тұрып

00:28:46.069 --> 00:28:55.000
қалуы мүмкін және бизнес мәселелерін шешу
үшін бизнес логикасын жазуға да жете алмайды.

00:28:55.000 --> 00:28:59.488
Бұл өз кезегінде компанияңыздың 
болашағына нүкте қоюы

00:28:59.512 --> 00:29:04.000
мүмкін және нәтижесінде
компания банкротқа ұшырауы мүмкін.

00:29:08.000 --> 00:29:12.000
Келесі, алтыншы best practice - бұл
Choose the right database solution.

00:29:12.000 --> 00:29:21.935
Бұл best practice идеясы мынада: бұлттық
технологиялармен жұмыс істегенде бізде деректерді

00:29:21.959 --> 00:29:31.000
сақтауға, өңдеуге және талдауға мүмкіндік
беретін бірнеше ондаған сервистер бар.

00:29:31.000 --> 00:29:37.701
Сіздің деректеріңіз қалай пайдаланылатынына,
қаншалықты жиі жазылатынына,

00:29:37.725 --> 00:29:43.681
қаншалықты жиі оқылатынына,
деректердің қандай көлемі күтілуде,

00:29:43.705 --> 00:29:50.033
деректеріңіздің қаншалықты көлемді
болуы мүмкін екеніне, деректерді

00:29:50.057 --> 00:29:56.386
тасымалдау талаптары қандай,
деректеріңізге бір уақытта қосылу санына

00:29:56.410 --> 00:30:02.291
қойылатын талаптар қандай және т.б.
шарттарға байланысты оңтайлы

00:30:02.315 --> 00:30:09.037
сервисті таңдауға болады. Есептеу және 
дерекқор шығындары жалпы бұлттық

00:30:09.061 --> 00:30:16.161
шығындардың 50%-на дейін жетуі мүмкін
екенін ескере отырып, бастапқыда дұрыс

00:30:16.185 --> 00:30:23.000
шешімді таңдау артық шығындарсыз
бірден үлкен пайда табуға көмектеседі.

00:30:27.000 --> 00:30:33.612
Келесі best practice - бұл Avoid single
points of failure. Идеясы - сіз өзіңіздің

00:30:33.636 --> 00:30:40.000
инфрақұрылымыңызды сыни жерлерде
аздап артық болатындай етіп құруыңыз керек.

00:30:40.000 --> 00:30:48.038
Бұл жерде түсінілетін нәрсе, сыни түйіндер
бұзылған жағдайда резервтік опция бар,

00:30:48.062 --> 00:30:56.000
ал бұл сыни түйін бұзылған жағдайда
бүкіл жүйе тоқтамай, жұмысын жалғастырады.

00:30:56.000 --> 00:31:05.343
Мысалы, біз шешімімізді бір немесе бірнеше
availability zone-да орналастырамыз, бірақ

00:31:05.367 --> 00:31:14.488
бізде, мысалы, дерекқор жағдайында негізгі
дерекқор бар және оның жанында standby

00:31:14.512 --> 00:31:23.744
көшірме бар, ол қажет болған жағдайда
master дерекқорға айналып, қолданбаларыңыздан

00:31:23.768 --> 00:31:33.000
сұрауларды қабылдауды жалғастыра алады.
Келесі best practice - бұл Optimize for cost.

00:31:33.000 --> 00:31:38.188
Бұл best practice идеясы -
бұлт провайдерлері ұсынатын

00:31:38.212 --> 00:31:43.988
мүмкіндіктерді пайдалану
қажет, атап айтқанда олар инстанс

00:31:44.012 --> 00:31:49.494
түрлерінің кең таңдауын,
инфрақұрылымды автоматты түрде

00:31:49.518 --> 00:31:55.000
масштабтайтын сервистердің
кең таңдауын қамтамасыз етеді.

00:31:55.000 --> 00:32:00.488
Осылайша, IT ресурстарының түрлерімен
және олардың комбинацияларымен тәжірибе

00:32:00.512 --> 00:32:06.000
жасау арқылы сіз жұмыс жүктемеңізге
өте ыңғайлы инфрақұрылымды құра аласыз.

00:32:06.000 --> 00:32:12.101
Жергілікті дата-центр туралы айтатын
болсақ, мұндай мүмкіндіктер болмауы мүмкін,

00:32:12.125 --> 00:32:19.000
өйткені аккаунтыңызға, ұйымыңызға қосымша
IT ресурстарын бөлу біраз уақытты алуы мүмкін.

00:32:19.000 --> 00:32:24.226
Бұл кейбір адами факторларды қамтуы
мүмкін, мысалы, бұл ресурстар сізге

00:32:24.250 --> 00:32:30.000
бөлінуі үшін сұрауды ашып, оны
техникалық қолдау қызметіне жіберуіңіз керек.

00:32:30.000 --> 00:32:34.665
Немесе онда бәрі автоматтандырылған
болса да, дата-центрдің

00:32:34.689 --> 00:32:40.000
көлемі жаһандық AWS инфрақұрылымымен
салыстырғанда өте кішкентай.

00:32:40.000 --> 00:32:46.000
Сондықтан сервер түрлерінің үлкен
таңдауы болады деп күтпеу керек.

00:32:46.000 --> 00:32:53.605
Ол әлдеқайда аз болуы мүмкін
және тәжірибе жасау үшін бірнеше ғана

00:32:53.629 --> 00:33:01.000
нұсқалар болуы мүмкін.
Келесі best practice - бұл Use caching.

00:33:01.000 --> 00:33:05.488
Идеясы - кэштеуді ұйымдастыруға
болатын барлық жерлерде

00:33:05.512 --> 00:33:10.000
мұны істеу керек. Мұның 
бірнеше маңызды себептері бар.

00:33:10.000 --> 00:33:20.000
Біріншісі - деректер бастапқы көзден алынған
кезде олар өзгере алады немесе түрленіп кетуі мүмкін.

00:33:20.000 --> 00:33:26.488
Ол үшін көбірек есептеу ресурстарын 
жұмсау керек. Бұл көп уақытты қажет етеді

00:33:26.512 --> 00:33:33.000
және сәйкесінше, кэштен дайын нәтижені
шығарғаннан гөрі бәрі қымбатқа түседі.

00:33:33.000 --> 00:33:38.000
Тағы бір мәселе, сервер кэші пайдаланушыларыңызға
жақынырақ болуы мүмкін.

00:33:38.000 --> 00:33:47.000
Осылайша, пайдаланушылар деректерді тезірек
алады және сіз Network трафикті үнемдейсіз.

00:33:47.000 --> 00:33:56.000
Өйткені ол айтарлықтай азаяды және әрбір сұрау үшін
бастапқы дереккөзге хабарласудың қажеті болмайды.

00:33:56.000 --> 00:34:06.000
Мысалы, CloudFront сервисін пайдалану -
бұл жаһандық CDN, Content Delivery Network.

00:34:06.000 --> 00:34:14.488
Сондай-ақ, кэштеу туралы айтатын
болсақ, дерекқорды босату үшін Redis

00:34:14.512 --> 00:34:24.000
немесе Memcached ресурсын баптай
алатын ElastiCache сервисін айтуға болады.

00:34:28.000 --> 00:34:33.000
Ең соңғы, оныншы best practice - бұл
Secure your entire infrastructure.

00:34:33.000 --> 00:34:37.635
Бұл best practice-тің негізгі идеясы
- біз инфрақұрылымымыздың әрбір

00:34:37.659 --> 00:34:42.988
деңгейінде қауіпсіздікті қамтамасыз 
етуіміз керек. Бірнеше мысал келтірейін.

00:34:43.012 --> 00:34:47.994
Бірінші мысал - деректеріңізді
сақтау кезінде ғана емес, сонымен бірге

00:34:48.018 --> 00:34:53.000
осы деректерді тасымалдау кезінде де
шифрланғанын қамтамасыз ету қажет.

00:34:53.000 --> 00:35:02.275
Басқа мысал - пайдаланушыларға немесе кез келген
сервиске рөлдік құқықтарды белгілі бір тапсырманы

00:35:02.299 --> 00:35:11.000
орындау үшін қажетті көлемде ғана беру
керек, яғни Least Privilege принципін сақтау керек.

00:35:11.000 --> 00:35:14.777
Келесі мысал - мүмкіндігінше
MFA қосылу керек кезде оны

00:35:14.801 --> 00:35:19.000
қосу болып табылады.
MFA - бұл Multi-Factor Authentication.

00:35:19.000 --> 00:35:28.131
Осылайша, белгілі бір пайдаланушының
жеке тұлғасын тексеру арқылы

00:35:28.155 --> 00:35:38.000
апатты немесе маңызды болуы мүмкін
оқиғаларды қосымша қорғай аласыз.

00:35:38.000 --> 00:35:43.302
Басқа мысал - бұл Managed Services 
қолдану. Managed Services

00:35:43.326 --> 00:35:48.627
- AWS әкімшіліктің көпшілігін
өзіне алады және біз бұлттық

00:35:48.651 --> 00:35:53.856
технологияларды және осы
арнайы сервистерді пайдаланушылар

00:35:53.880 --> 00:36:00.000
ретінде осы сервистердің дұрыс
бапталғанына көз жеткізуіміз керек.

00:36:00.000 --> 00:36:05.635
Осылайша, қауіпсіздік
конфигурациясы, орнату, қауіпсіздік

00:36:05.659 --> 00:36:12.000
патчтарын жаңарту, барлығы
бұлттық провайдердің иығына түседі.

00:36:12.000 --> 00:36:21.564
Тағы бір мысал, нақты ресурстарға кім,
қашан, қалай және не үшін қол жеткізгенін

00:36:21.588 --> 00:36:32.000
дұрыс сәтте анықтау үшін маңызды ресурстарға
қатысты барлық әрекеттерді тіркеу қажет.

00:36:32.000 --> 00:36:38.283
Осымен бүгінгі дәрісіміздің үшінші бөлімін де
аяқтадық. Біз 10 best practices-ті қарастырдық.

00:36:38.307 --> 00:36:45.000
Әрбір best practice үшін оны жақсы меңгеру үшін
антипаттернді және бірнеше мысалдарды талқыладық.

00:36:45.000 --> 00:36:53.029
Сіз best practice не екенін, бұлттық архитектураға
қалай қатысты екенін жақсырақ түсіндіңіз

00:36:53.053 --> 00:37:01.000
деп үміттенемін және болашақта бұл AWS бұлтында
архитектураңызды құруға көмектеседі деп ойлаймын.

00:37:01.000 --> 00:37:09.000
Енді дәрісіміздің төртінші бөліміне біртіндеп өтіп,
жаһандық AWS инфрақұрылымы туралы сөйлесейік.

00:37:09.000 --> 00:37:15.936
Біз бұл тақырыпты алдыңғы Cloud
Practitioner курсында қозғаған болатынбыз.

00:37:15.960 --> 00:37:22.000
Енді біз оны қайталап, жаңа
нюанстарды қоса айтамыз.

00:37:22.000 --> 00:37:27.079
AWS Regions тұжырымдамасынан 
бастайық. Region - бұл басқа

00:37:27.103 --> 00:37:33.000
аймақтардан оқшауланған белгілі
бір физикалық географиялық орын.

00:37:33.000 --> 00:37:46.000
Әлемде 20-дан астам AWS Regions бар. Әрбір AWS
Region екі не одан көп availability zone-нан тұрады.

00:37:46.000 --> 00:37:54.000
Бір-бірімен байланысты аймақтар AWS
желісі арқылы бөлек белгіленеді.

00:37:54.000 --> 00:37:59.988
Аймақтар бір-бірінен оқшауланғандықтан,
репликациялау немесе аймақтар

00:38:00.012 --> 00:38:06.000
арасында деректерді тасымалдау
тапсырмасын өзіңіз баптауыңыз қажет.

00:38:06.000 --> 00:38:12.232
Бұл үшін барлық құралдар бар, ол тек
қосымша конфигурацияны қажет етеді,

00:38:12.256 --> 00:38:18.488
яғни жергілікті жерде қол жетімді емес.
Ал availability zone жағдайында

00:38:18.512 --> 00:38:24.480
кейбір ресурстарды орнату кезінде
осы сервис қандай availability zone

00:38:24.504 --> 00:38:31.000
пайдаланатынын таңдауға болады.
Regions жағдайында мұндай нұсқа болмайды.

00:38:31.000 --> 00:38:42.218
Дүние жүзінде AWS аймақтарының әртүрлі түрлері 
бар. Көптеген аймақтар стандартты аймақтар

00:38:42.242 --> 00:38:48.109
болып табылады. Сондай-ақ, 
Қытайға қатысты екі аймақ бар, яғни

00:38:48.133 --> 00:38:54.000
AWS China деп аталады.
Олар әлемнен оқшауланып, бөлек дамиды.

00:38:54.000 --> 00:39:00.528
Біз жиі көретін құбылыс, AWS China-да
жұмыс істейтін кез келген сервис Қытайдан тыс

00:39:00.552 --> 00:39:07.000
аймақтармен салыстырғанда дамудан бір
жыл немесе одан да көп жылға артта қалады.

00:39:07.000 --> 00:39:18.366
Аймақтың тағы бір түрі бар - AWS GovCloud.
Бұл - Америкадағы мемлекеттік

00:39:18.390 --> 00:39:32.000
мекемелермен байланысты IT инфрақұрылымдарды
орналастыру үшін арнайы құрылған аймақ.

00:39:32.000 --> 00:39:40.000
Енді AWS жаһандық инфрақұрылымының
келесі элементін - availability zone қарастырайық.

00:39:40.000 --> 00:39:46.488
Availability zone белгілі бір region-ға 
қатысты. Егер бізде жаһандық

00:39:46.512 --> 00:39:53.000
AWS бар десек, оның бірнеше
ондаған region бар, мысалы, eu-west-1.

00:39:53.000 --> 00:40:00.727
Бұл region-да бірнеше availability zone бар
және availability zone мысалы eu-west-1a болып

00:40:00.751 --> 00:40:09.000
табылады. Яғни, availability zone атауы - бұл
availability zone атауы және әліпбидің бір әрпі.

00:40:09.000 --> 00:40:12.988
Availability zone туралы
айтатын болсақ, әрбір availability

00:40:13.012 --> 00:40:17.000
zone кемінде бір немесе тіпті
бірнеше дата-центрден тұрады.

00:40:17.000 --> 00:40:26.000
Осылайша, бүкіл аймақты айтпағанда,
availability zone-ның қолжетімсіз болуы екіталай.

00:40:26.000 --> 00:40:34.000
Бірақ та әлемде ешбір жағдайда үзілмеуі
керек өте маңызды жүктемелер де бар.

00:40:34.000 --> 00:40:41.740
Мұндай жағдайларда компаниялар өздерінің
инфрақұрылымын бірнеше аймақтарға орналастырады.

00:40:41.764 --> 00:40:49.327
Бұл өте қымбат, бірақ іскерлік тапсырма
және белгілі бір талаптар болған кезде мұндай

00:40:49.351 --> 00:40:57.174
инфрақұрылымдар да бар. Region ішіндегі
availability zone-лар арнайы сілтеме арқылы өзара

00:40:57.198 --> 00:41:06.000
байланысты және деректерді осы availability zone
арасында жоғары жылдамдықпен тасымалдауға болады.

00:41:06.000 --> 00:41:15.559
Жаһандық инфрақұрылымның келесі
жаңа құрамдас бөлігі - бұл AWS local zones.

00:41:15.583 --> 00:41:26.000
AWS local zones идеясы - бұл
шалғай жерде орналасқан шағын аймақ.

00:41:26.000 --> 00:41:34.988
Яғни, жақын жерде AWS Regions
болмаса, бірақ елдегі белгілі бір аймақта қол

00:41:35.012 --> 00:41:44.000
жетімді болуы үшін AWS қажет болса,
AWS local zones сізге көмекке келеді.

00:41:44.000 --> 00:41:48.988
Яғни, сізге қолжетімді шағын
дата-центр орналастырылады

00:41:49.012 --> 00:41:54.000
және сіз бұл ресурстарды
өз еліңізде пайдалана аласыз.

00:41:54.000 --> 00:42:02.000
Кейбір жұмыс жүктемелері мен
бизнес үшін бұл өте қызықты шешім.

00:42:02.000 --> 00:42:08.000
Енді біз availability zone ішіндегі келесі
құрамдас - дата-центрді қарастырайық.

00:42:08.000 --> 00:42:15.029
Дата-центрлер - біздің барлық серверлеріміз
орналасқан, барлық деректер сол серверлерде

00:42:15.053 --> 00:42:22.000
сақталады және AWS ғаламдық инфрақұрылымының
ең кіші құрамдас бөлігі болып табылады.

00:42:22.000 --> 00:42:30.194
Егер біз дата-центрлердің көлемі туралы
айтатын болсақ, онда әрбір дата-центрінде

00:42:30.218 --> 00:42:39.027
кем дегенде бірнеше ондаған мың серверлер бар.
Бұл серверлер өте қуатты болуы мүмкін,

00:42:39.051 --> 00:42:47.341
өйткені виртуализация процесі жүреді
және бір қуатты серверді бірнеше түрлі шағын

00:42:47.365 --> 00:42:56.693
инстанстар ретінде бөліп, сізге ұсынуға болады.
Осылайша, дата-центр - физикалық шектеулі

00:42:56.717 --> 00:43:05.010
кеңістік екенін түсіне отырып, AWS
кеңістіктің әрбір бөлігін мүмкіндігінше тиімді

00:43:05.034 --> 00:43:13.847
пайдалануға тырысады және сәйкесінше,
әрбір сервер мүмкіндігінше қуатты болады, егер

00:43:13.871 --> 00:43:22.423
мен бұрын айтқан санға көбейтсек, бұл
бірнеше ондаған мың осындай қуатты серверлер

00:43:22.447 --> 00:43:31.000
болса, бір дата-центрінде қол жетімді
есептеу қуатының ауқымын елестетіп көріңізші.

00:43:31.000 --> 00:43:36.988
AWS жаһандық инфрақұрылымының
келесі бөлек құрамдас бөлігі және CDN-ге

00:43:37.012 --> 00:43:43.000
қатысты, яғни Content Delivery
Network - бұл AWS Points of presence.

00:43:43.000 --> 00:43:49.038
Олар Amazon CloudFront сервисіне
тікелей қатысты және бірнеше

00:43:49.062 --> 00:43:55.000
түрлері бар. Бұл Edge locations 
және Regional edge caches.

00:43:55.000 --> 00:44:02.033
Оның айырмашылығы, Edge locations әлеуетті
пайдаланушыларыңызға ең жақын сервер

00:44:02.057 --> 00:44:09.000
кэштері және деректер Edge locations-тан
мүмкіндігінше жылдам тасымалданады.

00:44:09.000 --> 00:44:16.216
Келесі, сәл алыс сервер кэштері
Regional edge caches болып табылады,

00:44:16.240 --> 00:44:23.996
оларда Edge locations-тағы деректер
сияқты жиі сұралмайтын, бірақ соған

00:44:24.020 --> 00:44:32.211
қарамастан сұралатын және олар
үлкенірек географиялық аумақта біріктірілген,

00:44:32.235 --> 00:44:39.988
яғни олар жиі емес бірнеше Edge
locations-тағы деректерді біріктіреді.

00:44:40.012 --> 00:44:47.000
Сондай-ақ, картада күлгін түспен
бөлектелген Multiple edge locations көресіз.

00:44:47.000 --> 00:45:00.607
Бұл AWS өте жақсы дамыған, Amazon
CloudFront сервисі өте белсенді қолданылатын

00:45:00.631 --> 00:45:13.000
орындар және сіз осы слайдта
олардың бөлек белгіленгенін көре аласыз.

00:45:13.000 --> 00:45:19.213
Осымен бүгінгі дәрісіміздің соңғы бөлімін 
аяқтадық. Біз жаһандық AWS инфрақұрылымын,

00:45:19.237 --> 00:45:25.000
оның негізгі құрамдас бөліктерін және
олар не үшін қажет екенін қарастырдық.

00:45:25.000 --> 00:45:33.045
Осымен біз бүгінгі дәрісіміздің
соңына жеттік, біз келесі дәрістерімізді

00:45:33.069 --> 00:45:41.000
оңай меңгеруге көмектесетін өте
маңызды негізгі ұғымдарды талқыладық.

00:45:41.000 --> 00:45:48.949
Мұнда қарастырылған материалдарды
тереңірек зерттеу үшін бірнеше

00:45:48.973 --> 00:45:55.488
пайдалы сілтемелерді көре аласыз.
Осымен бүгінгі сессиямызды аяқтаймыз.

00:45:55.512 --> 00:46:01.000
Назарларыңызға рахмет.
Келесі белсенділіктерімізде кездескенше!