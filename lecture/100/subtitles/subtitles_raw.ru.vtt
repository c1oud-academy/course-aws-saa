WEBVTT

00:00:00.000 --> 00:00:04.480
Добрый день, уважаемые студенты, рад вас всех видеть.

00:00:04.480 --> 00:00:07.660
Сегодня мы с вами продолжаем серию лекций, посвященных

00:00:07.660 --> 00:00:08.660
базам данных.

00:00:08.660 --> 00:00:11.040
Сегодня вторая и заключительная часть.

00:00:11.040 --> 00:00:12.040
Итак, давайте начнем.

00:00:12.040 --> 00:00:17.380
Сегодняшняя лекция состоит из трех частей.

00:00:17.380 --> 00:00:22.320
Так как нумерация сквозная, то мы начинаем с четвертой

00:00:22.320 --> 00:00:23.320
секции.

00:00:23.320 --> 00:00:26.440
Она посвящена сервису Amazon DynamoDB.

00:00:26.440 --> 00:00:34.440
DynamoDB это Managed Database Service, по типу является NoSQL базами

00:00:34.440 --> 00:00:35.440
данных.

00:00:35.440 --> 00:00:40.860
Пятая секция посвящена вопросам безопасности.

00:00:40.860 --> 00:00:44.920
Здесь мы рассмотрим эти моменты на примере сервиса

00:00:44.920 --> 00:00:48.560
Amazon RDS и Amazon DynamoDB.

00:00:48.560 --> 00:00:55.180
И самая последняя, шестая секция связана с вопросами

00:00:55.180 --> 00:00:58.960
миграции с локального дата центра на сервисе

00:00:58.960 --> 00:01:01.600
AWS.

00:01:01.600 --> 00:01:04.240
Мы познакомимся с несколькими сервисами, которые помогают

00:01:04.240 --> 00:01:07.120
нам упростить процесс миграции.

00:01:07.120 --> 00:01:09.980
Также напоминаю, что на этой неделе у нас будет

00:01:09.980 --> 00:01:12.960
лабораторная работа.

00:01:12.960 --> 00:01:16.520
Тема этой лабораторной работы «Миграция баз данных

00:01:16.520 --> 00:01:22.120
на Amazon RDS» будет две активности – введение и разбор лабораторной

00:01:22.120 --> 00:01:23.120
работы.

00:01:23.120 --> 00:01:29.720
Мы с вами начинаем четвертую секцию.

00:01:29.720 --> 00:01:32.840
Она у нас про сервис Amazon DynamoDB.

00:01:32.840 --> 00:01:35.680
Давайте остановимся на самых основных моментах.

00:01:35.680 --> 00:01:42.200
Amazon DynamoDB это Fully Managed Database Service, по типу является нерелационной

00:01:42.200 --> 00:01:44.040
Key Value базой данных.

00:01:44.040 --> 00:01:47.160
То есть мы в каждой строчке храним некоторые ключи

00:01:47.160 --> 00:01:48.160
и значения.

00:01:48.160 --> 00:01:54.080
Если говорить о основных преимуществах сервиса

00:01:54.080 --> 00:01:58.580
Amazon DynamoDB, то оно может масштабироваться практически

00:01:58.580 --> 00:02:00.280
до неограниченных размеров.

00:02:00.280 --> 00:02:06.720
Также предоставляет нам Single Digit Millisecond Response Time.

00:02:06.720 --> 00:02:13.800
Идея в том, что оно отвечает нам всегда в рамках 10 миллисекунд.

00:02:13.800 --> 00:02:16.640
То есть достаточно быстро и подходит для большинства

00:02:16.640 --> 00:02:17.640
приложений.

00:02:17.640 --> 00:02:21.060
Более того, так как это сервис является Serverless, нам нет

00:02:21.060 --> 00:02:23.800
необходимости поддерживать сервера, устанавливать

00:02:23.800 --> 00:02:27.040
патчи безопасности, обновления и так далее.

00:02:27.040 --> 00:02:31.320
Также нет необходимости устанавливать Software, то

00:02:31.320 --> 00:02:33.280
есть программное обеспечение.

00:02:33.280 --> 00:02:40.720
И таким образом достаточно легко ее начать использовать.

00:02:40.720 --> 00:02:47.320
Если говорить про приложения, которые хорошо подходят

00:02:47.320 --> 00:02:53.880
для использования с DynamoDB, это случаи, когда у вас

00:02:53.880 --> 00:02:57.120
приложение работает с большим объемом данных, то есть

00:02:57.120 --> 00:02:59.000
это более 1 терабайта.

00:02:59.000 --> 00:03:03.160
Также тот случай, когда ваша база данных достаточно

00:03:03.160 --> 00:03:07.040
быстро растет и вам нужен сервис, который будет за

00:03:07.040 --> 00:03:11.240
вашим приложением поспевать и также быстро масштабироваться.

00:03:11.240 --> 00:03:15.240
Если в вашем приложении нет необходимости какой-либо

00:03:15.240 --> 00:03:20.480
аналитики, то есть не содержится запросов со сложными джойнами,

00:03:20.480 --> 00:03:23.720
а достаточно простые прямые запросы, то в этом случае

00:03:23.720 --> 00:03:27.240
DynamoDB также является подходящим вариантом.

00:03:27.240 --> 00:03:35.040
DynamoDB является NoSQL базой данных.

00:03:35.040 --> 00:03:38.480
Вы храните в каждой строчке ключ значения.

00:03:38.480 --> 00:03:42.040
В каждой строке может быть несколько колонок и названия

00:03:42.040 --> 00:03:44.320
колонок они не ограничены ничем.

00:03:44.320 --> 00:03:49.320
То есть они могут быть уникальными для каждой строчки.

00:03:49.320 --> 00:03:53.360
Таким образом нет какой-то определенной структуры,

00:03:53.360 --> 00:03:57.560
как мы привыкли работать с релационными базами

00:03:57.560 --> 00:03:58.560
данных.

00:03:58.560 --> 00:04:04.840
Здесь структура таблицы, она может меняться в любое

00:04:04.840 --> 00:04:12.000
время по необходимости.

00:04:12.000 --> 00:04:15.520
Теперь давайте подробнее посмотрим, из чего же состоит

00:04:15.520 --> 00:04:17.520
база данных DynamoDB.

00:04:17.520 --> 00:04:20.520
Мы с вами помним, что при работе с релационными

00:04:20.520 --> 00:04:23.320
базами данных у нас есть несколько таблиц.

00:04:23.320 --> 00:04:26.720
Эти таблицы связаны между собой и таким образом все

00:04:26.720 --> 00:04:30.560
необходимые данные вы храните в этих таблицах.

00:04:30.560 --> 00:04:35.080
Когда мы говорим DynamoDB, то здесь при создании инстенса

00:04:35.080 --> 00:04:39.120
DynamoDB создается одна единственная большая таблица.

00:04:39.120 --> 00:04:44.680
И при переносе данных и структуры с релационной

00:04:44.680 --> 00:04:48.080
базы данных в DynamoDB все таблицы, которые у вас были

00:04:48.080 --> 00:04:51.180
в релационной базе данных, они переносятся в одну

00:04:51.180 --> 00:04:54.160
таблицу DynamoDB.

00:04:54.160 --> 00:04:59.680
Далее внутри у нас есть так называемые data-элементы

00:04:59.680 --> 00:05:00.960
либо items.

00:05:00.960 --> 00:05:03.600
Это как раз таки строчка.

00:05:03.600 --> 00:05:07.000
Каждая строчка состоит из различных атрибутов.

00:05:07.000 --> 00:05:10.000
Каждый атрибут это ключ и значение.

00:05:10.000 --> 00:05:13.620
Также для каждого айтема, то есть для каждой строчки

00:05:13.620 --> 00:05:15.640
есть hash key.

00:05:15.640 --> 00:05:20.040
Это ключ, по которому оно уникально идентифицируется.

00:05:20.040 --> 00:05:24.400
Hash-ключ, он может быть простым и составным.

00:05:24.400 --> 00:05:29.840
Когда он составной, то используются primary key и sort key.

00:05:29.840 --> 00:05:33.640
То есть это второстепенный ключ.

00:05:33.640 --> 00:05:38.360
Далее вы видите на слайде розовым выделены ячейки,

00:05:38.360 --> 00:05:40.720
которые являются динамическими.

00:05:40.720 --> 00:05:46.040
То есть для каждой строчки может быть уникальный набор

00:05:46.040 --> 00:05:47.640
дополнительных атрибутов.

00:05:47.640 --> 00:05:55.760
Каждый атрибут это ключ и значение.

00:05:55.760 --> 00:05:59.960
По умолчанию таблица DynamoDB, она клонируется в несколько

00:05:59.960 --> 00:06:03.160
availability zone в рамках одного региона.

00:06:03.160 --> 00:06:06.620
Но бывают случаи, когда вам нужно, чтобы таблица

00:06:06.620 --> 00:06:09.680
была доступна из нескольких AWS регионов.

00:06:09.680 --> 00:06:16.280
В этом случае вы можете включить опцию global table

00:06:16.280 --> 00:06:21.500
и указать необходимые регионы, после чего таблица

00:06:21.500 --> 00:06:25.640
DynamoDB станет доступна из всех указанных регионов.

00:06:25.640 --> 00:06:29.580
Это может быть достаточно удобно, если у вас приложение

00:06:29.580 --> 00:06:32.260
с пользователями из различных регионов.

00:06:32.260 --> 00:06:37.920
В этом случае при внесении изменений в таблицу с одного

00:06:37.920 --> 00:06:41.080
региона, эти изменения клонируются в таблице

00:06:41.080 --> 00:06:42.360
в других регионах.

00:06:42.360 --> 00:06:45.400
Более того, если один регион становится недоступным,

00:06:45.400 --> 00:06:47.560
то пользователи смогут продолжать работать с вашим

00:06:47.560 --> 00:06:50.920
приложением, но уже работать с таблицей из другого региона.

00:06:50.920 --> 00:06:57.800
Таким образом, это увеличивает доступность вашего приложения.

00:06:57.800 --> 00:07:05.420
Давайте теперь остановимся на популярных юсткейсах

00:07:05.420 --> 00:07:07.760
сервиса Amazon DynamoDB.

00:07:07.760 --> 00:07:10.440
Самый популярный пример это использование таблицы

00:07:10.440 --> 00:07:12.280
как таблица рейтинга.

00:07:12.280 --> 00:07:18.720
В нашем примере есть у нас компания Electronic Arts, которая

00:07:18.720 --> 00:07:26.020
разрабатывает игры и ежедневно использует приложения

00:07:26.020 --> 00:07:29.040
этой компании миллионы активных пользователей.

00:07:29.040 --> 00:07:33.360
В секунду могут приходить до 100 тысяч запросов, а

00:07:33.360 --> 00:07:38.200
по всему миру зарегистрировано более 300 миллионов пользователей.

00:07:38.200 --> 00:07:42.280
То есть, это достаточно большие нагрузки на все

00:07:42.280 --> 00:07:47.400
приложения этой компании и таблицу рейтинга она

00:07:47.400 --> 00:07:50.440
реализовала в сервисе Amazon DynamoDB.

00:07:50.440 --> 00:07:55.480
Вы видите, что здесь как user ID, primary key, указан ID

00:07:55.480 --> 00:07:56.480
пользователя.

00:07:56.480 --> 00:08:00.760
Далее, как game, как sort key, то есть secondary key, у нас

00:08:00.760 --> 00:08:02.280
является game title.

00:08:02.280 --> 00:08:05.720
И далее у нас есть опциональные ключи.

00:08:05.720 --> 00:08:09.220
Некоторые ключи, они могут совпадать, например, top

00:08:09.220 --> 00:08:14.360
score, top score date time, wins, loses и могут быть дополнительные

00:08:14.360 --> 00:08:17.960
поля, которые специфичны для определенной игры.

00:08:17.960 --> 00:08:25.120
Следующим достаточно популярным примером использования

00:08:25.120 --> 00:08:33.120
сервиса Amazon DynamoDB является корзина в веб-сайте.

00:08:33.120 --> 00:08:39.160
Это достаточно важные данные, потеря которых может привести

00:08:39.160 --> 00:08:42.480
к значительным убыткам компании, но тем не менее

00:08:42.480 --> 00:08:46.040
по характеру своему является временными данными.

00:08:46.040 --> 00:08:49.560
Так вот, в этом случае DynamoDB она идеально подходит, так

00:08:49.560 --> 00:08:56.840
как может поддерживать внезапное увеличение количества

00:08:56.840 --> 00:09:01.600
пользователей, все всплески она успешно сможет обработать

00:09:01.600 --> 00:09:07.040
и в случае, когда нет пользователей на сайте, она также автоматически

00:09:07.040 --> 00:09:10.240
уменьшается до необходимых размеров и вы платите только

00:09:10.240 --> 00:09:11.800
за то, что вы используете.

00:09:11.800 --> 00:09:22.360
Что такое read consistency?

00:09:22.360 --> 00:09:28.480
Это когда данные становятся доступны после их записи

00:09:28.480 --> 00:09:29.800
либо обновления.

00:09:29.800 --> 00:09:34.760
В случае, если обновленные данные становятся доступны

00:09:34.760 --> 00:09:39.240
сразу, то в этом случае мы говорим, что это strong consistent

00:09:39.240 --> 00:09:40.240
операция.

00:09:40.240 --> 00:09:45.120
Если же данные после записи либо обновления становятся

00:09:45.120 --> 00:09:48.120
доступными не сразу, а через какое-то время, в

00:09:48.120 --> 00:09:50.520
не зависимости от того, через одну секунду, через

00:09:50.520 --> 00:09:54.520
10 секунд, то это называется eventually consistent операция.

00:09:54.520 --> 00:10:02.160
Amazon DynamoDB поддерживает оба подхода.

00:10:02.160 --> 00:10:08.280
По умолчанию включен eventually consistent операции, то есть

00:10:08.280 --> 00:10:11.560
мы с вами помним, что данные они реплицируются в несколько

00:10:11.560 --> 00:10:15.560
availability zone в рамках региона и в момент, когда вы записываете

00:10:15.560 --> 00:10:19.600
данные, она в течение одной секунды реплицируется

00:10:19.600 --> 00:10:22.320
на все другие availability zone.

00:10:22.320 --> 00:10:25.960
Таким образом, если вы обновите запись либо добавите новую

00:10:25.960 --> 00:10:29.240
запись и попробуете ее сразу же запросить, то она может

00:10:29.240 --> 00:10:33.440
вам вернуть старые данные, либо вернуть информацию

00:10:33.440 --> 00:10:35.280
о том, что запись еще не создана.

00:10:35.280 --> 00:10:41.000
Если для вашего приложения это подходит, то вы продолжаете

00:10:41.000 --> 00:10:43.840
использовать eventually consistent operations.

00:10:43.840 --> 00:10:48.160
В случае, если вам необходимо, чтобы изменения они появлялись

00:10:48.160 --> 00:10:51.160
сразу, то вам необходимо использовать опцию strongly

00:10:51.160 --> 00:10:52.160
consistent.

00:10:52.160 --> 00:10:55.680
Она может быть активирована на уровне абсолютно каждой

00:10:55.680 --> 00:10:59.380
операции, то есть некоторые операции вы можете записывать

00:10:59.380 --> 00:11:04.200
как eventually consistent некритичные данные, а те, которые критичные,

00:11:04.200 --> 00:11:08.760
вы будете записывать с включенной галочкой о том, что вы эту

00:11:08.760 --> 00:11:12.720
операцию хотите провести как strongly consistent.

00:11:12.720 --> 00:11:17.620
То есть все изменения появятся сразу и доступны при следующем

00:11:17.620 --> 00:11:25.680
обращении.

00:11:25.680 --> 00:11:29.320
На этом мы разобрали самые основные и важные моменты,

00:11:29.320 --> 00:11:32.680
связанные с сервисом Amazon DynamoDB.

00:11:32.680 --> 00:11:36.520
Необходимо запомнить, что это fully managed non-relational

00:11:36.520 --> 00:11:41.520
key value database service, то есть это полностью управляемое

00:11:41.520 --> 00:11:46.660
AWS сервис, которое предоставляет нам нерелационные базы

00:11:46.660 --> 00:11:49.080
данных типа ключ-значение.

00:11:49.080 --> 00:11:54.920
Также этот сервис является serverless, что говорит о том,

00:11:54.920 --> 00:12:00.120
что может масштабироваться практически бесконечно

00:12:00.120 --> 00:12:04.960
и также может масштабироваться в сторону уменьшения при

00:12:04.960 --> 00:12:06.040
необходимости.

00:12:06.040 --> 00:12:09.320
И вы оплачиваете только за то, что вы используете.

00:12:09.320 --> 00:12:12.320
В случае, если у вас нет нагрузки на ваше приложение

00:12:12.320 --> 00:12:16.200
и на таблицу DynamoDB, то вы за эту таблицу не оплачиваете.

00:12:16.200 --> 00:12:19.340
Оплачиваете только за хранение данных, что является

00:12:19.340 --> 00:12:25.080
меньшей статьей расходов по сравнению с операциями

00:12:25.080 --> 00:12:27.640
чтения и записи с таблицы.

00:12:27.640 --> 00:12:31.520
Если же у вас большая нагрузка, то все запросы, которые

00:12:31.520 --> 00:12:34.280
придут, они будут успешно обработаны.

00:12:34.280 --> 00:12:40.200
Все запросы будут отработаны single-digit millisecond, то есть

00:12:40.200 --> 00:12:47.680
не более 10 миллисекунд и будет масштабировано

00:12:47.680 --> 00:12:51.120
по необходимости.

00:12:51.120 --> 00:12:54.560
Другой момент это то, что DynamoDB работает в рамках

00:12:54.560 --> 00:12:56.000
одного региона.

00:12:56.000 --> 00:12:59.140
Данные реплицируются в несколько availability zone,

00:12:59.140 --> 00:13:01.880
но при необходимости вы можете включить опцию

00:13:01.880 --> 00:13:03.240
global stable.

00:13:03.240 --> 00:13:08.240
Таким образом одна таблица DynamoDB продолжит работать

00:13:08.240 --> 00:13:10.880
в нескольких AWS регионах.

00:13:10.880 --> 00:13:14.240
Также мы с вами затронули тему read consistency.

00:13:14.240 --> 00:13:20.600
Она обывает двух видов eventual consistency и strong consistency.

00:13:20.600 --> 00:13:25.160
Для каждой операции, связанной с DynamoDB, вы можете определять.

00:13:25.160 --> 00:13:29.480
Она будет отработана как eventual consistency, либо как

00:13:29.480 --> 00:13:33.760
strong consistency.

00:13:33.760 --> 00:13:36.640
Мы с вами добрались до пятой секции и сейчас затронем

00:13:36.640 --> 00:13:40.200
вопросы, связанные с безопасностью наших баз данных.

00:13:40.200 --> 00:13:44.360
Если мы говорим про сервис Amazon RDS, то крайне рекомендуется

00:13:44.360 --> 00:13:47.480
создавать instance базы данных в VPC.

00:13:47.480 --> 00:13:50.360
Благодаря этому вы можете ограничить доступ к вашей

00:13:50.360 --> 00:13:53.840
базе данных, используя security группы, либо Network

00:13:53.840 --> 00:13:57.640
Bill, и таким образом оставить права доступа только для

00:13:57.640 --> 00:14:00.720
тех ресурсов, которые могут и должны обращаться к базе

00:14:00.720 --> 00:14:01.720
данных.

00:14:01.720 --> 00:14:07.840
Используя IAM policy вы также можете ограничить доступ

00:14:07.840 --> 00:14:11.880
к ресурсам, у которых есть возможность добраться

00:14:11.880 --> 00:14:18.080
до базы данных по сети, но при этом должен быть ограниченный

00:14:18.080 --> 00:14:21.960
набор прав на определенные таблицы в рамках вашей

00:14:21.960 --> 00:14:24.520
базы данных.

00:14:24.520 --> 00:14:28.360
Для того чтобы обезопасить ваши данные во время передачи,

00:14:28.360 --> 00:14:30.800
необходимо включить шифрование SSL.

00:14:30.800 --> 00:14:35.320
Также для того, чтобы ваши данные хранились от REST,

00:14:35.320 --> 00:14:39.240
то есть во время хранения, вам необходимо включить

00:14:39.240 --> 00:14:43.960
шифрование и ваша база данных, а также все снапшоты,

00:14:43.960 --> 00:14:47.440
созданные от этой базы данных, будут также зашифрованы.

00:14:47.440 --> 00:14:50.520
В зависимости от движка базы данных для вас могут

00:14:50.520 --> 00:14:55.280
быть доступны те или иные возможности для дополнительного

00:14:55.280 --> 00:15:02.200
увеличения безопасности ваших баз данных.

00:15:02.200 --> 00:15:07.000
Если же мы говорим про безопасность сервиса Amazon DynamoDB, все, что

00:15:07.000 --> 00:15:10.800
было сказано на предыдущем слайде применимо и здесь.

00:15:10.800 --> 00:15:13.800
Вы также можете воспользоваться IAM-ролями и полисами для

00:15:13.800 --> 00:15:16.640
того, чтобы предоставить необходимый минимальный

00:15:16.640 --> 00:15:19.120
доступ к AWS ресурсам.

00:15:19.120 --> 00:15:26.880
Также если с таблицей DynamoDB будет работать только ресурсы

00:15:26.880 --> 00:15:31.280
из определенного VPC, то рекомендуется создать VPC

00:15:31.280 --> 00:15:39.180
Endpoint и таким образом вы закроете доступ ко всем

00:15:39.180 --> 00:15:44.440
внешним обращениям к вашей таблице, кроме как с необходимого

00:15:44.440 --> 00:15:45.440
VPC.

00:15:45.440 --> 00:15:49.680
Вказательно шифрования данных, вы также можете

00:15:49.680 --> 00:15:53.440
зашифровать данные как во время передачи, так и

00:15:53.440 --> 00:15:57.260
во время хранения.

00:15:57.260 --> 00:16:00.360
Мы с вами добрались до самой последней, шестой секции.

00:16:00.360 --> 00:16:04.280
Эта секция посвящена вопросам миграции в сервисы базы

00:16:04.280 --> 00:16:06.880
данных AWS.

00:16:06.880 --> 00:16:10.480
Самым основным сервисом в рамках темы миграции является

00:16:10.480 --> 00:16:13.920
сервис AWS DMS.

00:16:13.920 --> 00:16:16.880
Шифруется как Database Migration Service.

00:16:16.880 --> 00:16:21.000
Используя этот сервис вы можете базу данных, установленную

00:16:21.000 --> 00:16:25.200
на локальном дата центре, либо самостоятельно установленную

00:16:25.200 --> 00:16:30.920
в ИСЦУ машине перенести в один из сервисов баз данных

00:16:30.920 --> 00:16:34.920
AWS.

00:16:34.920 --> 00:16:39.320
Обратите внимание, что вы можете делать перенос с

00:16:39.320 --> 00:16:43.560
использованием сервиса DMS из одного движка в другой

00:16:43.560 --> 00:16:44.560
движок.

00:16:44.560 --> 00:16:49.720
Чтобы это произвести необходимо использовать инструмент

00:16:49.720 --> 00:16:54.320
AWS Schema Conversion Tool либо AWS SCT.

00:16:54.320 --> 00:16:59.560
Она позволяет учитывать структуру таблиц в исходной

00:16:59.560 --> 00:17:08.640
базе данных и создать аналогичную структуру баз данных,

00:17:08.640 --> 00:17:16.880
занимающей базе данных с учетом специфики ее движка.

00:17:16.880 --> 00:17:20.040
Обратите внимание также, что DMS поддерживает не только

00:17:20.040 --> 00:17:22.840
одноразовые миграции, вы также можете настроить

00:17:22.840 --> 00:17:27.940
постоянную репликацию ваших данных, что может быть

00:17:27.940 --> 00:17:30.200
необходимым в определенных случаях.

00:17:30.200 --> 00:17:37.960
Вполне может быть такое, что по тем или иным причинам

00:17:37.960 --> 00:17:40.880
вы не можете напрямую вашу локальную базу данных

00:17:40.880 --> 00:17:46.520
переносить в AWS с использованием сервиса AWS DMS.

00:17:46.520 --> 00:17:50.280
Самые популярные причины это слишком большая база

00:17:50.280 --> 00:17:54.520
данных, либо слабое интернет соединение и третье по регуляторным

00:17:54.520 --> 00:17:56.040
требованиям вы не можете это сделать.

00:17:56.040 --> 00:18:00.080
В этом случае также имеется выход необходимо использовать

00:18:00.080 --> 00:18:02.720
сервис AWS Snowball Edge.

00:18:02.720 --> 00:18:09.020
Мы с вами помним, что AWS Snowball Edge это когда чемодан отправляется

00:18:09.020 --> 00:18:14.080
от AWS к вам в офис, вы этот физический чемодан подключаете

00:18:14.080 --> 00:18:16.760
к вашей локальной сети и передаете ваши данные.

00:18:16.760 --> 00:18:19.880
В этом случае вам необходимо будет воспользоваться сервисом

00:18:19.880 --> 00:18:26.000
AWS S-сети для того, чтобы трансформировать вашу базу данных и все данные

00:18:26.000 --> 00:18:28.360
перенести в Snowball Edge.

00:18:28.360 --> 00:18:31.400
Далее вы этот физический чемодан отправляете обратно

00:18:31.400 --> 00:18:36.200
в AWS, AWS как только ее получает используя также локальную

00:18:36.200 --> 00:18:38.880
сеть достаточно быстро переносит все эти данные

00:18:38.880 --> 00:18:40.440
в S3 Bucket.

00:18:40.440 --> 00:18:44.880
Здесь вы начинаете подключать сервис AWS DMS как source используете

00:18:44.880 --> 00:18:50.560
S3 Bucket и как target database используете тот сервис баз данных, который

00:18:50.560 --> 00:18:51.560
вам нужен.

00:18:51.560 --> 00:18:58.960
На этом мы подошли к концу шестой, самой последней

00:18:58.960 --> 00:19:02.400
секции в рамках темы связанной с базами данных.

00:19:02.400 --> 00:19:11.440
Это также является завершением этой сегодняшней лекции.

00:19:11.440 --> 00:19:14.280
Напоминаю, что мы с вами подробнее познакомились

00:19:14.280 --> 00:19:19.080
с сервисом Amazon RDS, далее поговорили про сервис Amazon

00:19:19.080 --> 00:19:23.320
DynamatDB, рассмотрели вопросы безопасности и вопросы

00:19:23.320 --> 00:19:29.280
миграции из локальной базы данных в один из сервисов

00:19:29.280 --> 00:19:31.760
баз данных AWS.

00:19:31.760 --> 00:19:35.880
На этом слайде вы видите полезные ссылки, вам достаточно

00:19:35.880 --> 00:19:44.160
в поисковике вбить ключевые слова и таким образом первая

00:19:44.160 --> 00:19:49.800
ссылка в выдаче она будет та, которую вы ищите.

00:19:49.800 --> 00:19:52.920
На этом мы подошли к концу нашей сегодняшней лекции.

00:19:52.920 --> 00:19:55.520
Я очень надеюсь, она дала вам полное представление

00:19:55.520 --> 00:19:58.000
о базах данных в AWS.

00:19:58.000 --> 00:20:01.040
Спасибо за внимание, увидимся с вами на следующих наших

00:20:01.040 --> 00:20:29.040
активностях.