Қайырлы күн, құрметті студенттер, барлығыңызды көргеніме қуаныштымын. Біз дерекқор бойынша дәрістер топтамасын жалғастырамыз. Бүгін екінші және соңғы бөлім. Ендеше, бастайық. Дәріс үш бөлімнен тұрады. Нөмірлеу үздіксіз болғандықтан, төртінші бөлімнен бастаймыз. Ол Amazon DynamoDB сервисіне арналған. DynamoDB — Managed Database service, NoSQL дерекқор түрі. Бесінші бөлім қауіпсіздік мәселелеріне арналған. Мұнда Amazon RDS және Amazon DynamoDB мысалдарын пайдаланып осы мәселелерді қарастырамыз. Ал соңғы, алтыншы бөлім жергілікті дата-центрінен AWS сервистеріне көшу мәселелеріне қатысты. Тасымалдау процесін жеңілдетуге көмектесетін бірнеше сервистерді қарастырамыз. Сондай-ақ, осы аптада зертханалық жұмыс бар екенін еске саламыз. Бұл зертханалық жұмыстың тақырыбы – «Дерекқорларды Amazon RDS-ке көшіру», екі белсенділік болады - зертханалық жұмысқа кіріспе және талдау. Төртінші бөлімді бастаймыз. Ол Amazon DynamoDB сервисі туралы. Негізгі мәселелерге тоқталайық. Amazon DynamoDB – Fully Managed Database Service және реляциялық емес кілт-мән дерекқоры болып табылады. Яғни, әрбір жолда кейбір кілт пен мәнді сақтаймыз. Amazon DynamoDB сервисінің негізгі артықшылықтары туралы айтатын болсақ, оны шексіз дерлік өлшемдерге дейін масштабтауға болады. Сондай-ақ, бізге Single Digit Millisecond Response Time ұсынады. Идеясы: әрқашан 10 миллисекунд ішінде жауап береді, жылдам және көптеген қолданбалар үшін қолайлы. Сонымен қатар, бұл сервис serverless болғандықтан, бізге серверлерге қызмет көрсету, қауіпсіздік патчтарын, жаңартуларды орнату және т.б. қажет емес. Сондай-ақ, software, яғни бағдарламалық жасақтаманы орнатудың қажеті жоқ. Бұл пайдалануды бастауды айтарлықтай жеңілдетеді. Егер DynamoDB-мен пайдалануға қолайлы қолданбалар туралы айтатын болсақ, бұл қолданбаңыз деректердің үлкен көлемімен, яғни 1 терабайттан астам көлеммен жұмыс істейтін жағдайлар. Бұл дерекқорыңыз өте тез өсіп жатқанда және қолданбаңызды сақтайтын және тез масштабталатын сервис қажет болғанда да болады. Қолданбаңызға аналитика қажет болмаса, яғни ол күрделі біріктірулері бар сұрауларды қамтымаса, керісінше қарапайым тікелей сұрауларды қамтыса, DynamoDB да қолайлы нұсқа болып табылады. DynamoDB — NoSQL дерекқоры. Әрбір жолда мән кілтін сақтайсыз. Әрбір жолда бірнеше баған болуы мүмкін және баған атаулары еш жолмен шектелмейді. Яғни, олар әрбір жол үшін бірегей болуы мүмкін. Осылайша, нақты құрылым жоқ, өйткені біз реляциялық мәліметтер базасымен жұмыс істеуге үйрендік. Мұнда кесте құрылымы қажетінше кез келген уақытта өзгеруі мүмкін. Енді DynamoDB дерекқоры неден тұратынын егжей-тегжейлі қарастырайық. Реляциялық дерекқорымен жұмыс істегенде бізде бірнеше кестелер болатыны есімізде. Бұл кестелер өзара байланысты және осылайша осы кестелерде барлық қажетті деректерді сақтайсыз. DynamoDB жағдайында, мұнда DynamoDB инстансы жасалғанда, бір үлкен кесте жасалады. Деректерді және құрылымды реляциялық дерекқордан DynamoDB-ге тасымалдаған кезде, реляциялық дерекқордағы барлық кестелер бір DynamoDB кестесіне тасымалданады. Әрі қарай, data elements немесе items ұғымдары бар. Бұл - дәл сол жолдың өзі. Әрбір жол әртүрлі атрибуттардан тұрады. Әрбір атрибуттың кілті мен мәні бар. Сондай-ақ, әрбір item үшін, яғни әрбір жол үшін hash кілті бар. Бұл оны бірегей түрде анықтайтын кілт. Hash кілті қарапайым немесе құрама болуы мүмкін. Ол құрама болған кезде primary key және sort key пайдаланылады, яғни ол қосалқы кілт болып табылады. Содан кейін слайдта динамикалық ұяшықтар қызғылт түспен бөлектелгенін көресіз. Яғни, әрбір жол үшін қосымша атрибуттардың бірегей жиынтығы болуы мүмкін. Әрбір атрибуттың кілті мен мәні бар. Әдепкі бойынша, DynamoDB кестесі бір аймақтағы бірнеше availability zone-ға клондалады. Бірақ бірнеше AWS аймақтарынан қол жетімді болатын кесте қажет болатын кездер болады. Бұл жағдайда Global table опциясын қосуға және қажетті аймақтарды көрсетуге болады, содан кейін DynamoDB кестесі барлық көрсетілген аймақтардан қолжетімді болады. Егер әртүрлі аймақтардағы пайдаланушылары бар қолданба болса, бұл өте ыңғайлы болуы мүмкін. Бұл жағдайда бір аймақтан кестеге өзгертулер енгізілгенде, бұл өзгерістер басқа аймақтардағы кестеге клондалады. Сонымен қатар, егер бір аймақ қолжетімсіз болса, пайдаланушылар қолданбаңызбен жұмыс істеуді жалғастыра алады, бірақ енді басқа аймақтағы кестемен жұмыс істейді. Осылайша, ол қолданбаңыздың қолжетімділігін арттырады. Енді Amazon DynamoDB сервисін пайдаланудың танымал жағдайларын қарастырайық. Ең танымал мысал - кестені рейтинг кестесі ретінде пайдалану. Біздің мысалда Electronic Arts атты компания бар, ол ойындарды әзірлейді және миллиондаған белсенді пайдаланушылар осы компанияның қосымшаларын күнделікті пайдаланады. Секундына 100 мыңға дейін сұраныс түсуі мүмкін және дүние жүзінде 300 миллионнан астам тіркелген пайдаланушылар бар. Яғни, бұл компанияның барлық қосымшаларына айтарлықтай үлкен жүктеме және ол Amazon DynamoDB сервисінде рейтинг кестесін енгізді. Мұнда User ID, primary key ретінде пайдаланушы ID көрсетілгенін көресіз. Әрі қарай, Game, sort key, яғни қосымша кілт ретінде Game title бар. Содан кейін қосымша кілттер бар. Кейбір кілттер бірдей болуы мүмкін, мысалы, Top Score, Top Score Date Time, Wins, Losses және белгілі бір ойынға тән қосымша өрістер болуы мүмкін. Amazon DynamoDB үшін тағы бір танымал қолдану жағдайы - бұл веб-сайттағы сатып алу арбасы. Бұл өте маңызды деректер, олардың жоғалуы компания үшін айтарлықтай шығындарға әкелуі мүмкін, бірақ соған қарамастан, бұл өзінің табиғаты бойынша уақытша деректер. Сонымен, бұл жағдайда DynamoDB өте қолайлы, өйткені ол пайдаланушылар санының кенеттен өсуіне қолдау көрсете алады, ол барлық сұрауларды сәтті өңдей алады, ал сайтта пайдаланушылар болмаған жағдайда автоматты түрде қажетті өлшемге дейін азаяды және сіз тек пайдаланғаныңыз үшін төлейсіз. Read consistency дегеніміз не? Бұл деректер жазылғаннан немесе жаңартылғаннан кейін қолжетімді болған кездегі жағдай. Егер жаңартылған деректер дереу қол жетімді болса, онда бұл жағдайда бұл strongly consistent операция деп айтамыз. Жазу немесе жаңартудан кейін деректер бірден қол жетімді болмаса, бір секундтан кейін немесе 10 секундтан кейін болсын, белгілі бір уақыттан кейін ғана қолжетімді болса, онда бұл eventually consistent операция деп аталады. Amazon DynamoDB екі тәсілді де қолдайды. Әдепкі бойынша, eventually consistent операциялар қосылады, яғни деректер аймақтағы бірнеше availability zone-да қайталанатынын және деректерді жазған кезде бір секунд ішінде барлық басқа availability zone-ға көшірілетінін есте сақтаймыз. Осылайша, жазбаны жаңартсаңыз немесе жаңа жазба қоссаңыз және оны дереу сұрауға тырыссаңыз, ол ескі деректерді қайтаруы немесе жазба әлі жасалмаған хабарды қайтаруы мүмкін. Бұл қолданбаңызға ыңғайлы болса, eventually consistent operations пайдалануды жалғастыра бересіз. Өзгерістердің дереу пайда болуы қажет болса, strongly consistent опцияны пайдалану керек. Оны кез келген операция деңгейінде іске қосуға болады, яғни кейбір операцияларды маңызды емес деректер ретінде eventually consistent деп жазуға болады, ал маңыздылары болса, мұны strongly consistent ретінде орындағыңыз келетінін көрсететін құсбелгіні қосу арқылы жазасыз. Яғни, барлық өзгерістер бірден пайда болады және келесі рет кіргенде қолжетімді болады. Осымен біз Amazon DynamoDB сервисіне қатысты ең негізгі және маңызды сәттерді қарастырдық. Бұл fully managed non-relational key-value database service, яғни бұл бізге реляциялық емес кілт-мән дерекқорларын ұсынатын толық басқарылатын AWS сервисі екенін есте ұстаған жөн. Бұл сервис serverless, яғни оны шексіз дерлік масштабтауға болады және қажет болған жағдайда кішірейтуге болады. Ал сіз тек пайдаланғаныңыз үшін төлейсіз. Қолданбаңызда және DynamoDB кестесінде жүктеме болмаса, онда бұл кесте үшін төлемейсіз. Тек деректерді сақтау үшін төлейсіз, бұл кестеден оқу және жазу операцияларымен салыстырғанда азырақ шығындар. Егер сізде үлкен жүктеме болса, онда келген барлық сұраулар сәтті өңделеді. Барлық сұраулар single-digit millisecond өңделеді, яғни 10 миллисекундтан аспайды және қажетінше масштабталады. Тағы бір мәселе, DynamoDB бір аймақ аясында жұмыс істейді. Деректер бірнеше availability zone-ға көшіріледі, бірақ қажет болса, Global table қосуға болады. Осылайша, бір DynamoDB кестесі бірнеше AWS аймақтарында жұмысын жалғастырады. Сондай-ақ, read consistency тақырыбын да қозғадық. Ол екі түрлі болады: eventual consistency және strong consistency. DynamoDB-мен байланысты әрбір операция үшін оның eventual consistency немесе strong consistency ретінде өңделетінін анықтауға болады. Біз бесінші бөлімге жеттік, енді дерекқорларымыздың қауіпсіздігіне қатысты мәселелерге тоқталамыз. Егер Amazon RDS сервисі туралы айтатын болсақ, онда VPC-де дерекқор инстансын жасау ұсынылады. Осының арқасында Security groups немесе Network ACL көмегімен дерекқорға кіруді шектей аласыз, осылайша дерекқорға қатынаса алатын және кіруі тиіс ресурстарға ғана кіру құқығын қалдыра аласыз. IAM policy пайдалану арқылы, сондай-ақ, желі арқылы дерекқорға қол жеткізу мүмкіндігі бар ресурстарға кіруді шектей аласыз, бірақ дерекқордағы белгілі кестелерге шектеулі құқықтар жиынтығы болуы керек. Тасымалдау кезінде деректеріңізді қорғау үшін SSL шифрлауын қосу керек. Сондай-ақ, деректеріңіз at rest, яғни сақтау кезінде сақталуы үшін шифрлауды қосу керек және дерекқор, сондай-ақ осы дерекқордан жасалған барлық снапшоттар да шифрланады. Дерекқор қозғалтқышына байланысты дерекқорларыңыздың қауіпсіздігін одан әрі жақсарту үшін сізге қолжетімді опциялар болуы мүмкін. Егер Amazon DynamoDB сервисінің қауіпсіздігі туралы айтатын болсақ, алдыңғы слайдта айтылғандардың бәрі осында да қолданылады. Сондай-ақ, AWS ресурстарына қажетті минималды қолжетімділікті қамтамасыз ету үшін IAM roles пен IAM policies пайдалануға болады. Егер DynamoDB кестесімен белгілі бір VPC ресурстары ғана жұмыс істейтін болса, онда VPC Endpoint жасау ұсынылады, осылайша кестеге қажетті VPC-ден басқа барлық сыртқы қатынасқа кіруді шектейсіз. Деректерді шифрлауға қатысты деректерді тасымалдау кезінде де, сақтау кезінде де шифрлауға болады. Біз ең соңғы, алтыншы бөлімге жеттік. Бұл бөлім AWS дерекқор сервистеріне тасымалдау мәселелерін қамтиды. Тасымалдау тақырыбының ең негізгі сервисі AWS DMS сервисі болып табылады. Толығымен Database Migration Service деп аталады. Бұл сервисті пайдалана отырып, жергілікті дата-центрде орнатылған дерекқорды немесе EC2 құрылғысында өзіңіз орнатқан дерекқорды AWS дерекқор сервистерінің біріне тасымалдауға болады. DMS сервисін пайдаланып бір қозғалтқыштан екінші қозғалтқышқа тасымалдауға болатынын ескеріңіз. Ол үшін AWS Schema Conversion Tool құралын немесе AWS SCT пайдалану керек. Ол бастапқы дерекқордағы кестелердің құрылымын есепке алуға және қозғалтқышының ерекшеліктерін ескере отырып, қабылдаушы дерекқорында ұқсас деректер базасының құрылымын жасауға мүмкіндік береді. Сондай-ақ, DMS бір реттік тасымалдауларды қолдап қана қоймайды, сонымен қатар белгілі бір жағдайларда қажет болуы мүмкін деректеріңіздің үздіксіз қайталануын орнатуға болатынын ескеріңіз. AWS DMS сервисін пайдаланып, бір себептермен жергілікті дерекқорды AWS жүйесіне тікелей тасымалдай алмауыңыз мүмкін. Ең танымал себептер - деректер базасының тым үлкен болуы немесе Интернетке қосылудың әлсіздігі, үшіншіден, нормативтік талаптарға байланысты. Бұл жағдайда AWS Snowball Edge сервисін пайдалануыңыз керек. AWS Snowball Edge - чемодан AWS-тен кеңсеңізге жіберілгенде, бұл физикалық чемоданды жергілікті желіге қосып, деректеріңізді тасымалдайтынын есте ұстаймыз. Бұл жағдайда дерекқорды түрлендіру және барлық деректерді Snowball Edge-ге тасымалдау үшін AWS SCT сервисін пайдалану қажет болады. Әрі қарай, бұл физикалық чемоданды AWS-ке қайта жібересіз, AWS оны алған бойда жергілікті желіні пайдалана отырып, ол барлық деректерді S3 Bucket-ке жылдам тасымалдайды. Мұнда AWS DMS сервисін қосуды бастайсыз, source ретінде S3 Bucket және Target ретінде қажетті дерекқор сервисін көрсетесіз. Осымен дерекқорға қатысты тақырыптағы алтыншы және ең соңғы бөлімнің соңына жеттік. Сондай-ақ, бүгінгі дәріс те аяқталды. Еске сала кетейін, біз Amazon RDS сервисімен толығырақ таныстық, содан кейін Amazon DynamoDB сервисі туралы сөйлестік, қауіпсіздік мәселелерін және жергілікті дерекқордан AWS дерекқор сервистерінің біріне көшу мәселелерін қарастырдық. Бұл слайдта пайдалы сілтемелерді көресіз, іздеу жүйесіне кілт сөздерді енгізу жеткілікті, осылайша іздеу нәтижелеріндегі бірінші сілтеме іздеген сілтеме болады. Осымен бүгінгі дәрісімізді аяқтаймыз. Бұл дәріс AWS дерекқорлары туралы толық түсінік берді деп үміттенемін. Назарларыңызға рахмет, келесі белсенділіктерде кездескенше.