 Добрый день, уважаемые студенты, рад вас всех видеть. Сегодня мы с вами продолжаем серию лекций, посвященных базам данных. Сегодня вторая и заключительная часть. Итак, давайте начнем. Сегодняшняя лекция состоит из трех частей. Так как нумерация сквозная, то мы начинаем с четвертой секции. Она посвящена сервису Amazon DynamoDB. DynamoDB это Managed Database Service, по типу является NoSQL базами данных. Пятая секция посвящена вопросам безопасности. Здесь мы рассмотрим эти моменты на примере сервиса Amazon RDS и Amazon DynamoDB. И самая последняя, шестая секция связана с вопросами миграции с локального дата центра на сервисе AWS. Мы познакомимся с несколькими сервисами, которые помогают нам упростить процесс миграции. Также напоминаю, что на этой неделе у нас будет лабораторная работа. Тема этой лабораторной работы «Миграция баз данных на Amazon RDS» будет две активности – введение и разбор лабораторной работы. Мы с вами начинаем четвертую секцию. Она у нас про сервис Amazon DynamoDB. Давайте остановимся на самых основных моментах. Amazon DynamoDB это Fully Managed Database Service, по типу является нерелационной Key Value базой данных. То есть мы в каждой строчке храним некоторые ключи и значения. Если говорить о основных преимуществах сервиса Amazon DynamoDB, то оно может масштабироваться практически до неограниченных размеров. Также предоставляет нам Single Digit Millisecond Response Time. Идея в том, что оно отвечает нам всегда в рамках 10 миллисекунд. То есть достаточно быстро и подходит для большинства приложений. Более того, так как это сервис является Serverless, нам нет необходимости поддерживать сервера, устанавливать патчи безопасности, обновления и так далее. Также нет необходимости устанавливать Software, то есть программное обеспечение. И таким образом достаточно легко ее начать использовать. Если говорить про приложения, которые хорошо подходят для использования с DynamoDB, это случаи, когда у вас приложение работает с большим объемом данных, то есть это более 1 терабайта. Также тот случай, когда ваша база данных достаточно быстро растет и вам нужен сервис, который будет за вашим приложением поспевать и также быстро масштабироваться. Если в вашем приложении нет необходимости какой-либо аналитики, то есть не содержится запросов со сложными джойнами, а достаточно простые прямые запросы, то в этом случае DynamoDB также является подходящим вариантом. DynamoDB является NoSQL базой данных. Вы храните в каждой строчке ключ значения. В каждой строке может быть несколько колонок и названия колонок они не ограничены ничем. То есть они могут быть уникальными для каждой строчки. Таким образом нет какой-то определенной структуры, как мы привыкли работать с релационными базами данных. Здесь структура таблицы, она может меняться в любое время по необходимости. Теперь давайте подробнее посмотрим, из чего же состоит база данных DynamoDB. Мы с вами помним, что при работе с релационными базами данных у нас есть несколько таблиц. Эти таблицы связаны между собой и таким образом все необходимые данные вы храните в этих таблицах. Когда мы говорим DynamoDB, то здесь при создании инстенса DynamoDB создается одна единственная большая таблица. И при переносе данных и структуры с релационной базы данных в DynamoDB все таблицы, которые у вас были в релационной базе данных, они переносятся в одну таблицу DynamoDB. Далее внутри у нас есть так называемые data-элементы либо items. Это как раз таки строчка. Каждая строчка состоит из различных атрибутов. Каждый атрибут это ключ и значение. Также для каждого айтема, то есть для каждой строчки есть hash key. Это ключ, по которому оно уникально идентифицируется. Hash-ключ, он может быть простым и составным. Когда он составной, то используются primary key и sort key. То есть это второстепенный ключ. Далее вы видите на слайде розовым выделены ячейки, которые являются динамическими. То есть для каждой строчки может быть уникальный набор дополнительных атрибутов. Каждый атрибут это ключ и значение. По умолчанию таблица DynamoDB, она клонируется в несколько availability zone в рамках одного региона. Но бывают случаи, когда вам нужно, чтобы таблица была доступна из нескольких AWS регионов. В этом случае вы можете включить опцию global table и указать необходимые регионы, после чего таблица DynamoDB станет доступна из всех указанных регионов. Это может быть достаточно удобно, если у вас приложение с пользователями из различных регионов. В этом случае при внесении изменений в таблицу с одного региона, эти изменения клонируются в таблице в других регионах. Более того, если один регион становится недоступным, то пользователи смогут продолжать работать с вашим приложением, но уже работать с таблицей из другого региона. Таким образом, это увеличивает доступность вашего приложения. Давайте теперь остановимся на популярных юсткейсах сервиса Amazon DynamoDB. Самый популярный пример это использование таблицы как таблица рейтинга. В нашем примере есть у нас компания Electronic Arts, которая разрабатывает игры и ежедневно использует приложения этой компании миллионы активных пользователей. В секунду могут приходить до 100 тысяч запросов, а по всему миру зарегистрировано более 300 миллионов пользователей. То есть, это достаточно большие нагрузки на все приложения этой компании и таблицу рейтинга она реализовала в сервисе Amazon DynamoDB. Вы видите, что здесь как user ID, primary key, указан ID пользователя. Далее, как game, как sort key, то есть secondary key, у нас является game title. И далее у нас есть опциональные ключи. Некоторые ключи, они могут совпадать, например, top score, top score date time, wins, loses и могут быть дополнительные поля, которые специфичны для определенной игры. Следующим достаточно популярным примером использования сервиса Amazon DynamoDB является корзина в веб-сайте. Это достаточно важные данные, потеря которых может привести к значительным убыткам компании, но тем не менее по характеру своему является временными данными. Так вот, в этом случае DynamoDB она идеально подходит, так как может поддерживать внезапное увеличение количества пользователей, все всплески она успешно сможет обработать и в случае, когда нет пользователей на сайте, она также автоматически уменьшается до необходимых размеров и вы платите только за то, что вы используете. Что такое read consistency? Это когда данные становятся доступны после их записи либо обновления. В случае, если обновленные данные становятся доступны сразу, то в этом случае мы говорим, что это strong consistent операция. Если же данные после записи либо обновления становятся доступными не сразу, а через какое-то время, вне зависимости от того, через одну секунду, через 10 секунд, то это называется eventually consistent операция. Amazon DynamoDB поддерживает оба подхода. По умолчанию включен eventually consistent операции, то есть мы с вами помним, что данные они реплицируются в несколько availability zone в рамках региона и в момент, когда вы записываете данные, она в течение одной секунды реплицируется на все другие availability zone. Таким образом, если вы обновите запись либо добавите новую запись и попробуете ее сразу же запросить, то она может вам вернуть старые данные, либо вернуть информацию о том, что запись еще не создана. Если для вашего приложения это подходит, то вы продолжаете использовать eventually consistent operations. В случае, если вам необходимо, чтобы изменения они появлялись сразу, то вам необходимо использовать опцию strongly consistent. Она может быть активирована на уровне абсолютно каждой операции, то есть некоторые операции вы можете записывать как eventually consistent некритичные данные, а те, которые критичные, вы будете записывать с включенной галочкой о том, что вы эту операцию хотите провести как strongly consistent. То есть все изменения появятся сразу и доступны при следующем обращении. На этом мы разобрали самые основные и важные моменты, связанные с сервисом Amazon DynamoDB. Необходимо запомнить, что это fully managed non-relational key value database service, то есть это полностью управляемое AWS сервис, которое предоставляет нам нерелационные базы данных типа ключ-значение. Также этот сервис является serverless, что говорит о том, что может масштабироваться практически бесконечно и также может масштабироваться в сторону уменьшения при необходимости. И вы оплачиваете только за то, что вы используете. В случае, если у вас нет нагрузки на ваше приложение и на таблицу DynamoDB, то вы за эту таблицу не оплачиваете. Оплачиваете только за хранение данных, что является меньшей статьей расходов по сравнению с операциями чтения и записи с таблицы. Если же у вас большая нагрузка, то все запросы, которые придут, они будут успешно обработаны. Все запросы будут отработаны single-digit millisecond, то есть не более 10 миллисекунд и будет масштабировано по необходимости. Другой момент это то, что DynamoDB работает в рамках одного региона. Данные реплицируются в несколько availability zone, но при необходимости вы можете включить опцию global stable. Таким образом одна таблица DynamoDB продолжит работать в нескольких AWS регионах. Также мы с вами затронули тему read consistency. Она обывает двух видов eventual consistency и strong consistency. Для каждой операции, связанной с DynamoDB, вы можете определять. Она будет отработана как eventual consistency, либо как strong consistency. Мы с вами добрались до пятой секции и сейчас затронем вопросы, связанные с безопасностью наших баз данных. Если мы говорим про сервис Amazon RDS, то крайне рекомендуется создавать instance базы данных в VPC. Благодаря этому вы можете ограничить доступ к вашей базе данных, используя security группы, либо Network Bill, и таким образом оставить права доступа только для тех ресурсов, которые могут и должны обращаться к базе данных. Используя IAM policy вы также можете ограничить доступ к ресурсам, у которых есть возможность добраться до базы данных по сети, но при этом должен быть ограниченный набор прав на определенные таблицы в рамках вашей базы данных. Для того чтобы обезопасить ваши данные во время передачи, необходимо включить шифрование SSL. Также для того, чтобы ваши данные хранились от REST, то есть во время хранения, вам необходимо включить шифрование и ваша база данных, а также все снапшоты, созданные от этой базы данных, будут также зашифрованы. В зависимости от движка базы данных для вас могут быть доступны те или иные возможности для дополнительного увеличения безопасности ваших баз данных. Если же мы говорим про безопасность сервиса Amazon DynamoDB, все, что было сказано на предыдущем слайде применимо и здесь. Вы также можете воспользоваться IAM-ролями и полисами для того, чтобы предоставить необходимый минимальный доступ к AWS ресурсам. Также если с таблицей DynamoDB будет работать только ресурсы из определенного VPC, то рекомендуется создать VPC Endpoint и таким образом вы закроете доступ ко всем внешним обращениям к вашей таблице, кроме как с необходимого VPC. Вказательно шифрования данных, вы также можете зашифровать данные как во время передачи, так и во время хранения. Мы с вами добрались до самой последней, шестой секции. Эта секция посвящена вопросам миграции в сервисы базы данных AWS. Самым основным сервисом в рамках темы миграции является сервис AWS DMS. Шифруется как Database Migration Service. Используя этот сервис вы можете базу данных, установленную на локальном дата центре, либо самостоятельно установленную в ИСЦУ машине перенести в один из сервисов баз данных AWS. Обратите внимание, что вы можете делать перенос с использованием сервиса DMS из одного движка в другой движок. Чтобы это произвести необходимо использовать инструмент AWS Schema Conversion Tool либо AWS SCT. Она позволяет учитывать структуру таблиц в исходной базе данных и создать аналогичную структуру баз данных, занимающей базе данных с учетом специфики ее движка. Обратите внимание также, что DMS поддерживает не только одноразовые миграции, вы также можете настроить постоянную репликацию ваших данных, что может быть необходимым в определенных случаях. Вполне может быть такое, что по тем или иным причинам вы не можете напрямую вашу локальную базу данных переносить в AWS с использованием сервиса AWS DMS. Самые популярные причины это слишком большая база данных, либо слабое интернет соединение и третье по регуляторным требованиям вы не можете это сделать. В этом случае также имеется выход необходимо использовать сервис AWS Snowball Edge. Мы с вами помним, что AWS Snowball Edge это когда чемодан отправляется от AWS к вам в офис, вы этот физический чемодан подключаете к вашей локальной сети и передаете ваши данные. В этом случае вам необходимо будет воспользоваться сервисом AWS S-сети для того, чтобы трансформировать вашу базу данных и все данные перенести в Snowball Edge. Далее вы этот физический чемодан отправляете обратно в AWS, AWS как только ее получает используя также локальную сеть достаточно быстро переносит все эти данные в S3 Bucket. Здесь вы начинаете подключать сервис AWS DMS как source используете S3 Bucket и как target database используете тот сервис баз данных, который вам нужен. На этом мы подошли к концу шестой, самой последней секции в рамках темы связанной с базами данных. Это также является завершением этой сегодняшней лекции. Напоминаю, что мы с вами подробнее познакомились с сервисом Amazon RDS, далее поговорили про сервис Amazon DynamatDB, рассмотрели вопросы безопасности и вопросы миграции из локальной базы данных в один из сервисов баз данных AWS. На этом слайде вы видите полезные ссылки, вам достаточно в поисковике вбить ключевые слова и таким образом первая ссылка в выдаче она будет та, которую вы ищите. На этом мы подошли к концу нашей сегодняшней лекции. Я очень надеюсь, она дала вам полное представление о базах данных в AWS. Спасибо за внимание, увидимся с вами на следующих наших активностях.
