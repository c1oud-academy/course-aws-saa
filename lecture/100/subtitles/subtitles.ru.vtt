WEBVTT

00:00:00.000 --> 00:00:04.480
Добрый день, уважаемые
студенты, рад вас всех видеть.

00:00:04.480 --> 00:00:08.660
Мы с вами продолжаем серию
лекций, посвященных базам данных.

00:00:08.660 --> 00:00:17.380
Сегодня вторая и заключительная часть. Итак, 
давайте начнем. Лекция состоит из трех частей.

00:00:17.380 --> 00:00:26.440
Так как нумерация сквозная, то начинаем с четвертой
секции. Она посвящена сервису Amazon DynamoDB.

00:00:26.440 --> 00:00:35.440
DynamoDB - это Managed Database Service,
по типу является NoSQL базами данных.

00:00:35.440 --> 00:00:42.092
Пятая секция посвящена вопросам 
безопасности. Здесь мы рассмотрим

00:00:42.116 --> 00:00:48.560
эти моменты на примере сервиса
Amazon RDS и Amazon DynamoDB.

00:00:48.560 --> 00:01:01.600
И последняя, шестая секция связана с вопросами
миграции с локального дата-центра на сервисы AWS.

00:01:01.600 --> 00:01:07.120
Мы познакомимся с несколькими сервисами,
которые помогают нам упростить процесс миграции.

00:01:07.120 --> 00:01:12.960
Также напоминаю, что на этой
неделе у нас будет лабораторная работа.

00:01:12.960 --> 00:01:18.107
Тема этой лабораторной работы
«Миграция баз данных на Amazon RDS»,

00:01:18.131 --> 00:01:23.120
будет две активности – введение
и разбор лабораторной работы.

00:01:23.120 --> 00:01:32.840
Мы с вами начинаем четвертую секцию.
Она у нас про сервис Amazon DynamoDB.

00:01:32.840 --> 00:01:38.141
Давайте остановимся на самых основных 
моментах. Amazon DynamoDB - это Fully

00:01:38.165 --> 00:01:44.040
Managed Database Service, по типу является
нереляционной key-value базой данных.

00:01:44.040 --> 00:01:48.160
То есть мы в каждой строчке
храним некоторые ключ и значение.

00:01:48.160 --> 00:01:54.208
Если говорить об основных преимуществах
сервиса Amazon DynamoDB, то

00:01:54.232 --> 00:02:00.280
он может масштабироваться
практически до неограниченных размеров.

00:02:00.280 --> 00:02:06.720
Также предоставляет нам Single
Digit Millisecond Response Time.

00:02:06.720 --> 00:02:12.168
Идея в том, что оно отвечает нам
всегда в рамках 10 миллисекунд,

00:02:12.192 --> 00:02:17.640
то есть достаточно быстро и
подходит для большинства приложений.

00:02:17.640 --> 00:02:22.052
Более того, так как это сервис является
Serverless, нам нет необходимости

00:02:22.076 --> 00:02:27.040
поддерживать сервера, устанавливать
патчи безопасности, обновления и так далее.

00:02:27.040 --> 00:02:33.280
Также нет необходимости устанавливать
Software, то есть программное обеспечение.

00:02:33.280 --> 00:02:40.720
Таким образом достаточно
легко ее начать использовать.

00:02:40.720 --> 00:02:50.047
Если говорить про приложения, которые хорошо
подходят для использования с DynamoDB, это случаи,

00:02:50.071 --> 00:02:59.000
когда у вас приложение работает с большим
объемом данных, то есть это более 1 терабайта.

00:02:59.000 --> 00:03:04.730
Также тот случай, когда ваша база
данных достаточно быстро растет и вам нужен

00:03:04.754 --> 00:03:11.240
сервис, который будет за вашим приложением
успевать и также быстро масштабироваться.

00:03:11.240 --> 00:03:19.228
Если в вашем приложении нет необходимости
какой-либо аналитики, не содержится запросов с

00:03:19.252 --> 00:03:27.240
complex joins, а достаточно простые прямые запросы,
то DynamoDB также является подходящим вариантом.

00:03:27.240 --> 00:03:38.480
DynamoDB является NoSQL базой данных.
Вы храните в каждой строчке ключ значения.

00:03:38.480 --> 00:03:44.320
В каждой строке может быть несколько
колонок и названия колонок не ограничены ничем.

00:03:44.320 --> 00:03:49.320
То есть они могут быть
уникальными для каждой строчки.

00:03:49.320 --> 00:03:58.560
Таким образом нет определенной структуры, как мы
привыкли работать с реляционными базами данных.

00:03:58.560 --> 00:04:12.000
Здесь структура таблицы может
меняться в любое время по необходимости.

00:04:12.000 --> 00:04:17.520
Теперь давайте подробнее посмотрим,
из чего же состоит база данных DynamoDB.

00:04:17.520 --> 00:04:23.320
Мы с вами помним, что при работе с реляционными
базами данных у нас есть несколько таблиц.

00:04:23.320 --> 00:04:30.560
Эти таблицы связаны между собой и таким образом
все необходимые данные вы храните в этих таблицах.

00:04:30.560 --> 00:04:39.120
Когда говорим DynamoDB, при создании инстанса
DynamoDB создается одна единственная большая таблица.

00:04:39.120 --> 00:04:46.628
И при переносе данных и структуры с
реляционной базы данных в DynamoDB, все таблицы,

00:04:46.652 --> 00:04:54.160
которые у вас были в реляционной базе
данных, переносятся в одну таблицу DynamoDB.

00:04:54.160 --> 00:05:00.960
Далее, внутри у нас есть так
называемые data elements либо items.

00:05:00.960 --> 00:05:07.000
Это как раз таки строчка. Каждая строчка 
состоит из различных атрибутов.

00:05:07.000 --> 00:05:15.688
Каждый атрибут - это ключ и значение. Для каждого
item, то есть для каждой строчки, есть hash key.

00:05:15.712 --> 00:05:24.400
Это ключ, по которому оно уникально идентифицируется.
Hash-ключ может быть простым и составным.

00:05:24.400 --> 00:05:33.640
Когда он составной, то используются primary
key и sort key, то есть это второстепенный ключ.

00:05:33.640 --> 00:05:40.720
Далее вы видите на слайде розовым выделены
ячейки, которые являются динамическими.

00:05:40.720 --> 00:05:47.580
То есть для каждой строчки
может быть уникальный набор

00:05:47.604 --> 00:05:55.760
дополнительных атрибутов.
Каждый атрибут это ключ и значение.

00:05:55.760 --> 00:06:03.160
По умолчанию таблица DynamoDB  клонируется в
несколько availability zone в рамках одного региона.

00:06:03.160 --> 00:06:09.680
Но бывают случаи, когда вам нужно, чтобы
таблица была доступна из нескольких AWS регионов.

00:06:09.680 --> 00:06:17.130
В этом случае вы можете включить
опцию Global table и указать необходимые

00:06:17.154 --> 00:06:25.640
регионы, после чего таблица DynamoDB
станет доступна из всех указанных регионов.

00:06:25.640 --> 00:06:32.260
Это может быть достаточно удобно, если у вас
приложение с пользователями из различных регионов.

00:06:32.260 --> 00:06:36.831
В этом случае при внесении
изменений в таблицу с одного

00:06:36.855 --> 00:06:42.360
региона, эти изменения клонируются
в таблице в других регионах.

00:06:42.360 --> 00:06:46.812
Более того, если один регион становится
недоступным, то пользователи смогут продолжать

00:06:46.836 --> 00:06:50.920
работать с вашим приложением, но уже
работать с таблицей из другого региона.

00:06:50.920 --> 00:06:57.800
Таким образом, это увеличивает
доступность вашего приложения.

00:06:57.800 --> 00:07:07.760
Давайте теперь остановимся на популярных
use кейсах сервиса Amazon DynamoDB.

00:07:07.760 --> 00:07:12.280
Самый популярный пример - это
использование таблицы как таблица рейтинга.

00:07:12.280 --> 00:07:20.648
В нашем примере есть у нас компания
Electronic Arts, которая разрабатывает игры

00:07:20.672 --> 00:07:29.040
и ежедневно использует приложения этой
компании миллионы активных пользователей.

00:07:29.040 --> 00:07:33.608
В секунду могут приходить до
100 тысяч запросов, а по всему

00:07:33.632 --> 00:07:38.200
миру зарегистрировано более
300 миллионов пользователей.

00:07:38.200 --> 00:07:43.851
То есть, это достаточно большие
нагрузки на все приложения этой

00:07:43.875 --> 00:07:50.440
компании и таблицу рейтинга она
реализовала в сервисе Amazon DynamoDB.

00:07:50.440 --> 00:07:56.480
Вы видите, что здесь как User ID,
primary key, указан ID пользователя.

00:07:56.480 --> 00:08:02.280
Далее, как Game, как sort key, то есть
secondary key, у нас является Game Title.

00:08:02.280 --> 00:08:09.843
Далее есть опциональные ключи. Некоторые
ключи могут совпадать, например, Top Score, Top Score

00:08:09.867 --> 00:08:17.960
Date Time, Wins, Losses и могут быть дополнительные
поля, которые специфичны для определенной игры.

00:08:17.960 --> 00:08:25.528
Следующим достаточно
популярным примером использования

00:08:25.552 --> 00:08:33.120
сервиса Amazon DynamoDB
является корзина в веб-сайте.

00:08:33.120 --> 00:08:39.115
Это достаточно важные данные, потеря
которых может привести к значительным

00:08:39.139 --> 00:08:46.040
убыткам компании, но тем не менее по
характеру своему является временными данными.

00:08:46.040 --> 00:08:52.261
Так вот, в этом случае DynamoDB идеально
подходит, так как может поддерживать

00:08:52.285 --> 00:09:00.506
внезапное увеличение количества
пользователей, все всплески она успешно сможет

00:09:00.530 --> 00:09:05.153
обработать и в случае, когда нет
пользователей на сайте, она также автоматически

00:09:05.177 --> 00:09:11.800
уменьшается до необходимых размеров и
вы платите только за то, что вы используете.

00:09:11.800 --> 00:09:29.800
Что такое read consistency? Это когда данные
становятся доступны после их записи либо обновления.

00:09:29.800 --> 00:09:35.008
В случае, если обновленные данные
становятся доступными сразу, то

00:09:35.032 --> 00:09:40.240
в этом случае мы говорим, что
это strongly consistent операция.

00:09:40.240 --> 00:09:45.767
Если же данные после записи либо
обновления становятся доступными

00:09:45.791 --> 00:09:50.885
не сразу, а через какое-то
время, вне зависимости от того,

00:09:50.909 --> 00:09:56.567
через одну секунду, через 10
секунд, то это называется eventually

00:09:56.591 --> 00:10:02.160
consistent операция. Amazon DynamoDB 
поддерживает оба подхода.

00:10:02.160 --> 00:10:07.182
По умолчанию включен eventually
consistent операции, то есть мы с

00:10:07.206 --> 00:10:12.228
вами помним, что данные
реплицируются в несколько availability zone

00:10:12.252 --> 00:10:17.005
в рамках региона и в момент,
когда вы записываете данные, она в

00:10:17.029 --> 00:10:22.320
течение одной секунды реплицируется
на все другие availability zone.

00:10:22.320 --> 00:10:28.821
Таким образом, если вы обновите запись либо добавите
новую запись и попробуете ее сразу же запросить,

00:10:28.845 --> 00:10:35.280
то она может вам вернуть старые данные, либо
вернуть информацию о том, что запись еще не создана.

00:10:35.280 --> 00:10:38.972
Если для вашего приложения
это подходит, то вы

00:10:38.996 --> 00:10:43.840
продолжаете использовать
eventually consistent operations.

00:10:43.840 --> 00:10:47.647
В случае, если вам необходимо,
чтобы изменения появлялись

00:10:47.671 --> 00:10:52.160
сразу, то вам необходимо
использовать опцию strongly consistent.

00:10:52.160 --> 00:10:57.091
Она может быть активирована на
уровне абсолютно каждой операции, то есть

00:10:57.115 --> 00:11:02.602
некоторые операции вы можете записывать
как eventually consistent, некритичные

00:11:02.626 --> 00:11:07.874
данные, а те, которые критичные, вы
будете записывать с включенной галочкой

00:11:07.898 --> 00:11:12.720
о том, что вы эту операцию хотите
провести как strongly consistent.

00:11:12.720 --> 00:11:25.680
То есть все изменения появятся сразу
и доступны при следующем обращении.

00:11:25.680 --> 00:11:32.680
На этом мы разобрали самые основные и важные
моменты, связанные с сервисом Amazon DynamoDB.

00:11:32.680 --> 00:11:40.868
Необходимо запомнить, что это fully managed
non-relational key-value database service, полностью

00:11:40.892 --> 00:11:49.080
управляемый AWS сервис, который предоставляет
нам нереляционные базы данных типа ключ-значение.

00:11:49.080 --> 00:11:56.976
Также этот сервис является serverless, что
говорит о том, что может масштабироваться

00:11:57.000 --> 00:12:03.277
практически бесконечно и также может
масштабироваться в сторону уменьшения

00:12:03.301 --> 00:12:09.320
при необходимости. И вы оплачиваете 
только за то, что вы используете.

00:12:09.320 --> 00:12:12.564
В случае, если у вас нет
нагрузки на ваше приложение и

00:12:12.588 --> 00:12:16.200
на таблицу DynamoDB, то вы
за эту таблицу не оплачиваете.

00:12:16.200 --> 00:12:22.041
Оплачиваете только за хранение
данных, что является меньшей статьей

00:12:22.065 --> 00:12:27.640
расходов по сравнению с
операциями чтения и записи с таблицы.

00:12:27.640 --> 00:12:34.280
Если же у вас большая нагрузка, то все запросы,
которые придут, они будут успешно обработаны.

00:12:34.280 --> 00:12:42.688
Все запросы будут отработаны
single-digit millisecond, то есть

00:12:42.712 --> 00:12:51.120
не более 10 миллисекунд и будет
масштабировано по необходимости.

00:12:51.120 --> 00:12:56.000
Другой момент это то, что DynamoDB
работает в рамках одного региона.

00:12:56.000 --> 00:12:59.608
Данные реплицируются в
несколько availability zone, но

00:12:59.632 --> 00:13:03.240
при необходимости вы можете
включить опцию global table.

00:13:03.240 --> 00:13:10.880
Таким образом одна таблица DynamoDB
продолжит работать в нескольких AWS регионах.

00:13:10.880 --> 00:13:14.240
Также мы с вами затронули
тему read consistency.

00:13:14.240 --> 00:13:20.600
Она бывает двух видов: eventual
consistency и strong consistency.

00:13:20.600 --> 00:13:26.886
Для каждой операции, связанной с
DynamoDB, вы можете определять, она

00:13:26.910 --> 00:13:33.760
будет отработана как eventual
consistency, либо как strong consistency.

00:13:33.760 --> 00:13:40.200
Мы добрались до пятой секции и сейчас затронем
вопросы, связанные с безопасностью наших баз данных.

00:13:40.200 --> 00:13:47.480
Если мы говорим про сервис Amazon RDS, то крайне
рекомендуется создавать инстанс базы данных в VPC.

00:13:47.480 --> 00:13:51.022
Благодаря этому вы можете
ограничить доступ к вашей базе

00:13:51.046 --> 00:13:54.588
данных, используя Security
groups, либо Network ACL, и

00:13:54.612 --> 00:13:57.861
таким образом оставить
права доступа только для тех

00:13:57.885 --> 00:14:01.720
ресурсов, которые могут и
должны обращаться к базе данных.

00:14:01.720 --> 00:14:07.226
Используя IAM policy вы
также можете ограничить доступ

00:14:07.250 --> 00:14:12.756
к ресурсам, у которых есть
возможность добраться до базы

00:14:12.780 --> 00:14:18.638
данных по сети, но при этом
должен быть ограниченный набор

00:14:18.662 --> 00:14:24.520
прав на определенные таблицы
в рамках вашей базы данных.

00:14:24.520 --> 00:14:30.800
Для того чтобы обезопасить ваши данные во время
передачи, необходимо включить шифрование SSL.

00:14:30.800 --> 00:14:34.785
Также для того, чтобы ваши
данные хранились at rest,

00:14:34.809 --> 00:14:38.794
то есть во время хранения,
вам необходимо включить

00:14:38.818 --> 00:14:42.916
шифрование и ваша база
данных, а также все снапшоты,

00:14:42.940 --> 00:14:47.440
созданные от этой базы данных,
будут также зашифрованы.

00:14:47.440 --> 00:14:54.808
В зависимости от движка базы данных
для вас могут быть доступны те или иные

00:14:54.832 --> 00:15:02.200
возможности для дополнительного
увеличения безопасности ваших баз данных.

00:15:02.200 --> 00:15:06.488
Если же мы говорим про безопасность
сервиса Amazon DynamoDB,

00:15:06.512 --> 00:15:10.800
все, что было сказано на
предыдущем слайде применимо и здесь.

00:15:10.800 --> 00:15:14.948
Вы также можете воспользоваться
IAM roles и IAM policies для того,

00:15:14.972 --> 00:15:19.120
чтобы предоставить необходимый
минимальный доступ к AWS ресурсам.

00:15:19.120 --> 00:15:24.964
Также если с таблицей
DynamoDB будет работать только

00:15:24.988 --> 00:15:31.751
ресурсы из определенного VPC,
то рекомендуется создать VPC

00:15:31.775 --> 00:15:38.595
Endpoint и таким образом вы
закроете доступ ко всем внешним

00:15:38.619 --> 00:15:45.440
обращениям к вашей таблице,
кроме как с необходимого VPC.

00:15:45.440 --> 00:15:51.338
Касательно шифрования данных,
вы также можете зашифровать

00:15:51.362 --> 00:15:57.260
данные как во время передачи,
так и во время хранения.

00:15:57.260 --> 00:16:01.818
Мы с вами добрались до самой
последней, шестой секции. Эта

00:16:01.842 --> 00:16:06.880
секция посвящена вопросам
миграции в сервисы базы данных AWS.

00:16:06.880 --> 00:16:13.920
Самым основным сервисом в рамках
темы миграции является сервис AWS DMS.

00:16:13.920 --> 00:16:16.880
Расшифруется как
Database Migration Service.

00:16:16.880 --> 00:16:25.888
Используя этот сервис вы можете базу данных,
установленную на локальном дата-центре, либо

00:16:25.912 --> 00:16:34.920
самостоятельно установленную в EC2 машине
перенести в один из сервисов баз данных AWS.

00:16:34.920 --> 00:16:39.115
Обратите внимание, что
вы можете делать перенос с

00:16:39.139 --> 00:16:44.560
использованием сервиса DMS
из одного движка в другой движок.

00:16:44.560 --> 00:16:54.320
Чтобы это произвести необходимо использовать
инструмент AWS Schema Conversion Tool либо AWS SCT.

00:16:54.320 --> 00:17:05.934
Она позволяет учитывать структуру таблиц в
исходной базе данных и создать аналогичную

00:17:05.958 --> 00:17:16.880
структуру баз данных, в принимающей
базе данных с учетом специфики ее движка.

00:17:16.880 --> 00:17:23.318
Обратите внимание также, что DMS поддерживает
не только одноразовые миграции, вы также можете

00:17:23.342 --> 00:17:30.200
настроить постоянную репликацию ваших данных,
что может быть необходимым в определенных случаях.

00:17:30.200 --> 00:17:38.348
Вполне может быть такое, что по тем
или иным причинам вы не можете напрямую

00:17:38.372 --> 00:17:46.520
вашу локальную базу данных переносить в
AWS с использованием сервиса AWS DMS.

00:17:46.520 --> 00:17:51.392
Самые популярные причины - это слишком
большая база данных, либо слабое интернет

00:17:51.416 --> 00:17:56.040
соединение и третье по регуляторным
требованиям вы не можете это сделать.

00:17:56.040 --> 00:18:02.720
В этом случае также имеется выход, необходимо
использовать сервис AWS Snowball Edge.

00:18:02.720 --> 00:18:09.416
Мы с вами помним, что AWS Snowball Edge -
это когда чемодан отправляется от AWS к вам в

00:18:09.440 --> 00:18:16.760
офис, вы этот физический чемодан подключаете
к вашей локальной сети и передаете ваши данные.

00:18:16.760 --> 00:18:22.548
В этом случае вам необходимо будет
воспользоваться сервисом AWS SCT для того,

00:18:22.572 --> 00:18:28.360
чтобы трансформировать вашу базу данных
и все данные перенести в Snowball Edge.

00:18:28.360 --> 00:18:34.388
Далее, вы этот физический чемодан отправляете
обратно в AWS, AWS как только ее получает,

00:18:34.412 --> 00:18:40.440
используя также локальную сеть, достаточно
быстро переносит все эти данные в S3 Bucket.

00:18:40.440 --> 00:18:45.988
Здесь вы начинаете подключать сервис
AWS DMS как source используете S3 Bucket

00:18:46.012 --> 00:18:51.560
и как Target database используете тот
сервис баз данных, который вам нужен.

00:18:51.560 --> 00:19:02.400
На этом мы подошли к концу шестой, самой последней
секции в рамках темы связанной с базами данных.

00:19:02.400 --> 00:19:11.440
Это также является
завершением сегодняшней лекции.

00:19:11.440 --> 00:19:16.591
Напоминаю, что мы с вами
подробнее познакомились с сервисом

00:19:16.615 --> 00:19:21.677
Amazon RDS, далее поговорили
про сервис Amazon DynamoDB,

00:19:21.701 --> 00:19:26.719
рассмотрели вопросы
безопасности и вопросы миграции из

00:19:26.743 --> 00:19:31.760
локальной базы данных в один
из сервисов баз данных AWS.

00:19:31.760 --> 00:19:40.251
На этом слайде вы видите полезные
ссылки, вам достаточно в поисковике вбить

00:19:40.275 --> 00:19:49.800
ключевые слова и таким образом первая
ссылка в выдаче будет та, которую вы ищите.

00:19:49.800 --> 00:19:52.920
На этом мы подошли к концу
нашей сегодняшней лекции.

00:19:52.920 --> 00:19:58.000
Я очень надеюсь, она дала вам полное
представление о базах данных в AWS.

00:19:58.000 --> 00:20:02.000
Спасибо за внимание, увидимся с
вами на следующих наших активностях.