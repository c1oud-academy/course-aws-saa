WEBVTT

00:00:00.000 --> 00:00:05.000
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной лекции.

00:00:05.000 --> 00:00:09.000
Тема сегодняшней лекции – это хранение.

00:00:09.000 --> 00:00:14.000
Эта тема достаточно объемная, поэтому
мы будем проходить ее в течение двух недель.

00:00:14.000 --> 00:00:22.000
Сегодня будет первая часть. Итак, давайте начнем.
В сегодняшней лекции у нас будут две секции.

00:00:22.000 --> 00:00:27.000
В первой секции мы разберем архитектуру, над
которой будем работать в течение всего семестра.

00:00:27.000 --> 00:00:32.000
И по мере прохождения новых сервисов
AWS, будем дополнять эту архитектуру.

00:00:33.000 --> 00:00:38.000
Во второй секции мы разберем use case
использования сервиса Amazon S3.

00:00:39.000 --> 00:00:44.000
Также в отдельной видеоактивности на этой
неделе для вас будет доступна Демо-активность.

00:00:44.000 --> 00:00:51.000
В этом Демо мы разберем функционал
Versioning для сервиса Amazon S3.

00:00:52.000 --> 00:00:54.000
Далее у нас будет
лабораторная работа.

00:00:54.000 --> 00:00:59.000
Как мы с вами помним, для лабораторной
работы будут две отдельные видео-активности.

00:00:59.000 --> 00:01:04.000
Это обзор лабораторной работы, 
а также разбор лабораторной работы.

00:01:04.000 --> 00:01:14.000
Тема лабораторной работы – создание статического
веб-сайта и его хостинг в сервисе Amazon S3.

00:01:14.000 --> 00:01:21.000
Мы начинаем первую секцию и рассматриваем
простейшую архитектуру в облаке AWS.

00:01:21.000 --> 00:01:24.000
Эту архитектуру мы будем
разрабатывать в течение всего семестра.

00:01:24.000 --> 00:01:31.000
И в результате вы увидите всю
эту архитектуру в виде диаграммы.

00:01:32.000 --> 00:01:38.000
В рамках текущей недели мы активируем
компонент, внизу слева - static website on S3.

00:01:38.000 --> 00:01:44.000
У сервиса Amazon S3 есть функционал
хостинга статических веб-сайтов.

00:01:44.000 --> 00:01:53.000
Таким образом, мы в рамках нашей бизнес
задачи, бизнес-кейса активируем этот функционал.

00:01:53.000 --> 00:02:09.000
И для нашего кафе внутри use кейса
создадим статический веб-сайт.

00:02:09.000 --> 00:02:13.000
Он будет хоститься
в сервисе Amazon S3.

00:02:15.000 --> 00:02:21.000
Чтобы задача по построению архитектуры в
облаке AWS не выглядела абстрактной задачей,

00:02:21.000 --> 00:02:25.000
мы будем рассматривать
ее в рамках бизнес-кейса.

00:02:25.000 --> 00:02:31.000
В нашем случае это будет бизнес
небольшого кафе с пекарней.

00:02:31.000 --> 00:02:40.000
Владельцами этой пекарни являются Фрэнк и Марта.
Они муж с женой, а также являются пенсионерами.

00:02:40.000 --> 00:02:46.000
У Фрэнка с Мартой есть дочка София. Она 
помогает родителям вести этот небольшой бизнес.

00:02:46.000 --> 00:02:55.000
А также параллельно обучается IT технологиям
в университете, в том числе облачные технологии.

00:02:55.000 --> 00:03:04.488
В этом кафе также работает на
полставки Нихил, который также является

00:03:04.512 --> 00:03:14.000
студентом университета и изучает 
IT-дисциплины. Кафе недавно открылось.

00:03:14.000 --> 00:03:19.000
У него еще нет какой-то
маркетинговой стратегии развития.

00:03:19.000 --> 00:03:28.000
Поэтому об этом кафе знают только местные жители, а
также знакомые владельцев этого небольшого бизнеса.

00:03:28.000 --> 00:03:36.000
София предложила родителям попытаться увеличить
количество посетителей через создание веб-сайта.

00:03:36.000 --> 00:03:44.173
На этом веб-сайте они могли бы опубликовать
меню, время работы, местоположение,

00:03:44.197 --> 00:03:53.000
адрес этого кафе и другие детали.
Родителям, Фрэнку и Марте, эта идея понравилась.

00:03:53.000 --> 00:03:59.582
Поэтому в рамках этой недели мы
будем изучать возможности облачных

00:03:59.606 --> 00:04:07.000
технологий, сервисов AWS, которые
помогут нам решить эту бизнес-задачу.

00:04:07.000 --> 00:04:13.000
На этом мы завершаем первую
секцию и двигаемся к следующей части.

00:04:13.000 --> 00:04:22.000
Мы добрались до второй секции нашей сегодняшней
лекции и разберем use кейсы сервиса Amazon S3.

00:04:22.000 --> 00:04:30.000
Amazon S3 - это Simple Storage Service, сервис
который предоставляет нам объектное хранение.

00:04:30.000 --> 00:04:34.488
В этом сервисе мы можем
хранить достаточно большой объем

00:04:34.512 --> 00:04:39.000
информации, данных практически
в неограниченном объеме.

00:04:39.000 --> 00:04:44.000
Данные хранятся объектно внутри
так называемых бакетов (buckets).

00:04:44.000 --> 00:04:49.409
Так как мы говорим объектное
хранилище, то подразумевается,

00:04:49.433 --> 00:04:54.000
что внутри Amazon S3
изменять файлы мы не можем.

00:04:54.000 --> 00:04:56.678
Если нам необходимо изменить
файл, мы должны либо его

00:04:56.702 --> 00:05:00.000
скачать, либо изменить локальную
копию и загрузить ее обратно.

00:05:00.000 --> 00:05:05.000
Таким образом в S3 появится
следующая новая версия.

00:05:05.000 --> 00:05:14.000
Когда мы говорим бакеты, это некие
корневые папки, в которых хранятся наши данные.

00:05:14.000 --> 00:05:20.032
Название бакета должно быть
уникально глобально, то есть вы не можете

00:05:20.056 --> 00:05:26.000
создать два бакета с одинаковыми
названиями в различных регионах.

00:05:26.000 --> 00:05:29.788
Оно должно быть уникальной
глобально, но тем не менее ваши

00:05:29.812 --> 00:05:34.000
данные внутри S3 бакета, они
хранятся в определенном регионе.

00:05:34.000 --> 00:05:39.058
Поэтому при создании бакета, вы
указываете глобальное имя, но рядом также

00:05:39.082 --> 00:05:44.000
указываете регион, в котором
фактически ваши данные будут храниться.

00:05:44.000 --> 00:05:49.988
Если мы говорим про размер
файлов внутри S3 бакета, то для

00:05:50.012 --> 00:05:56.000
одного файла он может быть
от 0 байтов до 5 терабайтов.

00:05:56.000 --> 00:06:05.000
То есть практически любой вид
объекта спокойно помещается в S3.

00:06:10.000 --> 00:06:16.000
Каждый объект внутри S3 бакета
содержит пять характеристик.

00:06:16.000 --> 00:06:25.000
Первое - это Key, либо по другому говоря, путь до
этого файла, подразумевается весь полный путь.

00:06:25.000 --> 00:06:32.000
Сам S3 не различает, что файл хранится
внутри папки, либо хранится в корне S3 бакета.

00:06:32.000 --> 00:06:38.488
Возможность создания папок и организации
всех наших файлов внутри бакета в

00:06:38.512 --> 00:06:45.000
различных вложенных папках сделано
специально для удобства использования.

00:06:45.000 --> 00:06:50.488
Сам же S3 хранит у себя внутри
по-другому и значением для

00:06:50.512 --> 00:06:56.000
каждого файла является весь
полный путь до этого файла.

00:06:56.000 --> 00:07:00.527
Следующая характеристика -
это Version ID, то есть во время

00:07:00.551 --> 00:07:05.000
перезагрузки вашего файла
он обретает новый Version ID.

00:07:05.000 --> 00:07:11.000
Так мы можем различать различные
версии одного и того же файла.

00:07:11.000 --> 00:07:15.680
Следующий компонент - это
значение (Value), в нашем случае это

00:07:15.704 --> 00:07:21.000
последовательность байтов, то есть
само значение, сами наши данные.

00:07:21.000 --> 00:07:27.988
Четвертое - это Metadata, так называемые теги.
Теги - это пары ключ - значение (key - value),

00:07:28.012 --> 00:07:35.000
они могут быть системными, также они могут
быть user defined, то есть определены пользователем.

00:07:35.000 --> 00:07:42.336
Самое последнее - это Subresources, это
некоторая дополнительная информация

00:07:42.360 --> 00:07:49.000
специфичная для конкретного
объекта для работы сервиса Amazon S3.

00:07:49.000 --> 00:07:57.000
Давайте подробнее остановимся на
основных преимуществах сервиса Amazon S3.

00:07:57.000 --> 00:08:02.081
Первое - это надежность (durability).
Надежность сервиса Amazon S3

00:08:02.105 --> 00:08:07.000
измеряется 11 девятками 
или 99.999999999%.

00:08:07.000 --> 00:08:15.000
Это достаточно хорошие показатели,
давайте приведем пример для наглядности.

00:08:15.000 --> 00:08:19.251
Если мы в одном бакете будем
хранить 10 тысяч объектов,

00:08:19.275 --> 00:08:24.000
то в течение целого года мы
максимум потеряем один объект.

00:08:24.000 --> 00:08:30.988
Следующее преимущество - это availability,
она измеряется четырьмя девятками,

00:08:31.012 --> 00:08:38.000
то есть 99.99% того, что мы доберемся
до наших файлов и сможем их загрузить.

00:08:38.000 --> 00:08:45.288
Availability чуть ниже чем durability,
это нормально ввиду того, что могут

00:08:45.312 --> 00:08:54.000
возникнуть некоторые проблемы с сетью, но
самое главное, что данные надежно хранятся.

00:08:54.000 --> 00:09:01.988
В случае, если возникли проблемы с загрузкой
объекта, мы можем всегда сделать вторую

00:09:02.012 --> 00:09:10.000
попытку и вторая попытка чаще всего
успешно срабатывает и файл в итоге загружается.

00:09:10.000 --> 00:09:18.488
Другое преимущество - это то, что мы оплачиваем
сервис S3 по модели pay as you go, то есть если мы

00:09:18.512 --> 00:09:27.000
храним лишь 1 гигабайт данных внутри этого сервиса,
то ровно столько мы будем оплачивать ежемесячно.

00:09:27.000 --> 00:09:33.216
Если на второй месяц мы очистили наши
бакеты и на текущий момент у нас 0 гигабайтов

00:09:33.240 --> 00:09:39.000
данных хранятся в S3 бакете, то мы
ничего не будем оплачивать через месяц.

00:09:39.000 --> 00:09:45.559
Таким образом это удобно и нас никто не вынуждает 
покупать пакет, к примеру 100 ГБ, 500 ГБ

00:09:45.583 --> 00:09:53.000
или 1 терабайт места и оплачивать это место
вне зависимости от того мы используем ее или нет.

00:09:53.000 --> 00:09:59.000
Таким образом хранение в S3 оно
может быть экономически выгодно.

00:09:59.000 --> 00:10:06.605
Мы с вами добрались до основной части текущей
секции и рассмотрим основные use кейсы сервиса

00:10:06.629 --> 00:10:14.000
Amazon S3. Самые первые и самые популярные - это
использование S3 в качестве хранилища медиа данных.

00:10:14.000 --> 00:10:23.000
Это могут быть различные видео материалы, аудио,
картинки, может текстовая информация и так далее.

00:10:23.000 --> 00:10:32.000
Используя S3, вы можете  давать прямую
ссылку для загрузки вашим пользователям.

00:10:32.000 --> 00:10:37.443
В этом случае домен будет
стандартного вида - это

00:10:37.467 --> 00:10:47.000
https://&lt;bucket-name&gt;.s3.amazonaws.com.
Дальше указывается путь до вашего объекта.

00:10:47.000 --> 00:10:59.000
Вы также можете распространять ваши медиа данные
через CDN. В нашем случае, это Amazon CloudFront.

00:10:59.000 --> 00:11:06.000
Давайте подробнее остановимся на теме безопасности
S3 бакетов и объектов внутри этих бакетов.

00:11:06.000 --> 00:11:12.000
Все бакеты изначально
приватные и защищенные.

00:11:12.000 --> 00:11:18.000
Когда мы выдаем доступ к объектам или бакетам
необходимо следовать принципу least privilege.

00:11:18.000 --> 00:11:22.720
То есть мы выдаем только
доступ только тем сущностям и

00:11:22.744 --> 00:11:28.000
только в том объеме, который
нужно для выполнения задачи.

00:11:28.000 --> 00:11:37.000
Если мы говорим про предоставление
доступа, у нас есть широкий выбор функционала.

00:11:37.000 --> 00:11:42.000
Давайте остановимся на каждом из них.
Самое первое - это Block Public Access Feature.

00:11:42.000 --> 00:11:47.657
Идея в том, что если мы хотим
гарантированно закрыть любой публичный

00:11:47.681 --> 00:11:53.000
доступ на наши S3 бакеты, то
необходимо эти галочки включить.

00:11:53.000 --> 00:12:02.000
Это некоторый переключатель и нужно
выставлять флажочки на уровне настройки бакета.

00:12:02.000 --> 00:12:10.000
В случае если вам нужно предоставить
некоторый публичный доступ пусть и ограниченный,

00:12:10.000 --> 00:12:18.000
первым делом вам необходимо эти флажочки 
снять. Следующее - это IAM Policies.

00:12:18.000 --> 00:12:22.167
Идея в том, что у нас есть
некоторые сущности - роли,

00:12:22.191 --> 00:12:27.000
пользователи и группы, которым
мы привязываем наши policy.

00:12:27.000 --> 00:12:37.000
В policy мы прописываем куда и каким образом могут
обращаться сущности, к которым привязана эта policy.

00:12:37.000 --> 00:12:46.000
Если говорить конкретнее, то мы можем
пользователю User1 привязать некоторую policy,

00:12:46.000 --> 00:12:58.000
а в policy будет прописано, что мы можем
считывать и записывать файлы в Bucket1.

00:12:58.000 --> 00:13:08.488
Далее, есть Bucket Policies. Они привязываются
уже к бакету и на уровне бакета мы можем

00:13:08.512 --> 00:13:19.000
расписать кому и в каком виде предоставляется доступ.
А эта policy уже привязывается к этому бакету.

00:13:19.000 --> 00:13:23.000
Следующее - это Access Control
Lists, так называемые ACLs.

00:13:23.000 --> 00:13:28.534
Это старый подход, который
сейчас также работает для обратной

00:13:28.558 --> 00:13:34.000
совместимости, но оно было
успешно заменено IAM Policies.

00:13:34.000 --> 00:13:39.988
Поэтому рекомендуется использовать
IAM Policies и в случае, если вам

00:13:40.012 --> 00:13:46.000
критично использование ACLs, вы
можете ее включить и уже использовать.

00:13:46.000 --> 00:13:53.577
Следующий метод - это S3 Access Points.
Идея в том, что вы можете для каждого вашего

00:13:53.601 --> 00:14:02.000
приложения предоставить специфичный набор
прав и доступов на ваши объекты внутри S3 Bucket.

00:14:02.000 --> 00:14:11.430
Другой функционал - это Presigned URLs. Идея - вы
можете на определенные действия, на определенные

00:14:11.454 --> 00:14:22.000
объекты сгенерировать некий URL, то есть
адрес, который будет доступен ограниченное время.

00:14:22.000 --> 00:14:26.248
Представим, что вам нужно
передать объект кому-либо и вы можете

00:14:26.272 --> 00:14:31.000
сгенерировать Presigned URL,
который будет доступен в течение часа.

00:14:31.000 --> 00:14:39.000
При открытии этого URL, начинается загрузка вашего
объекта. Это можно сделать через Presigned URL.

00:14:39.000 --> 00:14:47.988
И отдельный сервис - AWS Trusted Advisor -
это бесплатный сервис, который позволяет нам

00:14:48.012 --> 00:14:57.000
автоматически проверять доступы на наших бакетах.
То есть рекомендуется к использованию.

00:14:57.000 --> 00:15:04.000
Давайте рассмотрим три состояния наших
бакетов и уровни доступа к этим бакетам.

00:15:04.000 --> 00:15:08.710
Самый первый Default - это когда у
нас бакет защищенный и приватный и

00:15:08.734 --> 00:15:14.000
доступ к этому бакету есть только у
Owner, то есть создателя этого бакета.

00:15:14.000 --> 00:15:22.000
Он по умолчанию уже может выдавать явно
доступ к другим пользователям внутри AWS аккаунта.

00:15:22.000 --> 00:15:26.000
Для всех других доступ
к этому бакету запрещен.

00:15:26.000 --> 00:15:32.045
Далее, второй случай - это когда мы
открываем Public access к нашему бакету и любой

00:15:32.069 --> 00:15:39.000
пользователь в интернете может обращаться к
нашему бакету и к объектам внутри нашего бакета.

00:15:39.000 --> 00:15:43.567
И третий вариант - это
более реалистичный вариант,

00:15:43.591 --> 00:15:49.000
когда у нас может быть
публичный доступ к нашему бакету,

00:15:49.000 --> 00:15:56.661
но он контролируется, доступ выдаётся
только к определенным пользователям на основе

00:15:56.685 --> 00:16:05.000
некоторых условий либо к определенным
приложениям, а для всех остальных он блокируется.

00:16:05.000 --> 00:16:11.000
Теперь остановимся на вопросах
шифрования объектов внутри S3 бакетов.

00:16:11.000 --> 00:16:16.000
Для того чтобы файл наши данные
зашифровать нам нужен Secret Key.

00:16:16.000 --> 00:16:26.000
Secret Key превращает файл в некоторую
последовательность байтов, которые не читаемы.

00:16:26.000 --> 00:16:30.988
Только при наличии секретного
ключа вы можете расшифровать

00:16:31.012 --> 00:16:36.000
зашифрованный файл и
прочитать данные, которые там есть.

00:16:36.000 --> 00:16:46.000
Существует два подхода - это Server-side
encryption (SSE), либо Client-side encryption (CSE).

00:16:46.000 --> 00:16:55.000
Отличается тем, что при Server-side encryption
шифрование происходит на стороне сервиса Amazon S3.

00:16:55.000 --> 00:16:58.000
То есть вы передаете файл
в незашифрованном виде.

00:16:58.000 --> 00:17:04.000
Amazon S3 принимает этот файл, шифрует
файл, после чего записывает на жёсткие диски.

00:17:04.000 --> 00:17:09.000
Далее, когда вы запрашиваете этот
файл, тоже самое только в обратном порядке,

00:17:09.000 --> 00:17:16.218
Amazon S3 считывает зашифрованный
файл с жёстких дисков, далее

00:17:16.242 --> 00:17:25.000
расшифровывает её ключом и передает
вам уже файл в незашифрованном виде.

00:17:25.000 --> 00:17:32.988
Если мы говорим Client Signed Encryption - это
когда мы сами руководствуемся нашими ключами

00:17:33.012 --> 00:17:41.000
шифрования и должны зашифровать наш файл
перед тем как мы её отправим в сервис Amazon S3.

00:17:41.000 --> 00:17:45.134
Далее, Amazon S3 шифрование на
своей стороне не производит, а в исходном

00:17:45.158 --> 00:17:49.000
виде её записывает на жёсткий
диск, так как оно уже зашифровано.

00:17:49.000 --> 00:17:54.279
Если же происходит считывание,
то Amazon S3 извлекает наш

00:17:54.303 --> 00:18:01.000
шифрованный файл с жёстких дисков
и в таком же виде передает обратно.

00:18:01.000 --> 00:18:06.193
А мы уже у себя на стороне
должны организовать процесс

00:18:06.217 --> 00:18:12.000
расшифровки ключом, который
хранится где-то, но не в AWS.

00:18:12.000 --> 00:18:18.231
Вариант, который нужно применить,
зависит от бизнес задачи. Самое главное,

00:18:18.255 --> 00:18:25.000
что вы должны знать какие есть варианты
шифрования объектов внутри S3 Bucket.

00:18:25.000 --> 00:18:33.000
Следующим довольно популярным use case сервиса
Amazon S3 является хостинг статических веб-сайтов.

00:18:33.000 --> 00:18:37.780
Это тот функционал, который можно
активировать в настройках Bucket.

00:18:37.804 --> 00:18:43.000
Во время активации вам необходимо
указать файл, который является index.html,

00:18:43.000 --> 00:18:46.988
также указать файл, который
является error.html, то есть будет

00:18:47.012 --> 00:18:51.000
направлять на указанную вами
страницу в случае какой-то ошибки.

00:18:51.000 --> 00:18:59.000
После того как вы её активируете ваш веб-сайт уже
сразу становится доступным по определенному URL.

00:18:59.000 --> 00:19:05.664
Шаблоны URL вы видите на слайде.
Вы также можете привязать

00:19:05.688 --> 00:19:12.000
к вашему веб-сайту на Amazon
S3 свой кастомный домен.

00:19:12.000 --> 00:19:19.000
Для этого вам необходимо интегрировать
Amazon S3 с сервисом Amazon Route 53.

00:19:19.000 --> 00:19:25.488
Здесь сразу можно увидеть очевидные
плюсы хостинга веб-сайта на Amazon

00:19:25.512 --> 00:19:32.000
S3. Это то, что вам нет необходимости
поднимать собственный веб-сервер,

00:19:32.000 --> 00:19:38.488
настраивать ПО, более того отвечать за
масштабируемость и высокую доступность вашего

00:19:38.512 --> 00:19:45.000
веб-сервера. Все эти моменты входят в
цену сервиса Amazon S3 и это на стороне AWS.

00:19:45.000 --> 00:19:51.106
Таким образом, в случае с веб-сервером,
который хостите вы сами, может быть такая

00:19:51.130 --> 00:19:58.000
ситуация, что при увеличении спроса сервер
не выдерживает нагрузки и перестает работать.

00:19:58.000 --> 00:20:04.211
Как только перестает работать ваш веб-сервер,
ваш веб-сайт становится недоступным. Подобные

00:20:04.235 --> 00:20:11.000
проблемы не могут быть на стороне Amazon S3, так
как она высокодоступная и высокомасштабируемая.

00:20:11.000 --> 00:20:16.160
Другой момент - это то, что в случае
с веб-сервером вы покупаете цельную

00:20:16.184 --> 00:20:22.000
единицу IT ресурса и оплачиваете вне
зависимости от того какие будут нагрузки.

00:20:22.000 --> 00:20:27.771
Если ваш сайт не такой популярный, то
вне зависимости от того были запросы на ваш

00:20:27.795 --> 00:20:34.000
сайт или нет, вы оплачиваете фиксированную
сумму за использование этого веб-сервера.

00:20:34.000 --> 00:20:39.720
В случае же с Amazon S3 подобных
платежей проводить не нужно. Вам достаточно

00:20:39.744 --> 00:20:46.000
оплачивать только за размер ваших медиа
файлов, которые вы хостите на Amazon S3.

00:20:46.000 --> 00:20:51.398
Это довольно небольшие суммы
и в целом это решение более

00:20:51.422 --> 00:20:58.000
выгодное не только по экономической
части, но и технически лучше.

00:20:58.000 --> 00:21:02.557
Другой немаловажный
момент - это, то что вы под static

00:21:02.581 --> 00:21:08.000
websites возможно понимаете
статические простейшие веб-сайты.

00:21:08.000 --> 00:21:14.000
На самом деле динамические веб-сайты
также можно хостить на Amazon S3.

00:21:14.000 --> 00:21:21.000
Связано это с тем, что JavaScript сам по себе
генерирует JS файлы, которые сами по себе статичные.

00:21:21.000 --> 00:21:28.000
Их можно будет обслуживать в рамках
static website хостинга на Amazon S3.

00:21:28.000 --> 00:21:32.000
Тем не менее, тот код, который
исполняется в этих JS файлах, динамический.

00:21:32.000 --> 00:21:36.000
В зависимости от того какой запрос
приходит, он может менять свое поведение.

00:21:36.000 --> 00:21:45.000
Таким образом, мы можем хостить
на Amazon S3 динамические веб-сайты.

00:21:45.000 --> 00:21:50.000
Следующим интересным функционалом
сервиса Amazon S3 является Versioning.

00:21:50.000 --> 00:21:56.529
Versioning - это когда вы активируете
этот функционал и он сохраняет все версии,

00:21:56.553 --> 00:22:03.000
которые когда-либо были загружены на
этот S3 bucket под определенным ключом.

00:22:03.000 --> 00:22:06.618
Под ключом, как вы помните,
понимается весь путь хранения

00:22:06.642 --> 00:22:10.000
вашего файла, включая
все папки, где он находится.

00:22:10.000 --> 00:22:17.377
Таким образом, даже при удалении
файлов из S3 bucket с включенным versioning,

00:22:17.401 --> 00:22:24.000
вы всегда можете откатиться назад
и быстро восстановить этот файл.

00:22:24.000 --> 00:22:33.496
Более того, если вы работаете с несколькими
версиями одного и того же файла, вы опять же

00:22:33.520 --> 00:22:44.000
легко с versioning можете вернуться на любую
версию, которую пожелаете исходя из вашей задачи.

00:22:44.000 --> 00:22:49.000
S3 bucket касательно versioning
может находиться в трех состояниях.

00:22:49.000 --> 00:22:53.488
Первое состояние - это Default, когда
versioning отключен (Versioning not enabled).

00:22:53.512 --> 00:22:58.000
Если вам нужен versioning,
вам нужно ее отдельно активировать.

00:22:58.000 --> 00:23:01.988
Далее, второе состояние - это
включенный versioning (Versioning-enabled).

00:23:02.012 --> 00:23:06.000
И третье состояние - это приостановленный
versioning (Versioning-suspended).

00:23:06.000 --> 00:23:10.660
Третья версия существует потому,
что versioning невозможно отключить,

00:23:10.684 --> 00:23:15.000
после того как вы ее включили, ее можно
только приостановить. Таким образом,

00:23:15.000 --> 00:23:23.988
все версии файлов, которые сгенерировались
во время включенного versioning, сохраняются.

00:23:24.012 --> 00:23:33.000
В тот момент как вы приостанавливаете versioning,
новые загруженные файлы не генерируют новые версий.

00:23:33.000 --> 00:23:45.000
И для того чтобы продолжить сохранять новые
версии, вам необходимо обратно включить versioning.

00:23:45.000 --> 00:23:50.000
Следующий функционал, который
поддерживается Amazon S3 - это CORS

00:23:50.000 --> 00:23:57.488
(Cross-Origin Resource Sharing). Идея - настроив
CORS, вы можете предоставить доступ другому

00:23:57.512 --> 00:24:05.000
сайту использовать части вашего веб-сайта, либо
обращаться напрямую к медиа файлам веб-сайта.

00:24:05.000 --> 00:24:12.111
Если CORS не прописан, то браузеры по
умолчанию запрещают подобные действия, а именно,

00:24:12.135 --> 00:24:20.000
находясь на одном веб-сайте, не могут использовать
части или обращаться к другому веб-сайту.

00:24:20.000 --> 00:24:23.000
Это не разрешено в
целях безопасности.

00:24:23.000 --> 00:24:30.109
Если у вас есть необходимость подобные действия
 проводить, то вы выборочно для выделенных

00:24:30.133 --> 00:24:37.000
ресурсов можете прописать CORS и другие
веб-сайты смогут использовать ваши ресурсы.

00:24:37.000 --> 00:24:42.988
Следующим интересным use case
сервиса Amazon S3 является

00:24:43.012 --> 00:24:49.000
хранение данных в рамках
масштабных расчетов и аналитики.

00:24:49.000 --> 00:24:55.264
Объектное хранение в этом случае идеально
подходит, так как данные для подобного рода

00:24:55.288 --> 00:25:02.000
расчетов записываются один раз и много раз
считывается: обычно эти данные не изменяются.

00:25:02.000 --> 00:25:07.488
Какие это данные? Это данные 
о транзакциях платежей, информация

00:25:07.512 --> 00:25:13.000
о посещении страниц пользователей,
различные логи и так далее.

00:25:13.000 --> 00:25:17.270
Таким образом, записываются
эти данные один раз в Amazon S3.

00:25:17.294 --> 00:25:22.000
Amazon S3 может также использоваться
как источник сырых данных.

00:25:22.000 --> 00:25:26.916
Далее, вы видите на слайде
пример, когда запускаются spot

00:25:26.940 --> 00:25:33.000
instances, либо какой-то EMR
Cluster, который проводит эти расчеты.

00:25:33.000 --> 00:25:37.988
Далее, после того как расчеты проведены,
уже измененные данные попадают

00:25:38.012 --> 00:25:43.000
в следующий S3 bucket, в котором
они хранятся уже в обработанном виде.

00:25:43.000 --> 00:25:50.981
Далее, можно подключить различные
системы аналитики: есть сервис

00:25:51.005 --> 00:26:00.000
Amazon QuickSight, который позволяет
нам визуализировать наши данные.

00:26:00.000 --> 00:26:04.982
Следующим интересным использованием
сервиса Amazon S3 является

00:26:05.006 --> 00:26:09.988
хранение различных бэкапов,
архивов критических данных, которые

00:26:10.012 --> 00:26:15.075
вы обязаны хранить какой-то
период времени согласно регуляторным

00:26:15.099 --> 00:26:20.000
требованиям, либо своим
внутренним корпоративным документам.

00:26:20.000 --> 00:26:26.196
Источником этих данных может выступать не
только ваша инфраструктура на уровне AWS, вы

00:26:26.220 --> 00:26:33.000
также с локального дата-центра можете напрямую
передавать и хранить эти данные в Amazon S3.

00:26:33.000 --> 00:26:39.982
Мы помним, что хранение данных в сервисе
Amazon S3 является достаточно надежным вариантом

00:26:40.006 --> 00:26:46.988
так как обеспечивает надежность 11 девяток.
Если по тем или иным причинам вам необходима

00:26:47.012 --> 00:26:54.151
еще большая надежность, то есть функционал
Cross-Region Replication (CRR), когда вы создаете

00:26:54.175 --> 00:27:01.000
второй бакет в другом регионе и в первом
бакете настраиваете Cross-Region Replication.

00:27:01.000 --> 00:27:06.698
Таким образом, когда данные попадают
в первый бакет, он автоматически

00:27:06.722 --> 00:27:12.000
реплицирует эти данные в бакет
находящийся на другом регионе.

00:27:12.000 --> 00:27:18.488
Это еще больше увеличивает надежность хранения
ваших данных, но в этом случае вам необходимо нести

00:27:18.512 --> 00:27:25.000
дополнительные затраты на поддержание этой
простейшей инфраструктуры для хранения данных.

00:27:25.000 --> 00:27:32.245
Следует учитывать и предварительно
рассчитать объемы, хотя бы примерно

00:27:32.269 --> 00:27:38.988
в каком объеме вы будете хранить
данные, какой период они будут

00:27:39.012 --> 00:27:45.994
там храниться и сделать расчет
сколько денег вам предстоит оплатить

00:27:46.018 --> 00:27:53.000
в случае того или иного варианта
хранения ваших критических данных.

00:27:53.000 --> 00:27:57.988
Давайте затронем пару моментов,
связанных с consistency model.

00:27:58.012 --> 00:28:03.000
Идея в том, что как изменения, связанные
с сервисом Amazon S3 применяются.

00:28:03.000 --> 00:28:11.624
Когда мы говорим про объекты, то все объекты
во всех регионах strongly consistent. Это говорит о

00:28:11.648 --> 00:28:21.000
том, что изменения над существующими объектами и
новыми объектами вступают в силу сразу после записи.

00:28:21.000 --> 00:28:28.232
Проще говоря, после того как мы проведем
успешную PUT операцию, то есть запишем объект

00:28:28.256 --> 00:28:35.488
в S3 bucket, если сразу после этого мы запустим
GET или LIST операцию, который считывает

00:28:35.512 --> 00:28:42.744
объект либо запрашивает список имеющихся
объектов в бакете, то этот недавно записанный

00:28:42.768 --> 00:28:50.000
объект сразу появится в этом списке, либо
вернется обновленное содержание этого объекта.

00:28:50.000 --> 00:29:00.000
Таким образом обеспечивается read-after-write
consistency для операции GET, LIST и PUT.

00:29:00.000 --> 00:29:06.676
Когда мы говорим про конфигурации
бакетов, то они eventually consistent,

00:29:06.700 --> 00:29:14.000
что означает применение новых настроек через
небольшой промежуток времени, не сразу.

00:29:14.000 --> 00:29:21.151
Пример: если мы удалили бакет, и
сразу после этого запросили список

00:29:21.175 --> 00:29:28.000
бакетов, то удаленный бакет
может отобразиться в этом списке.

00:29:28.000 --> 00:29:32.714
Если через несколько секунд
мы еще раз запросим список

00:29:32.738 --> 00:29:37.988
существующих бакетов, то в
этом случае удаленный бакет уже

00:29:38.012 --> 00:29:42.596
не будет присутствовать 
в этом списке. Есть вот такие

00:29:42.620 --> 00:29:48.000
нюансы по работе с бакетами и
объектами в сервисе Amazon S3.

00:29:48.000 --> 00:29:52.073
Итак, мы добрались до
конца второй секции и давайте

00:29:52.097 --> 00:29:56.988
остановимся на самых основных
моментах связанных с сервисом

00:29:57.012 --> 00:30:01.494
Amazon S3. Первое, самое 
важное - это то, что названия

00:30:01.518 --> 00:30:06.000
бакетов должны быть глобальными
среди всех регионов AWS.

00:30:06.000 --> 00:30:09.786
В то время как для хранения
данных мы выбираем определенный

00:30:09.810 --> 00:30:13.988
регион и все данные хранятся 
в этом регионе. Далее, это то, что

00:30:14.012 --> 00:30:17.994
все бакеты по умолчанию
приватные: для того чтобы предоставить

00:30:18.018 --> 00:30:22.000
публичный доступ вам нужно
совершить дополнительные действия.

00:30:22.000 --> 00:30:26.501
Для того чтобы предоставить
доступ к вашему бакету, будь то

00:30:26.525 --> 00:30:31.027
публичный или для сущностей
внутри AWS аккаунта, вы можете

00:30:31.051 --> 00:30:35.513
воспользоваться различными вариантами.
Это может быть IAM policy,

00:30:35.537 --> 00:30:40.000
Bucket policy, Access
control Lists и так далее.

00:30:40.000 --> 00:30:47.488
Для всех новых и существующих
объектов работает модель Strongly

00:30:47.512 --> 00:30:55.000
Consistency, изменение объектов
вступает в силу моментально.

00:30:55.000 --> 00:31:02.587
Максимальный размер одного файла в
сервисе Amazon S3 - 5 терабайтов, что более

00:31:02.611 --> 00:31:10.000
чем достаточно практически для всех
задач хранения и существующих файлов.

00:31:10.000 --> 00:31:18.027
Также мы рассмотрели 4 популярных use case
сервиса Amazon S3. Оно не ограничивается

00:31:18.051 --> 00:31:25.000
этими use case: есть очень много
различных менее популярных use case.

00:31:25.000 --> 00:31:30.988
Самое главное - вы получили
общее представление каким образом,

00:31:31.012 --> 00:31:37.000
в каких местах архитектуры можно
успешно применить этот сервис.

00:31:37.000 --> 00:31:43.000
На этом мы подошли к концу первой части
лекции, посвященной теме хранения в облаке AWS.

00:31:43.000 --> 00:31:49.000
Я очень надеюсь, что вы получили более
полное представление о сервисе Amazon S3.

00:31:49.000 --> 00:31:54.988
Также в дальнейших наших активностях
у нас будет Демо и лабораторная работа,

00:31:55.012 --> 00:32:01.000
посвященная сервису Amazon S3. На этом мы
 заканчиваем нашу сегодняшнюю сессию.

00:32:01.000 --> 00:32:06.000
Спасибо за внимание. Увидимся с вами 
на следующих наших активностях.
