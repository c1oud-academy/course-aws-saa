WEBVTT

00:00:00.000 --> 00:00:04.600
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной лекции.

00:00:04.600 --> 00:00:07.400
Тема сегодняшней лекции
- Connecting Networks.

00:00:07.400 --> 00:00:14.920
Ранее мы с вами говорили о том, из чего
состоит VPC, какие у нее есть компоненты.

00:00:14.920 --> 00:00:22.948
Теперь же мы поднимаемся на уровень выше и
посмотрим, как мы можем соединять между собой сети

00:00:22.972 --> 00:00:31.000
в облаке AWS, а также сеть в облаке AWS с нашей
локальной сетью, которая не находится в облаке.

00:00:31.000 --> 00:00:38.000
Итак, давайте начнем. В рамках нашей
сегодняшней лекции мы рассмотрим 6 тем.

00:00:38.000 --> 00:00:43.200
Первая тема касается наших лабораторных
работ и посмотрим, какие компоненты добавятся.

00:00:43.200 --> 00:00:47.124
Далее, во второй и третьей
части мы рассмотрим вопросы,

00:00:47.148 --> 00:00:51.000
как связать локальную
инфраструктуру с облаком AWS.

00:00:51.000 --> 00:00:55.999
Далее, в четвертой и пятой
части мы рассмотрим, каким

00:00:56.023 --> 00:01:01.600
образом мы можем соединять
VPC между собой в облаке AWS.

00:01:01.600 --> 00:01:07.400
И в самом конце рассмотрим дополнительные
сервисы, которые нативно интегрируются с VPC.

00:01:07.400 --> 00:01:12.288
Мы с вами начинаем первую часть
нашей сегодняшней лекции и здесь

00:01:12.312 --> 00:01:17.200
рассмотрим, какие задачи предстоят
в рамках лабораторных работ.

00:01:17.200 --> 00:01:23.188
Согласно бизнес-кейсу, кафе запустила акцию.
В рамках акции, если посетитель

00:01:23.212 --> 00:01:29.200
покупает 10 и более одинаковых позиций,
то на подарок дается некоторый десерт.

00:01:29.200 --> 00:01:34.288
Но для того, чтобы отслеживать прогресс
посетителей, необходимо сохранять

00:01:34.312 --> 00:01:39.400
некоторую персональную информацию.
Это email-адрес и номер кредитной карты.

00:01:39.400 --> 00:01:47.018
Кафе не может хранить эту информацию в облаке
 AWS, ввиду некоторых ограничений, связанных

00:01:47.042 --> 00:01:54.400
с хранением данных в конкретной стране,
где находится София и другие главные герои.

00:01:54.400 --> 00:02:02.681
Поэтому было решено создать локально базу
данных, которая хранит данные пользователей,

00:02:02.705 --> 00:02:10.400
но при этом транзакционные данные и
вся инфраструктура остается в облаке AWS.

00:02:10.400 --> 00:02:19.661
В тот момент, когда нужны эти данные, из облака AWS
приходит прямой запрос на локальную инфраструктуру,

00:02:19.685 --> 00:02:28.400
а именно в нужную нам базу данных и подтягивает
необходимые данные. Другой момент связан с VPC.

00:02:28.400 --> 00:02:36.400
Мы с вами помним, что у нас есть Dev среда, а также
Prod среда. И тот и другой находится в одном VPC.

00:02:36.400 --> 00:02:42.888
София, посоветовавшись с Оливией, решает,
что необходимо их разделить между собой. То есть

00:02:42.912 --> 00:02:49.400
Dev среда находится в отдельной изолированной
VPC, а Prod среда находится в другой VPC.

00:02:49.400 --> 00:02:55.888
Но, тем не менее, Оливия дополнительно
советует Софии связать их между собой, так

00:02:55.912 --> 00:03:02.400
чтобы из Dev среды можно было обратиться
к ресурсам на стороне Prod environment.

00:03:02.400 --> 00:03:10.888
Как вы видите, в рамках нашей лабораторной
работы будем работать с несколькими VPC в облаке AWS,

00:03:10.912 --> 00:03:20.400
а также выполним задачу, связанную с соединением
VPC в облаке AWS и локальной инфраструктурой.

00:03:20.400 --> 00:03:26.888
Мы с вами добрались до второй
части нашей сегодняшней лекции.

00:03:26.912 --> 00:03:30.400
И подробнее здесь остановимся
на сервисе AWS Site-to-Site VPN.

00:03:30.400 --> 00:03:37.036
Идея этого сервиса в том, чтобы через
интернет прокинуть VPN канал, используя протокол

00:03:37.060 --> 00:03:44.400
IPSec, и подключить VPC в облаке AWS с нашей
локальной сетью, которая не находится в облаке.

00:03:44.400 --> 00:03:50.400
Оплата за этот сервис происходит на
каждый connection по часовой основе.

00:03:50.400 --> 00:03:56.400
В рамках этого сервиса доступны два варианта 
routing. Это Dynamic Routing и Static Routing.

00:03:56.400 --> 00:04:01.544
При использовании Dynamic Routing
обязательное требование поддержки

00:04:01.568 --> 00:04:06.400
устройствами протокола Border
Gateway Protocol, то есть BGP.

00:04:06.400 --> 00:04:12.400
Если этот протокол не поддерживается, то
остается второй вариант, это Static Routing.

00:04:12.400 --> 00:04:17.073
Чем отличается Dynamic Routing 
от Static Routing? Так это тем, что в

00:04:17.097 --> 00:04:22.400
Dynamic Routing встроена нативная
поддержка проверки состояния connection.

00:04:22.400 --> 00:04:29.400
И можно настроить достаточно надежное
переключение на резервный канал.

00:04:29.400 --> 00:04:35.400
Когда мы говорим про Static Routing, нативно это 
не поддерживается, но настроить это возможно.

00:04:35.400 --> 00:04:43.942
Как происходит подключение локальной
сети к облаку AWS? На стороне AWS создается

00:04:43.966 --> 00:04:52.400
ресурс Virtual Private Gateway, а на
стороне локальной сети Customer Gateway.

00:04:52.400 --> 00:04:59.400
Она привязывается к соответствующему оборудованию
и между ними настраивается VPN соединение.

00:04:59.400 --> 00:05:03.037
Следует обратить внимание
также, что к одному Virtual

00:05:03.061 --> 00:05:07.400
Private Gateway можно подключить
несколько Customer Gateway.

00:05:07.400 --> 00:05:15.400
Таким образом предоставить Highly
Availability на стороне On-premise Network.

00:05:15.400 --> 00:05:21.400
На этом мы подошли к концу нашей
второй части сегодняшней лекции.

00:05:21.400 --> 00:05:23.400
Давайте остановимся
на основных моментах.

00:05:23.400 --> 00:05:31.667
Первое это то, что есть сервис AWS Site-to-Site
VPN, который позволяет соединить локальную

00:05:31.691 --> 00:05:39.400
сеть с VPC на стороне облака AWS через
создание VPN подключения поверх интернета.

00:05:39.400 --> 00:05:44.055
Сервис AWS Site-to-Site VPN
поддерживает два варианта роутинга Static и

00:05:44.079 --> 00:05:49.400
Dynamic в зависимости от того, какие
протоколы поддерживает ваше оборудование.

00:05:49.400 --> 00:05:58.162
И третье это то, что на стороне On-premise
можно задействовать несколько Customer

00:05:58.186 --> 00:06:06.400
Gateway и все эти подключения
направить к одному Virtual Private Gateway.

00:06:06.400 --> 00:06:13.015
Мы с вами добрались до третьей части
нашей сегодняшней лекции и здесь подробнее

00:06:13.039 --> 00:06:19.400
рассмотрим сервис AWS Direct Connect.
Также ее сокращенно называют AWS DX.

00:06:19.400 --> 00:06:23.388
Идея этого сервиса такая же,
она помогает нам локальную

00:06:23.412 --> 00:06:27.400
сеть подключить с облаком
AWS, но делает он это иначе.

00:06:27.400 --> 00:06:37.400
Когда говорили про сервис AWS Site-to-Site VPN, мы
пробрасывали VPN канал поверх интернет подключения.

00:06:37.400 --> 00:06:41.888
И если у вас интернет подключения
ненадежные либо слабые,

00:06:41.912 --> 00:06:46.400
то в этом случае VPN работает
в рамках этих ограничений.

00:06:46.400 --> 00:06:53.400
В случае, если интернета не будет, то VPN
подключения до вашего облака пропадает.

00:06:53.400 --> 00:06:59.400
Когда мы говорим про Direct Connect, здесь
происходит качественно другое подключение.

00:06:59.400 --> 00:07:04.888
Мы с вами помним, есть
глобальная сеть AWS и мы знаем, что

00:07:04.912 --> 00:07:10.400
есть партнеры AWS, которые
распространены по всему миру.

00:07:10.400 --> 00:07:19.948
И они при настройке Direct Connect с глобальной
инфраструктурой AWS подтягивают до своих

00:07:19.972 --> 00:07:30.400
дата-центров прямое подключение без выхода в
интернет, что предоставляет большие возможности.

00:07:30.400 --> 00:07:38.604
То есть это подключение фактически равноценно
тому, что глобальная инфраструктура AWS и ресурсы,

00:07:38.628 --> 00:07:46.400
находящиеся в дата-центрах партнера, могут
общаться как будто бы в одной локальной сети.

00:07:46.400 --> 00:07:52.086
И это дает возможность создать
канал больше пропускной способности.

00:07:52.110 --> 00:07:58.400
Предоставляется два варианта.
Это 1 ГБит в секунду и 10 ГБит в секунду.

00:07:58.400 --> 00:08:02.388
Также при подключении через
Direct Connect не происходит

00:08:02.412 --> 00:08:06.400
выхода в интернет, то есть
мы независимы от интернета.

00:08:06.400 --> 00:08:11.400
Если интернет отключается, то ваше
подключение к облаку AWS остается.

00:08:11.400 --> 00:08:19.060
Таким образом, для различных
use-кейсов использование сервиса Direct

00:08:19.084 --> 00:08:26.400
Connect может быть более
подходящим, чем AWS Site-to-Site VPN.

00:08:26.400 --> 00:08:32.165
Другой важный момент это то, что
Direct Connect оплачивается индивидуально

00:08:32.189 --> 00:08:37.400
и может стоить в несколько раз
дороже, чем AWS Site-to-Site VPN.

00:08:37.400 --> 00:08:42.888
Поэтому необходимо взвесить
все аргументы за и против и после

00:08:42.912 --> 00:08:48.400
уже принимать решение о переходе
к сервису AWS Direct Connect.

00:08:48.400 --> 00:08:55.888
Какие есть популярные use-кейсы? Первые - это
 гибридные инфраструктуры, то есть когда

00:08:55.912 --> 00:09:03.400
у вас часть инфраструктуры находится
локально, а другая часть находится в облаке AWS.

00:09:03.400 --> 00:09:08.067
Вы не планируете мигрировать
в облако либо обратно в

00:09:08.091 --> 00:09:13.400
локальный дата-центр, а
продолжаете жить в таком режиме.

00:09:13.400 --> 00:09:19.465
В этом случае у вас может передаваться
достаточно большой объем информации между

00:09:19.489 --> 00:09:26.400
облаком и локальной инфраструктурой, поэтому
Direct Connect может быть удачным решением.

00:09:26.400 --> 00:09:34.971
Другой вариант - когда передается большой объем
 информации и другие два варианта - это когда

00:09:34.995 --> 00:09:43.400
нам необходимо обеспечить более стабильную работу
подключения в зависимости от вашей бизнес задачи.

00:09:43.400 --> 00:09:48.299
И также бывают некоторые
регуляторные требования, которые не

00:09:48.323 --> 00:09:53.638
разрушают передачу некоторых
чувствительных персональных данных

00:09:53.662 --> 00:09:59.019
передавать по сети интернет.
В этом случае с Direct Connect мы

00:09:59.043 --> 00:10:04.400
не выходим в интернет и не
нарушаем эти регуляторные требования.

00:10:04.400 --> 00:10:09.388
Давайте с вами теперь на примере
этой диаграммы рассмотрим подключение

00:10:09.412 --> 00:10:14.400
локальной инфраструктуры с облаком
AWS через сервис AWS Direct Connect.

00:10:14.400 --> 00:10:18.507
Посередине вы видите
некоторые DX location, в котором

00:10:18.531 --> 00:10:23.271
находится ресурс DX endpoint.
Этот DX endpoint подключается

00:10:23.295 --> 00:10:27.077
напрямую к глобальной
инфраструктуре AWS с одной

00:10:27.101 --> 00:10:31.610
стороны, с другой стороны
до него необходимо произвести

00:10:31.634 --> 00:10:36.078
подключение по двум каналам,
приватному и публичному от

00:10:36.102 --> 00:10:40.545
вашего локального дата-центра 
до DX endpoint. Как только

00:10:40.569 --> 00:10:44.564
вы это проделываете вы
через DX endpoint получаете

00:10:44.588 --> 00:10:49.400
возможность подключаться к
любому VPC в любом регионе AWS.

00:10:49.400 --> 00:10:55.584
Почему? Потому что DX endpoint подключается
напрямую к глобальной инфраструктуре

00:10:55.608 --> 00:11:01.400
AWS, а все VPC и так находятся
там,поэтому появляется такая возможность.

00:11:01.400 --> 00:11:07.388
Также через DX endpoint вы можете
через этот расширенный канал, выходя

00:11:07.412 --> 00:11:13.400
в интернет, обращаться к публичным
сервисам AWS, например Amazon S3.

00:11:13.400 --> 00:11:19.035
Почему такой вариант может быть 
интересен? Это связано с небольшим

00:11:19.059 --> 00:11:25.388
каналом подключения в интернет от 
вашего дата центра. То есть если у вас

00:11:25.412 --> 00:11:31.394
канал небольшой, то через DX
endpoint вы можете этот канал фактически

00:11:31.418 --> 00:11:37.400
расширить и передавать больше
объема информации с большей скоростью.

00:11:37.400 --> 00:11:42.650
Давайте теперь рассмотрим
следующий пример реализации высокой

00:11:42.674 --> 00:11:47.925
доступности подключения
локального дата-центра с облаком AWS.

00:11:47.949 --> 00:11:53.242
В этом случае мы через партнера
AWS используя сервис AWS Direct

00:11:53.266 --> 00:11:58.473
Connect подключили как основной
канал локального дата-центра

00:11:58.497 --> 00:12:03.489
с облаком AWS и как резервный
использовали AWS Site to Site

00:12:03.513 --> 00:12:08.937
VPN и подключили через интернет 
VPN соединение. Здесь хотелось

00:12:08.961 --> 00:12:14.212
бы отдельно напомнить, что в
случае с Direct Connect есть два

00:12:14.236 --> 00:12:19.400
варианта канала. Это 1 ГБит 
в секунду и 10 ГБит в секунду.

00:12:19.400 --> 00:12:26.382
Когда мы говорим подключение через
VPN, максимально оно может достигать

00:12:26.406 --> 00:12:33.388
1.25 ГБит в секунду, но все зависит
от вашего интернет соединения.

00:12:33.412 --> 00:12:40.783
Если сам канал не такой широкий, то поверх
него быстрее этого канала вы передавать

00:12:40.807 --> 00:12:47.400
не сможете. Это и есть основное
ограничение вашего VPN подключения.

00:12:47.400 --> 00:12:52.611
Другой случай, представим, что вы
международная компания, у вас есть несколько

00:12:52.635 --> 00:12:58.388
дата-центров, где вы хостите часть вашего 
приложения. Другая часть вашего приложения

00:12:58.412 --> 00:13:03.626
находится в облаке AWS и вам необходимо
для корректного функционирования вашего

00:13:03.650 --> 00:13:09.400
приложения обеспечить постоянные соединения
между облаком и локальными дата-центрами.

00:13:09.400 --> 00:13:14.217
В этом случае рекомендуется от каждого
дата-центра настроить подключение

00:13:14.241 --> 00:13:18.513
в облако AWS через AWS Direct Connect.
Таким образом, в случае

00:13:18.537 --> 00:13:23.457
неисправности одного из дата-центров
у вас останется достаточно широкий

00:13:23.481 --> 00:13:28.400
канал, прямое подключение к облаку
AWS и приложение продолжит работать.

00:13:28.400 --> 00:13:32.416
Мы с вами добрались до конца
третьей части нашей сегодняшней

00:13:32.440 --> 00:13:36.388
лекции. Давайте вспомним 
самые основные моменты.

00:13:36.412 --> 00:13:40.428
Первое - это то, что AWS Direct Connect
использует открытые стандарты

00:13:40.452 --> 00:13:44.400
для подключения напрямую к
глобальной инфраструктуре AWS.

00:13:44.400 --> 00:13:48.657
При подключении через AWS
Direct Connect у вас появляется

00:13:48.681 --> 00:13:54.006
возможность напрямую обратиться к
любому VPC, к любому публичному AWS

00:13:54.030 --> 00:13:59.008
сервису, через него находящимся 
в любом регионе AWS. Это логично,

00:13:59.032 --> 00:14:04.400
так как все ресурсы AWS находятся
в одной глобальной инфраструктуре.

00:14:04.400 --> 00:14:12.558
Поэтому подключившись к нему один раз, вы получаете
доступ ко всем ресурсам. Также мы рассмотрели

00:14:12.582 --> 00:14:20.400
два примера настройки высокодоступного
подключения из локального дата-центра в облако AWS.

00:14:20.400 --> 00:14:23.527
В первом случае используется
Direct Connect и VPN

00:14:23.551 --> 00:14:27.397
соединение как резервные, а
во втором случае рекомендуется

00:14:27.421 --> 00:14:31.398
использовать Direct Connect
для каждого из дата-центров.

00:14:31.422 --> 00:14:35.400
Это позволит предоставить высокую
доступность ваших приложений.

00:14:35.400 --> 00:14:39.936
Но здесь также хотелось
бы напомнить, Direct Connect

00:14:39.960 --> 00:14:45.031
может стоить несколько раз
дороже, чем Site-to-Site VPN,

00:14:45.055 --> 00:14:50.215
поэтому необходимо все
взвесить и в случае, если вас этот

00:14:50.239 --> 00:14:55.400
сервис устраивает, то вы ее
используете для подключения.

00:14:55.400 --> 00:15:01.888
Мы с вами добрались до четвертой части
нашей сегодняшней лекции и здесь мы подробнее

00:15:01.912 --> 00:15:08.400
разберем подключение VPC в облаке и AWS
между собой, используя функционал VPC Peering.

00:15:08.400 --> 00:15:13.400
Представим случай, у вас есть
приложение, приложение растет

00:15:13.424 --> 00:15:18.424
и развивается и когда-то все
ваши environment, то есть среды,

00:15:18.448 --> 00:15:23.194
находились внутри одной VPC,
но с увеличением и развитием

00:15:23.218 --> 00:15:28.388
вашего приложения все большее
количество ресурсов создается,

00:15:28.412 --> 00:15:33.100
все большее количество AWS
лимитов вы достигаете, поэтому

00:15:33.124 --> 00:15:37.811
логичным решением с точки
зрения управления, видимости и

00:15:37.835 --> 00:15:42.641
изолирования друг от друга
разных нагрузок, как решение вы

00:15:42.665 --> 00:15:48.400
создаете разные VPC и к каждой
среде привязываете определенные VPC.

00:15:48.400 --> 00:15:51.707
То есть в одном VPC будет
находиться Dev среда, в другом

00:15:51.731 --> 00:15:55.400
VPC тестовая среда и в последней
основная Production среда.

00:15:55.400 --> 00:16:02.294
Но в силу различных факторов у вас
остается необходимость подключения

00:16:02.318 --> 00:16:08.400
от одной среды к другой для
выполнения тех или иных задач.

00:16:08.400 --> 00:16:13.125
И в этом случае к нам на помощь
приходит функционал VPC Peering,

00:16:13.149 --> 00:16:18.400
который дает возможность подключить
один VPC к другому VPC напрямую.

00:16:18.400 --> 00:16:23.400
В этом случае не создается никаких VPN
соединений, никакие Gateway не нужно создавать.

00:16:23.400 --> 00:16:31.514
Почему? Потому что обе VPC находятся в
глобальной инфраструктуре AWS и вы фактически две

00:16:31.538 --> 00:16:40.400
локальные сети в рамках одной корпоративной
сети соединяете между собой через локальную сеть.

00:16:40.400 --> 00:16:47.426
И в этом случае у вас нет выхода в интернет, вы
остаетесь в той же глобальной сети и даже само

00:16:47.450 --> 00:16:54.400
подключение, оно имеет больший канал, больше
данных можете передавать с большей скоростью.

00:16:54.400 --> 00:17:01.992
Таким образом, при таком подключении
вы остаетесь в пространстве приватных

00:17:02.016 --> 00:17:09.400
IP адресов и с публичными IP адресами
вам работать нет необходимости.

00:17:09.400 --> 00:17:18.400
Давайте рассмотрим на примере этой диаграммы, как
происходит подключение двух VPC через VPC Peering.

00:17:18.400 --> 00:17:27.157
Первым делом создается Peering Connection, это
некоторый ресурс. На стороне AWS Management

00:17:27.181 --> 00:17:35.400
Console вы создаете Peering Connection и указываете
VPC, который делает запрос на подключение на Peering.

00:17:35.400 --> 00:17:38.883
И вторым VPC указываете
тот VPC, который вы хотите

00:17:38.907 --> 00:17:43.388
подключить. Здесь я бы хотел 
особо отметить, что с VPC Peering

00:17:43.412 --> 00:17:47.537
вы можете подключать различные
VPC между собой, находящиеся

00:17:47.561 --> 00:17:51.400
не только в одном регионе,
но и в различных регионах.

00:17:51.400 --> 00:17:55.888
Более того, вы можете подключать
VPC между собой не только в рамках

00:17:55.912 --> 00:18:00.400
одного AWS аккаунта, а подключиться
к VPC в другом AWS аккаунте.

00:18:00.400 --> 00:18:04.888
Самый важный момент это то,
что при создании Peering Connection

00:18:04.912 --> 00:18:09.400
отправляется приглашение
подключения к соответствующему VPC.

00:18:09.400 --> 00:18:16.400
Если она находится в том же AWS аккаунте, то в том
же AWS Management Console вы увидите приглашение.

00:18:16.400 --> 00:18:22.400
После того как вы ее принимаете, создается Peering
 Connection и две VPC между собой связываются.

00:18:22.400 --> 00:18:28.955
В случае, если второй VPC находится в другом AWS
аккаунте, то либо у вас должен быть доступ к этому

00:18:28.979 --> 00:18:35.400
аккаунту, либо должна быть договоренность, что
владелец этого AWS аккаунта примет приглашение.

00:18:35.400 --> 00:18:46.400
Как только вы это сделаете, останется несколько
дополнительных шагов. Это - настройка Route Tables.

00:18:46.400 --> 00:18:58.400
Представим случай, у нас есть VPC A и у
нее CIDR блок 10.1.0.0 и CIDR блок размера 16.

00:18:58.400 --> 00:19:09.400
Другой случай, это когда у нас есть VPC B и у нее
CIDR блок 10.2.0.0 и размера 16. Это 65000 адресов.

00:19:09.400 --> 00:19:15.273
Для того чтобы вы смогли
видеть ресурсы в VPC B из VPC A,

00:19:15.297 --> 00:19:21.171
вам необходимо в Route Table
привязанном к VPC A прописать

00:19:21.195 --> 00:19:27.785
дополнительный Routing Rule,
где Destination вы указываете CIDR

00:19:27.809 --> 00:19:34.400
блок VPC B и как Target указываете
Peering Connection Resource.

00:19:34.400 --> 00:19:42.400
То есть вы через этот Peering Connection
Resource идете в ресурсы в CIDR блоке VPC B.

00:19:42.400 --> 00:19:47.400
То же самое, но противоположно
вы проделываете со стороны VPC B.

00:19:47.400 --> 00:19:56.888
Там для Route Table прописываете дополнительный
Routing Rule, где как Destination указываете

00:19:56.912 --> 00:20:06.400
CIDR блок VPC A и как Target указываете тот
же Peering Connection Resource, то есть PCX-1.

00:20:06.400 --> 00:20:12.400
Когда мы подключаем несколько VPC между
собой, следует помнить о некоторых ограничениях.

00:20:12.400 --> 00:20:18.400
Мы работаем в пространстве
приватных IP адресов.

00:20:18.400 --> 00:20:28.400
Второе - мы можем подключать VPC, находящиеся
в различных регионах и различных AWS аккаунтах.

00:20:28.400 --> 00:20:35.400
Другой очень важный момент это то, что
CIDR блоки VPC не должны пересекаться.

00:20:35.400 --> 00:20:42.400
Если они пересекаются, то между
ними настроить VPC Peering не получится.

00:20:42.400 --> 00:20:47.400
Между несколькими VPC вы можете
создать только один Peering Resource.

00:20:47.400 --> 00:20:51.164
То есть не получится сделать
резервный Peering Resource, так

00:20:51.188 --> 00:20:55.400
чтобы трафик в случае проблем с
первым проходил через резервный.

00:20:55.400 --> 00:20:59.256
На самом деле даже
необходимости в этом нет, так как

00:20:59.280 --> 00:21:03.818
Peering Connection Resource
создается на стороне глобальной

00:21:03.842 --> 00:21:08.648
инфраструктуры AWS и уже в
нем внутри сидит Highly Availability

00:21:08.672 --> 00:21:13.400
и дополнительно его чем-то
компенсировать нет необходимости.

00:21:13.400 --> 00:21:19.964
И последний момент, который
следует помнить, что при соединении

00:21:19.988 --> 00:21:27.400
нескольких VPC через VPC Peering
эффект транзитивности не создается.

00:21:27.400 --> 00:21:32.400
То есть представьте, у вас
есть VPC A, VPC B и VPC C.

00:21:32.400 --> 00:21:37.400
Далее представим, что вы сделали
VPC Peering между VPC A и VPC B.

00:21:37.400 --> 00:21:43.400
Далее сделали VPC Peering
Connection между VPC B и VPC C.

00:21:43.400 --> 00:21:52.400
И это не означает, что у вас появится возможность из
VPC A обращаться к ресурсам, находящимся в VPC C.

00:21:52.400 --> 00:21:56.400
То есть эффекта
транзитивности здесь не будет.

00:21:56.400 --> 00:22:00.964
Если вам необходимо, чтобы из
VPC A можно было обращаться

00:22:00.988 --> 00:22:05.470
к ресурсам из VPC C и обратно,
вам необходимо с учетом

00:22:05.494 --> 00:22:09.683
всех тех ограничений,
которые мы перечислили ранее,

00:22:09.707 --> 00:22:14.400
создать новый Peering
Connection между этими двумя VPC.

00:22:14.400 --> 00:22:22.136
Когда вы работаете с несколькими VPC,
следует помнить, что необходимо создавать

00:22:22.160 --> 00:22:29.400
connection между двумя VPC только
в тех местах, где есть необходимость.

00:22:29.400 --> 00:22:38.888
Так как в погоне за подключением всех VPC
между собой мы можем прийти к тому, что у нас

00:22:38.912 --> 00:22:48.400
достаточно большое количество Peering
Connection и это становится сложно контролируемым.

00:22:48.400 --> 00:22:52.888
Другой момент это то, что
мы должны строить архитектуру

00:22:52.912 --> 00:22:57.400
таким образом, чтобы оно
могло легко масштабироваться.

00:22:57.400 --> 00:23:02.055
Для тех случаев, когда у вас растет
количество VPC и вам, тем не менее,

00:23:02.079 --> 00:23:07.400
необходимо их между собой соединять,
есть другие специально созданные сервисы.

00:23:07.400 --> 00:23:15.400
Про них мы будем говорить в следующих секциях.
Теперь давайте разберем один пример.

00:23:15.400 --> 00:23:23.400
Когда мы работаем в нескольких регионах, у нас есть
основная инфраструктура, находящаяся в регионе A.

00:23:23.400 --> 00:23:28.400
Далее, есть часть инфраструктуры,
представим DR, находится в регионе B.

00:23:28.400 --> 00:23:32.400
И в основном регионе у нас
несколько различных VPC.

00:23:32.400 --> 00:23:38.400
И здесь представлен пример, когда в одном
из VPC у нас так называемые shared resources.

00:23:38.400 --> 00:23:43.921
Это может быть что угодно, либо модуль
приложения, либо может быть, например, Active

00:23:43.945 --> 00:23:50.400
Directory, который хранит информацию всех учеток
наших пользователей внутри корпоративной сети.

00:23:50.400 --> 00:23:58.400
И в этом случае это тот VPC, к которому
многие VPC должны будут подключаться.

00:23:58.400 --> 00:24:01.400
И здесь вы видите в
диаграмме как раз таки пример.

00:24:01.400 --> 00:24:07.388
Мы видим, что наши VPC,
обслуживающие Internal Application,

00:24:07.412 --> 00:24:13.400
подключаются напрямую через
VPC Peering к нашему shared VPC.

00:24:13.400 --> 00:24:20.400
А для тех случаев, где нет необходимости
подключаться к этому VPC, оно не настроено.

00:24:20.400 --> 00:24:32.400
Также вы видите, что настроено VPN подключение через
сайт VPN из локального дата-центра в наш shared VPC.

00:24:32.400 --> 00:24:37.400
На этом мы подошли к концу четвертой
части нашей сегодняшней лекции.

00:24:37.400 --> 00:24:40.400
Давайте остановимся и вспомним
самые основные моменты.

00:24:40.400 --> 00:24:44.521
VPC Peering - это тот ресурс, тот
функционал, который позволяет

00:24:44.545 --> 00:24:48.400
соединить напрямую два
отдельно стоящих VPC между собой.

00:24:48.400 --> 00:24:55.400
Эти VPC могут находиться в различных регионах,
также они могут находиться в различных AWS аккаунтах.

00:24:55.400 --> 00:24:59.999
При создании VPC Peering тот
VPC, который отправляет запрос,

00:25:00.023 --> 00:25:04.388
создает Peering Connection,
а вторая часть VPC, которая

00:25:04.412 --> 00:25:08.894
принимает это приглашение,
должна это приглашение принять

00:25:08.918 --> 00:25:13.400
и после этого у нас активируется
Peering Connection ресурс.

00:25:13.400 --> 00:25:17.583
Далее нам необходимо настроить
route tables и возможно security

00:25:17.607 --> 00:25:22.400
группы, чтобы ресурсы между двумя
VPC могли обмениваться информацией.

00:25:22.400 --> 00:25:27.400
При создании Peering Connection
есть определенные ограничения.

00:25:27.400 --> 00:25:34.621
Мы работаем в пространстве приватных IP адресов,
то есть публичные IP адреса не задействованы,

00:25:34.645 --> 00:25:41.400
так как мы остаемся в границах глобальной
инфраструктуры AWS и в интернет не выходим.

00:25:41.400 --> 00:25:45.462
Другой момент это то, что при
создании подключения между

00:25:45.486 --> 00:25:49.400
несколькими VPC, CIDR
блоки не должны пересекаться.

00:25:49.400 --> 00:25:52.400
Если они пересекаются, то Peering
Connection настроить не получится.

00:25:52.400 --> 00:25:58.956
Поэтому нужно заблаговременно это
продумать и при создании любых VPC в рамках

00:25:58.980 --> 00:26:06.400
организации создавать их таким образом,
чтобы CIDR блоки изначально не пересекались.

00:26:06.400 --> 00:26:11.400
Даже если в будущем они не будут соединены, 
наперед мы этого знать не можем.

00:26:11.400 --> 00:26:20.400
Намного дешевле это в начале учесть, нежели потом
VPC со всеми ее ресурсами переносить в другой VPC.

00:26:20.400 --> 00:26:23.400
Это потребует немалых
усилий и затрат компании.

00:26:26.400 --> 00:26:31.888
Между двумя VPC невозможно настроить
несколько Peering Connection, но в этом даже

00:26:31.912 --> 00:26:37.400
нет необходимости, так как Highly
Availability уже сидит внутри Peering Connection.

00:26:37.400 --> 00:26:44.400
И последний момент, который часто приходит на
экзамене в виде вопроса, это эффект транзитивности.

00:26:44.400 --> 00:26:53.400
Если мы подключаем VPC A к VPC B, дальше VPC B к
VPC C, то между VPC A и VPC C связь не появляется.

00:26:53.400 --> 00:27:00.400
Если нужно их между собой соединить, то нужно явно
создать Peering Connection между двумя этими VPC.

00:27:03.400 --> 00:27:07.388
Мы с вами добрались до пятой
части нашей сегодняшней лекции,

00:27:07.412 --> 00:27:11.400
и здесь подробнее остановимся
на сервисе AWS Transit Gateway.

00:27:11.400 --> 00:27:19.539
Представим случай, у нас есть несколько
VPC, и необходимо предоставить возможность

00:27:19.563 --> 00:27:27.400
каждой VPC подключаться до любого
другого VPC в рамках нашей инфраструктуры.

00:27:27.400 --> 00:27:35.188
Проблема с VPC Peering в том, что при
увеличении количества VPC и необходимости

00:27:35.212 --> 00:27:44.400
обеспечить полное подключение между всеми
VPC, количество VPC Peering очень быстро растет.

00:27:44.400 --> 00:27:50.400
Давайте попробуем посчитать. Представим, что
у нас есть две VPC, и нужно соединить между собой.

00:27:50.400 --> 00:27:53.400
В этом случае у нас создается
один Peering Connection.

00:27:53.400 --> 00:27:58.132
Далее, если у нас увеличивается
количество VPC на одну и равняется

00:27:58.156 --> 00:28:02.450
трем, в этом случае уже
необходимо создать три VPC Peering

00:28:02.474 --> 00:28:07.462
Connection, то есть между первым
и вторым, вторым и третьим, а также

00:28:07.486 --> 00:28:12.400
между третьим и первым, так как
транзитивность не поддерживается.

00:28:12.400 --> 00:28:18.888
Если мы говорим про четыре VPC, то в
этом случае вы можете представить, что

00:28:18.912 --> 00:28:25.400
чтобы все VPC соединить между
собой, нам уже нужно 6 Peering Connection.

00:28:25.400 --> 00:28:31.999
Если же попробуем посчитать
случай с пятью VPC, то в

00:28:32.023 --> 00:28:39.400
этом случае нам необходимо
будет 15 Peering Connection.

00:28:39.400 --> 00:28:44.400
И вы видите, как быстро растет
необходимое количество VPC Peering.

00:28:44.400 --> 00:28:57.400
Для того, чтобы вот этот конкретный случай легче
управлять, было разработано специальное решение.

00:28:57.400 --> 00:29:05.276
Это сервис AWS Transit Gateway. Идея ее в том, 
что вы подключаете некоторый сетевой

00:29:05.300 --> 00:29:12.888
Connection, будь то VPC, либо подключение
от локального дата-центра в виде VPN

00:29:12.912 --> 00:29:20.406
Connection, либо в виде Direct Connect
Gateway, то при подключении к AWS Transit

00:29:20.430 --> 00:29:28.400
Gateway все существующие подключения,
становятся доступными для нового подключения.

00:29:28.400 --> 00:29:38.388
Вы видите на примере шесть различных подключений,
и нам не пришлось создавать более 15 Peering

00:29:38.412 --> 00:29:48.400
Connection, а достаточно сделать один Connection
для каждого источника до AWS Transit Gateway.

00:29:48.400 --> 00:29:54.388
И таким образом каждый источник
получил возможность подключаться к

00:29:54.412 --> 00:30:00.400
любым другим подключениям,
которые находятся в этом Transit Gateway.

00:30:00.400 --> 00:30:03.400
Давайте теперь подробнее
поговорим, что это за сервис.

00:30:03.400 --> 00:30:10.676
AWS Transit Gateway - это так называемый
networking сервис, который позволяет

00:30:10.700 --> 00:30:17.400
легче подключать между собой
большое количество сетевых подключений.

00:30:17.400 --> 00:30:23.045
Оно работает в виде центрального
хаба, и все подключения, которые к

00:30:23.069 --> 00:30:29.400
нему подключаются, получают доступ
ко всем другим подключенным ресурсам.

00:30:29.400 --> 00:30:40.400
На один AWS Transit Gateway можно
подключить до 5000 различных Connection.

00:30:40.400 --> 00:30:48.388
Здесь я бы хотел обратить внимание, что для
Transit Gateway, также и для Site-to-Site VPN сервиса

00:30:48.412 --> 00:30:56.400
имеются определенные ограничения, недостатки и
преимущества. Также они отличаются по прайсингу.

00:30:56.400 --> 00:31:03.888
Поэтому в зависимости от вашего бизнес-кейса,
вам обязательно нужно все эти моменты учесть, а

00:31:03.912 --> 00:31:11.400
именно моменты, связанные с архитектурой, а
также, что также немаловажно, это вопросы оплаты.

00:31:11.400 --> 00:31:15.966
Может получиться так, что
Transit Gateway для вас невыгодное

00:31:15.990 --> 00:31:20.400
решение, и следует оставаться
с VPC Peering Connection.

00:31:20.400 --> 00:31:25.882
Либо обратный случай, VPC
Peering Connection вам не подходит,

00:31:25.906 --> 00:31:31.388
так как количество подключений
растет и это невыгодно и может

00:31:31.412 --> 00:31:36.628
оказаться, что Transit Gateway
не только упрощает управление

00:31:36.652 --> 00:31:42.400
всеми этими Connection, но и
выходит более выгодным по расходам.

00:31:42.400 --> 00:31:47.606
Для того, чтобы лучше понять, как
происходит настройка AWS Transit Gateway,

00:31:47.630 --> 00:31:53.400
давайте рассмотрим следующий пример.
У нас есть 3 VPC со следующими CIDR блоками.

00:31:53.400 --> 00:31:57.524
Нам необходимо соединить их
все между собой, без использования

00:31:57.548 --> 00:32:01.400
Peering Connection, а с
использованием Transit Gateway.

00:32:01.400 --> 00:32:05.400
Первым делом нам необходимо
создать ресурс AWS Transit Gateway.

00:32:05.400 --> 00:32:12.400
Далее, на стороне каждого VPC необходимо
настроить ENI, то есть Elastic Network Interface.

00:32:12.400 --> 00:32:17.400
Это тот ресурс, через который
происходит подключение к VPC.

00:32:17.400 --> 00:32:24.979
Подключаем ее к Route Table, то есть у
каждого VPC есть настроенный дефолтовый Route

00:32:25.003 --> 00:32:32.400
Table, который разрешает трафик между
всеми ресурсами в рамках конкретного VPC.

00:32:32.400 --> 00:32:37.400
Теперь нам необходимо произвести
изменения в каждой из Route Table.

00:32:37.400 --> 00:32:43.888
На примере третьего VPC мы видим,
что мы указали как Destination CIDR блок,

00:32:43.912 --> 00:32:50.400
охватывающий CIDR блоки всех трех
VPC, и как Target указали Transit Gateway.

00:32:50.400 --> 00:32:58.400
Далее, следующим шагом нам необходимо на
стороне Transit Gateway настроить Route Table.

00:32:58.400 --> 00:33:06.224
И здесь мы указываем, что как
Destination к каждому из VPC мы указываем

00:33:06.248 --> 00:33:13.400
Route с Target Elastic Network
Interface соответствующего VPC.

00:33:13.400 --> 00:33:20.020
После чего при достижении трафика до
Transit Gateway, Transit Gateway смотрит куда

00:33:20.044 --> 00:33:27.400
направляется трафик, исходя из правила в
Route Table, смотрит какой Target использовать.

00:33:27.400 --> 00:33:34.214
Представим, что мы с VPC 3
обращаемся к ресурсам из CIDR блока

00:33:34.238 --> 00:33:40.940
первого VPC, то он посмотрит
на IP адрес, увидит на стороне

00:33:40.964 --> 00:33:48.170
Route Table у третьего VPC Route,
который говорит, что Target мы

00:33:48.194 --> 00:33:55.400
используем Transit Gateway и
обращаемся на вот этот CIDR блок.

00:33:55.400 --> 00:33:59.400
После чего трафик уходит
на сторону Transit Gateway.

00:33:59.400 --> 00:34:04.888
Transit Gateway также смотрит
на свой Route Table и видит, что

00:34:04.912 --> 00:34:10.400
тот IP адрес, к которому мы
обращаемся, относится к первому VPC.

00:34:10.400 --> 00:34:16.361
А чтобы направить трафик к первому
VPC, нам необходимо использовать

00:34:16.385 --> 00:34:22.888
соответствующий Elastic Network
Interface и направлять, соответственно,

00:34:22.912 --> 00:34:29.190
на этот ресурс этот трафик.
После чего можно будет этот трафик увидеть

00:34:29.214 --> 00:34:35.400
на стороне VPC 1, то есть фактически
connection будет предоставлен.

00:34:35.400 --> 00:34:42.400
Теперь рассмотрим следующий случай. У нас 
есть VPN connection с локального дата-центра.

00:34:42.400 --> 00:34:50.561
И первый вариант – это предоставить
изолированное подключение от каждого VPC

00:34:50.585 --> 00:34:59.400
до ресурсов в локальном дата-центре, так
чтобы VPC между собой не пересекались.

00:34:59.400 --> 00:35:08.639
В этом случае нам достаточно изменить Route
Table в Transit Gateway и указать как Destination

00:35:08.663 --> 00:35:17.400
обозначение всего интернета, либо определенный
CIDR блок и направить этот трафик VPN.

00:35:17.400 --> 00:35:24.888
Таким образом, даже если вы как
трафик указываете IP адрес из первого

00:35:24.912 --> 00:35:32.400
VPC, то он все равно, согласно
Route Rule, направит ее в сторону VPN.

00:35:32.400 --> 00:35:39.400
И ресурсы, находящиеся в разных VPC,
между собой обмениваться трафиком не смогут.

00:35:39.400 --> 00:35:45.400
Но при этом они смогут направлять
трафик через VPN в локальные дата-центры.

00:35:45.400 --> 00:35:54.388
Следующий случай – это когда нам необходимо
весь трафик, который остается внутри AWS,

00:35:54.412 --> 00:36:03.400
но идет в другой VPC, сохранить, но так,
чтобы другой трафик направился в сторону VPN.

00:36:03.400 --> 00:36:08.926
В этом случае, мы можем либо изменить
Route Table у Transit Gateway, либо

00:36:08.950 --> 00:36:14.400
добавить еще один Route Table, в
котором мы укажем предыдущие Routes.

00:36:14.400 --> 00:36:21.888
Таким образом, когда мы захотим из
третьего VPC, например, обратиться к ресурсам

00:36:21.912 --> 00:36:29.400
из второго VPC, согласно Route Table
второму, мы успешно направим наш трафик.

00:36:29.400 --> 00:36:34.382
Далее, если мы захотим направить
наш трафик не к VPC, а к другому IP

00:36:34.406 --> 00:36:39.388
адресу, он не совпадет с правилами,
связанными с Route Table вторым,

00:36:39.412 --> 00:36:44.467
и уже посмотрит Route Table первый,
увидит, что этот трафик необходимо

00:36:44.491 --> 00:36:49.400
направить на сторону VPN, и
соответственно туда этот трафик уйдет.

00:36:53.400 --> 00:36:57.388
Для того, чтобы закрепить, как
необходимо производить настройку

00:36:57.412 --> 00:37:01.400
в случае AWS Transit Gateway,
давайте сделаем небольшой челлендж.

00:37:01.400 --> 00:37:09.400
В рамках этого челленджа нам дается 5 различных
VPC с уникальным CIDR блоком, не пересекающимся.

00:37:09.400 --> 00:37:13.888
Также есть у нас Transit Gateway,
и нам необходимо все VPC

00:37:13.912 --> 00:37:18.400
соединить полностью между
собой через AWS Transit Gateway.

00:37:18.400 --> 00:37:23.114
Какие действия необходимо сделать
на уровне Route Table каждого VPC, и

00:37:23.138 --> 00:37:28.400
какие действия необходимо произвести
на уровне Route Table Transit Gateway.

00:37:28.400 --> 00:37:32.400
Вы можете остановить это видео и
попытаться ответить самостоятельно.

00:37:37.400 --> 00:37:43.400
Отлично, думаю, вы смогли правильно ответить,
давайте проверим, что же необходимо было сделать.

00:37:43.400 --> 00:37:49.400
Первым делом, на уровне каждого
VPC нам необходимо добавить один Route.

00:37:49.400 --> 00:37:54.888
Этот Route как Destination содержит CIDR
блок, этот CIDR блок должен охватывать CIDR

00:37:54.912 --> 00:38:00.400
блоки всех существующих VPC, и как
Target необходимо указать наш Transit Gateway.

00:38:00.400 --> 00:38:07.388
Таким образом, мы помним с вами,
что на стороне Route Table дефолтовый

00:38:07.412 --> 00:38:14.400
первый Route содержит CIDR блок
этого VPC, и как Target указывает local.

00:38:14.400 --> 00:38:19.223
Это означает, что если IP
адрес, которому направляется

00:38:19.247 --> 00:38:23.888
трафик, относится к CIDR
блоку конкретного VPC, то

00:38:23.912 --> 00:38:28.923
он распознается как локальный
трафик и, соответственно,

00:38:28.947 --> 00:38:33.400
направляется к ресурсу,
находящемся в этом VPC.

00:38:33.400 --> 00:38:39.400
То есть, это тот Route, который позволяет всем
ресурсам внутри этого VPC общаться между собой.

00:38:39.400 --> 00:38:46.002
Теперь следующий Route, который
мы добавили, он охватывает все

00:38:46.026 --> 00:38:53.388
другие CIDR блоки, и если у нас
есть обращение к IP адресу, который

00:38:53.412 --> 00:39:00.394
не относится к CIDR блоку
конкретного VPC, а уходит наружу, то

00:39:00.418 --> 00:39:07.400
в этом случае мы проверяем,
относится ли он к общему CIDR блоку.

00:39:07.400 --> 00:39:10.400
Если да, то этот трафик
уходит к Transit Gateway.

00:39:10.400 --> 00:39:13.400
Подобные изменения необходимо
произвести на уровне каждого VPC.

00:39:13.400 --> 00:39:18.469
Теперь если мы говорим про Transit
Gateway, здесь нам необходимо

00:39:18.493 --> 00:39:23.400
в Route Table добавить 5 Routes
по 1 Route для каждого VPC.

00:39:23.400 --> 00:39:28.928
Этот Route содержит следующее.
Как Destination мы указываем CIDR block

00:39:28.952 --> 00:39:34.400
VPC, и как Target указываем
Elastic Network Interface этого же VPC.

00:39:34.400 --> 00:39:39.022
То есть если мы получаем в
Transit Gateway трафик, который

00:39:39.046 --> 00:39:44.888
направляется на такой-то IP адрес,
он проверяет все свои Routes, и если

00:39:44.912 --> 00:39:50.144
этот IP адрес относится к одному
из CIDR блоков в Destination,

00:39:50.168 --> 00:39:55.400
то он смотрит на Target и
направляет этот трафик к этому Target.

00:39:55.400 --> 00:40:07.400
Таким образом, мы смогли настроить связь
между всеми VPC, используя Transit Gateway.

00:40:07.400 --> 00:40:11.888
На этом мы подошли к концу 5-й
секции, и здесь можем отметить

00:40:11.912 --> 00:40:16.400
основные моменты, связанные
с сервисом AWS Transit Gateway.

00:40:16.400 --> 00:40:20.667
AWS Transit Gateway выполняет
ту же роль, что и VPC Peering

00:40:20.691 --> 00:40:25.400
Connection, но отличается тем,
что является центральным хабом.

00:40:25.400 --> 00:40:30.249
В случае с Peering Connection мы
подключаем две VPC между собой

00:40:30.273 --> 00:40:35.122
напрямую, а в случае Transit
Gateway нам достаточно подключить

00:40:35.146 --> 00:40:40.160
VPC к Transit Gateway, и он получает
доступ ко всем существующим

00:40:40.184 --> 00:40:44.400
connection, подключенным
к этому же Transit Gateway.

00:40:44.400 --> 00:40:49.687
В зависимости от вашего бизнес-кейса
или задачи, вам необходимо

00:40:49.711 --> 00:40:54.400
будет определиться, что
является для вас оптимальным.

00:40:54.400 --> 00:41:00.167
Либо использовать VPC Peering Connection
в случае, если у вас небольшое количество

00:41:00.191 --> 00:41:05.388
соединений между VPC, и в обратном
случае, если у вас большое количество

00:41:05.412 --> 00:41:10.712
VPC, и необходимо, чтобы каждый VPC
был соединен с каждым другим VPC, то в

00:41:10.736 --> 00:41:16.400
этом случае более подходящим решением
для вас может быть AWS Transit Gateway.

00:41:16.400 --> 00:41:24.888
Мы с вами добрались до шестой и заключительной
части нашей сегодняшней лекции, и здесь мы

00:41:24.912 --> 00:41:33.400
поговорим про возможности, позволяющие
ресурсам из VPC обращаться к другим AWS сервисам.

00:41:33.400 --> 00:41:38.400
Для того, чтобы это реализовать,
рекомендуется использовать VPC Endpoints.

00:41:38.400 --> 00:41:46.581
Это некоторый ресурс, который позволяет,
не выходя в интернет, оставаясь в рамках

00:41:46.605 --> 00:41:55.400
глобальной инфраструктуры AWS, подключаться
ресурсам из VPC напрямую к AWS сервисам.

00:41:55.400 --> 00:42:03.127
Таким образом, нам нет необходимости
настраивать Internet Gateway, VPN соединение,

00:42:03.151 --> 00:42:10.400
NAT Gateway и так далее. Существует два 
варианта подключения VPC Endpoints.

00:42:10.400 --> 00:42:17.471
Первый - это Interface Endpoint, когда нам
выделяется приватный IP адрес, и через этот

00:42:17.495 --> 00:42:25.400
приватный IP адрес, используя функционал AWS
Private Link, мы подключаемся к другим сервисам.

00:42:25.400 --> 00:42:28.663
Не все сервисы доступны.
Примеры этих сервисов - это

00:42:28.687 --> 00:42:32.400
Amazon CloudWatch, Amazon
EC2 и Elastic Cloud Balancing.

00:42:32.400 --> 00:42:38.533
Второй вариант - это Gateway Endpoint.
В этом случае производятся изменения на стороне

00:42:38.557 --> 00:42:44.400
route table, чтобы определенный трафик
направлять на поддерживаемые AWS сервисы.

00:42:44.400 --> 00:42:49.400
Примерами в этом случае
являются Amazon S3 и DynamoDB.

00:42:49.400 --> 00:42:56.400
Давайте теперь посмотрим на примерах,
как мы можем настроить Interface Endpoint.

00:42:56.400 --> 00:43:01.388
Самым первым делом нам необходимо
решить, с каким сервисом мы будем

00:43:01.412 --> 00:43:06.400
работать и поддерживается ли
этот сервис через Interface Endpoint.

00:43:06.400 --> 00:43:10.388
Если поддерживается, далее нам
необходимо определиться с VPC,

00:43:10.412 --> 00:43:15.400
определиться с subnet, откуда ресурсы
могут подключаться к этому сервису.

00:43:15.400 --> 00:43:20.400
В четвертом шаге вы видите, по умолчанию
можно активировать приватный DNS.

00:43:20.400 --> 00:43:22.400
Я чуть позже расскажу,
для чего это нужно.

00:43:22.400 --> 00:43:32.400
И последним шагом мы для нашего Network
Interface настраиваем необходимые Security Groups.

00:43:32.400 --> 00:43:41.400
Теперь давайте рассмотрим
примеры, как это все взаимодействует.

00:43:41.400 --> 00:43:48.932
Когда мы настраиваем подключение из нашего
VPC к определенному сервису, пусть это будет

00:43:48.956 --> 00:43:56.400
Amazon Kinesis Data Streams, мы можем к
нему обратиться через default DNS hostname.

00:43:56.400 --> 00:44:03.888
Это URL сервиса, через который мы можем обратиться
к этому сервису, но проблема в том, что это обращение

00:44:03.912 --> 00:44:11.400
идет через Internet gateway, через интернет и вы
дополнительным параметром указываете, что вы хотите.

00:44:11.400 --> 00:44:15.400
Для некоторых нагрузок
это неприемлемо.

00:44:15.400 --> 00:44:19.400
Есть другой вариант. Можно воспользоваться 
Endpoint Specific DNS Hostname.

00:44:19.400 --> 00:44:27.400
Это когда для нашего Interface Endpoint
назначается некоторый DNS Hostname.

00:44:27.400 --> 00:44:33.400
Грубо говоря, это URL адрес, по обращению
который трафик направляется на нужный вам сервис.

00:44:33.400 --> 00:44:37.400
Так вот, в этом случае
Private DNS он не включен.

00:44:37.400 --> 00:44:42.400
Таким образом, если мы хотим обратиться
к этому сервису, у нас есть два варианта.

00:44:42.400 --> 00:44:46.388
В случае обращения через default
DNS hostname трафик идет через

00:44:46.412 --> 00:44:50.400
Internet gateway, через интернет
добирается до нашего сервиса.

00:44:50.400 --> 00:44:58.095
Либо нам необходимо в стороне наших приложений
явно указывать наш специфичный уникальный URL,

00:44:58.119 --> 00:45:06.400
который был сгенерирован в рамках Interface
Endpoint с подключением к Amazon Kinesis Data Stream.

00:45:06.400 --> 00:45:13.388
При обращении по этому URL оно происходит
в рамках глобальной инфраструктуры AWS, не

00:45:13.412 --> 00:45:20.400
выходит в интернет и ресурсы внутри VPC
напрямую обращаются к определенному сервису.

00:45:20.400 --> 00:45:28.166
Теперь другой случай, когда мы
активировали Private DNS, то в этом случае нет

00:45:28.190 --> 00:45:37.388
необходимости через интернет, через Internet
gateway направлять трафик по дефолтовому DNS

00:45:37.412 --> 00:45:45.894
Hostname, а этот дефолтовый DNS Hostname
также остается активным, но при обращении

00:45:45.918 --> 00:45:54.400
по этому URL мы направляем наш трафик
через Interface gateway на нужный нам сервис.

00:45:54.400 --> 00:46:04.400
Грубо говоря, мы знаем дефолтовый DNS Hostname для
каждого из сервисов, она не меняется, стандартная.

00:46:04.400 --> 00:46:08.990
Так вот, если мы хотим ее
использовать, что очень удобно,

00:46:09.014 --> 00:46:13.276
мы можем включить опцию
Private DNS и таким образом

00:46:13.300 --> 00:46:17.308
для наших приложений
внутри VPC нет необходимости

00:46:17.332 --> 00:46:22.094
дополнительно там в переменных
средах указывать Endpoint

00:46:22.118 --> 00:46:26.274
Specific DNS Hostname, а
сразу, зная публичный URL

00:46:26.298 --> 00:46:30.455
определенного сервиса,
напрямую к нему обращаться,

00:46:30.479 --> 00:46:34.715
зная, что он идет через
Interface Endpoint в рамках

00:46:34.739 --> 00:46:39.400
глобальной инфраструктуры
AWS и без выхода в интернет.

00:46:39.400 --> 00:46:45.876
Отлично, на этом мы добрались до конца
шестой части нашей сегодняшней лекции,

00:46:45.900 --> 00:46:53.400
разобрали, что у нас есть возможность для
ресурсов из VPC подключаться к сервисам AWS.

00:46:53.400 --> 00:47:01.400
Есть два варианта. Первый вариант - это через
Interface gateway, а второй через Gateway Endpoint.

00:47:01.400 --> 00:47:05.632
В том и ином случае
поддерживаются те или иные сервисы

00:47:05.656 --> 00:47:09.888
AWS, в зависимости от того,
какой сервис вам нужен, и

00:47:09.912 --> 00:47:14.144
вы сможете посмотреть список
поддерживаемых сервисов и

00:47:14.168 --> 00:47:18.400
понять с каким из вариантов
вам необходимо двигаться.

00:47:21.400 --> 00:47:25.400
На этом мы подошли к концу
нашей сегодняшней лекции.

00:47:25.400 --> 00:47:31.400
Мы разобрали достаточно важные
вопросы, связанные с networking.

00:47:31.400 --> 00:47:37.388
Мы рассмотрели вопросы, как мы можем
подключить нашу локальную инфраструктуру

00:47:37.412 --> 00:47:43.400
с облаками AWS, какие для этого есть
возможности, как минимум два варианта.

00:47:43.400 --> 00:47:50.400
Также мы рассмотрели вариант подключения VPC,
 нескольких VPC между собой внутри облака AWS.

00:47:50.400 --> 00:47:53.400
Также есть несколько вариантов,
в зависимости от вашего случая.

00:47:53.400 --> 00:48:01.510
И последний вариант, мы также рассмотрели
случай, когда сервис не может быть расположен

00:48:01.534 --> 00:48:10.400
внутри VPC, но из VPC мы можем работать
безопасно с этими сервисами, используя VPC Endpoint.

00:48:13.400 --> 00:48:16.888
На этом слайде вы можете
видеть ключевые слова, которые

00:48:16.912 --> 00:48:20.400
помогут вам выйти на
дополнительные ресурсы в интернете.

00:48:20.400 --> 00:48:25.843
Преимущественно они ведут
документацию AWS, либо на

00:48:25.867 --> 00:48:32.400
записи из re:Invent, находящейся
в видео хостинге YouTube.

00:48:34.400 --> 00:48:37.400
На этом мы завершаем
нашу сегодняшнюю лекцию.

00:48:37.400 --> 00:48:42.400
Спасибо за внимание, увидимся с
вами на следующих наших активностях.