 Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной лекции. Тема сегодняшней лекции Connecting Networks. Ранее мы с вами говорили о том, из чего состоит VPC, какие у нее есть компоненты. Теперь же мы поднимаемся на уровень выше и посмотрим, как мы можем соединять между собой сети в облаке AWS, а также сеть в облаке AWS с нашей локальной сетью, которая не находится в облаке. Итак, давайте начнем. В рамках нашей сегодняшней лекции мы рассмотрим 6 тем. Первая тема касается наших лабораторных работ и посмотрим, какие компоненты добавятся. Далее во второй и третьей части мы рассмотрим вопросы, как связать локальную инфраструктуру с облаком AWS. Далее в четвертые и пятые мы рассмотрим, каким образом мы можем соединять VPC между собой в облаке AWS. И в самом конце рассмотрим дополнительные сервисы, которые нативно интегрируются с VPC. Мы с вами начинаем первую часть нашей сегодняшней лекции и здесь рассмотрим, какие задачи предстоят в рамках лабораторных работ. Согласно бизнес-кейсу, кафе запустила акцию. В рамках акции, если посетитель покупает 10 и более одинаковых позиций, то на подарок дается некоторый десерт. Но для того, чтобы отслеживать прогресс посетителей, необходимо сохранять некоторую персональную информацию. Это email-адрес и номер кредитной карты. Кафе не может хранить эту информацию в облаке AWS, ввиду некоторых ограничений, связанных с хранением данных в конкретной стране, где находится София и другие главные герои. Поэтому было решено создать локально базу данных, которая хранит данные пользователей, но при этом транзакционные данные и вся инфраструктура остается в облаке AWS. В тот момент, когда нужны эти данные, из облака AWS приходит прямой запрос на локальную инфраструктуру, а именно в нужную нам базу данных и подтягивает необходимые данные. Другой момент связан с VPC. Мы с вами помним, что у нас есть Dev среда, а также Prot среда. И тот и другой находится в одном VPC. София, посоветовавшись с Оливией, решает, что необходимо их разделить между собой. То есть Dev среда находится в отдельной изолированной VPC, а Prot среда находится в другой VPC. Но тем не менее, Оливия дополнительно советует Софии связать их между собой, так чтобы из Dev среды можно было обратиться к ресурсам на стороне Prot environment. Как вы видите, мы в рамках нашей лаборатурной работы будем работать с несколькими VPC в облаке AWS, а также выполним задачу, связанную с соединением VPC в облаке AWS и локальной инфраструктурой. Мы с вами добрались до второй части нашей сегодняшней лекции. И подробнее здесь остановимся на сервисе AWS Site-to-Site VPN. Идея этого сервиса в том, чтобы через интернет прокинуть VPN канал, используя протокол IPsec, и подключить VPC в облаке AWS с нашей локальной сетью, которая не находится в облаке. Оплата за этот сервис происходит на каждый connection по часовой основе. В рамках этого сервиса доступны два варианта роутинга. Это Dynamic Routing и Static Routing. При использовании Dynamic Routing обязательное требование поддержки устройствами протокола Border Gateway Protocol, то есть BGP. Если этот протокол не поддерживается, то остается второй вариант, это Static Routing. Чем отличается Dynamic Routing от Static Routing? Так это тем, что в Dynamic Routing встроена нативная поддержка проверки состояния connection. И можно настроить достаточно надежное переключение на резервный канал. Когда мы говорим про Static Routing, нативно это не поддерживается, но настроить это возможно. Как происходит подключение локальной сети к облаку AWS? На стороне AWS создается ресурс Virtual Private Gateway, а на стороне локальной сети Customer Gateway. Она привязывается к соответствующему оборудованию и между ними настраивается VPN соединение. Следует обратить внимание также, что к одному Virtual Private Gateway можно подключить несколько Customer Gateway. Таким образом предоставить Highly Availability на стороне On-premise Network. На этом мы подошли к концу нашей второй части сегодняшней лекции. Давайте остановимся на основных моментах. Первое это то, что есть сервис AWS Site-to-Site VPN, который позволяет соединить локальную сеть с VPC на стороне облака AWS через создание VPN подключения поверх интернета. Сервис AWS Site-to-Site VPN поддерживает два варианта роутинга Static и Dynamic в зависимости от того, какие протоколы поддерживает ваше оборудование. И третье это то, что на стороне On-premise можно задействовать несколько Customer Gateway и все эти подключения направить к одному Virtual Private Gateway. Мы с вами добрались до третьей части нашей сегодняшней лекции и здесь подробнее рассмотрим сервис AWS Direct Connect. Также ее сокращенно называют AWS DX. Идея этого сервиса такая же, она помогает нам локальную сеть подключить со облаком AWS, но делает он это иначе. Когда мы говорили про сервис AWS Site-to-Site VPN, мы пробрасывали VPN канал поверх интернет подключения. И если у вас интернет подключения ненадежные либо слабые, то в этом случае VPN работает в рамках этих ограничений. В случае, если интернета не будет, то VPN подключения до вашего облака пропадает. Когда мы говорим про Direct Connect, здесь происходит качественно другое подключение. Мы с вами помним, есть глобальная сеть AWS и мы знаем, что есть партнеры AWS, которые распространены по всему миру. И они при настройке Direct Connect с глобальной инфраструктурой AWS подтягивают до своих дата-центров прямое подключение без выхода в интернет. Что предоставляет большие возможности. То есть это подключение фактически равноценно тому, что глобальная инфраструктура AWS и ресурсы, находящиеся в дата-центрах партнера, могут общаться как будто бы в одной локальной сети. И это дает возможность создать канал больше пропускной способности. Предоставляется два варианта. Это 1 ГБит в секунду и 10 ГБит в секунду. Также при подключении через Direct Connect не происходит выхода в интернет. То есть мы независимы от интернета. Если интернет отключается, то ваше подключение к облаку AWS, оно остается. Таким образом для различных use-кейсов использование сервиса Direct Connect может быть более подходящим, чем AWS Site-to-Site VPN. Другой важный момент это то, что Direct Connect он оплачивается индивидуально и может стоить в несколько раз дороже, чем AWS Site-to-Site VPN. Поэтому необходимо взвесить все аргументы за и против и после уже принимать решение о переходе к сервису AWS Direct Connect. Какие есть популярные use-кейсы? Первые это гибридные инфраструктуры. То есть когда у вас инфраструктура, часть находится на локальной инфраструктуре, а другая часть находится в облаке AWS. Вы не планируете мигрировать в облако либо обратно в локальный дата-центр, а продолжаете жить в таком режиме. В этом случае у вас может передаваться достаточно большой объем информации между облаком и локальной инфраструктурой, поэтому Direct Connect может быть удачным решением. Другой вариант это случаи когда передается большой объем информации и другие два варианта это когда нам необходимо обеспечить более стабильную работу подключения в зависимости от вашей бизнес задачи. И также бывают некоторые регуляторные требования, которые не разрушают передачу некоторых чувствительных персональных данных передавать по сети интернет. В этом случае с Direct Connect мы не выходим в интернет и не нарушаем эти регуляторные требования. Давайте с вами теперь на примере этой диаграммы рассмотрим подключение локальной инфраструктуры с облаком AWS через сервис AWS Direct Connect. Посередине вы видите некоторые DX location в котором находится ресурс DX endpoint. Этот DX endpoint подключается напрямую к глобальной инфраструктуре AWS с одной стороны, с другой стороны до него необходимо произвести подключение по двум каналам, приватному и публичному от вашего локального дата центра до DX endpoint. Как только вы это проделываете вы через DX endpoint получаете возможность подключаться к любому VPC в любом регионе AWS. Почему? Потому что DX endpoint подключается напрямую к глобальной инфраструктуре AWS, а все VPC они и так находятся там. Поэтому появляется такая возможность. Также через DX endpoint вы можете через этот расширенный канал, выходя в интернет, обращаться к публичным сервисам AWS, например Amazon S3. Почему такой вариант может быть интересен? Это связано с небольшим каналом подключения в интернет от вашего дата центра. То есть если у вас канал небольшой, то через DX endpoint вы можете этот канал фактически расширить и больше объема информации с большей скоростью передавать. Давайте теперь рассмотрим следующий пример реализации высокой доступности подключения локального дата центра с облаком AWS. В этом случае мы через партнера AWS используя сервис AWS Direct Connect подключили как основной канал локальный дата центра с облаком AWS и как резервный использовали AWS Site to Site VPN и подключили через интернет VPN соединение. Здесь хотелось бы отдельно напомнить, что в случае с Direct Connect есть два варианта канала. Это 1 ГБит в секунду и 10 ГБит в секунду. Когда мы говорим подключение через VPN, максимально оно может достигать 1.25 ГБит в секунду, но все зависит от вашего интернет соединения. Если сам канал не такой широкий, то поверх него быстрее этого канала вы передавать не сможете. Это и есть основное ограничение вашего VPN подключения. В другой случае представим, что вы международная компания, у вас есть несколько дата центров, где вы хостите часть вашего приложения. Другая часть вашего приложения находится в облаке AWS и вам необходимо для корректного функционирования вашего приложения обеспечить постоянные соединения между облаком и локальными дата центрами. В этом случае рекомендуется от каждого дата центра настроить подключение в облако AWS через AWS Direct Connect. Таким образом, в случае неисправности одного из дата центров у вас останется достаточно широкий канал, прямое подключение к облаку AWS и приложение продолжит работать. Мы с вами добрались до конца третьей части нашей сегодняшней лекции. Давайте вспомним самые основные моменты. Первое это то, что AWS Direct Connect использует открытые стандарты для подключения напрямую к глобальной инфраструктуре AWS. При подключении через AWS Direct Connect у вас появляется возможность напрямую обратиться к любому VPC, к любому публичному AWS сервису, через него находящимся в любом регионе AWS. Это логично, так как все ресурсы AWS находятся в одной глобальной инфраструктуре. Поэтому подключившись к нему один раз, вы получаете доступ ко всем ресурсам. Также мы рассмотрели два примера настройки высокодоступного подключения из локального дата центра в облако AWS. В первом случае используется Direct Connect и VPN соединение как резервные, а во втором случае рекомендуется использовать Direct Connect для каждого из дата центров. Это позволит предоставить высокую доступность ваших приложений. Но здесь также хотелось бы напомнить, Direct Connect может стоить несколько раз дороже, чем сайт-тусайт VPN, поэтому необходимо все взвесить и в случае, если вас этот сервис устраивает, то вы ее используете для подключения. Мы с вами добрались до четвертой части нашей сегодняшней лекции и здесь мы подробнее разберем подключение VPC в облаке и AWS между собой, используя функционал VPC Peering. Представим, в случае, у вас есть приложение, приложение растет и развивается и когда-то все ваши environment, то есть среды, находились внутри одной VPC, но с увеличением и развитием вашего приложения все большее количество ресурсов создается, все большее количество AWS-лимитов вы достигаете, поэтому логичным решением с точки зрения управления, видимости и изолирования друг от друга разных нагрузок, как решение вы создаете разные VPC и к каждой среде привязываете определенные VPC. То есть в одном VPC будет находиться Dev среда, в другом VPC тестовая среда и в последней основная Production среда. Но в силу различных факторов у вас остается необходимость подключения от одной среды к другой для выполнения тех или иных задач. И в этом случае к нам на помощь приходит функционал VPC Peering, который дает возможность подключить один VPC к другому VPC напрямую. В этом случае не создается никаких VPN соединений, никакие Gateway не нужно создавать. Почему? Потому что обе VPC, они находятся в глобальной инфраструктуре AWS и вы фактически две локальные сети в рамках одной корпоративной сети соединяете между собой. Через локальную сеть. И в этом случае у вас нет выхода в интернет, вы остаетесь в той же глобальной сети и даже само подключение, оно имеет больший канал, больше данных можете с большей скоростью передавать. Таким образом при таком подключении вы остаетесь в пространстве приватных IP адресов и с публичными IP адресами вам работать нет необходимости. Давайте рассмотрим на примере этой диаграммы как происходит подключение двух VPC через VPC Peering. Самым первым делом создается Peering Connection, это некоторый ресурс. Как оно создается? На стороне AWS Management консоли вы создаете Peering Connection и указываете VPC, который делает запрос на подключение на Peering. И вторым VPC указываете тот VPC, который вы хотите подключить. Здесь я бы хотел особо отметить, что VPC Peering вы можете подключать различные VPC между собой, находящиеся не только в одном регионе, но и в различных регионах. Более того, вы можете подключать VPC между собой не только в рамках одного AWS аккаунта, а подключиться к VPC в другом AWS аккаунте. Самый важный момент это то, что при создании Peering Connection отправляется приглашение подключения к соответствующему VPC. Если она находится в том же AWS аккаунте, то в том же AWS Management консоли вы увидите приглашение. После того как вы ее принимаете, создается Peering Connection и две VPC между собой связываются. В случае, если второй VPC находится в другом AWS аккаунте, то либо у вас должен быть доступ к этому аккаунту, либо должна быть договоренность, что владелец этого AWS аккаунта примет приглашение. Как только вы это сделаете, останется несколько дополнительных шагов. Это настройка Routing Tables, Root Tables. Представим, у нас есть VPC A и у нее CIDR блок 10.1.0.0 и CIDR блок размера 16. В другой случае, это когда у нас есть VPC B и у нее CIDR блок 10.2.0.0 и размера 16. Это 65000 адресов. Для того, чтобы вы смогли видеть ресурсы в VPC B из VPC A, вам необходимо в Root Table привязанном к VPC A прописать дополнительный Routing Rule, где destination вы указываете CIDR блок VPC B и как target указываете Peering Connection Resource. То есть вы через этот Peering Connection Resource идете в ресурсы в CIDR блоке VPC B. То же самое, но противоположно вы проделываете со стороны VPC B. Там для Root Table прописываете дополнительный Routing Rule, где как destination указываете CIDR блок VPC A и как target указываете тот же Peering Connection Resource, то есть PCX1. Когда мы подключаем несколько VPC между собой, следует помнить о некоторых ограничениях. Мы работаем в пространстве приватных IP адресов. Второе это то, что мы можем подключать VPC, находящиеся в различных регионах и различных AWS аккаунтах. Другой очень важный момент это то, что CIDR блоки VPC не должны пересекаться. Если они пересекаются, то между ними настроить VPC Peering не получится. Между несколькими VPC вы можете создать только один Peering Resource. То есть не получится сделать резервный Peering Resource, так чтобы трафик в случае проблем с первым проходил через резервный. На самом деле даже необходимости в этом нет, так как Peering Connection Resource создается на стороне глобальной инфраструктуры AWS и уже в нем внутри сидит Highly Availability и дополнительно его чем-то компенсировать нет необходимости. И последний момент, который следует помнить, что при соединении нескольких VPC через VPC Peering эффект транзитивности не создается. То есть представьте у вас есть VPC A, VPC B и VPC C. Далее представим, что вы сделали VPC Peering между VPC A и VPC B. Далее сделали VPC Peering Connection между VPC B и VPC C. И это не означает, что у вас появится возможность из VPC A обращаться к ресурсам, находящимся в VPC C. То есть эффект транзитивности здесь не будет. Если вам необходимо, чтобы из VPC A можно было обращаться к ресурсам из VPC C и обратно, вам необходимо с учетом всех тех ограничений, которые мы перечислили ранее, создать новый Peering Connection между этими двумя VPC. Когда вы работаете с несколькими VPC, следует помнить, что необходимо создавать коннекшны между двумя VPC только в тех местах, где есть необходимость. Так как в погоне за подключением всех VPC между собой мы можем очень сильно прийти к тому, что у нас достаточно большое количество Peering Connection и это становится сложно контролируемым. Другой момент это то, что мы должны строить архитектуру таким образом, чтобы оно могло легко масштабироваться. Для тех случаев, когда у вас растет количество VPC и вам тем не менее необходимо их между собой соединять, есть другие специально созданные сервисы. Про них мы будем говорить в следующих секциях. Теперь давайте разберем один пример. Когда мы работаем в нескольких регионах, у нас есть основная инфраструктура, находящаяся в регионе A. Далее есть часть инфраструктуры, представим DR, находится в регионе B. И в основном регионе у нас несколько различных VPC. И здесь представлен пример, когда в одном из VPC у нас так называемые shared resources. Это может быть что угодно, либо модуль приложения, либо может быть например Active Directory, который хранит информацию всех учеток наших пользователей внутри корпоративной сети. И в этом случае это тот VPC, к которому многие VPC должны будут подключаться. И здесь вы видите в диаграмме как раз таки пример. Мы видим, что наши VPC, обслуживающие Internal Application, подключаются напрямую через VPC Peering к нашему shared VPC. А для тех случаев, где нет необходимости подключаться к этому VPC, оно не настроено. Также вы видите, что настроено Vpn подключение через сайт VPN из локального дата центра в наш shared VPC. На этом мы подошли к концу четвертой части нашей сегодняшней лекции. Давайте остановимся и вспомним самые основные моменты. VPC Peering это тот ресурс, тот функционал, который позволяет соединить напрямую два отдельно стоящих VPC между собой. Эти VPC могут находиться в различных регионах, также они могут находиться в различных AWS аккаунтах. При создании VPC Peering тот VPC, который отправляет запрос, он создает Peering Connection, а вторая часть VPC, которая принимает это приглашение, должна это приглашение оправдать, то есть принять и после этого у нас активируется Peering Connection ресурс. Далее нам необходимо настроить road tables и возможно security группы, чтобы ресурсы между двумя VPC могли обмениваться информацией. При создании Peering Connection есть определенные ограничения. Мы работаем в пространстве приватных IP адресов, то есть публичные IP адреса не задействованы, так как мы остаемся в границах глобальной инфраструктуры AWS и в интернет не выходим. Другой момент это то, что при создании подключения между несколькими VPC, CIDR блоки не должны пересекаться. Если они пересекаются, то Peering Connection настроить не получится. Поэтому нужно заблаговременно это продумать и при создании любых VPC в рамках организации создавать их таким образом, чтобы CIDR блоки изначально не пересекались. Даже если в будущем они не будут соединены, наперед мы этого знать не можем. Намного дешевле это в начале учесть, нежели потом VPC со всеми ее ресурсами переносить в другой VPC. Это потребует немалых усилий и затрат компании. Между двумя VPC невозможно настроить несколько Peering Connection, но в этом даже нет необходимости, так как Highly Availability уже сидит внутри Peering Connection. И последний момент, который часто приходит на экзамене в виде вопроса, это эффект транзитивности. Если мы подключаем VPC A к VPC B, дальше VPC B к VPC C, то между VPC A и VPC C связь не появляется. Если вам нужно их между собой соединить, то нужно явно создать Peering Connection между двумя этими VPC. Мы с вами добрались до пятой части нашей сегодняшней лекции, и здесь подробнее остановимся на сервисе AWS Transit Gateway. Представим, в случае у нас есть несколько VPC, и необходимо предоставить возможность подключаться каждый VPC до любого другого VPC в рамках нашей инфраструктуры. Проблема с VPC Peering в том, что при увеличении количества VPC и необходимости обеспечить полное подключение между всеми VPC, количество VPC Peering очень быстро растет. Давайте попробуем вместе посчитать. Представим, что у нас есть две VPC, и нужно соединить между собой. В этом случае у нас создается один Peering Connection. Далее, если у нас увеличивается количество VPC на одну и равняется трем, в этом случае уже необходимо создать три VPC Peering Connection, то есть между первым и вторым, вторым и третьим, а также между третьим и первым, так как транзитивность она не поддерживается. Если мы говорим про четыре VPC, то в этом случае вы можете представить, что чтобы все VPC соединить между собой, нам уже нужно 6 Peering Connection. Если же попробуем посчитать случаи с пятью VPC, то в этом случае нам необходимо будет 15 Peering Connection. И вы видите, как быстро растет необходимое количество VPC Peering. Для того, чтобы вот этот конкретный случай легче управлять, было разработано специальное решение. Это сервис AWS Transit Gateway. Идея ее в том, что вы подключаете некоторый сетевой Connection, будь то VPC, либо подключение от локального дата центра в виде VPN Connection, либо в виде Direct Connect Gateway, то при подключении к AWS Transit Gateway все существующие подключения, они становятся доступными для нового подключения. То есть в этом случае вы видите на примере шесть различных подключений, и нам не пришлось создавать более 15 Peering Connection, а достаточно сделать по одному Connection для каждого из источника до AWS Transit Gateway. И таким образом каждый источник получил возможность подключаться к любым другим подключениям, которые находятся в этом Transit Gateway. Давайте теперь подробнее поговорим, что это за сервис. AWS Transit Gateway это так называемый сервис нетворкинга, который позволяет легче подключать между собой большое количество сетевых подключений. Оно работает в виде центрального хаба, и все подключения, которые к нему подключаются, получают доступ ко всем другим подключенным ресурсам. На один AWS Transit Gateway можно подключить до 5000 различных Connection. Здесь я бы хотел обратить внимание, что для Transit Gateway, также и для Side-to-Side VPN сервиса имеются определенные ограничения, недостатки и преимущества. Также они отличаются по прайсингу. Поэтому в зависимости от вашего бизнес-кейса, вам обязательно нужно все эти моменты учесть, а именно моменты, связанные с архитектурой, а также, что также немаловажно, это вопросы оплаты. Может получиться так, что Transit Gateway для вас невыгодное решение, и следует оставаться с VPC Peering Connection. Либо в обратном случае VPC Peering Connection вам не подходит, так как количество подключений растет и это невыгодно. И может оказаться, что Transit Gateway не только упрощает управление всеми этими Connection, но и выходит более выгодным по расходам. Для того, чтобы лучше понять, как происходит настройка AWS Transit Gateway, давайте рассмотрим следующий пример. У нас есть 3 VPC со следующими CIDR блоками. Нам необходимо соединить их все между собой, без использования Peering Connection, а с использованием Transit Gateway. Первым делом нам необходимо создать ресурс AWS Transit Gateway. Далее, на стороне каждого VPC необходимо настроить A&E, то есть Elastic Network Interface. Это тот ресурс, через который происходит подключение к VPC. Подключаем ее к Root Table, то есть у каждого VPC есть настроенный дефолтовый Root Table, который разрешает трафик между всеми ресурсами в рамках конкретного VPC. Теперь нам необходимо произвести изменения в каждой из Root Table. На примере третьего VPC мы видим, что мы указали как destination CIDR блок, охватывающий CIDR блоки всех трех VPC, и как target указали Transit Gateway. Далее, следующим шагом нам необходимо на стороне Transit Gateway настроить Root Table. И здесь мы указываем, что как destination к каждому из VPC мы указываем Root с target Elastic Network Interface соответствующего VPC. После чего при достижении трафика до Transit Gateway, Transit Gateway смотрит куда направляется трафик, исходя из правила в Root Table, смотрит какой target использовать. Представим, что мы с VPC 3 обращаемся к ресурсам из CIDR блока первого VPC, то он посмотрит на IP-адрес, увидит на стороне Root Table у третьего VPC Root, который говорит, что с target мы используем Transit Gateway и обращаемся на вот этот CIDR блок. После чего трафик уходит на сторону Transit Gateway. Transit Gateway также смотрит на свой Root Table и видит, что тот IP-адрес, к которому мы обращаемся, относится к первому VPC. А чтобы направить трафик к первому VPC, нам необходимо использовать соответствующий Elastic Network Interface и направлять, соответственно, на этот ресурс, этот трафик. После чего можно будет этот трафик увидеть на стороне VPC 1, то есть фактически connection будет предоставлен. Теперь рассмотрим следующий случай. У нас есть VPN connection с локального дата центра. И первый вариант – это предоставить изолированное подключение от каждого VPC до ресурсов в локальном дата центре, так чтобы VPC между собой не пересекались. В этом случае нам достаточно изменить Root Table в Transit Gateway и указать как destination обозначение всего интернета, либо определенный SIDR блок и направить этот трафик VPN. Таким образом, даже если вы как трафик указываете IP-адрес из первого VPC, то он все равно, согласно Root Rule, направит ее в сторону VPN. И ресурсы, находящиеся в разных VPC, между собой обмениваться трафиком не смогут. Но при этом они смогут направлять трафик через VPN в локальные дата центры. Следующий случай – это когда нам необходимо весь трафик, который остается внутри AWS, но идет в другой VPC, сохранить, но так, чтобы другой трафик направился в сторону VPN. В этом случае мы можем либо изменить Root Table у Transit Gateway, либо добавить еще один Root Table, в котором мы укажем предыдущие Roots. Таким образом, когда мы захотим из третьего VPC, например, обратиться к ресурсам из второго VPC, согласно Root Table второму, мы удачно, успешно, точнее, направим наш трафик. Далее, если мы захотим направить наш трафик не к VPC, а к другому IP-адресу, он не совпадет с правилами, связанными с Root Table вторым, и уже посмотрит Root Table первый, увидит, что этот трафик необходимо направить на сторону VPN, и соответственно туда этот трафик уйдет. Для того, чтобы закрепить, как необходимо производить настройку в случае AWS Transit Gateway, давайте сделаем небольшой челлендж. В рамках этого челленджа нам дается 5 различных VPC с уникальным cedar блоком, не пересекающимся. Также есть у нас Transit Gateway, и нам необходимо все VPC соединить полностью между собой через AWS Transit Gateway. Какие действия необходимо сделать на уровне Root Table каждого VPC, и какие действия необходимо произвести на уровне Root Table Transit Gateway. Вы можете остановить это видео и попытаться ответить самостоятельно. Отлично, я думаю вы смогли правильно ответить, давайте теперь проверим, что же необходимо было сделать. Первым делом, на уровне каждого VPC нам необходимо добавить один Root. Этот Root как destination содержит cedar блок, этот cedar блок должен охватывать cedar блоки всех существующих VPC, и как target необходимо указать наш Transit Gateway. Таким образом, мы помним с вами, что на стороне Root Table дефолтовый первый Root, он содержит cedar блок этого VPC, и как target указывает local. Это означает, что если IP-адрес, которому направляется трафик, относится к cedar блоку конкретного VPC, то он распознается как локальный трафик и соответственно направляется к ресурсу, находящемуся в этом VPC. То есть, это тот Root, который позволяет всем ресурсам внутри этого VPC общаться между собой. Теперь следующий Root, который мы добавили, он охватывает все другие cedar блоки, и если у нас есть обращение к IP-адресу, который не относится к cedar блоку конкретного VPC, а уходит наружу, то в этом случае мы проверяем, относится ли он к общему cedar блоку. Если да, то этот трафик уходит к Transit Gateway. Подобные изменения необходимо произведать в рамках Руку. Подобные изменения необходимо произвести на уровне каждого VPC. Теперь если мы говорим про Transit Gateway, здесь нам необходимо в Root Table добавить 5 Roots по 1 Root для каждого VPC. Этот Root содержит следующее. Как destination мы указываем cedar block VPC, и как target указываем elastic network interface этого же VPC. То есть если мы получаем в Transit Gateway трафик, который направляется на такой-то IP-адрес, он проверяет все свои Roots, и если этот IP-адрес относится к одному из cedar блоков в destination, то он смотрит на target и направляет этот трафик к этому target. Таким образом мы смогли настроить связь между всеми VPC, используя Transit Gateway. На этом мы подошли к концу 5-й секции, и здесь можем отметить основные моменты, связанные с сервисом AWS Transit Gateway. AWS Transit Gateway выполняет ту же роль, что и VPC Peering Connection, но отличается тем, что является центральным хабом. В случае с Peering Connection мы подключаем две VPC между собой напрямую, а в случае Transit Gateway нам достаточно подключить VPC к Transit Gateway, и он получает доступ ко всем существующим коннекшенам, подключенным к этому же Transit Gateway. В зависимости от вашего бизнес-кейса или задачи, вам необходимо будет определиться, что является для вас оптимальным. Либо использовать VPC Peering Connection в случае, если у вас небольшое количество соединений между VPC, и в обратном случае, если у вас большое количество VPC, и необходимо, чтобы каждый VPC был соединен с каждым другим VPC, то в этом случае более подходящим решением для вас может быть AWS Transit Gateway. Мы с вами добрались до шестой и заключительной части нашей сегодняшней лекции, и здесь мы поговорим про возможности, позволяющие ресурсам из VPC обращаться к другим AWS сервисам. Для того, чтобы это реализовать, рекомендуется использовать VPC Endpoints. Это некоторый ресурс, который позволяет, не выходя в интернет, оставаясь в рамках глобальной инфраструктуры AWS, подключаться ресурсам из VPC напрямую к AWS сервисам. Таким образом, нам нет необходимости настраивать Internet Gateway, VPN соединение, NAT Gateway и так далее. Существует два варианта подключения VPC Endpoints. Первый это Interface Endpoint, когда нам выделяется приватный IP-адрес, и через этот приватный IP-адрес, используя функционал AWS Private Link, мы подключаемся к другим сервисам. Не все сервисы доступны. Примеры этих сервисов это Amazon CloudWatch, Amazon EC2 и Elastic Cloud Balancing. Второй вариант это Gateway Endpoint. В этом случае производятся изменения на стороне road table, чтобы определенный трафик направлять на поддерживаемые AWS сервисы. Примерами в этом случае являются Amazon S3 и DynamoDB. Давайте теперь посмотрим на примерах, как мы можем настроить Interface Endpoint. Самым первым делом нам необходимо решить, с каким сервисом мы будем работать и поддерживается ли этот сервис через Interface Endpoint. Если поддерживается, далее нам необходимо определиться с VPC, определиться с subnet, откуда ресурсы могут подключаться к этому сервису. И четвертом шаге вы видите, по умолчанию можно активировать приватный DNS. Я чуть позже расскажу, для чего это нужно. И последним шагом мы для нашего Network Interface настраиваем необходимые Security Groups. Теперь давайте рассмотрим примеры, как это все взаимодействует. Когда мы настраиваем подключение из нашего VPC к определенному сервису, пусть это будет Amazon Kinesis Data Streams, мы можем к нему обратиться через default DNS hostname. Это URL сервиса, через который мы можем обратиться к этому сервису, но проблема в том, что это обращение идет через интернет gateway, через интернет и вы дополнительным параметром указываете, что вы хотите. Для некоторых нагрузок это неприемлемо. Есть другой вариант. Можно воспользоваться Endpoint Specific DNS Hostname. Это когда для нашего интерфейса Endpoint назначается некоторый DNS Hostname. Грубо говоря, это URL адрес, по обращению который трафик направляется на нужный вам сервис. Так вот, в этом случае Private DNS он не включен. Таким образом, если мы хотим обратиться к этому сервису, у нас есть два варианта. В случае обращения через default DNS hostname трафик идет через интернет gateway, через интернет добирается до нашего сервиса. Либо нам необходимо в стороне наших приложений явно указывать наш специфичный уникальный URL, который был сгенерирован в рамках интерфейса Endpoint с подключением к Amazon Kinesis Data Stream. При обращении по этому URL оно происходит в рамках глобальной инфраструктуры AWS, не выходит в интернет и ресурсы внутри VPC напрямую обращаются к определенному сервису. Теперь другой случай, когда мы активировали Private DNS, то в этом случае нет необходимости через интернет, через интернет gateway направлять трафик по дефолтовому DNS Hostname, а этот дефолтовый DNS Hostname он также остается активным, но при обращении по этому URL мы направляем наш трафик через интерфейс gateway на нужный нам сервис. Грубо говоря, мы знаем дефолтовый DNS Hostname для каждого из сервисов, она не меняется, она стандартная. Так вот, если мы хотим ее использовать, что очень удобно, мы можем включить опцию Private DNS и таким образом для наших приложений внутри VPC нет необходимости дополнительно там в переменных средах указывать Endpoint Specific DNS Hostname, а сразу, зная публичный URL определенного сервиса, напрямую к нему обращаться, зная, что он идет через интерфейс Endpoint в рамках глобальной инфраструктуры AWS и без выхода в интернет. Отлично, на этом мы добрались до конца шестой части нашей сегодняшней лекции, разобрали, что у нас есть возможность для ресурсов из VPC подключаться к сервисам AWS. Есть два варианта. Первый вариант это через интерфейс gateway, а второй через Gateway Endpoint. В том и ином случае поддерживаются те или иные сервисы AWS, в зависимости от того, какой сервис вам нужен, и вы сможете посмотреть список поддерживаемых сервисов и понять с каким из вариантов вам необходимо двигаться. На этом мы подошли к концу нашей сегодняшней лекции. Мы разобрали достаточно важные вопросы, связанные с networking. Мы рассмотрели вопросы, как мы можем подключить нашу локальную инфраструктуру с облаками AWS, какие для этого есть возможности, как минимум два варианта. Также мы рассмотрели вариант подключения VPC, нескольких VPC между собой внутри облака AWS. Также есть несколько вариантов, в зависимости от вашего случая. И последний вариант, мы также рассмотрели случай, когда сервис не может быть расположен внутри VPC, но из VPC мы можем работать безопасно с этими сервисами, используя VPC Endpoint. На этом слайде вы можете видеть ключевые слова, которые помогут вам выйти на дополнительные ресурсы в интернете. Преимущественно они ведут документацию AWS, либо на записи из реинвента, находящейся в видео хостинге YouTube. На этом мы завершаем нашу сегодняшнюю лекцию. Спасибо за внимание, увидимся с вами на следующих наших активностях.
