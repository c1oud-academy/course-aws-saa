Қайырлы күн, құрметті студенттер! Сізді келесі дәрісте көргеніме қуаныштымын. Бүгінгі дәрісіміздің тақырыбы - Connecting networks. Алдында VPC неден тұратыны және оның қандай компоненттері бар екендігі туралы айтқан болатынбыз. Енді бір деңгейге көтеріліп, AWS бұлтындағы желілерді, сондай-ақ AWS бұлтындағы желіні бұлттан тыс жергілікті желімен қалай қосуға болатынын қарастырамыз. Ендеше, бастайық. Бүгінгі дәрісімізде 6 тақырыпты қарастырамыз. Бірінші тақырып зертханалық жұмысымызға қатысты және қандай компоненттер қосылатынын көрейік. Келесі, екінші және үшінші бөлімдерде жергілікті инфрақұрылымды AWS бұлтына қалай қосу керектігін қарастырамыз. Әрі қарай, төртінші және бесінші бөлімдерде VPC-лерді AWS бұлтында бір-біріне қалай қосуға болатынын қарастырамыз. Ең соңында, VPC-мен біріктірілген қосымша сервистерді қарастырамыз. Дәрісіміздің бірінші бөлімін бастаймыз және зертханалық жұмыстың аясында қандай міндеттер тұрғанын қарастырамыз. Бизнес-кейсімізге сәйкес, кафе жаппай сатылым жариялады. Егер сатып алушы 10 немесе одан да көп бірдей зат сатып алса, онда сыйлық ретінде бір десерт беріледі. Бірақ сатып алушылардың процесін бақылау үшін кейбір жеке ақпаратты сақтау керек. Бұл - электрондық пошта мекенжайы мен несие картаның нөмірі. София және басқа басты кейіпкерлер орналасқан нақты елде деректерді сақтауға қатысты кейбір шектеулерге байланысты кафе бұл ақпаратты AWS бұлтында сақтай алмайды. Сондықтан, пайдаланушы деректерін сақтайтын жергілікті дерекқорды құру туралы шешім қабылданды, бірақ транзакциялық деректер мен бүкіл инфрақұрылым AWS бұлтында қалады. Бұл деректер қажет болған кезде AWS бұлтынан жергілікті инфрақұрылымға, атап айтқанда бізге қажет дерекқорға тікелей сұраныс келіп, қажетті деректерді шығарады. Тағы VPC-ге қатысты бір мәселені айта кетейін. Бізде Dev ортасы, сондай-ақ Prod ортасы бар екенін есте ұстаймыз. Екеуі де бір VPC-де орналасқан. София Оливиямен кеңескеннен кейін, оларды ажырату керек деп шешеді. Яғни, Dev ортасы бөлек оқшауланған VPC-де, ал Prod ортасы басқа VPC-де. Бірақ, соған қарамастан, Оливия Софияға оларды бір-бірімен қосымша байланыстыруға кеңес береді, осылайша Dev ортасынан Prod ортасындағы ресурстарға қол жеткізе алатын болады. Көріп отырғаныңыздай, зертханамыздың аясында AWS бұлтындағы бірнеше VPC-мен жұмыс істейміз, AWS бұлтындағы және жергілікті инфрақұрылымдағы VPC-лерді қосуға қатысты тапсырманы орындаймыз. Дәрісіміздің екінші бөліміне жеттік. Мұнда AWS Site-to-Site VPN сервисін толығырақ қарастырамыз. Бұл сервистің идеясы - VPN арнасын IPSec протоколын қолданып, Интернет арқылы өткізу және AWS бұлтындағы VPC-ні бұлтта орналаспаған жергілікті желімен қосу. Бұл сервис үшін төлем әрбір қосылым үшін сағат сайын жүзеге асырылады. Бұл сервисте екі routing опциясы қолжетімді. Бұл - Dynamic routing және Static routing. Dynamic routing пайдаланған кезде құрылғылардың Border Gateway Protocol, яғни BGP протоколын қолдауы міндетті болып табылады. Егер бұл протоколға қолдау көрсетілмесе, екінші опция қалады, бұл - Static routing. Dynamic routing пен Static routing айырмашылығы неде? Dynamic Routing қосылым күйін тексеру үшін жергілікті қолдауға ие. Және резервтік арнаға сенімді қосқышты орната аласыз. Static routing-ке жергілікті түрде қолдау көрсетілмейді, бірақ оны баптауға болады. Жергілікті желі AWS бұлтына қалай қосылады? AWS жағында Virtual Private gateway ресурсы және жергілікті желі жағында Customer gateway жасалады. Ол сәйкес жабдыққа бекітілген және олардың арасында VPN қосылымы бапталынады. Сондай-ақ, бір Virtual Private gateway-ге бірнеше Customer gateway қосуға болатынын атап өткен жөн. Осылайша, on-premise network жағында жоғары қолжетімділікті қамтамасыз етесіз. Осымен бүгінгі дәрісіміздің екінші бөлімін аяқтаймыз. Негізгі ойларды қарастырайық. Біріншісі, Интернет арқылы VPN қосылымын жасау арқылы жергілікті желіні AWS бұлт жағындағы VPC арқылы қосуға мүмкіндік беретін AWS Site-to-Site VPN сервисі бар. AWS Site-to-Site VPN құрылғыңыз қолдайтын протоколдарға байланысты екі routing опциясын қолдайды: Static және Dynamic. Үшіншісі, on-premise жағында бірнеше Customer gateway пайдалануға болады және осы қосылымдардың барлығын бір Virtual Private gateway-ге бағыттауға болады. Дәрісіміздің үшінші бөліміне жеттік, AWS Direct Connect сервисін қарастырамыз. Қысқаша AWS DX. Бұл сервистің идеясы да сондай, ол AWS бұлтымен жергілікті желіні қосуға көмектеседі, бірақ ол мұны басқаша жасайды. AWS Site-to-Site VPN сервисі туралы айтқан кезде, біз VPN арнасын интернет қосылымы арқылы жібердік. Ал егер интернет байланысыңыз сенімсіз немесе әлсіз болса, VPN осы шектеулер аясында жұмыс істейді. Интернет болмаса, бұлтқа дейінгі VPN қосылымы жоғалады. Direct Connect туралы айтатын болсақ, мұнда мүлдем басқа байланыс болады. Біз жаһандық AWS желісі және бүкіл әлемге таралған AWS серіктестері бар екенін білеміз. Және жаһандық AWS инфрақұрылымымен Direct Connect орнатқанда, олар үлкен мүмкіндіктер беретін Интернетке қатынаусыз өздерінің дата- центрлерін тікелей қосылыммен қамтамасыз етеді. Яғни, бұл қосылым жаһандық AWS инфрақұрылымы мен серіктестің дата-центрлерінде орналасқан ресурстар бір жергілікті желідегідей байланыса алатындығына сәйкес келеді. Және бұл сыйымдылығы жоғары арна жасауға мүмкіндік береді. Екі нұсқа ұсынылады. Бұл секундына 1 Гбит және секундына 10 Гбит. Сондай-ақ, Direct Connect арқылы қосылғанда Интернет қажет емес, яғни Интернетке тәуелсізбіз. Интернет өшіп қалса, AWS бұлтымен байланысыңыз сақталады. Осылайша, әртүрлі пайдалану жағдайлары үшін Direct Connect-ті пайдалану AWS Site-to-Site VPN-ге қарағанда қолайлырақ болуы мүмкін. Тағы бір маңызды жайт, Direct Connect сервисі жеке төленеді және AWS Site-to-Site VPN-нен бірнеше есе қымбат болуы мүмкін. Сондықтан барлық артықшылықтары мен кемшіліктерін талдағаннан кейін ғана AWS Direct Connect сервисіне ауысу туралы шешім қабылдау қажет. Қандай танымал қолдану жағдайлары бар? Біріншісі - гибридті инфрақұрылымдар, яғни сіздің инфрақұрылымыңыздың бір бөлігі жергілікті жерде, ал екінші бөлігі AWS бұлтында орналасқан кезде. Бұлтқа немесе жергілікті дата-центріне қайта көшуді жоспарламайсыз, осы режимде жұмысыңызды жалғастырасыз. Бұл жағдайда бұлт пен жергілікті инфрақұрылым арасында тасымалданатын ақпараттың айтарлықтай үлкен көлемі болуы мүмкін, сондықтан Direct Connect жақсы шешім болуы мүмкін. Басқа опция ақпараттың үлкен көлемі тасымалданған кезде, ал қалған екі опция бизнес тапсырмаңызға байланысты тұрақты байланысты қамтамасыз ету қажет болғанда. Сондай-ақ, кейбір құпия жеке деректерді Интернет арқылы тасымалдауға кедергі келтірмейтін кейбір нормативтік талаптар бар. Бұл жағдайда Direct Connect арқылы біз желіге кірмейміз және осы реттеу талаптарын бұзбаймыз. Осы диаграмманы мысал ретінде пайдалана отырып, енді AWS Direct Connect сервисі арқылы жергілікті инфрақұрылымды AWS бұлтына қосуды қарастырайық. Ортасында DX endpoint ресурсы орналасқан кейбір DX location көруге болады. Бұл DX endpoint бір жағынан жаһандық AWS инфрақұрылымына тікелей қосылады, екінші жағынан оған жергілікті дата-центрден DX endpoint-қа дейін жеке және жалпыға ортақ екі арна арқылы қосылу керек. Оны жасағаннан кейін DX endpoint арқылы кез келген AWS аймағындағы кез келген VPC-ге қосыла аласыз. Неліктен? DX endpoint жаһандық AWS инфрақұрылымына тікелей қосылатындықтан және барлық VPC-лер сонда орналасқандықтан, бұл мүмкіндік пайда болады. Сондай-ақ, DX endpoint арқылы Интернетке кіру кезінде осы кеңейтілген арна арқылы Amazon S3 сияқты жалпыға ортақ AWS сервистеріне қол жеткізуге болады. Неліктен бұл опция қызықты болуы мүмкін? Бұл дата-центрден Интернетке қосылу арнасының шағын болуына байланысты. Яғни, егер сіздің арнаңыз кішкентай болса, онда DX endpoint арқылы бұл арнаны кеңейтіп, көбірек ақпаратты жоғары жылдамдықпен жібере аласыз. Енді жергілікті дата-центр мен AWS бұлты арасындағы қолжетімділігі жоғары қосылымды жүзеге асырудың келесі мысалын қарастырайық. Бұл жағдайда AWS серіктесі арқылы AWS Direct Connect сервисін пайдалана отырып, жергілікті дата-центрін AWS бұлтына негізгі арна ретінде қостық және сақтық көшірме ретінде AWS Site-to-Site VPN сервисін қолдандық және VPN қосылымын интернет арқылы қостық. Мұнда Direct Connect жағдайында екі арна опциясы бар екенін еске салғым келеді. Бұл секундына 1 Гбит және секундына 10 Гбит. VPN арқылы қосылым десек, ол максималды 1,25 Гбит/с дейін жетуі мүмкін, сіздің интернет қосылымыңызға байланысты. Егер арнаның өзі соншалықты кең болмаса, онда сіз оны осы арнадан жылдам жібере алмайсыз. Бұл VPN қосылымының негізгі шектеуі. Басқа жағдайда, сіз халықаралық компания екеніңізді елестетіп көрейік, сізде қосымшаның бір бөлігі орнатылатын бірнеше дата-центр бар. Қолданбаңыздың басқа бөлігі AWS бұлтында орналасқан және қолданбаңыздың дұрыс жұмыс істеуі үшін бұлт пен жергілікті дата-центр арасында тұрақты байланыстарды қамтамасыз ету қажет. Бұл жағдайда әрбір дата-центріне AWS Direct Connect арқылы AWS бұлтына қосылымды баптау ұсынылады. Осылайша, дата-центрдің бірі істен шықса, сізде жеткілікті кең арна, AWS бұлтына тікелей қосылым болады және қолданба жұмысын жалғастырады. Бүгінгі дәрісіміздің үшінші бөлімін де аяқтадық. Ең маңызды сәттерді еске түсірейік. Біріншісі, AWS Direct Connect жаһандық AWS инфрақұрылымына тікелей қосылу үшін ашық стандарттарды пайдаланады. AWS Direct Connect арқылы қосылу кезінде сізде кез келген AWS аймағында орналасқан кез келген VPC, кез келген қоғамдық AWS сервисіне тікелей қол жеткізу мүмкіндігі бар. Себебі барлық AWS ресурстары бір жаһандық инфрақұрылымда орналасқан. Сондықтан, оған бір рет қосылсаңыз, барлық ресурстарға қол жеткізе аласыз. Сондай-ақ, жергілікті дата-центрден AWS бұлтына жоғары қолжетімді қосылымды орнатудың екі мысалын қарастырдық. Бірінші жағдайда Direct Connect және VPN қосылымы сақтық көшірме ретінде пайдаланылады, ал екінші жағдайда дата-центрдің әрқайсысы үшін Direct Connect пайдалану ұсынылады. Бұл қолданбаларыңыздың жоғары қолжетімділігін қамтамасыз етеді. Бірақ бұл жерде Direct Connect сервисі AWS Site-to-Site VPN-ге қарағанда бірнеше есе қымбатқа түсетінін еске салғым келеді, сондықтан сіз талдап, егер осы сервиске қанағаттансаңыз, оны қосылу үшін пайдалануыңызға болады. Біз дәрісіміздің төртінші бөліміне жеттік және мұнда VPC Peering функциясын пайдаланып бұлттағы VPC және AWS-ті бір-біріне қосуды егжей-тегжейлі қарастырамыз. Бір жағдайды елестетіп көрейік, сізде қолданба бар, ол дамып жатыр және сіздің барлық орталарыңыз бір VPC ішінде болған. Бірақ қолданбаңыз дамыған сайын көбірек ресурстар жасалады, көбірек AWS шектеулері болады, сондықтан әртүрлі жұмыс жүктемелерін оқшаулау және басқару тұрғысынан логикалық шешім ретінде сіз әртүрлі VPC жасайсыз және әр ортаға арнайы VPC байланыстырасыз. Яғни, бір VPC-де Dev ортасы, басқа VPC-де сынақ ортасы, ал соңғысында негізгі Production орта болады. Бірақ әртүрлі факторларға байланысты белгілі бір тапсырмаларды орындау үшін бір ортадан екіншісіне қосылу керек. Және бұл жағдайда VPC Peering функциясы бізге көмекке келеді, бұл бір VPC-ді басқа VPC-ге тікелей қосуға мүмкіндік береді. Бұл жағдайда VPN қосылымдары жасалмайды, gateway жасаудың қажеті жоқ. Неліктен? Өйткені VPC екеуі де жаһандық AWS инфрақұрылымында орналасқан және сіз бір корпоративтік желідегі екі жергілікті желіні жергілікті желі арқылы бір-біріне қосасыз. Және бұл жағдайда Интернетке қосылым жоқ, сіз сол жаһандық желіде қаласыз, және қосылымның өзі де үлкенірек арнаға ие, сіз көбірек деректерді жоғары жылдамдықпен тасымалдай аласыз. Осылайша, осы қосылым арқылы сіз жеке IP мекенжайларының кеңістігінде қаласыз және жалпыға ортақ IP мекенжайларымен жұмыс істеудің қажеті жоқ. VPC Peering арқылы екі VPC қалай қосылғанын көру үшін осы диаграмманың мысалын қарастырайық. Ең бірінші - Peering Connection жасау, қандай да бір ресурс. Ол қалай құрылады? AWS Management Console жағында Peering connection жасайсыз және Peering қызметіне қосылу сұрауын жасайтын VPC көрсетесіз. Екінші VPC ретінде қосқыңыз келетін VPC көрсетіңіз. VPC Peering көмегімен бір аймақта ғана емес, сонымен қатар әртүрлі аймақтарда орналасқан әртүрлі VPC-лерді бір-біріне қосуға болатынын атап өткім келеді. Сонымен қатар, VPC-ді бір-біріне тек бір AWS аккаунтында ғана емес, сонымен қатар басқа AWS аккаунтындағы VPC-ге де қосуға болады. Ең маңыздысы, Peering connection жасалғанда, сәйкес VPC-ге қосылуға шақыру жіберіледі. Егер ол бір AWS аккаунтында болса, шақыруды сол AWS Management Console-де көресіз. Оны қабылдағаннан кейін, Peering connection жасалады және екі VPC бір-біріне қосылады. Екінші VPC басқа AWS аккаунтында орналасса, сізде осы аккаунтқа кіру рұқсаты болуы керек немесе осы AWS аккаунтының иесі шақыруды қабылдайтыны туралы келісім болуы керек. Мұны істегеннен кейін, бірнеше қосымша қадамдар қалады. Бұл - Route tables. Бір жағдайды елестетіп көрейік, бізде VPC A бар және оның 10.1.0.0 CIDR блогы бар және өлшемі 16. Тағы бір жағдай, бізде VPC B бар және оның CIDR блогы 10.2.0.0 және өлшемі 16. Бұл 65000 мекенжай. VPC A жүйесінен VPC B ресурстарын көре алу үшін VPC A-мен байланысты Route Table-де қосымша routing rule тіркеу керек, мұнда Destination ретінде VPC B CIDR блогын және Target ретінде Peering Connection Resource көрсетесіз. Яғни, осы Peering Connection Resource арқылы VPC B CIDR блогындағы ресурстарға өтесіз. Тура солай, бірақ керісінше, VPC B жағынан жасайсыз. Онда Route Table үшін қосымша Routing rule тіркейсіз, мұнда Destination ретінде VPC A CIDR блогынжәне Target ретінде сол Peering Connection Resource, яғни PCX-1 көрсетесіз. Бірнеше VPC бір-біріне қосқанда, есте сақтау керек кейбір шектеулер бар. Біз жеке IP мекенжайлары кеңістігінде жұмыс істейміз. Екіншісі, біз әртүрлі аймақтарда және әртүрлі AWS аккаунтарында орналасқан VPC-ларды қоса аламыз. Тағы бір өте маңызды мәселе - VPC CIDR блоктары бір-біріменқиылыспауы керек. Егер олар қиылысса, олардың арасында VPC Peering теңшеу мүмкін болмайды. Бірнеше VPC арасында тек бір Peering Resource жасай аласыз. Яғни, біріншімен ақаулық туындаған жағдайда трафик сақтық көшірме арқылы өтетіндей етіп, сақтық Peering Resource жасау мүмкін болмайды. Шындығында, бұл қажет емес, өйткені Peering Connection Resource AWS жаһандық инфрақұрылымының жағында жасалған, оның ішінде жоғары қолжетімділік бар, оны ештеңемен қосымша өтеудің қажеті жоқ. Есте сақтау керек соңғы мәселе - VPC Peering арқылы бірнеше VPC қосу кезінде ешқандай транзитивтік эффект жасалмайды. Яғни, сізде VPC A, VPC B және VPC C бар деп елестетіңіз. Әрі қарай, VPC A және VPC B арасында VPC Peering жасағаныңызды елестетіңіз. Содан кейін, VPC B және VPC C арасында VPC Peering қосылымын жасадық. Бұл VPC A-дан VPC C-де орналасқан ресурстарға қол жеткізе алатыныңызды білдірмейді. Яғни, бұл жерде транзитивті эффекті болмайды. VPC A-дан VPC C-дағы ресурстарға, және керісінше, қол жеткізу қажет болса, бұрын тізімдеген барлық шектеулерді ескере отырып, осы екі VPC арасында жаңа Peering Connection жасау керек. Бірнеше VPC-мен жұмыс істегенде, екі VPC арасында қажеттілік бар жерлерде ғана қосылым жасау керек екенін есте ұстаған жөн. Барлық VPC-лерді бір-біріне қосуға ұмтылсақ, Peering connection саны көп болып кетеді және оны басқару қиынға соғады. Тағы бір мәселе, біз архитектураны оңай масштабталатындай етіп құруымыз керек. VPC саны өсіп келе жатса және соған қарамастан оларды біріктіру қажет болған жағдайда, басқа арнайы жасалған сервистер бар. Олар туралы келесі бөлімдерде айтатын боламыз. Енді бір мысалды қарастырайық. Біз бірнеше аймақтарда жұмыс істегенде, біздің негізгі инфрақұрылымымыз А аймағында орналасқан. Әрі қарай, инфрақұрылымның бір бөлігі бар, В аймағында орналасқан DR деп елестетейік. Ал негізгі аймақта бізде бірнеше түрлі VPC бар. VPC-лердің бірінде бізде Shared resources бар. Бұл кез келген нәрсе болуы мүмкін, қолданбалы модуль немесе ол, мысалы, корпоративтік желідегі барлық пайдаланушылар тіркелгілері үшін ақпаратты сақтайтын Active Directory болуы мүмкін. Және бұл жағдайда, бұл көптеген VPC қосылуы қажет VPC. Бұл диаграммада мысалды көресіз. Internal application-ге қызмет көрсететін VPC-леріміздің VPC Peering арқылы ортақ VPC-ге тікелей қосылғанын көреміз. Бұл VPC-ге қосылудың қажеті жоқ жағдайлар үшін ол бапталмаған. VPN қосылымы жергілікті дата-центрден shared VPC-ге VPN веб-сайты арқылы бапталғанын көресіз. Осымен дәрісіміздің төртінші бөлімін аяқтадық. Тоқтап, ең маңызды сәттерді еске түсірейік. VPC Peering – бұл екі бөлек VPC бір-біріне тікелей қосуға мүмкіндік беретін ресурс, функционал. Бұл VPC әртүрлі аймақтарда және әртүрлі AWS аккаунтарында орналасуы мүмкін. VPC Peering құру кезінде сұрауды жіберетін VPC Peering Connection жасайды және осы шақыруды қабылдайтын VPC екінші бөлігі осы шақыруды қабылдауы керек, содан кейін Peering Connection ресурсы іске қосылады. Әрі қарай, екі VPC арасындағы ресурстар ақпарат алмасуы үшін route table және мүмкін security топтарын баптауымыз керек. Peering Connection жасау кезінде белгілі шектеулер бар. Біз жеке IP мекенжайлары кеңістігінде жұмыс істейміз, яғни жалпыға ортақ IP мекенжайлары пайдаланылмайды, өйткені біз жаһандық AWS инфрақұрылымында қаламыз және Интернетке кірмейміз. Тағы бір мәселе, бірнеше VPC арасында қосылымды жасау кезінде CIDR блоктары бір-бірімен қиылыспауы керек. Егер олар қиылысса, онда Peering connection баптау мүмкін емес. Сондықтан, бұл туралы алдын ала ойлану керек және ұйым ішінде кез келген VPC жасағанда, оларды CIDR блоктары бастапқыда қиылыспайтындай етіп жасаңыз. Олар болашақта байланыспаса да, біз мұны алдын ала біле алмаймыз. VPC-ді барлық ресурстарымен бірге басқа VPC-ге ауыстырғаннан гөрі басында ескеру әлдеқайда арзан. Бұл компания үшін айтарлықтай уақыт пен шығындарды талап етеді. Екі VPC арасында бірнеше Peering connection баптау мүмкін емес, бірақ бұл тіпті қажет емес, өйткені Жоғары қолжетімділік Peering connection ішінде бұрыннан бар. Емтиханда сұрақ түрінде жиі келетін соңғы мәселе - транзитивті эффектісі. Егер біз VPC A-ді VPC B-мен, содан кейін VPC B-ді VPC C-мен қоссақ, онда VPC A және VPC C арасында ешқандай байланыс пайда болмайды. Егер оларды бір-біріне қосу қажет болса, осы екі VPC арасында нақты Peering Connection жасау керек. Біз дәрісіміздің бесінші бөліміне жеттік, AWS Transit Gateway сервисіне туралы толығырақ тоқталамыз. Бізде бірнеше VPC бар жағдайды елестетіп көрейік және біз әрбір VPC үшін инфрақұрылымымыздағы кез келген басқа VPC-ге қосылу мүмкіндігін қамтамасыз етуіміз керек. VPC Peering проблемасы мынада: VPC саны артқан сайын және барлық VPC арасында толық қосылымды қамтамасыз ету қажеттілігімен VPC Peering саны өте тез өседі. Бірге санап көрейік. Бізде екі VPC бар және оларды біріктіру керек деп елестетіп көрейік. Бұл жағдайда біз бір Peering connection жасаймыз. Әрі қарай, егер VPC санын біреуге көбейтсек және ол үшке тең болса, бұл жағдайда үш VPC Peering connection жасау қажет, яғни бірінші мен екінші, екінші және үшінші, сондай-ақ үшінші мен бірінші арасында, өйткені транзитивтілікке қолдау көрсетілмейді. Егер біз төрт VPC туралы айтатын болсақ, онда бұл жағдайда барлық VPC-лерді бір-біріне қосу үшін 6 Peering connection қажет болады. Егер бес VPC болса, онда бұл жағдайда бізге 15 Peering connection қажет болады. Сіз VPC Peering қажетті саны қаншалықты жылдам өсіп жатқанын көресіз. Бұл нақты істі басқаруды жеңілдету үшін арнайы шешім әзірленді. Бұл - AWS Transit Gateway сервисі. Идея мынада: VPC немесе жергілікті дата-центрден VPN қосылымы немесе Direct Connect Gateway түрінде қосылым болсын, содан кейін AWS Transit Gateway желісіне қосылған кезде, барлық бар қосылымдар жаңа қосылымдарға қолжетімді болады. Мысалда алты түрлі қосылымды көресіз және бізге 15-тен астам Peering connection жасаудың қажеті болмады, бірақ AWS Transit Gateway-ге әрбір VPC үшін бір қосылым жасау жеткілікті. Осылайша, әрбір VPC осы Transit gateway-дегі кез келген басқа қосылымдарға қосыла алды. Енді бұл сервистің не екендігі туралы толығырақ сөйлесейік. AWS Transit Gateway — көптеген желілік қосылымдарды біріктіруді жеңілдететін желілік сервис. Ол орталық хаб ретінде жұмыс істейді және оған қосылатын барлық қосылымдар барлық басқа қосылған ресурстарға қолжеткізе алады. Бір AWS Transit Gateway-ге 5000-ға дейін әртүрлі қосылымдарды қосуға болады. Transit Gateway үшін, сондай-ақ AWS Site-to-Site VPN сервисі үшін белгілі бір шектеулер, кемшіліктер мен артықшылықтар бар екенін атап өткім келеді. Олар, сондай-ақ, бағасы бойынша ерекшеленеді. Сондықтан, сіздің бизнес-кейсіңізге байланысты, сіз осы тармақтардың барлығын, атап айтқанда, архитектураға қатысты аспектілерді, сондай-ақ, төлем мәселелерін ескеруіңіз керек. Transit Gateway сіз үшін тиімді шешім емес екені белгілі болуы мүмкін, ондай жағдайда VPC Peering Connection сервисінде қалуыңыз керек. Немесе керісінше жағдайда, VPC Peering connection сізге сәйкес келмейді, өйткені қосылымдар саны өсіп келеді және бұл тиімсіз және Transit Gateway осы қосылымдардың барлығын басқаруды жеңілдетіп қана қоймай, сонымен қатар үнемді болуы мүмкін. AWS Transit Gateway қалай бапталынатынын жақсырақ түсіну үшін келесі мысалды қарастырайық. Бізде келесі CIDR блоктары бар 3 VPC бар. Олардың барлығын Peering connection қолданбай, Transit gateway арқылы қосуымыз керек. Бірінші кезекте AWS Transit Gateway ресурсын жасау керек. Әрі қарай, әрбір VPC жағында ENI, яғни Elastic Network Interface баптау керек. Осы ресурс арқылы VPC-ге қосылу жүзеге асырылады. Біз оны route table-ге қосамыз, яғни әрбір VPC бапталған әдепкі route table-ге ие, ол белгілі бір VPC ішіндегі барлық ресурстар арасындағы трафикке мүмкіндік береді. Енді Route Table әрқайсысына өзгертулер енгізуіміз керек. Үшінші VPC мысалында, Destination ретінде барлық үш VPC CIDR блоктарын қамтитынCIDRблогын және Target ретінде Transit gateway көрсеткенімізді көреміз. Келесі қадам Transit gateway жағында route table баптау болып табылады. Және бұл жерде әрбір VPC үшін Destination ретінде сәйкес VPC-дің Target Elastic Network Interface бар route көрсететінімізді көрсетеміз. Содан кейін трафик Transit Gateway-ге жеткенде, Transit Gateway Route Table-дегі ережеге негізделген трафик қайда бағытталғанын және қандай Target пайдалану керектігін қарайды. VPC 3-тен бірінші VPC CIDR блогындағы ресурстарға қол жеткізіп жатырмыз деп елестетіп көрейік, онда ол IP мекенжайын қарайды және үшінші VPC-дің жағында route көреді, ол Target ретінде Transit Gateway қолданады және осы CIDR блогына қатынайды дегенді білдіреді. Осыдан кейін трафик Transit Gateway жағына өтеді. Transit Gateway сонымен қатар өзінің Route Table қарайды және біз қатынасатын IP мекенжайы бірінші VPC-ге тиесілі екенін көреді. Ал трафикті бірінші VPC-ге бағыттау үшін біз сәйкес Elastic Network Interface пайдалануымыз керек және сәйкесінше бұл трафикті осы ресурсқа бағыттауымыз керек. Осыдан кейін бұл трафикті VPC 1 жағында көруге болады, яғни қосылым іс жүзінде қамтамасыз етіледі. Енді келесі жағдайды қарастырайық. Бізде жергілікті дата-центрден VPN connection бар. Бірінші нұсқа - VPC бір-бірімен қиылыспайтындай әрбір VPC-ден жергілікті дата-центрдегі ресурстарға оқшауланған қосылымды қамтамасыз ету. Бұл жағдайда бізге Transit Gateway-де Route Table- ді өзгерту керек және Destination ретінде бүкіл Интернеттің немесе белгілі бір CIDR блогының белгіленуі және бұл трафикті VPN-ге бағыттау керек. Осылайша, трафик ретінде бірінші VPC-дің IP мекенжайын көрсетсеңіз де, ол route rule-ге сәйкес оны VPN-ге бағыттайды. Әртүрлі VPC-де орналасқан ресурстар бір-бірімен трафикті алмастыра алмайды. Бірақ сонымен бірге олар VPN арқылы трафикті жергілікті дата-центрлерге жібере алады. Келесі жағдай - AWS ішінде қалған, бірақ басқа VPC-ге өтетін, және басқа трафик VPN-ге бағытталуы үшін барлық трафикті сақтау қажет болғанда. Бұл жағдайда біз Transit gateway-де Route table-ді өзгерте аламыз немесе алдыңғы routes көрсетілетін басқа Route Table қоса аламыз. Осылайша, біз үшінші VPC-ден, мысалы, екінші VPC-дегі ресурстарға қол жеткізгіміз келгенде, екінші route table-ге сәйкес, біз трафикті сәтті бағыттаймыз. Әрі қарай, егер біз трафигімізді VPC-ге емес, басқа IP мекенжайына бағыттағымыз келсе, ол екінші route table-ге қатысты ережелерге сәйкес келмейді және бірінші route table-ді қарастырады, бұл трафикті VPN жағына бағыттау керек екенін көреді және сәйкесінше бұл трафик сол жерге барады. AWS Transit Gateway қалай баптау керектігін есте сақтау үшін шағын тапсырма орындайық. Осы тапсырманың аясында бізге қиылыспайтын бірегей CIDR блогы бар 5 түрлі VPC беріледі. Бізде сондай-ақ Transit Gateway бар және біз барлық VPC-лерді AWS Transit Gateway арқылы бір-біріне толығымен қосуымыз керек. Әрбір VPC-дің Route Table деңгейінде қандай әрекеттерді орындау керек және Transit Gateway Route table деңгейінде қандай әрекеттерді орындау қажет? Сіз бұл видеоны тоқтатып, өзіңіз жауап беруге тырысыңыз. Жақсы, дұрыс жауап бере алдыңыз деп ойлаймын, енді не істеу керек екенін тексерейік. Ең алдымен, әрбір VPC деңгейінде бізге бір route қосу керек. Бұл route Destination ретінде CIDR блогын қамтиды, бұл CIDR блогы барлық бар VPC құрылғыларының CIDR блоктарын қамтуы керек және Target ретінде Transit Gateway көрсетілуі керек. Осылайша, біз Route Table жағында әдепкі бірінші route осы VPC CIDR блогын қамтитынын және Target ретінде local көрсететінін есте ұстаймыз. Бұл трафик жіберілетін IP мекенжайы белгілі бір VPC-нің CIDR блогына жататын болса, онда ол жергілікті трафик ретінде танылады және сәйкесінше сол VPC-де орналасқан ресурсқа бағытталады. Яғни, бұл VPC ішіндегі барлық ресурстарға бір-бірімен байланысуға мүмкіндік беретін route. Енді біз қосқан келесі route, ол барлық басқа CIDR блоктарын қамтиды және егер бізде белгілі бір VPC CIDR блогына жатпайтын, бірақ сыртқа шығатын IP мекенжайына сұрау болса, онда бұл жағдайда оның жалпы CIDR блогына жататынын тексереміз. Олай болса, трафик Transit Gateway-ге өтеді. Мұндай өзгерістер әрбір VPC деңгейінде жасалуы керек. Енді біз Transit Gateway туралы айтатын болсақ, мұнда route table-ге 5 route, әрбір VPC үшін 1 route қосу керек. Бұл route келесі параметрлерді қамтиды. Destination ретінде VPC CIDR блогын көрсетеміз, ал Target ретінде сол VPC Elastic Network Interface көрсетеміз. Яғни, егер Transit Gateway-де белгілі бір IP мекенжайына бағытталған трафикті алсақ, ол оның барлық route-тарын тексереді және егер бұл IP мекенжай Destination-дағы CIDR блоктарының біріне жататын болса, онда ол трафикті осы Target-ке бағыттайды. Осылайша, біз Transit Gateway арқылы барлық VPC арасындағы байланысты баптай алдық. Осымен бесінші бөлім аяқталды және мұнда AWS Transit Gateway сервисіне қатысты негізгі ойларды атап өтуге болады. AWS Transit Gateway VPC Peering connection бірдей рөл атқарады, бірақ оның орталық хаб болуымен ерекшеленеді. Peering connection жағдайында біз екі VPC-ді бір-біріне тікелей қосамыз, ал Transit Gateway жағдайында бізге VPC-ні Transit Gateway-ге қосу жеткілікті және ол осы Transit Gateway-ге қосылған барлық қолданыстағы қосылымдарға қол жеткізе алады. Сіздің бизнес жағдайыңызға немесе мәселеңізге байланысты сізге қайсысы тиімді екенін шешу керек. Немесе VPC арасында қосылымдар саны аз болған жағдайда VPC Peering connection пайдаланыңыз, ал керісінше жағдайда, VPC саны көп болса және әрбір VPC әрбір басқа VPC-ге қосылуы қажет болса, онда бұл жағдайда сізге қолайлы шешім AWS Transit Gateway болуы мүмкін. Біз дәрісіміздің алтыншы және соңғы бөліміне жеттік және мұнда VPC ресурстарына басқа AWS сервистеріне қол жеткізуге мүмкіндік беретін ресурстар туралы айтатын боламыз. Мұны жүзеге асыру үшін VPC Endpoints пайдалану ұсынылады. Бұл - VPC ресурстарына желіге қосылмай және жаһандық AWS инфрақұрылымында қалмай AWS сервистеріне тікелей қосылуға мүмкіндік беретін ресурс. Осылайша, бізге Internet Gateway, VPN қосылымы, NAT Gateway және т.б. баптаудың қажеті жоқ. VPC Endpoints қосудың екі нұсқасы бар. Біріншісі - Interface Endpoint, бізге жеке IP мекенжайы бөлінген кезде және осы жеке IP мекенжайы арқылы AWS Private Link функциясын пайдалана отырып, біз басқа сервистерге қосыламыз. Барлық сервистер қолжетімді емес. Бұл сервистердің мысалдары Amazon CloudWatch, Amazon EC2 және Elastic Cloud Balancing болып табылады. Екінші опция - Gateway Endpoint. Бұл жағдайда белгілі бір трафикті AWS қолдайтын сервистерге бағыттау үшін route table жағында өзгерістер енгізіледі. Мысалдары Amazon S3 және DynamoDB болып табылады. Енді Interface Endpoint параметрін баптауға болатын мысалдарды қарастырайық. Ең алдымен, біз қандай сервиспен жұмыс істейтінімізді және бұл сервиске Interface Endpoint арқылы қолдау көрсетілетінін шешуіміз керек. Қолдау көрсетілсе, біз VPC туралы шешім қабылдауымыз керек, ресурстардың осы сервиске қосылатын subnet анықтауымыз керек. Төртінші қадамда жеке DNS әдепкі бойынша белсендіруге болатынын көресіз. Мұның не үшін қажет екенін сәл кейінірек айтамын. Соңғы қадам - Network Interface үшін қажетті security groups баптау. Енді мұның бәрі өзара әрекеттесетін мысалдарды қарастырайық. Біз VPC-ден белгілі бір сервиске қосылымды орнатқан кезде, ол Amazon Kinesis Data Streams болсын, біз оған default DNS hostname арқылы қол жеткізе аламыз. Бұл сервистің URL мекенжайы, ол арқылы осы сервиске қол жеткізе аламыз, бірақ мәселе мынада, бұл кіру Internet gateway арқылы, Интернет арқылы өтеді және сіз қосымша параметрмен қажетін көрсетесіз. Кейбір жүктемелер үшін бұл мүмкін емес. Басқа нұсқа Endpoint Specific DNS hostname пайдалануға болады. Бұл Interface Endpoint-ке кейбір DNS hostname тағайындалған кезде. Басқаша айтқанда, бұл URL мекенжайына сұраныс бойынша трафик сізге қажет сервиске бағытталады. Бұл жағдайда Private DNS қосылмаған. Егер біз бұл сервиске қол жеткізгіміз келсе, бізде екі нұсқа бар. Default DNS hostname арқылы қол жеткізілсе, трафик Internet gateway арқылы өтеді және Интернет арқылы біздің сервисімізге жетеді. Немесе Amazon Kinesis Data Stream қосылымымен Interface Endpoint ішінде жасалған қолданбаларымыздың жағында ерекше бірегей URL мекенжайын нақты көрсетуіміз керек. Бұл URL мекенжайына сұрау ғаламдық AWS инфрақұрылымында орын алады, Интернетке өтпейді және VPC ішіндегі ресурстар нақты сервиске тікелей қол жеткізеді. Енді тағы бір жағдай бар, біз Private DNS іске қосқан кезде, бұл жағдайда трафикті Интернет арқылы, Internet gateway арқылы әдепкі DNS hostname-ге бағыттаудың қажеті жоқ және бұл әдепкі DNS hostname да белсенді болып қалады, бірақ осы URL мекенжайына сұрау арқылы біз трафикті Interface Gateway арқылы қажетті сервиске бағыттаймыз. Басқаша айтқанда, біз әрбір сервис үшін әдепкі DNS hostname білеміз, ол өзгермейді, ол стандартты. Сонымен, оны пайдаланғымыз келсе, бұл өте ыңғайлы, Private DNS опциясын қоса аламыз және VPC ішіндегі қолданбаларымыз үшін Endpoint Specific DNS hostname көрсетудің қажеті жоқ, бірақ белгілі бір сервистің жалпыға қолжетімді URL мекенжайын, ғаламдық AWS инфрақұрылымында Интернетке қосылусыз Interface Endpoint арқылы өтетінін біле отырып, тікелей қол жеткізе аласыз. Жақсы, осылайша біз дәрісіміздің алтыншы бөлімінің соңына жеттік, бізде VPC ресурстарының AWS сервистеріне қосылу мүмкіндігі бар екенін көрдік. Екі нұсқа бар. Бірінші нұсқа -Interface Gateway арқылы, ал екіншісі - Gateway Endpoint арқылы. Екі жағдайда да, сізге қандай сервис қажет екеніне байланысты белгілі бір AWS сервистеріне қолдау көрсетіледі және қолдау көрсетілетін сервистер тізімін қарап, қай опцияны қолдану керектігін түсінуге болады. Осымен дәрісімізді аяқтаймыз. Біз networking-ке қатысты маңызды мәселелерді талқыладық. Жергілікті инфрақұрылымды AWS бұлттарымен қалай қосуға болатынын, бұл үшін қандай мүмкіндіктер бар екенін, кем дегенде екі нұсқаны қарастырдық. Біз сондай-ақ AWS бұлтында VPC, бірнеше VPC бір-біріне қосу опциясын қарастырдық. Сіздің жағдайыңызға байланысты да бірнеше нұсқа бар. Және соңғы нұсқа, біз сондай-ақ сервисті VPC ішінде орналастыру мүмкін емес, бірақ VPC-ден VPC Endpoint арқылы осы сервистермен қауіпсіз жұмыс істей алатын жағдайды қарастырдық. Бұл слайдта сіз Интернеттегі қосымша ресурстарға қол жеткізуге көмектесетін кілт сөздерді көре аласыз. Көбінесе олар AWS құжаттамасын немесе YouTube видео хостинг сайтында орналасқан re:Invent жазбаларын жүргізеді. Осымен бүгінгі дәрісіміз аяқталды. Назарларыңызға рахмет, келесі белсенділіктерде кездескенше.