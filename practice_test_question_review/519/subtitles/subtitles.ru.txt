Добрый день, уважаемые студенты. Мы с вами начинаем разбор вопроса Practice Test-а. Согласно вопросу у нас three-tier web application, то есть три уровня. В первом уровне front-end у нас статические веб-страницы. Во втором уровне, уровне логики приложения работают на одной EC2 инстанс машине. И здесь выполняются достаточно долгие задания. На последнем уровне, уровне данных у нас работает MySQL база данных. Вам как Solutions Architect пришло задание, чтобы все приложение сделать highly available, то есть высоко доступное, за счет decoupling ее частей, то есть сделать их менее связанными между собой. Что для этого можно сделать? Необходимо выбрать один правильный вариант ответа из предложенных опций. На этом слайде вы видите варианты ответа, так же видите, что второй вариант ответа является верным. Тем не менее, давайте разберем каждый вариант. Если посмотреть на структуру ответов, они все состоят из трех частей, и каждая часть относится к каждому из трех уровней нашего веб-приложения. Первое предложение говорит про front-end уровень. В первом варианте предлагается наши веб-страницы, ассеты, то есть картинки, видео, перенести на уровень back-end, положить возле приложения внутри EC2 инстанса и увеличить размер инстанса. Это противоречить тому, что требовалось в вопросе, нам нужно было компоненты разделить и сделать слабосвязанными, а в этом случае наоборот объединяем, поэтому этот вариант можем исключать. Если посмотреть на второй вариант, предлагается все статические ассеты и веб-страницы перенести на S3. На стороне S3 есть возможность хостить статические веб-сайты, можем ее включить и использовать. Это решение намного дешевле, нежели хостить веб-страницы на EC2. Поэтому этот вариант пока оставляем, смотрим третий. На третьем варианте предлагается все статические ассеты, но не веб-страницы перенести на S3. Возможно, это какая-то ошибка, если это не ошибка, а намеренно, то этот вариант скорее всего не верный, так как S3 также может хостить веб-страницы, не только ассеты. Если мы посмотрим на четвертый вариант, здесь предлагается все статические ассеты и веб-страницы перенести на CloudFront. Этот вариант логически не совсем верен, CloudFront сам по себе является Content Delivery Network. Идея в том, что это сеть из серверов с кэшем, и для того, чтобы в кэш положить некоторые данные, нам нужен источник. Источником обычно используется Amazon S3, они очень хорошо работают в связке, то есть S3 плюс CloudFront. Поэтому четвертый вариант логически не совсем верен, мы его исключаем. У нас состоится второй и третий варианты ответов. Давайте посмотрим на вторую часть. Во второй части для второго варианта предлагается использовать Elastic Container Service и настроить там Auto Scaling. Ничего критичного и противоречивого мы не видим, мы можем наше приложение перенести на контейнеры. Давайте посмотрим, что у нас есть на третьем варианте во втором предложении. Здесь предлагается настроить concurrency limit и наше приложение перенести на Lambda. Таким образом перейти на serverless архитектуру. Этот вариант не совсем подходит, потому что Lambda максимально может работать 15 минут, то есть 900 секунд. В вопросе же сказано, что у нас отрабатывают long-running processes, то есть скорее всего это больше 15 минут. И здесь была как раз таки отсылка, чтобы не использовать Lambda. Поэтому мы исключаем третий вариант, остается второй вариант. Тем не менее, давайте посмотрим на третье предложение в других вариантах. Во втором варианте предлагается мигрировать базу данных на Amazon RDS и включить Multi-AZ deployment. Да, хорошее решение, использование managed service помогает разгрузиться от административных задач. Более того есть готовые решения Multi-AZ, которая помогает вам сделать вашу базу данных highly available, то есть высоко доступной. Если что-то происходит на стороне одной availability зоны, происходит автоматический failover, и secondary database становится основным. Таким образом база продолжает работать. Если же мы посмотрим на третье предложение в третьем варианте, здесь предлагается мигрировать нашу базу данных в DynamoDB. DynamoDB - это NoSQL база данных, поэтому ту базу данных, которая уже хостится на MySQL, это реляционные базы данных, проще перенести в сервис RDS. DynamoDB это NoSQL, поэтому необходимо провести работы по моделированию данных и поменяется вся структура. Поэтому это сложно с точки зрения усилий. Исходя из этого мы однозначно можем утверждать, что второй вариант является верным. На следующих страницах будет также текстовый разбор этого вопроса, можете не спеша остановить видео и ознакомиться с ним. На этом мы завершаем разбор вопроса Practice Test-а. Спасибо за внимание.