Қайырлы күн, құрметті студенттер. Біз Practice Test сұрағын талдауды бастаймыз. Сұрақтың шарты бойынша бізде three-tier web application, яғни үш деңгейлі веб-қосымшасы бар. Front-end бірінші деңгейінде бізде статикалық веб-парақшалар бар. Екінші деңгейде, логикалық деңгейде қосымша бір EC2 инстанс машинасында жұмыс істейді. Бұл деңгейде өте ұзақ тапсырмалар орындалады. Соңғы деректер деңгейінде бізде MySQL дерекқоры жұмыс істейді. Solutions Architect ретінде сіз decoupling арқылы бүкіл қолданбаны highly available ету, яғни жоғары қолжетімді ету, яғни оларды бір- бірімен әлсіз байланыстыру тапсырмасын алдыңыз. Бұл үшін не істеуге болады? Берілген нұсқалардан бір дұрыс жауапты таңдауымыз керек. Бұл слайдта сіз жауап нұсқаларын көресіз, сонымен қатар екінші жауап нұсқасы дұрыс екенін көресіз. Дегенмен, әр нұсқаны қарастырайық. Жауаптардың құрылымына қарасаңыз, олардың барлығы үш бөліктен тұрады және әрбір бөлік біздің веб- қосымшаның үш деңгейінің әрқайсысына қатысты. Бірінші сөйлем front-end деңгейі туралы айтады. Біз бірінші нұсқа үшін біздің барлық веб-парақшаларымызды, ассеттерімізді, яғни суреттерді, бейнелерді back-end деңгейіне тасымалдап, EC2 инстансы ішіндегі қолданбаның жанына орналастырып, инстанстың өлшемін ұлғайту ұсынылатынын көреміз. Бұл сұрақта талап етілгенге қайшы келеді, біз компоненттерді бөліп, оларды әлсіз біріктіруіміз керек еді, бірақ бұл жағдайда, керісінше, біз оларды біріктіреміз, сондықтан біз бұл нұсқаны бірден алып тастай аламыз. Екінші нұсқада барлық статикалық ассеттер мен веб-парақшаларды S3-ге тасымалдау ұсынылады. S3 жағында статикалық веб-сайттарды орналастыру мүмкіндігі бар, біз оны қосып, пайдалана аламыз. Бұл шешім веб-парақшаларды EC2-де орналастырудан әлдеқайда арзан. Сондықтан біз бұл нұсқаны әзірге қалдырып, үшіншісін қарастырамыз. Үшінші нұсқа веб-парақшаларды емес, барлық статикалық ассеттерді S3-ге тасымалдауды ұсынады. Мүмкін, бұл қате болуы мүмкін, бірақ егер бұл қате емес, әдейі болса, онда бұл нұсқа дұрыс емес, өйткені S3 тек ассеттерді ғана емес, веб-парақшаларды да орналастыра алады. Төртінші нұсқаны қарастыратын болсақ, ол барлық статикалық ассеттер мен веб-парақшаларды CloudFront-қа тасымалдауды ұсынады. Бұл нұсқа логикалық тұрғыдан мүлдем дұрыс емес, өйткені CloudFront өзі Content Delivery Network болып табылады. Идея мынада: бұл кэші бар серверлер желісі және кэшке кейбір деректерді қою үшін бізге көз қажет. Amazon S3 әдетте көз ретінде пайдаланылады, олар үйлесімде өте жақсы жұмыс істейді, яғни S3 және CloudFront. Сондықтан төртінші нұсқа логикалық тұрғыдан мүлдем дұрыс емес, біз оны алып тастаймыз. Бізде екінші және үшінші жауап нұсқалары қалады. Екінші бөлігін қарастырайық. Екінші нұсқаның екінші бөлігінде Elastic Container Service сервисін пайдалану және сол жерде Auto Scaling баптау ұсынылады. Біз сыни немесе қарама-қайшы ештеңе көрмейміз, қолданбамызды контейнерлерге тасымалдай аламыз. Үшінші нұсқаның екінші бөлігінде не айтылғанын көрейік. Мұнда concurrency limit теңшеп, қолданбамызды Lambda-ға тасымалдау ұсынылады. Осылайша, serverless архитектураға ауысамыз. Бұл нұсқа сәйкес келмейді, себебі Lambda максимум 15 минут, яғни 900 секунд жұмыс істей алады. Сұрақта біз ұзаққа созылатын процестермен жұмыс істеп жатқанымызды айтады, яғни бұл 15 минуттан астам уақыт болуы мүмкін. Яғни, мұнда Lambda қолданбауға сілтеме болды. Сондықтан үшінші нұсқаны алып тастаймыз, екінші нұсқа қалады. Дегенмен, басқа нұсқалардың үшінші сөйлемін қарастырайық. Екінші нұсқа дерекқорды Amazon RDS жүйесіне көшіруді және Multi-AZ deployment қосуды ұсынады. Иә, бұл - managed service пайдалану әкімшілік тапсырмалардан босатуға көмектесетін жақсы шешім. Сонымен қатар, дайын Multi-AZ шешімдері бар, бұл сіздің деректер қорыңызды highly available, яғни жоғары қолжетімді етуге көмектеседі. Бір availability zone жағында проблема пайда болса, автоматты түрде failover орын алады және secondary database негізгі болады. Осылайша дерекқор жұмысын жалғастырады. Үшінші нұсқадағы үшінші сөйлемді қарасақ, ол біздің дерекқорды DynamoDB-ге көшіруді ұсынады. DynamoDB - NoSQL дерекқоры, сондықтан MySQL-де орналастырылған реляционды дерекқорды RDS сервисіне тасымалдау оңайырақ. DynamoDB – бұл NoSQL, сондықтан деректерді модельдеу жұмыстарын жүргізу қажет және бүкіл құрылым өзгереді. Сондықтан күш-жігер тұрғысынан қиын. Осыған сүйене отырып, екінші нұсқаны дұрыс деп анық айта аламыз. Келесі слайдтарда бұл мәселенің мәтіндік талдауы болады, сіз видеоны тоқтатып, оны оқи аласыз. Осымен Practice Test сұрағын талдауымыз аяқталды. Назарларыңызға рахмет.