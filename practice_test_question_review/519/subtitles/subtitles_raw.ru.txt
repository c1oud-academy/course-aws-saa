 Добрый день, уважаемые студенты. Мы с вами начинаем разбор вопроса practice теста. Согласно вопросу у нас 3 tier web application, то есть 3 уровня. В первом уровне frontend у нас статические веб страницы. Во втором уровне уровни логики приложение работает на одной institute instance машине и здесь выполняются достаточно долгие задания. И на последнем уровне уровне данных у нас работает mysqlbase данных. Вам как solution с архитекту пришло задание чтобы все приложение сделать highly available, то есть высоко доступны за счет decoupling ее частей, то есть сделать их менее связанными между собой. Что для этого можно сделать? Нам необходимо выбрать один правильный вариант ответа из предложенных опций. На этом слайде вы видите варианты ответов, также видите что второй вариант ответа является верным. Тем не менее давайте разберем каждый вариант. Если посмотреть на структуру ответов, они все состоят из трех частей и каждая часть относится к каждому из трех уровней нашего веб-приложения. Первое предложение говорит про frontend уровень и мы видим что для первого варианта предлагается все наши веб страницы ассеты, то есть картинки видео перенести на уровень бэкэнда, положить возле приложения внутривью сету instance и увеличить размер instance. Это противоречит тому что требовалось в вопросе, нам нужно было компоненты разделить и сделать слабо связанными, а в этом случае мы наоборот их обеднее, поэтому этот вариант можем сразу исключать. Если посмотреть на второй вариант, предлагается все статические ассеты и веб-страницы перенести на s3. Да, у нас на стороне s3 есть возможность хостить статические веб-сайты, можем ее включить и использовать. Это решение намного дешевле, нежели хостить веб-страницы на s2. Поэтому этот вариант пока оставляем, смотрим третий. На третьем варианте предлагается все статические ассеты, но не веб-страницы перенести на s3. Возможно это какая-то ошибка, если это не ошибка, а намеренно, то этот вариант скорее всего неверный, так как s3 также может хостить веб-страницы тоже, не только ассеты. И если мы посмотрим на четвертый вариант, здесь предлагается все статические ассеты и веб-страницы перенести на cloud front. Этот вариант логически не совсем верен, так как cloud front сам по себе является content delivery network и идея в том, что это сеть из серверов с кэшем и для того, чтобы в кэш положить некоторые данные, нам нужен источник. Источником обычно используется amazon s3. Они очень хорошо работают в связке, то есть s3 плюс cloud front. Поэтому четвертый вариант логически не совсем верен, мы ее исключаем. У нас состоится второй и третий вариант ответов. Давайте посмотрим на вторую часть. Во второй части для второго варианта предлагается использовать elastic container service и настроить там авто скейлинг. Ничего критичного противоречащего мы не видим. Мы можем наше приложение перенести на контейнеры. Давайте посмотрим, что у нас есть на третьем варианте во втором предложении. Здесь предлагается настроить concurrency limit и наше приложение перенести на лямбду. Таким образом перейти на серверлес архитектуру. Этот вариант не совсем подходит, потому что лямбда максимально может работать 15 минут, то есть 900 секунд. В вопросе же сказано, что у нас отрабатывают long running processes. Скорее всего это больше 15 минут и здесь была как раз таки отсылка, чтобы не использовать лямбду. Поэтому мы исключаем третий вариант, остается второй вариант. Тем не менее, давайте посмотрим на третье предложение в других вариантах. Во втором варианте предлагается мигрировать нашу базу данных на amazon rds и включить multi-id deployment. Да, это хорошее решение. Использование managed service, оно помогает разгрузиться от административных задач и более того есть готовое решение multi-id, которое помогает вам сделать вашу базу данных highly available, то есть высоко доступной. Если что-то происходит на стороне одной availability зоны, происходит автоматический failover и secondary database становится основным. Таким образом база продолжает работать. Если же мы посмотрим на третье предложение в третьем варианте, здесь предлагается мигрировать нашу базу данных в DynamoDB. DynamoDB это no-skill базы данных, поэтому ту базу данных, которая уже хостится на myskill, это реализационная база данных, проще конечно перенести в сервис rds. DynamoDB это no-skill, поэтому необходимо провести работы по моделированию данных и поменяется вся структура, поэтому это сложно с точки зрения усилий. Исходя из этого мы однозначно можем утверждать, что второй вариант является верным. На следующих страницах будет также текстовый разбор этого вопроса, можете не спеша остановить видео и ознакомиться с ним. На этом мы завершаем разбор вопроса practice теста. Спасибо за внимание.
