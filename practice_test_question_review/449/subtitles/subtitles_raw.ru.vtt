1
0:00:00.000 --> 0:00:06.000
Добрый день, уважаемые студенты! Мы с вами начинаем разбор вопроса practice test.

2
0:00:06.000 --> 0:00:12.000
Согласно вопросу, компания хостит свое приложение на EC2-инстанциях.

3
0:00:12.000 --> 0:00:15.000
Здесь используется автоскейлинг группа для автомасштабирования.

4
0:00:15.000 --> 0:00:20.000
Также используется application load balancer для распределения нагрузки.

5
0:00:20.000 --> 0:00:24.000
�  это все работает на нескольких availability-зонах.

6
0:00:24.000 --> 0:00:34.000
Во время работы приложения получилось так, что несколько инстанций были автоматически terminated application load balancer,

7
0:00:34.000 --> 0:00:38.000
так как они ответили не успешно для health check.

8
0:00:38.000 --> 0:00:44.000
Поэтому эти инстанции незамедлительно были удалены.

9
0:00:44.000 --> 0:00:53.000
Также остаток логов, который не успел загрузиться в CloudWatchLogs, они также были удалены вместе с инстанцией.

10
0:00:53.000 --> 0:01:07.000
Необходимо из предложенных вариантов выбрать самый легкий путь, который позволит достоверно получить все логи из EC2-инстанциях перед его удалением.

11
0:01:11.000 --> 0:01:16.000
На этом сайте вы видите варианты ответов, они достаточно объемные.

12
0:01:16.000 --> 0:01:21.000
Вы также видите, что правильным ответом на этот вопрос является четвертый вариант.

13
0:01:21.000 --> 0:01:26.000
Тем не менее, давайте попробуем разобрать этот вопрос.

14
0:01:26.000 --> 0:01:38.000
Когда приходят вопросы с большими вариантами ответов, то я вам крайне рекомендую не читать отдельно каждый вариант, а начать уже сразу сравнивать варианты ответов.

15
0:01:38.000 --> 0:01:48.000
Скорее всего, по мере сравнивания у вас постепенно будут отпадать некоторые варианты, которые логически не подходят, либо не являются достоверными.

16
0:01:48.000 --> 0:01:55.000
Давайте попробуем ответить на этот вопрос, так как если бы мы были на реальном экзамене AWS.

17
0:01:55.000 --> 0:02:07.000
Прочитав первое предложение всех вариантов, мы видим, что они все похожи, кроме второго варианта, который предлагает создать lifecycle hook,

18
0:02:07.000 --> 0:02:18.000
который для авто скейлинг группы будет двигать инстанции из состояния terminating в состояние pending wait.

19
0:02:18.000 --> 0:02:26.000
Во всех других вариантах оно будет менять состояние из terminating в terminating wait.

20
0:02:26.000 --> 0:02:41.000
Здесь логически можно предположить, что pending wait скорее всего является неверным вариантом ответа, так как задача авторов вопроса спрятать правильный ответ максимально глубже.

21
0:02:41.000 --> 0:02:45.000
Поэтому мы можем исключить второй вариант ответа.

22
0:02:45.000 --> 0:03:01.000
Более того, если мыслить логически, если приложение перестало работать и мы переводим ее в состояние terminating, то переводя ее в состояние pending wait, следующим статусом будет running.

23
0:03:01.000 --> 0:03:08.000
�  нет никакого смысла возвращать в работу приложение, если оно не работает.

24
0:03:08.000 --> 0:03:21.000
Поэтому правильнее все-таки из terminating в состояние перемещать в terminating wait, чтобы дать какое-то время перед ее окончательным отключением.

25
0:03:21.000 --> 0:03:25.000
У нас остались первые, третьи и четвертые варианты ответов.

26
0:03:25.000 --> 0:03:34.000
Второе предложение говорит нам о том, что мы должны настроить CloudWatch Event Rule.

27
0:03:34.000 --> 0:03:46.000
Оно должно привязаться к событию EC2 instance terminate lifecycle action, либо EC2 instance terminate successful.

28
0:03:46.000 --> 0:03:58.000
А в третьем варианте ответа предлагается сразу настроить Step Functions, не настраивая CloudWatch Event Rule.

29
0:03:58.000 --> 0:04:11.000
Третий вариант мы можем отсечь, потому что Step Functions сам по себе не поймет, что EC2 instance переходит в состояние terminating wait и надо что-то с ним делать.

30
0:04:11.000 --> 0:04:12.000
Поэтому этот вариант мы убираем.

31
0:04:12.000 --> 0:04:23.000
Более того, Step Functions сам по себе не проделывает никаких действий, чтобы были какие-то действия, вы в рамках Step Functions будете создавать лямбду.

32
0:04:23.000 --> 0:04:34.000
Если вы обратите внимание, что лямбда упоминается и в первом и в четвертом варианте, но в этом случае она используется без Step Functions, то есть это намного проще.

33
0:04:34.000 --> 0:04:38.000
Step Functions лишь добавляет сложность к имплементации.

34
0:04:38.000 --> 0:04:44.000
Нам в рамках вопроса нужно было выбрать самое простое решение, поэтому третий вариант ответа мы также исключаем.

35
0:04:44.000 --> 0:04:47.000
Остается первый и четвертый варианты ответа.

36
0:04:47.000 --> 0:04:56.000
Теперь если обратить внимание на сам ивент, четвертый привязывается к событию EC2 instance terminate lifecycle action.

37
0:04:56.000 --> 0:05:05.000
Это то, что событие говорит о том, что instance переходит в состояние terminate и нужно в этот момент что-то с ним делать.

38
0:05:05.000 --> 0:05:08.000
А в первом варианте ответа уже ивент другой.

39
0:05:08.000 --> 0:05:14.000
Он говорит о том, что EC2 instance успешно был отключен и после этого приходит ивент.

40
0:05:14.000 --> 0:05:21.000
Чисто логически первый вариант можно отсечь, так как после того как instance отключился мы уже с ним ничего сделать не сможем.

41
0:05:21.000 --> 0:05:24.000
Нам нужно, чтобы он оставался включенным.

42
0:05:24.000 --> 0:05:34.000
Поэтому вариант четвертый, не до конца прочитав варианты ответа, мы уже попытались выявить, что четвертый вариант ответа является верным.

43
0:05:34.000 --> 0:05:39.000
Если прочитать ее до конца, нам предлагается настроить лямбду.

44
0:05:39.000 --> 0:05:44.000
Она привязывается к событию EC2 instance terminate lifecycle action.

45
0:05:44.000 --> 0:05:50.000
�  таргетом для этого рула является лямбда функция.

46
0:05:50.000 --> 0:05:56.000
Лямбда функция в свою очередь подключается к CloudWatch агенту в EC2 instance.

47
0:05:56.000 --> 0:06:12.000
�  не дожидавшись очередной отправки группы логов, запускает команду для принудительной отправки тех логов, которые остались, еще не успели отправиться.

48
0:06:12.000 --> 0:06:24.000
После того как успешно все логи отправляются в CloudWatch logs, можно завершать работу лямбды и можно завершать terminated EC2 instance.

49
0:06:24.000 --> 0:06:34.000
Так как все логи уже собраны в CloudWatch logs и этого достаточно, чтобы по логам определить в чем была проблема и попытаться ее решить.

50
0:06:34.000 --> 0:06:58.000
На следующих слайдах вы увидите текстовый разбор данного вопроса, с которым вы также можете ознакомиться.

51
0:06:58.000 --> 0:07:04.000
На этом мы завершаем разбор вопроса practice теста. Спасибо за внимание.
