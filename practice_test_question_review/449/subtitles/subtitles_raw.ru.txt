 Добрый день, уважаемые студенты! Мы с вами начинаем разбор вопроса practice test. Согласно вопросу, компания хостит свое приложение на EC2-инстанциях. Здесь используется автоскейлинг группа для автомасштабирования. Также используется application load balancer для распределения нагрузки. И это все работает на нескольких availability-зонах. Во время работы приложения получилось так, что несколько инстанций были автоматически terminated application load balancer, так как они ответили не успешно для health check. Поэтому эти инстанции незамедлительно были удалены. Также остаток логов, который не успел загрузиться в CloudWatchLogs, они также были удалены вместе с инстанцией. Необходимо из предложенных вариантов выбрать самый легкий путь, который позволит достоверно получить все логи из EC2-инстанциях перед его удалением. На этом сайте вы видите варианты ответов, они достаточно объемные. Вы также видите, что правильным ответом на этот вопрос является четвертый вариант. Тем не менее, давайте попробуем разобрать этот вопрос. Когда приходят вопросы с большими вариантами ответов, то я вам крайне рекомендую не читать отдельно каждый вариант, а начать уже сразу сравнивать варианты ответов. Скорее всего, по мере сравнивания у вас постепенно будут отпадать некоторые варианты, которые логически не подходят, либо не являются достоверными. Давайте попробуем ответить на этот вопрос, так как если бы мы были на реальном экзамене AWS. Прочитав первое предложение всех вариантов, мы видим, что они все похожи, кроме второго варианта, который предлагает создать lifecycle hook, который для авто скейлинг группы будет двигать инстанции из состояния terminating в состояние pending wait. Во всех других вариантах оно будет менять состояние из terminating в terminating wait. Здесь логически можно предположить, что pending wait скорее всего является неверным вариантом ответа, так как задача авторов вопроса спрятать правильный ответ максимально глубже. Поэтому мы можем исключить второй вариант ответа. Более того, если мыслить логически, если приложение перестало работать и мы переводим ее в состояние terminating, то переводя ее в состояние pending wait, следующим статусом будет running. И нет никакого смысла возвращать в работу приложение, если оно не работает. Поэтому правильнее все-таки из terminating в состояние перемещать в terminating wait, чтобы дать какое-то время перед ее окончательным отключением. У нас остались первые, третьи и четвертые варианты ответов. Второе предложение говорит нам о том, что мы должны настроить CloudWatch Event Rule. Оно должно привязаться к событию EC2 instance terminate lifecycle action, либо EC2 instance terminate successful. А в третьем варианте ответа предлагается сразу настроить Step Functions, не настраивая CloudWatch Event Rule. Третий вариант мы можем отсечь, потому что Step Functions сам по себе не поймет, что EC2 instance переходит в состояние terminating wait и надо что-то с ним делать. Поэтому этот вариант мы убираем. Более того, Step Functions сам по себе не проделывает никаких действий, чтобы были какие-то действия, вы в рамках Step Functions будете создавать лямбду. Если вы обратите внимание, что лямбда упоминается и в первом и в четвертом варианте, но в этом случае она используется без Step Functions, то есть это намного проще. Step Functions лишь добавляет сложность к имплементации. Нам в рамках вопроса нужно было выбрать самое простое решение, поэтому третий вариант ответа мы также исключаем. Остается первый и четвертый варианты ответа. Теперь если обратить внимание на сам ивент, четвертый привязывается к событию EC2 instance terminate lifecycle action. Это то, что событие говорит о том, что instance переходит в состояние terminate и нужно в этот момент что-то с ним делать. А в первом варианте ответа уже ивент другой. Он говорит о том, что EC2 instance успешно был отключен и после этого приходит ивент. Чисто логически первый вариант можно отсечь, так как после того как instance отключился мы уже с ним ничего сделать не сможем. Нам нужно, чтобы он оставался включенным. Поэтому вариант четвертый, не до конца прочитав варианты ответа, мы уже попытались выявить, что четвертый вариант ответа является верным. Если прочитать ее до конца, нам предлагается настроить лямбду. Она привязывается к событию EC2 instance terminate lifecycle action. И таргетом для этого рула является лямбда функция. Лямбда функция в свою очередь подключается к CloudWatch агенту в EC2 instance. И не дожидавшись очередной отправки группы логов, запускает команду для принудительной отправки тех логов, которые остались, еще не успели отправиться. После того как успешно все логи отправляются в CloudWatch logs, можно завершать работу лямбды и можно завершать terminated EC2 instance. Так как все логи уже собраны в CloudWatch logs и этого достаточно, чтобы по логам определить в чем была проблема и попытаться ее решить. На следующих слайдах вы увидите текстовый разбор данного вопроса, с которым вы также можете ознакомиться. На этом мы завершаем разбор вопроса practice теста. Спасибо за внимание.
