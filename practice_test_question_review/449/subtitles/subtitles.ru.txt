Добрый день, уважаемые студенты! Мы с вами начинаем разбор вопроса Practice Test-а. Согласно вопросу, компания хостит свое приложение на EC2 инстансах. Здесь используется Auto Scaling group для автомасштабирования. Также используется Application Load Balancer для распределения нагрузки и это все работает на нескольких availability зонах. Во время работы приложения получилось так, что Application Load Balancer автоматически терминейтнул несколько инстансов, так как они ответили Не успешно для health check. Поэтому эти инстансы незамедлительно были удалены. Также остаток логов, который не успел загрузиться в CloudWatch Logs, они также были удалены вместе с инстансом. Необходимо из предложенных вариантов выбрать самый легкий путь, который позволит достоверно получить все логи из EC2 инстанса перед его удалением. На этом слайде вы видите варианты ответов, они достаточно объемные. Вы также видите, что правильным ответом на этот вопрос является четвертый вариант. Тем не менее, давайте попробуем разобрать этот вопрос. Когда приходят вопросы с большими вариантами ответов, то я вам крайне рекомендую не читать отдельно каждый вариант, а начать уже сразу сравнивать варианты ответов. Скорее всего, по мере сравнивания у вас постепенно будут отпадать некоторые варианты, которые логически не подходят, либо не являются достоверными. Давайте попробуем ответить на этот вопрос, так как если бы мы были на реальном экзамене AWS. Прочитав первое предложение всех вариантов, мы видим, что они все похожи, кроме второго варианта, который предлагает создать lifecycle hook, который для Auto Scaling group будет двигать инстансы из состояния Terminating в состояние Pending:Wait. Во всех других вариантах оно будет менять состояние из Terminating в Terminating:Wait. Здесь логически можно предположить, что Pending:Wait скорее всего является неверным вариантом ответа, так как задача авторов вопроса спрятать правильный ответ максимально глубже. Поэтому мы можем исключить второй вариант ответа. Более того, если мыслить логически, если приложение перестало работать и мы переводим ее в состояние Terminating, то переводя ее в состояние Pending:Wait, следующим статусом будет Running. И нет никакого смысла возвращать в работу приложение, если оно не работает. Поэтому правильнее все-таки из Terminating в состояние перемещать в Terminating:Wait, чтобы дать какое-то время перед ее окончательным отключением. У нас остались первый, третий и четвертый варианты ответов. Второе предложение говорит нам о том, что мы должны настроить CloudWatch Events Rule. Оно должно привязаться к событию EC2 Instance-terminate Lifecycle Action, либо EC2 Instance Terminate Successful. А в третьем варианте ответа предлагается сразу настроить Step Functions, не настраивая CloudWatch Events Rule. Третий вариант мы можем отсечь, потому что Step Functions сам по себе не поймет, что EC2 инстанс переходит в состояние Terminating:Wait и надо что-то с ним делать. Поэтому этот вариант мы убираем. Более того, Step Functions сам по себе не проделывает никаких действий, чтобы были какие-то действия, вы в рамках Step Functions будете создавать Lambda. Если вы обратите внимание, что Lambda упоминается и в первом и в четвертом варианте, но в этом случае она используется без Step Functions, то есть это намного проще. Step Functions лишь добавляет сложность к имплементации. Нам в рамках вопроса нужно было выбрать самое простое решение, поэтому третий вариант ответа мы также исключаем. Остается первый и четвертый варианты ответа. Теперь если обратить внимание на сам event, четвертый привязывается к событию EC2 Instance-terminate Lifecycle Action. Событие говорит о том, что инстанс переходит в состояние Terminate и нужно в этот момент что-то с ним делать. А в первом варианте ответа event уже другой. Он говорит о том, что EC2 инстанс успешно был отключен и после этого приходит event. Чисто логически первый вариант можно отсечь, так как после того как инстанс отключился мы уже с ним ничего сделать не сможем. Нам нужно, чтобы он оставался включенным. Поэтому не до конца прочитав варианты ответа, мы уже попытались выявить, что четвертый вариант ответа является верным. Если прочитать ее до конца, нам предлагается настроить Lambda. Она привязывается к событию EC2 Instance-terminate Lifecycle Action и target для этого rule является Lambda функция. Lambda функция в свою очередь подключается к CloudWatch Agent в EC2 инстансе. И не дождавшись очередной отправки группы логов, запускает команду для принудительной отправки тех логов, которые остались, еще не успели отправиться. После того как успешно все логи отправляются в CloudWatch Logs, можно завершать работу Lambda и можно терминейтить EC2 инстанс. Так как все логи уже собраны в CloudWatch Logs и этого достаточно, чтобы по логам определить в чем была проблема и попытаться ее решить. На слайдах вы увидите текстовый разбор данного вопроса, с которым вы также можете ознакомиться. На этом мы завершаем разбор вопроса Practice Test-а. Спасибо за внимание.