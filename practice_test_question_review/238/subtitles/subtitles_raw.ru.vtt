1
0:00:00.000 --> 0:00:03.720
Добрый день, уважаемые студенты.

2
0:00:03.720 --> 0:00:07.360
Мы начинаем с вами разбор вопроса Практист-теста.

3
0:00:07.360 --> 0:00:11.200
Согласно вопросу, компания генерирует некоторое количество

4
0:00:11.200 --> 0:00:14.600
конфиденциальных данных, которые хранит на локальном

5
0:00:14.600 --> 0:00:15.600
дата-центре.

6
0:00:15.600 --> 0:00:20.560
Как бэкап решение, компания хочет также хранить эти

7
0:00:20.560 --> 0:00:25.120
данные в Amazon S3 Bucket.

8
0:00:25.120 --> 0:00:29.720
Согласно некоторым требованиям безопасности внутри компании

9
0:00:29.720 --> 0:00:36.480
– шифрование должно происходить перед тем, как данные будут

10
0:00:36.480 --> 0:00:38.200
отправлены в S3.

11
0:00:38.200 --> 0:00:42.920
Более того, компания должна самостоятельно заниматься

12
0:00:42.920 --> 0:00:47.320
управлением и обновлением ключей шифрования.

13
0:00:47.320 --> 0:00:56.440
Также эти ключи должны быть под контрольной компании.

14
0:00:56.440 --> 0:01:03.040
Какие из предложенных методов помогают этого достичь?

15
0:01:03.040 --> 0:01:06.160
На этом сайде вы видите предложенные варианты ответов.

16
0:01:06.160 --> 0:01:09.280
Также видите, что 3 и 5 являются верными.

17
0:01:09.280 --> 0:01:11.800
Перед тем, как мы начнем разбирать вопросы, давайте

18
0:01:11.800 --> 0:01:12.800
вспомним теорию.

19
0:01:12.800 --> 0:01:19.800
� , зная теорию, легче будет ответить на любой вопрос,

20
0:01:19.800 --> 0:01:22.640
связанный с шифрованием в S3.

21
0:01:22.640 --> 0:01:27.520
Как мы знаем, есть два различных шифрования.

22
0:01:27.520 --> 0:01:31.960
Это шифрование IN-transit, когда данные из одного места

23
0:01:31.960 --> 0:01:36.640
передаются в другое, и at-rest, когда данные хранятся.

24
0:01:36.640 --> 0:01:42.640
Если мы говорим касательно S3, IN-transit подразумевается

25
0:01:42.640 --> 0:01:46.960
передача в, процесс передачи в и загрузки данных из

26
0:01:46.960 --> 0:01:47.960
S3.

27
0:01:47.960 --> 0:01:54.040
В случае, когда мы говорим at-rest, имеется и до шифрования,

28
0:01:54.040 --> 0:01:59.680
когда данные фактически находятся на S3 в дата центрах

29
0:01:59.680 --> 0:02:00.680
AWS.

30
0:02:00.680 --> 0:02:05.240
Когда мы говорим шифрование IN-transit, подразумевается

31
0:02:05.240 --> 0:02:11.440
использование SSL ключа или шифрование на стороне

32
0:02:11.440 --> 0:02:12.440
клиента.

33
0:02:12.440 --> 0:02:17.920
Самый популярный и явный пример это в браузере, когда

34
0:02:17.920 --> 0:02:22.680
вы открываете некоторый сайт, если видите, что подключение

35
0:02:22.680 --> 0:02:26.800
идет через HTTPS, то это защищенное подключение.

36
0:02:26.800 --> 0:02:30.080
Так вот, в этом случае был подключен специальный

37
0:02:30.080 --> 0:02:37.960
SSL-сертификат, который помогает передачу данных от вас до

38
0:02:37.960 --> 0:02:41.400
веб-сайта, то есть IN-transit шифровать.

39
0:02:41.400 --> 0:02:47.040
Когда мы говорим at-rest, есть, касательно сервиса S3, есть

40
0:02:47.040 --> 0:02:52.840
два принципиально отличающихся группы, это server-site encryption

41
0:02:52.840 --> 0:02:55.560
и client-site encryption.

42
0:02:55.560 --> 0:02:59.000
Когда мы говорим server-site encryption, идея в том, что мы

43
0:02:59.000 --> 0:03:04.920
передаем данные к S3, далее S3 шифрует данные у себя

44
0:03:04.920 --> 0:03:09.200
на стороне и сохраняет на жесткие диски.

45
0:03:09.200 --> 0:03:13.160
Когда мы говорим client-site encryption, подразумевается,

46
0:03:13.160 --> 0:03:18.480
что данные перед передачей в S3 уже были зашифрованы

47
0:03:18.480 --> 0:03:23.960
некоторыми ключами, и S3 уже получает зашифрованный

48
0:03:23.960 --> 0:03:28.800
файл, ему нечем, нет смысла еще раз его шифровать, а

49
0:03:28.800 --> 0:03:34.440
оно в таком же виде сохраняет этот файл на жесткие диски.

50
0:03:34.440 --> 0:03:37.880
Если говорить про обратный процесс, в случае server-site

51
0:03:37.880 --> 0:03:44.080
encryption, S3 извлекает файлы из жестких дисков, у себя

52
0:03:44.080 --> 0:03:47.720
на стороне, используя ключи шифрования, расшифровывает

53
0:03:47.720 --> 0:03:53.720
эти файлы и передает эти данные вам.

54
0:03:53.720 --> 0:03:58.080
Если же мы говорим client-site encryption, при загрузке файла

55
0:03:58.080 --> 0:04:03.240
из S3 происходит следующее, S3 извлекает данные из жестких

56
0:04:03.240 --> 0:04:08.160
дисков, и не расшифровывая ее, передает в таком же

57
0:04:08.160 --> 0:04:09.160
виде вам.

58
0:04:09.160 --> 0:04:14.160
Вы уже получаете зашифрованный файл в таком же виде, как

59
0:04:14.160 --> 0:04:18.840
вы передавали ее ранее, и используя ключи шифрования,

60
0:04:18.840 --> 0:04:21.640
этот файл расшифровываете и дальше используете.

61
0:04:21.640 --> 0:04:24.120
Сам процесс расшифровки происходит уже на вашей

62
0:04:24.120 --> 0:04:25.120
стороне.

63
0:04:25.120 --> 0:04:29.600
Таким образом мы говорим правильными ответами является

64
0:04:29.600 --> 0:04:35.840
использование client-site encryption с сервисом AWS KMS, и второй

65
0:04:35.840 --> 0:04:42.360
вариант также client-site encryption, в котором используется

66
0:04:42.360 --> 0:04:44.680
мастер ключ, хранящийся на стороне клиента, то

67
0:04:44.680 --> 0:04:46.600
есть на нашей стороне.

68
0:04:46.600 --> 0:04:51.320
Если же мы говорим про оставшиеся варианты, они неверные,

69
0:04:51.320 --> 0:04:57.320
так как имеется в виду server-site encryption в обоих неправильных

70
0:04:57.320 --> 0:05:02.080
вариантах, что противоречит самому требованию внутри

71
0:05:02.080 --> 0:05:03.080
вопроса.

72
0:05:03.080 --> 0:05:08.720
�  также есть еще вариант set-up client-site encryption with Amazon

73
0:05:08.720 --> 0:05:10.760
S3-managed encryption keys.

74
0:05:10.760 --> 0:05:13.120
Этот вариант теоретически невозможен.

75
0:05:13.120 --> 0:05:18.560
Здесь имеется в виду managed encryption key, который недоступен

76
0:05:18.560 --> 0:05:24.520
для нас как для клиента, он управляется S3, используется

77
0:05:24.520 --> 0:05:31.180
для шифрования наших данных, и мы до него добраться как-то

78
0:05:31.180 --> 0:05:34.360
менять его, обновлять его не можем.

79
0:05:34.360 --> 0:05:40.440
�  когда говорим client-site encryption with S3-managed encryption key, она

80
0:05:40.440 --> 0:05:43.680
сама по себе нелогичная, то есть мы не добравшись,

81
0:05:43.680 --> 0:05:46.760
нет возможности эти ключи извлечь, чтобы зашифровать,

82
0:05:46.760 --> 0:05:49.440
а здесь говорится client-site encryption.

83
0:05:49.440 --> 0:05:52.040
Поэтому этот вариант сам по себе является некорректным.

84
0:05:52.040 --> 0:05:57.440
Таким образом мы разобрали вопрос практист-теста.

85
0:05:57.440 --> 0:06:22.440
Спасибо за внимание.
