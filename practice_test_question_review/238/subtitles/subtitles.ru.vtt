WEBVTT

00:00:00.000 --> 00:00:07.360
Добрый день, уважаемые студенты. Мы 
начинаем с вами разбор вопроса Practice Test-а.

00:00:07.360 --> 00:00:11.136
Согласно вопросу, компания
генерирует некоторое количество

00:00:11.160 --> 00:00:15.600
конфиденциальных данных, которые
хранит на локальном дата-центре.

00:00:15.600 --> 00:00:25.120
Как бэкап решение, компания хочет также
хранить эти данные в Amazon S3 Bucket.

00:00:25.120 --> 00:00:31.890
Согласно некоторым требованиям
безопасности внутри компании, шифрование

00:00:31.914 --> 00:00:38.200
должно происходить перед тем,
как данные будут отправлены в S3.

00:00:38.200 --> 00:00:47.320
Более того, компания должна самостоятельно заниматься
управлением и обновлением ключей шифрования.

00:00:47.320 --> 00:00:56.440
Также эти ключи должны
быть под контролем компании.

00:00:56.440 --> 00:01:03.040
Какие из предложенных
методов помогают этого достичь?

00:01:03.040 --> 00:01:09.280
На этом слайде вы видите предложенные варианты
ответов. Также видите, что 3 и 5 являются верными.

00:01:09.280 --> 00:01:12.800
Перед тем, как мы начнем разбирать
вопросы, давайте вспомним теорию.

00:01:12.800 --> 00:01:22.640
Зная теорию, легче будет ответить на
любой вопрос, связанный с шифрованием в S3.

00:01:22.640 --> 00:01:27.520
Как мы знаем, есть два
различных вида шифрования.

00:01:27.520 --> 00:01:32.068
Это шифрование in-transit,
когда данные из одного места

00:01:32.092 --> 00:01:36.640
передаются в другое, и at
rest, когда данные хранятся.

00:01:36.640 --> 00:01:47.960
Касательно S3, in-transit подразумевается
процесс передачи в и загрузки данных из S3.

00:01:47.960 --> 00:01:54.308
В случае, когда мы говорим at
rest, имеется в виду шифрование,

00:01:54.332 --> 00:02:00.680
когда данные фактически
находятся на S3 в дата-центрах AWS.

00:02:00.680 --> 00:02:06.239
Когда мы говорим шифрование
in-transit, подразумевается

00:02:06.263 --> 00:02:12.440
использование SSL ключа или
шифрование на стороне клиента.

00:02:12.440 --> 00:02:19.207
Самый популярный и явный пример это в
браузере, когда вы открываете некоторый

00:02:19.231 --> 00:02:26.800
сайт, если видите, что подключение идет
через HTTPS, то это защищенное подключение.

00:02:26.800 --> 00:02:33.792
Так вот, в этом случае был подключен
специальный SSL сертификат, который

00:02:33.816 --> 00:02:41.400
помогает шифровать передачу данных
от вас до веб-сайта, то есть in-transit.

00:02:41.400 --> 00:02:48.173
Когда мы говорим at rest касательно
сервиса S3, есть два принципиально

00:02:48.197 --> 00:02:55.560
отличающихся группы, это Server-Side
Encryption и Client-Side Encryption.

00:02:55.560 --> 00:03:02.368
Когда мы говорим Server-Side Encryption,
идея в том, что мы передаем данные

00:03:02.392 --> 00:03:09.200
к S3, далее S3 шифрует данные у себя
на стороне и сохраняет на жесткие диски.

00:03:09.200 --> 00:03:15.636
Когда мы говорим Client-Side
Encryption, подразумевается, что данные

00:03:15.660 --> 00:03:21.808
перед передачей в S3 уже были
зашифрованы некоторыми ключами, и

00:03:21.832 --> 00:03:27.646
S3 уже получает зашифрованный
файл, ему нет смысла еще раз его

00:03:27.670 --> 00:03:34.440
шифровать, а оно в таком же виде
сохраняет этот файл на жесткие диски.

00:03:34.440 --> 00:03:43.551
Про обратный процесс, в случае Server-Side
Encryption, S3 извлекает файлы из жестких дисков,

00:03:43.575 --> 00:03:53.720
у себя на стороне, используя ключи шифрования,
расшифровывает эти файлы и передает данные вам.

00:03:53.720 --> 00:04:01.428
Если же мы говорим Client-Side Encryption,
при загрузке файла из S3 происходит следующее:

00:04:01.452 --> 00:04:09.160
S3 извлекает данные из жестких дисков, и не
расшифровывая ее, передает в таком же виде вам.

00:04:09.160 --> 00:04:15.388
Вы уже получаете зашифрованный файл в
таком же виде, как вы передавали ее ранее,

00:04:15.412 --> 00:04:21.640
и используя ключи шифрования, этот файл
расшифровываете и дальше используете.

00:04:21.640 --> 00:04:25.120
Сам процесс расшифровки
происходит уже на вашей стороне.

00:04:25.120 --> 00:04:30.835
Таким образом мы говорим правильными
ответами является использование

00:04:30.859 --> 00:04:35.976
Client-Side Encryption с сервисом
AWS KMS, и второй вариант

00:04:36.000 --> 00:04:41.069
также Client-Side Encryption, в
котором используется мастер

00:04:41.093 --> 00:04:46.600
ключ, хранящийся на стороне
клиента, то есть на нашей стороне.

00:04:46.600 --> 00:04:54.487
Если же мы говорим про оставшиеся
варианты, они неверные, так как есть Server-Side

00:04:54.511 --> 00:05:03.080
Encryption в обоих неправильных вариантах,
что противоречит самому требованию вопроса.

00:05:03.080 --> 00:05:10.760
И также есть еще вариант Set-up Client-Side
encryption with Amazon S3 managed encryption keys.

00:05:10.760 --> 00:05:16.878
Этот вариант теоретически невозможен.
Здесь имеется в виду managed

00:05:16.902 --> 00:05:22.548
encryption key, который
недоступен для нас как для клиента,

00:05:22.572 --> 00:05:28.454
он управляется S3, используется
для шифрования наших данных, и

00:05:28.478 --> 00:05:34.360
мы до него добраться, как-то
менять его, обновлять его не можем.

00:05:34.360 --> 00:05:38.112
И когда говорим Client-Side
encryption with S3 managed

00:05:38.136 --> 00:05:41.888
encryption key, она сама по
себе нелогичная, то есть мы

00:05:41.912 --> 00:05:45.664
не добравшись, нет возможности
эти ключи извлечь, чтобы

00:05:45.688 --> 00:05:49.440
зашифровать, а здесь
говорится Client-Side encryption.

00:05:49.440 --> 00:05:52.040
Поэтому этот вариант сам по
себе является некорректным.

00:05:52.040 --> 00:05:58.440
Таким образом мы разобрали вопрос 
Practice Test-а. Спасибо за внимание.