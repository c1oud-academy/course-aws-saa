Қайырлы күн, құрметті студенттер! Біз Practice Test сұрағын талдауды бастаймыз. Бізге не берілген? Компания жиі сұралатын деректерді сақтау үшін Amazon S3 сервисін пайдаланады. Қазір не бапталынған? Бұл - Event notification. S3 bucket-те объект жасалған немесе жойылған сәтте ол бұл оқиғаны SQS кезегіне хабар ретінде жібереді. Solutions Architect ретінде сізден келесі логиканы жасау сұралады. S3 bucket-індегі объектілер жасалған немесе жойылған кезде екі топтың да, әзірлеуші және әкімші де тәуелсіз хабардар етілуі қажет. Бір дұрыс жауап нұсқасын таңдауыңыз керек. Қандай жауап нұсқалары ұсынылғанын көрейік. Бірінші жауаптың дұрыс екенін көресіз. Дегенмен, басқа нұсқаларды да егжей-тегжейлі қарастырайық. Бірінші және үшінші жауап нұсқалары өте ұқсас екенін ескеріңіз. Екі нұсқада да SNS topic орнатуды ұсынады. Әрі қарай қосымша екі SQS баптау керек. Бірінші нұсқада біздің SQS кезектері SNS topic-ке жазылады. Үшінші нұсқада SQS кезектері SNS topic-тен деректерді сұрайды. Мен үшінші нұсқаның дұрыс емес екенін алдын ала айтамын, өйткені SQS хабарламаларды сақтайды, сонымен бірге сұрау (polling) режиміндегі қолданбалар SQS-тен жаңа хабарламаларды сұрайды. Ал SNS қарама-қарсы жағдай, pull-based емес, push-based логикаға негізделген. Яғни, SNS хабарламасы келген сәтте ол бұл хабарламаны барлық жазылушыларға бір уақытта жібереді. Яғни, бұл хабарламаны"push" жібереді. Егер екінші және төртінші нұсқалар туралы айтатын болсақ, онда қосымша ресурс қосу ұсынылады. Екінші нұсқада - бұл SQS кезегі, ал төртінші нұсқада тіпті SQS емес, SNS FIFO topic қосу ұсынылады. Ең алдымен, Event notification деген не екенін еске түсірейік. Бұл - S3 ішіндегі bucket-пен немесе объектілермен байланысты кейбір оқиғаларды сипаттауға және осы оқиғаны бір target-ке жіберуге көмектесетін S3 ішіндегі кейбір функционал. Target ретінде SNS, SQS немесе AWS Lambda болуы мүмкін. Конфигурациялар дегенде, біз екі бірдей конфигурация жасай алмаймыз. Оқиға ретінде S3 bucket ішіндегі объектілерді қосуды сипаттайтынымызды елестетіп көрейік. Бұл жағдайда біз конфигурация жасаймыз және target ретінде Lambda функциясын көрсетеміз. Осы функцияның аясында target ретінде басқа нәрсені көрсетіп, бірдей оқиғаны жасай алмайсыз. Яғни, бір конфигурация, бір оқиға үшін тек бір Event notification жасалуы мүмкін. Сонымен қатар, бір Event notification аясында бірден көп target көрсете алмайсыз. Бұл - осы функционалдың шектеулігі. Сондықтан, егер сізде бір оқиғаның бірнеше алушылары болса, келесі архитектураны баптау ұсынылады. Сізде S3 bucket бар, бір оқиғаға бір ғана target болатындықтан, хабарды SNS topic-ке жібереміз. Әрі қарай, жазылушылар SNS topic-ке тіркеледі. Біздің жағдайда, бұл - бір-бірінен тәуелсіз екі SQS. Екі SQS те SNS topic-тің жазылушылары болғандықтан, хабарлама SNS topic-ке жеткенде, ол бір уақытта бұл хабарламаны барлық жазылушыларға жібереді. Содан кейін әрбір SQS-те бірдей хабар болады және бөлек өңделеді. Біздің жағдайда бір команда бір SQS-ке, екінші команда екінші SQS-ке тіркеледі және әрқайсысы өз кезегімен дербес жұмыс істейді. Осылайша, дұрыс жауап бірінші жауап нұсқасы болып табылады, мұнда бізге SNS topic жасау ұсынылады, содан кейін екі бөлек SQS баптап, SNS topic-ке жазылу ұсынылады. S3 жағында S3 SNS topic-ке хабарлама жібере алатындай кіру құқықтарын баптау қажет. Енді дұрыс емес жауап нұсқаларын толығырақ қарастырайық. Екінші команда үшін қосымша ресурсты немесе SQS кезегін немесе екінші команда үшін SNS FIFO topic қосуды ұсынған жауап нұсқалары дұрыс емес. Неліктен? Өйткені Event notification аясында біз белгілі бір оқиғаға байланыса аламыз, яғни S3 bucket-ке жаңа объект қосу немесе қосу және жою. Әрі қарай, бір Target көрсетеміз. Бір оқиға үшін бірнеше Event notification жасай алмаймыз. Осы функционалдың шектеулері осы. Сондықтан, S3 bucket-індегі объектілерді жасау және жою үшін Event notification қосымша SQS немесе SNS байланыстыра алмаймыз. Бұл мүмкін емес. Тиісінше, бұл екі нұсқа да дұрыс емес. Соңғы дұрыс емес жауап туралы айтатын болсақ, ол дұрыс жауапқа өте ұқсас болды, жалғыз айырмашылығы SQS кезектері SNS topic-ке «polling» (хабарламаларды сұрау) жасау керек болды. «Polling» - мезгіл-мезгіл жаңа хабарламалардың бар-жоғын сұрау. Егер бар болса, оны жинайды. Жауаптың бұл нұсқасы әдейі шатастыру үшін берілген. Иә, polling SQS-ке қатысты, бірақ ол SQS көзіне емес, SQS-тен хабарламаларды қабылдаушыға қатысты. SQS өзі хабарламалар кезегі болып табылады. Хабарлама кезегіне сіз синхронды, асинхронды түрде, қандай режимде болсын, хабарламаларды жинайсыз, оған хабарлама жібересіз. Әрі қарай, бұл хабарламаларды алушылар өздеріне ыңғайлы кезде polling жүргізе бастайды, яғни мезгіл-мезгіл немесе алушыға осы хабарламаны алу ыңғайлы болған кезде олар SQS-тен хабарламаны сұрайды және оны өңдейді. SNS жағдайында керісінше. SQS - pull-based logic, SNS - push-based logic. Яғни, хабарламаның SNS жүйесінде қалай қабылданатыны тағы да айтылмайды, бұл жерде қабылдаушылардың SNS хабарламаларымен қалай жұмыс істейтіні айтылады. Бұл push-based logic болғандықтан, SNS topic бар, оған subscribers жазылады, яғни жазылушылар, біздің жағдайда бұл екі бөлек SQS. Және SNS хабарламасы келген сәтте SNS topic бұл хабарламаны барлық жазылушыларға дереу жібереді және оны барлық алушыларға қайталайды. Сондықтан SNS хабарламаны push таратады, бірақ бұл жауап нұсқасы бізге хабарламаны SNS topic-тен шығару pull керек екенін айтады, бұл дұрыс емес. Сондықтан бұл да қате жауап нұсқасы болып саналады. Осымен біз сұрақты талдап болдық. Назар аударғаныңызға рахмет.