WEBVTT

00:00:00.000 --> 00:00:06.760
Добрый день, уважаемые студенты. Мы с вами 
начинаем разбор вопроса Practice Test-а.

00:00:06.760 --> 00:00:12.778
Согласно вопросу, есть стартап компания,
она хостит свое веб-приложение на EC2

00:00:12.802 --> 00:00:19.760
инстансе и в ближайшие месяцы ожидается
увеличение количества пользователей приложения.

00:00:19.760 --> 00:00:25.168
И нам как Solutions Architect
необходимо изменить архитектуру в AWS

00:00:25.192 --> 00:00:30.600
таким образом, чтобы она была
достаточно гибкой и масштабируемой.

00:00:30.600 --> 00:00:34.680
Из предложенных вариантов надо выбрать
два варианта, которые нам в этом помогут.

00:00:34.680 --> 00:00:39.588
На этом слайде вы видите
предложенные варианты ответов,

00:00:39.612 --> 00:00:44.520
также видите, что 3 и 4
является верными вариантами.

00:00:44.520 --> 00:00:48.488
Тем не менее, давайте
остановимся на каждом из вариантов

00:00:48.512 --> 00:00:52.480
и попробуем понять, почему
он является верным или нет.

00:00:52.480 --> 00:00:56.960
Если мы говорим про первый вариант,
предлагается использовать сервис AWS Glue.

00:00:56.960 --> 00:01:01.760
Этот сервис, Managed Service, дает нам
возможность легко настроить ETL процессы.

00:01:01.760 --> 00:01:06.076
ETL - это Extract, Transform и
Load, работа с данными и никак не

00:01:06.100 --> 00:01:10.760
относится к Elasticity и Scalability.
Поэтому этот вариант убираем.

00:01:10.760 --> 00:01:14.840
Если говорим про второй вариант,
предлагается использовать AWS WAF.

00:01:14.840 --> 00:01:19.600
WAF - это Web Application Firewall,
больше относится к теме безопасности.

00:01:19.600 --> 00:01:26.203
Это набор некоторых правил, которые
помогают ограничить некорректные вызовы к

00:01:26.227 --> 00:01:33.440
вашему веб-приложению. Поэтому этот
вариант также отсекаем, он не является верным.

00:01:33.440 --> 00:01:39.817
Если мы говорим про третий вариант, то здесь
предлагается использовать Weighted Routing

00:01:39.841 --> 00:01:45.920
Policy в сервисе Route 53, чтобы распределять
трафик между двумя EC2 инстансами.

00:01:45.920 --> 00:01:51.645
Да, этот вариант может быть
верным, так как дает нам возможность

00:01:51.669 --> 00:01:58.760
распределять трафик между инстансами
в зависимости от той или иной ситуации.

00:01:58.760 --> 00:02:07.469
Если мы говорим про четвертый
вариант, здесь предлагается перед

00:02:07.493 --> 00:02:15.920
двумя EC2 инстансами настроить
ELB, Elastic Load Balancer.

00:02:15.920 --> 00:02:21.488
Этот вариант определенно является
правильным, так как Elastic Load Balancer это как

00:02:21.512 --> 00:02:27.080
раз таки про Elasticity, тот сервис, который
помогает распределять трафик на таргеты.

00:02:27.080 --> 00:02:30.640
В нашем случае таргетами
являются два EC2 инстанса.

00:02:30.640 --> 00:02:36.622
Если мы говорим про пятый
вариант, предлагается настроить

00:02:36.646 --> 00:02:42.200
S3 Cache и использовать
совместно с EC2 инстансом.

00:02:42.200 --> 00:02:47.640
На самом деле нет такого
сервиса и функционала S3 Cache.

00:02:47.640 --> 00:02:56.528
Здесь подразумевается использование S3 как cache
 для вашего веб-приложения и для кэширования

00:02:56.552 --> 00:03:05.440
у нас есть другие сервисы, которые больше
подходят для этого случая, для целей кэширования.

00:03:05.440 --> 00:03:11.920
S3 является сервисом
для объектного хранилища.

00:03:11.920 --> 00:03:25.680
Таким образом пятый вариант мы также убираем
и у нас остаются третий и четвертый варианты.

00:03:25.680 --> 00:03:32.000
На этом мы разобрали разбор вопроса 
Practice Test-а. Спасибо за внимание.