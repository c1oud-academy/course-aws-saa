WEBVTT

00:00:00.000 --> 00:00:08.000
Добрый день, уважаемые студенты! Рад вас видеть на
очередной сессии «Введение в лабораторную работу».

00:00:08.000 --> 00:00:12.488
Тема лабораторной работы – это
создание статического веб-сайта

00:00:12.512 --> 00:00:17.000
для нашего бизнес-кейса, а именно кафе.
Итак, давайте начнем.

00:00:17.000 --> 00:00:29.000
Начинаем мы с вами лабораторную работу с основной
страницы курса Cloud Architecting в AWS Academy.

00:00:29.000 --> 00:00:36.000
Здесь нам необходимо воспользоваться навигационным
меню слева и перейти во вкладку Modules.

00:00:36.000 --> 00:00:40.062
Как только мы это сделаем,
необходимо спозиционироваться

00:00:40.086 --> 00:00:44.000
на третьем модуле, а
именно Adding a Storage Layer.

00:00:44.000 --> 00:00:48.488
Если вы раскроете список
активностей, то в самом конце вы увидите

00:00:48.512 --> 00:00:53.000
модуль 3 «Challenge Lab –
Creating a static website for the cafe».

00:00:53.000 --> 00:00:58.000
Давайте на него нажмем, чтобы перейти
на основную страницу лабораторной работы.

00:00:58.000 --> 00:01:04.139
Здесь рекомендуется отключить
окно Terminal, необходимо убрать

00:01:04.163 --> 00:01:10.000
галочку, и окно README будет
отображено на всю страницу.

00:01:15.000 --> 00:01:23.000
Согласно сценарию, у нас есть основные герои –
это Франк и Марта. Они муж с женой, пенсионеры.

00:01:23.000 --> 00:01:29.224
У них была давняя мечта создать
небольшой бизнес – кафе с пекарней,

00:01:29.248 --> 00:01:35.000
на котором они сами работают,
сами пекут хлебную продукцию.

00:01:35.000 --> 00:01:40.151
Также им в этом помогает дочка
София, которая учится в университете, и

00:01:40.175 --> 00:01:46.000
работник Нихил, который работает на
полставки и также учится в университете.

00:01:46.000 --> 00:01:56.620
На текущий момент определенной
маркетинговой стратегии у главных героев нет,

00:01:56.644 --> 00:02:08.000
поэтому про это заведение знают только знакомые,
друзья, родственники, а также жители этого района.

00:02:08.000 --> 00:02:19.000
Поэтому София предлагает родителям - Франку и Марте
потратить некоторое время на разработку веб-сайта.

00:02:19.000 --> 00:02:26.523
В веб-сайте они могли бы расположить
меню, график работы, адрес заведения и другую

00:02:26.547 --> 00:02:35.000
полезную информацию для того, чтобы новые
посетители могли находить их любимое заведение.

00:02:35.000 --> 00:02:50.000
В этой лабораторной работе мы поможем Софии создать
веб-сайт так, чтобы оно хостилось на облаке AWS.

00:02:50.000 --> 00:02:58.040
В рамках лабораторной работы мы будем
выполнять четыре задания. Первое задание

00:02:58.064 --> 00:03:06.000
- это настроить хостинг нашего
статического веб-сайта в сервисе Amazon S3.

00:03:06.000 --> 00:03:12.526
Второе - необходимо обеспечить безопасность
наших данных. Третье - необходимо настроить

00:03:12.550 --> 00:03:19.000
Data Lifecycle Strategy для того, чтобы
хранить наши данные оптимально в S3 бакете.

00:03:19.000 --> 00:03:28.051
И самое последнее - необходимо
настроить Disaster Recovery Strategy (DR),

00:03:28.075 --> 00:03:37.000
что означает наша архитектура готова
к проблемам в целом регионе AWS.

00:03:37.000 --> 00:03:42.000
В случае возникновения подобных
ситуаций мы не потеряем наши данные.

00:03:42.000 --> 00:03:47.245
Вы видите на слайде архитектуру,
которая будет по завершению нашей

00:03:47.269 --> 00:03:53.000
лабораторной работы. Всего 
задействовано один сервис - это Amazon S3.

00:03:53.000 --> 00:03:59.000
Задействовано два региона. Первый регион - это
основной, на котором будет хоститься наш веб-сайт.

00:03:59.000 --> 00:04:05.606
На бакет во втором регионе
будет реплицироваться весь

00:04:05.630 --> 00:04:13.000
контент, который будет
добавляться на основной S3 бакет.

00:04:13.000 --> 00:04:21.658
Также напоминаю, что это Challenge Lab и это
означает, что деталей по выполнению простейших

00:04:21.682 --> 00:04:30.000
действий не будет предоставлено, дается общее
описание задач, которые необходимо выполнить.

00:04:30.000 --> 00:04:34.988
Далее используя знания, полученные
на лекционных занятиях, а также

00:04:35.012 --> 00:04:40.000
на предыдущей лабораторной работе,
мы должны выполнить это задание.

00:04:40.000 --> 00:04:45.000
Всего рекомендуется завершить эту
лабораторную работу в течении 60 минут.

00:04:45.000 --> 00:04:52.552
Я вам напоминаю, что если вам нужно
больше времени, вы не завершая лабораторную

00:04:52.576 --> 00:05:01.000
работу, можете нажать на кнопку Start Lab
и счетчик вернется в изначальное состояние.

00:05:01.000 --> 00:05:07.625
Обнуление счетчика не влияет на
вашу оценку, поэтому периодически

00:05:07.649 --> 00:05:15.000
поглядывайте на оставшееся время
и при необходимости ее увеличивайте.

00:05:15.000 --> 00:05:20.190
В рамках выполнения этой лабораторной
работы мы будем использовать

00:05:20.214 --> 00:05:25.405
специально временно созданный AWS Account.
На нем будут определенные

00:05:25.429 --> 00:05:31.440
ограничения на сервисы AWS, но на
сервисы, на тот функционал, задействованный

00:05:31.464 --> 00:05:37.000
в лабораторной работе, у нас
гарантированно будет необходимый доступ.

00:05:37.000 --> 00:05:42.488
Для выполнения лабораторной работы нам
необходимо добраться до AWS Management

00:05:42.512 --> 00:05:48.000
Console. Для того чтобы это сделать,
нам необходимо нажать на кнопку Start Lab.

00:05:48.000 --> 00:05:56.217
Как только нажмете, начнется процесс создания
временного AWS Account, выйдет сообщение.

00:05:56.241 --> 00:06:04.000
Как только в всплывающем окне увидите текст
Lab Status: Ready, вы можете закрывать это окно.

00:06:04.000 --> 00:06:13.000
Далее необходимо нажать на кнопку AWS,
чтобы перейти на временно созданный AWS Account.

00:06:13.000 --> 00:06:17.988
Мы начинаем самое первое задание.
Первым делом нам необходимо перейти

00:06:18.012 --> 00:06:23.000
по ссылке в тексте задания
лабораторной работы и скачать .zip архив.

00:06:23.000 --> 00:06:31.488
В этом архиве содержится все необходимое
содержание нашего статического веб-сайта, а именно

00:06:31.512 --> 00:06:40.000
есть файл index.html. Есть две папки, первая
- это CSS стили, а также папка с картинками.

00:06:40.000 --> 00:06:45.727
Как только мы ее скачали,
разархивировали и подготовили к загрузке,

00:06:45.751 --> 00:06:52.000
нам необходимо вернуться в AWS
Management Console и создать S3 Bucket.

00:06:52.000 --> 00:06:58.488
Этот S3 Bucket должен хранить данные
в регионе North Virginia. Как подсказка

00:06:58.512 --> 00:07:05.000
нам говорится о том, что необходимо
отключить Block All Public Access опцию,

00:07:05.000 --> 00:07:18.000
также активировать static website hosting и
index.html использовать как основной документ.

00:07:18.000 --> 00:07:24.026
Как только мы создали S3 Bucket необходимо
загрузить все наши файлы в S3 Bucket.

00:07:24.050 --> 00:07:30.000
Мы это неоднократно проделывали,
поэтому здесь проблем возникнуть не должно.

00:07:30.000 --> 00:07:38.000
Как только все это проделали, давайте попробуем 
открыть наш веб-сайт и что же вы увидите.

00:07:38.000 --> 00:07:45.488
Во время выполнения Challenge Lab нам необходимо 
ответить на некоторые тестовые вопросы. Для того,

00:07:45.512 --> 00:07:53.000
чтобы до них добраться необходимо нажать на кнопку
Details и в выпадающем меню нажать на кнопку Show.

00:07:53.000 --> 00:08:00.139
После чего выбрать Access the multiple
choice questions, нажатием которой откроется

00:08:00.163 --> 00:08:08.000
отдельная вкладка в браузере и вы увидите
все вопросы в рамках этой лабораторной работы.

00:08:08.000 --> 00:08:16.488
Сейчас нам необходимо ответить на первый
вопрос, который звучит следующим образом.

00:08:16.512 --> 00:08:25.000
Как только вы завершили задачу 3, смогли
ли вы увидеть ваш веб-сайт в браузере?

00:08:25.000 --> 00:08:32.888
Необходимо отметить, отправить запрос
на сохранение вашего ответа. Рекомендуется

00:08:32.912 --> 00:08:40.000
не закрывать эту страницу с
вопросами, так как мы к ней еще вернемся.

00:08:40.000 --> 00:08:48.851
Дальше мы переходим к четвертому 
заданию. Здесь нам необходимо

00:08:48.875 --> 00:08:57.000
выдать публичный доступ к
содержанию нашего S3 Bucket.

00:08:57.000 --> 00:09:02.999
Франк попросил Софию обновить
некоторые детали в веб-сайте,

00:09:03.023 --> 00:09:09.747
после чего София поняла, что эти
действия необходимо производить

00:09:09.771 --> 00:09:15.501
постоянно. Более того необходимо 
вручную после загрузки

00:09:15.525 --> 00:09:22.000
обновлять Access Control Lists
для каждого из этих объектов.

00:09:22.000 --> 00:09:30.032
Ей не хотелось проделывать эти действия постоянно,
 поэтому она решила создать Bucket Policy,

00:09:30.056 --> 00:09:38.000
которая открывает публичный доступ ко всем
объектам, которые попадают на этот S3 Bucket.

00:09:38.000 --> 00:09:45.588
Таким образом, нам необходимо добавить
Bucket Policy в наш S3 Bucket, который

00:09:45.612 --> 00:09:53.000
предоставляет публичный доступ к
чтению ко всем пользователям интернета.

00:09:53.000 --> 00:09:58.488
Если возникли проблемы в этом месте
с написанием этого Policy, вы можете

00:09:58.512 --> 00:10:04.000
перейти на AWS Documentation и
посмотреть, как же правильно ее написать.

00:10:04.000 --> 00:10:12.000
После того, как написали и сохранили, необходимо
проверить, что ваш веб-сайт публично доступен.

00:10:12.000 --> 00:10:24.000
Если вы видите основную страницу вашего веб-сайта,
мои поздравления, вы все действия сделали правильно.

00:10:24.000 --> 00:10:30.000
На этом мы завершаем первую часть и переходим
ко второй части нашей лабораторной работы.

00:10:30.000 --> 00:10:36.000
Во второй части нам необходимо
защитить наши данные в веб-сайте.

00:10:36.000 --> 00:10:46.000
Как только София успешно создала вместе
с нами веб-сайт, возник следующий момент.

00:10:46.000 --> 00:10:55.988
Оливия, которая является AWS Solutions
Architect и постоянно посещает кафе, посоветовала

00:10:56.012 --> 00:11:06.000
имплементировать некоторые дополнительные
опции для того, чтобы обезопасить веб-сайт.

00:11:06.000 --> 00:11:13.641
Для того, чтобы обезопасить наш веб-сайт
от случайного удаления ее элементов

00:11:13.665 --> 00:11:21.000
либо перезаписи, нам рекомендуется
использовать функционал versioning.

00:11:21.000 --> 00:11:25.488
Первым делом нам необходимо его 
активировать. Далее, как только мы его

00:11:25.512 --> 00:11:30.000
активируем, нам необходимо
протестировать, действительно ли он работает.

00:11:30.000 --> 00:11:36.988
Для того, чтобы это проверить, нам
необходимо локально открыть любой текстовый

00:11:37.012 --> 00:11:44.000
редактор и там открыть index.html файл.
Мы будем вносить некоторые изменения.

00:11:44.000 --> 00:11:49.316
Первое изменение - необходимо
найти вхождение bgcolor="aquamarine"

00:11:49.340 --> 00:11:54.000
и заменить его следующим
значением bgcolor="gainsboro".

00:11:54.000 --> 00:12:02.000
Далее, найти вхождение bgcolor="orange"
и заменить его на bgcolor="cornsilk".

00:12:02.000 --> 00:12:06.583
Третье изменение - необходимо
найти второе вхождение

00:12:06.607 --> 00:12:12.000
bgcolor="aquamarine" и
заменить ее на bgcolor="gainsboro".

00:12:12.000 --> 00:12:18.000
Сохранить изменения, загрузить на S3
bucket и обновить страницу нашего веб-сайта.

00:12:18.000 --> 00:12:21.000
Вы увидите, что у нас
произошли некоторые изменения.

00:12:21.000 --> 00:12:26.488
Теперь необходимо проверить, что
у нас несколько версий для index.html

00:12:26.512 --> 00:12:32.000
и при необходимости мы можем с
легкостью вернуться на предыдущую версию.

00:12:32.000 --> 00:12:35.427
Если это действительно
так, то отлично, мы успешно

00:12:35.451 --> 00:12:40.000
активировали versioning для S3
bucket и можем двигаться дальше.

00:12:40.000 --> 00:12:48.000
Следующим шагом нам необходимо открыть
страницу с вопросами и ответить на вопрос номер 2.

00:12:48.000 --> 00:12:57.406
Текст вопроса звучит следующим образом. Выберите
 еще один возможный вариант предоставления

00:12:57.430 --> 00:13:08.000
дополнительной безопасности и исключения возможности
случайного удаления объекта в вашем S3 bucket.

00:13:08.000 --> 00:13:18.000
Если вы затрудняетесь ответить, то рекомендуется
перейти по ссылке и ознакомиться с документацией.

00:13:18.000 --> 00:13:23.360
Двигаемся дальше.
Есть небольшая секция с best practice,

00:13:23.384 --> 00:13:28.646
в которой говорится о наличии
достаточного количества

00:13:28.670 --> 00:13:34.072
функционала, в том числе
для сервиса Amazon S3, которая

00:13:34.096 --> 00:13:40.000
позволяет нам защитить наши
данные и сохранить наш бизнес.

00:13:40.000 --> 00:13:48.781
У нас есть вариант включить versioning.
Он нам помогает с легкостью восстанавливать

00:13:48.805 --> 00:13:57.000
предыдущие версии объектов в S3 bucket,
также защищает нас от случайного удаления.

00:13:57.000 --> 00:14:03.997
Далее, есть опция шифрования,
которая позволяет нам

00:14:04.021 --> 00:14:12.000
защищаться от неавторизованного
доступа к нашим данным.

00:14:12.000 --> 00:14:19.261
Мы двигаемся к третьей части
нашей лабораторной работы.

00:14:19.285 --> 00:14:28.000
Здесь необходимо предпринять меры для
снижения расходов на сервис Amazon S3.

00:14:28.000 --> 00:14:33.622
Рекомендуется использовать lifecycle
policy для того, чтобы редко используемые

00:14:33.646 --> 00:14:40.000
объекты переносить на другой класс хранения
и через какое-то время полностью удалять.

00:14:40.000 --> 00:14:50.000
Если говорить подробнее, то нужно создать в
S3 bucket lifecycle configuration секции два рула.

00:14:50.000 --> 00:14:56.488
Первый рул будет переносить
все предыдущие версии объектов

00:14:56.512 --> 00:15:03.000
в класс хранения Standard
Infrequent Access после 30 дней.

00:15:03.000 --> 00:15:13.000
Далее необходимо создать второй рул, который будет
предыдущие версии объектов удалять после 365 дней.

00:15:13.000 --> 00:15:17.715
Я надеюсь, у вас получилось
создать необходимые рулы.

00:15:17.739 --> 00:15:23.000
Если не получилось, вы можете
обратиться к документации.

00:15:23.000 --> 00:15:27.988
Также нам говорится о том,
что согласно Well-Architected

00:15:28.012 --> 00:15:33.000
Framework нам необходимо
настраивать lifecycle strategy.

00:15:33.000 --> 00:15:41.662
Это очень важно, так как мы должны управлять
жизненным циклом наших данных, в нужный момент их

00:15:41.686 --> 00:15:51.000
сохранять, далее в нужный момент их переносить
в другие классы хранения и в результате их удалять.

00:15:51.000 --> 00:15:57.672
Мы с вами добрались до последней
четвертой части нашей лабораторной работы.

00:15:57.696 --> 00:16:05.000
Здесь мы будем увеличивать надежность
нашего сайта и в целом нашей архитектуры.

00:16:05.000 --> 00:16:10.195
Идея в том, что нам необходимо
создать дополнительный S3 bucket в другом

00:16:10.219 --> 00:16:16.000
регионе и настроить в S3 bucket на
основном регионе Cross-region replication.

00:16:16.000 --> 00:16:23.111
Когда вы ее будете создавать необходимо
также убедиться, что мы реплицируем весь bucket.

00:16:23.135 --> 00:16:30.000
Также нам необходимо как IAM role для
выполнения этой репликации указать CafeRole.

00:16:30.000 --> 00:16:40.000
Она уже предварительно была для нас создана. Здесь
также приводится policy привязанной к этой роли.

00:16:40.000 --> 00:16:46.815
Мы видим, что она предоставляет
ряд Action, в том числе ReplicateObject,

00:16:46.839 --> 00:16:55.000
ReplicateDelete, ReplicateTags.
Как Resource указана звездочка и как Effect: allow.

00:16:55.000 --> 00:17:05.850
Обратите внимание, что при работе с production
средой, в policy вместо звездочки необходимо

00:17:05.874 --> 00:17:16.000
указывать конкретные названия buckets,
чтобы оно было по принципу least privilege.

00:17:16.000 --> 00:17:21.112
Как только вы настроили
Cross-region replication нам необходимо

00:17:21.136 --> 00:17:26.000
открыть страницу с вопросами
и ответить на третий вопрос.

00:17:26.000 --> 00:17:32.173
Текст третьего вопроса звучит 
следующим образом. Видим ли мы

00:17:32.197 --> 00:17:39.000
объекты из основного бакета в
бакете куда происходит репликация?

00:17:39.000 --> 00:17:47.241
Отлично, после того как мы ответили переходим к
следующему шагу. Нам необходимо открыть index.html,

00:17:47.265 --> 00:17:55.000
внести некоторые минимальные изменения и
загрузить эту новую версию на основной S3 bucket.

00:17:55.000 --> 00:18:05.040
Далее необходимо убедиться, что в основном S3
bucket для index.html сейчас у нас три версии, после

00:18:05.064 --> 00:18:15.000
чего перепроверить, что на бакете в которую
происходит репликация появилась версия index.html.

00:18:15.000 --> 00:18:23.000
При необходимости вы можете обновить страницу 
и убедиться, что этот файл находится там.

00:18:23.000 --> 00:18:30.045
Теперь нам нужно на основном S3
bucket удалить последнюю версию

00:18:30.069 --> 00:18:37.000
index.html и после чего ответить
на четвертый вопрос теста.

00:18:37.000 --> 00:18:47.063
Вопрос звучит следующим образом. Как только 
мы удалили последнюю версию index.html в

00:18:47.087 --> 00:18:58.000
основном S3 bucket, что произошло на втором
S3 bucket, на который происходит репликация?

00:18:58.000 --> 00:19:03.000
Она удалилась там
или осталась такой же?

00:19:03.000 --> 00:19:08.937
Вам необходимо ответить на
вопрос, сохранить его и я бы хотел

00:19:08.961 --> 00:19:15.988
разобрать следующую секцию, в
которой рассматривается best practice.

00:19:16.012 --> 00:19:22.494
А именно то, что при построении
архитектуры в облаке нам необходимо

00:19:22.518 --> 00:19:29.000
учитывать различные действия для
сохранения наших данных, нагрузок.

00:19:29.000 --> 00:19:39.992
При возникновении проблем с целым регионом
желательно построить избыточную архитектуру так,

00:19:40.016 --> 00:19:46.496
чтобы нагрузки перенаправлялись на 
другой регион. Тем самым вы не теряли бы

00:19:46.520 --> 00:19:53.000
своих пользователей и ваше
приложение продолжало бы работать.

00:19:53.000 --> 00:19:58.065
С DR все не так просто, это
достаточно дорогостоящее решение.

00:19:58.089 --> 00:20:03.710
Вам необходимо в зависимости от вашего
бизнес-кейса, в зависимости от того

00:20:03.734 --> 00:20:08.909
готовы ли вы выделять дополнительные
средства на поддержание этой

00:20:08.933 --> 00:20:15.000
возможности и если ответ утвердителен,
то да, необходимо ее разрабатывать.

00:20:15.000 --> 00:20:19.493
На стороне облака AWS
предоставляется широкий набор

00:20:19.517 --> 00:20:25.000
сервисов и функционала, которые
позволяют вам настроить DR.

00:20:25.000 --> 00:20:33.000
На этом мы выполнили все
задания лабораторной работы.

00:20:33.000 --> 00:20:38.988
Теперь нам необходимо запустить скрипт для
автооценивания. Для этого необходимо нажать на

00:20:39.012 --> 00:20:45.000
кнопку Submit. Далее дать некоторое время
отработать скрипту, может занять до 10 секунд.

00:20:45.000 --> 00:20:49.988
После того как скрипт отработает,
отобразится окно с вашими

00:20:50.012 --> 00:20:55.000
набранными баллами и баллами
отдельно за каждое задание.

00:20:55.000 --> 00:21:00.688
Если вы получили не максимальный балл
и хотите ее улучшить, то вам необходимо

00:21:00.712 --> 00:21:07.000
пересмотреть задание и сделать соответствующие
изменения в временном AWS аккаунте.

00:21:07.000 --> 00:21:12.597
После того как вы внесете необходимые
изменения, вам необходимо еще раз нажать

00:21:12.621 --> 00:21:18.000
на кнопку Submit для того чтобы
автооценивание запустило скрипт еще раз.

00:21:18.000 --> 00:21:25.000
Я надеюсь вы таким образом
набрали максимальные баллы.

00:21:25.000 --> 00:21:32.131
Необходимо со всех систем выйти корректно.
В первую очередь это относится к AWS аккаунту.

00:21:32.155 --> 00:21:35.516
Необходимо в верхней
правой части нажать на имя

00:21:35.540 --> 00:21:40.000
пользователя и в выпадающем
списке нажать на кнопку Log out.

00:21:40.000 --> 00:21:45.488
То же самое необходимо выполнить в лабораторной
 работе. Необходимо ее остановить, для

00:21:45.512 --> 00:21:51.000
этого нажать на кнопку End lab, подтвердить
что вы останавливаете лабораторную работу,

00:21:51.000 --> 00:21:58.988
после чего дождаться сообщения о
том, что процесс удаления созданного

00:21:59.012 --> 00:22:07.000
AWS аккаунта запустился и вы
можете закрывать это всплывающее окно.

00:22:07.000 --> 00:22:13.488
На этом мы завершили введение в
лабораторную работу, разобрали задание.

00:22:13.512 --> 00:22:20.000
Я надеюсь, оно стало более понятным
для вас, если будут вопросы, пишите.

00:22:20.000 --> 00:22:26.000
Спасибо за внимание, увидимся с вами 
на следующих наших активностях.
