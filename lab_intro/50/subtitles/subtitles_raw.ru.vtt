WEBVTT

00:00:00.000 --> 00:00:08.000
Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной сессии «Введение в лабораторную работу».

00:00:08.000 --> 00:00:15.000
Тема лабораторной работы – это создание статического веб-сайта для нашего бизнес-кейса, а именно кафе.

00:00:15.000 --> 00:00:17.000
Итак, давайте начнем.

00:00:17.000 --> 00:00:29.000
Начинаем мы с вами лабораторную работу с основной страницы курса «Cloud Architecting» в AWS Academy.

00:00:29.000 --> 00:00:36.000
Здесь нам необходимо воспользоваться навигационным меню слева и перейти во вкладку «Modules».

00:00:36.000 --> 00:00:44.000
Как только мы это сделаем, необходимо спозиционироваться на третьем модуле, а именно один Storage Layer.

00:00:44.000 --> 00:00:53.000
Если вы раскроете список активностей, то в самом конце вы увидите модуль 3 «Challenge Lab – Creating a static website for the cafe».

00:00:53.000 --> 00:00:58.000
Давайте на него нажмем, чтобы перейти на основную страницу лабораторной работы.

00:00:58.000 --> 00:01:10.000
Здесь рекомендуется отключить окно терминала, необходимо убрать галочку, и окно Redmi будет отображено на всю страницу.

00:01:15.000 --> 00:01:23.000
Согласно сценарию, у нас есть основные герои – это Франк и Марта. Они муж с женой, пенсионеры.

00:01:23.000 --> 00:01:35.000
У них была давняя мечта создать небольшой бизнес – кафе с пекарней, на котором они сами работают, сами пекут хлебную продукцию.

00:01:35.000 --> 00:01:46.000
Также им в этом помогает дочка София, которая учится в университете, и работник Нихил, который работает на полставки и также учится в университете.

00:01:46.000 --> 00:02:08.000
На текущий момент какой-то маркетинговой стратегии у главных героев нет, поэтому про это заведение знают только знакомые, друзья, родственники, а также все те жители, которые живут в этом небольшом районе.

00:02:08.000 --> 00:02:19.000
Поэтому София предлагает родителям Франку и Марте потратить некоторое время на разработку веб-сайта.

00:02:19.000 --> 00:02:35.000
В веб-сайте они могли бы расположить меню, график работы, адрес заведения и другую полезную информацию для того, чтобы новые посетители могли находить их любимое заведение.

00:02:35.000 --> 00:02:50.000
В этой лабораторной работе мы поможем Софии создать веб-сайт и так, чтобы оно хостилось на облаке AWS.

00:02:50.000 --> 00:03:06.000
В рамках лабораторной работы мы будем выполнять четыре задания. Первое задание это настроить хостинг нашего статического веб-сайта в сервисе Amazon S3.

00:03:06.000 --> 00:03:19.000
Второе необходимо обеспечить безопасность наших данных. Третье необходимо настроить Data Love Cycle Strategy для того, чтобы хранить наши данные оптимально в S3-бакете.

00:03:19.000 --> 00:03:37.000
И самое последнее необходимо настроить Disaster Recovery Strategy DR, что означает наша архитектура готова к проблемам в целом регионе AWS.

00:03:37.000 --> 00:03:42.000
В случае возникновения подобных ситуаций мы не потеряем наши данные.

00:03:42.000 --> 00:03:53.000
Вы видите на слайде архитектуру, которая будет по завершению нашей лабораторной работы. Всего задействовано один сервис это Amazon S3.

00:03:53.000 --> 00:03:59.000
Задействовано также два региона. Первый регион это основной, на котором будет хоститься наш веб-сайт.

00:03:59.000 --> 00:04:13.000
На бакет во втором регионе будет реплицироваться весь контент, который будет добавляться на основной S3-бакет.

00:04:13.000 --> 00:04:30.000
Также хотелось бы напомнить, что это Challenge Lab и это означает, что деталей по выполнению простейших действий предоставлено не будет, лишь дается общее описание задачи, которые необходимо выполнить.

00:04:30.000 --> 00:04:40.000
Далее используя знания, полученные на лекционных занятиях, а также на предыдущей лабораторной работе, мы должны выполнить это задание.

00:04:40.000 --> 00:04:45.000
Всего рекомендуется завершить эту лабораторную работу в течении 60 минут.

00:04:45.000 --> 00:05:01.000
Я вам напоминаю, что если вам нужно больше времени, вы не завершая лабораторную работу, можете нажать на кнопку Start Lab и счетчик вернется в изначальное состояние.

00:05:01.000 --> 00:05:15.000
Обнуление счетчика не влияет на вашу оценку, поэтому периодически поглядывайте на оставшееся время и при необходимости ее увеличивайте.

00:05:15.000 --> 00:05:37.000
В рамках выполнения этой лабораторной работы мы будем использовать специально временно созданный AWS Account, на нем будут определенные ограничения на сервисы AWS, но на сервисы, на тот функционал, задействованный в лабораторной работе, у нас гарантированно будет необходимый доступ.

00:05:37.000 --> 00:05:48.000
Для выполнения лабораторной работы нам необходимо добраться до AWS Management Console, для того чтобы это сделать, нам необходимо нажать на кнопку Start Lab.

00:05:48.000 --> 00:06:04.000
Как только вы ее нажмете, начнется процесс создания временного AWS Account, выйдет соответствующее сообщение и как только вы в этом всплывающем окне увидите текст Lab Status Ready, вы можете закрывать это окно.

00:06:04.000 --> 00:06:13.000
И далее необходимо нажать на кнопку AWS, чтобы перейти на временно созданный AWS Account.

00:06:13.000 --> 00:06:23.000
Мы начинаем самое первое задание. Первым делом нам необходимо перейти по ссылке в текст задания лабораторной работы и скачать ZIP архив.

00:06:23.000 --> 00:06:40.000
В этом архиве содержится все необходимое содержание нашего статического веб-сайта, а именно есть файл index.html, есть две папки. Первая это CSS стили, а также папка с картинками.

00:06:40.000 --> 00:06:52.000
Как только мы ее скачали, разархивировали и подготовили к загрузке, нам необходимо вернуться в AWS Management Console и создать S3 Bucket.

00:06:52.000 --> 00:07:05.000
Этот S3 Bucket должен хранить данные в регионе Норс-Вирджиния. Как подсказка нам говорится о том, что необходимо отключить блок All Public Access опцию,

00:07:05.000 --> 00:07:18.000
также необходимо активировать static website hosting и как index.html файл использовать как основной документ.

00:07:18.000 --> 00:07:30.000
Как только мы создали S3 Bucket необходимо загрузить все наши файлы в S3 Bucket. Мы это неоднократно проделывали, поэтому здесь проблем возникнуть не должно.

00:07:30.000 --> 00:07:38.000
Как только все это проделали, давайте попробуем открыть наш веб-сайт и что же вы увидите.

00:07:38.000 --> 00:07:53.000
Во время выполнения Challenge Lab нам необходимо также ответить на некоторые тестовые вопросы. Для того, чтобы до них добраться необходимо нажать на кнопку Details и в выпадающем меню нажать на кнопку Show.

00:07:53.000 --> 00:08:08.000
После чего выбрать Access multiple choice questions, нажатием которой откроется отдельная страница вкладка в браузере и вы увидите все вопросы в рамках этой лабораторной работы.

00:08:08.000 --> 00:08:25.000
Сейчас нам необходимо ответить на первый вопрос, который звучит следующим образом. Как только вы завершили задачу 3, смогли ли вы увидеть ваш веб-сайт в браузере?

00:08:25.000 --> 00:08:40.000
Необходимо отметить, отправить запрос на сохранение вашего ответа и рекомендуется не закрывать эту страницу с вопросами, так как мы к ней еще вернемся.

00:08:40.000 --> 00:08:57.000
Дальше мы переходим к четвертому заданию. Здесь нам необходимо выдать публичный доступ к содержанию нашего стрибакета.

00:08:57.000 --> 00:09:22.000
Фрэнк попросил Софию обновить некоторые детали в веб-сайте, после чего София поняла, что эти действия необходимо производить постоянно и более того необходимо вручную после загрузки обновлять Access Control листы для каждого из этих объектов.

00:09:22.000 --> 00:09:38.000
Ей не хотелось проделывать эти действия постоянно, поэтому она решила создать Bucket Policy, которая открывает публичный доступ ко всем объектам, которые попадают на этот стрибакет.

00:09:38.000 --> 00:09:53.000
Таким образом, нам необходимо добавить Bucket Policy в наш стрибакет, который предоставляет публичный доступ к чтению ко всем пользователям интернета.

00:09:53.000 --> 00:10:04.000
Если возникли проблемы в этом месте с написанием этого Policy, вы можете перейти на AWS документацию и посмотреть, как же правильно ее написать.

00:10:04.000 --> 00:10:12.000
После того, как вы ее написали и сохранили, вам необходимо проверить, что ваш веб-сайт публично доступен.

00:10:12.000 --> 00:10:24.000
Если вы видите основную страницу вашего веб-сайта, мои поздравления, вы все действия сделали правильно.

00:10:24.000 --> 00:10:30.000
На этом мы завершаем первую часть и переходим ко второй части нашей лабораторной работы.

00:10:30.000 --> 00:10:36.000
Во второй части нам необходимо защитить наши данные в веб-сайте.

00:10:36.000 --> 00:10:46.000
Как только София успешно создала вместе с нами веб-сайт, было очень довольно, но возник следующий момент.

00:10:46.000 --> 00:11:06.000
Оливия, которая является AWS-соученцем и архитектом, посоветовала имплементировать некоторые дополнительные опции для того, чтобы обезопасить веб-сайт.

00:11:06.000 --> 00:11:21.000
Для того, чтобы обезопасить наш веб-сайт от удаления ее элементов, нам рекомендуется использовать функционал versioning.

00:11:21.000 --> 00:11:24.000
Первым делом нам необходимо его активировать.

00:11:24.000 --> 00:11:30.000
Далее, как только мы ее активируем, нам необходимо протестировать, действительно ли оно работает.

00:11:30.000 --> 00:11:42.000
Для того, чтобы это проверить, нам необходимо локально открыть любой текстовый редактор и там открыть index.html файл.

00:11:42.000 --> 00:11:44.000
Мы будем вносить некоторые изменения.

00:11:44.000 --> 00:11:54.000
Первое изменение необходимо найти вхождение bigcolor равно aquamarine и заменить его следующим значением bigcolor равно gain сбору.

00:11:54.000 --> 00:12:02.000
Далее, найти вхождение bigcolor равно orange и заменить его на bigcolor равно corn silk.

00:12:02.000 --> 00:12:12.000
Третье изменение необходимо найти второе вхождение bigcolor равно aquamarine и заменить ее на bigcolor равно gain сбору.

00:12:12.000 --> 00:12:18.000
Сохранить изменения, загрузить на S3 bucket и обновить страницу нашего веб-сайта.

00:12:18.000 --> 00:12:21.000
Вы увидите, что у нас произошли некоторые изменения.

00:12:21.000 --> 00:12:32.000
Теперь необходимо проверить, что у нас несколько версий для index.html и при необходимости мы можем с легкостью вернуться на предыдущую версию.

00:12:32.000 --> 00:12:40.000
Если это действительно так, то отлично, мы успешно активировали вершинник для S3 bucket и можем двигаться дальше.

00:12:40.000 --> 00:12:48.000
Следующим шагом нам необходимо открыть страницу с вопросами и ответить на вопрос номер 2.

00:12:48.000 --> 00:12:51.000
Текст вопроса звучит следующим образом.

00:12:51.000 --> 00:13:08.000
Выберите еще один возможный вариант предоставления дополнительной безопасности и исключения возможности удаления, случайного удаления объекта в вашем S3 bucket.

00:13:08.000 --> 00:13:18.000
Если вы затрудняетесь ответить, то рекомендуется перейти по ссылке и ознакомиться с документацией.

00:13:18.000 --> 00:13:40.000
Двигаемся дальше. Есть небольшая секция с best practice, в которой говорится о наличии достаточного количества функционала, в том числе для сервиса S3, которая позволяет нам защитить наши данные и сохранить наш бизнес.

00:13:40.000 --> 00:13:57.000
У нас есть вариант включить вершинник. Вершинник нам помогает с легкостью восстанавливать предыдущие версии объектов в S3 bucket, также защищает нас от случайного удаления.

00:13:57.000 --> 00:14:12.000
Далее есть опция шифрования, которая позволяет нам защищаться от неавторизованного доступа к нашим данным.

00:14:12.000 --> 00:14:28.000
Мы двигаемся к третьей части нашей лабораторной работы. Здесь необходимо предпринять меры для снижения расходов на сервис Amazon S3.

00:14:28.000 --> 00:14:40.000
Что рекомендуется, это использовать lifecycle policy для того, чтобы редко используемые объекты переносить на другой класс хранения и через какое-то время полностью удалять.

00:14:40.000 --> 00:14:50.000
Если говорить подробнее, то нужно создать в S3 bucket lifecycle configuration секции два рула.

00:14:50.000 --> 00:15:03.000
Первый рул будет переносить все предыдущие версии объектов в класс хранения Standard Infrequent Access после 30 дней.

00:15:03.000 --> 00:15:13.000
Далее необходимо создать второй рул, который будет все предыдущие версии объектов удалять после 365 дней.

00:15:13.000 --> 00:15:23.000
Я надеюсь у вас получилось создать необходимые рулы. Если не получилось, вы можете обратиться к документации.

00:15:23.000 --> 00:15:33.000
Также нам говорится о том, что согласно Well-Architected Framework нам необходимо настраивать lifecycle strategy.

00:15:33.000 --> 00:15:51.000
Это очень важно, так как мы должны управлять жизненным циклом наших данных в нужный момент их сохранять, далее в нужный момент их переносить в другие классы хранения и в результате их удалять.

00:15:51.000 --> 00:16:05.000
Мы с вами добрались до последней четвертой части нашей лабораторной работы. Здесь мы будем увеличивать надежность нашего сайта и в целом нашей архитектуры.

00:16:05.000 --> 00:16:16.000
Идея в том, что нам необходимо создать дополнительный S3 bucket в другом регионе и настроить в S3 bucket на основном регионе Cross-region replication.

00:16:16.000 --> 00:16:30.000
Когда вы ее будете создавать необходимо также убедиться, что мы реплицируем весь bucket. Также нам необходимо как IAMROL для выполнения этой репликации указать cafe-role.

00:16:30.000 --> 00:16:40.000
Она уже предварительно была для нас создана. Здесь также приводится policy привязанной к этой роли.

00:16:40.000 --> 00:16:55.000
Мы видим, что она предоставляет ряд action в том числе replicate object, replicate delete, replicate tags. Как ресурс указана звездочка и как эффект allow.

00:16:55.000 --> 00:17:16.000
Обратите внимание, что при работе с production средой как в policy вместо звездочки необходимо указывать конкретные названия buckets, чтобы оно было по принципу least privilege.

00:17:16.000 --> 00:17:26.000
Как только вы настроили Cross-region replication нам необходимо открыть страницу с вопросами и ответить на третий вопрос.

00:17:26.000 --> 00:17:29.000
Текст третьего вопроса звучит следующим образом.

00:17:29.000 --> 00:17:39.000
Видим ли мы объекты из основного bucket в bucket куда происходит репликация?

00:17:39.000 --> 00:17:55.000
Отлично, после того как мы ответили переходим к следующему шагу. Нам необходимо открыть индекс html, внести некоторые минимальные изменения и загрузить эту новую версию на основной S3 bucket.

00:17:55.000 --> 00:18:15.000
Далее необходимо убедиться, что в основном S3 bucket для индекса html сейчас у нас три версии, после чего перепроверить что на bucket в которую происходит репликация появилась версия индекса html.

00:18:15.000 --> 00:18:23.000
При необходимости вы можете обновить страницу и убедиться что этот файл находится там.

00:18:23.000 --> 00:18:37.000
Теперь нам нужно на основном S3 bucket удалить последнюю версию индекса html и после чего ответить на четвертый вопрос теста.

00:18:37.000 --> 00:18:58.000
Вопрос звучит следующим образом, как только мы удалили последнюю версию индекса html в основном S3 bucket, что произошло на втором S3 bucket на который происходит репликация?

00:18:58.000 --> 00:19:03.000
Она удалилась там или осталась такой же?

00:19:03.000 --> 00:19:29.000
Вам необходимо ответить на вопрос, сохранить его и я бы хотел разобрать следующую секцию, в которой рассматривается best practice, а именно то, что при построении архитектуры в облаке нам необходимо учитывать различные действия для сохранения наших данных, сохранения наших нагрузок.

00:19:29.000 --> 00:19:53.000
При возникновении проблем с целым регионом желательно построить избыточную архитектуру так, чтобы нагрузки они перенаправлялись на другой регион, тем самым вы не теряли бы своих пользователей и ваше приложение продолжало бы работать.

00:19:53.000 --> 00:20:15.000
С DR все не так просто, это достаточно дорогостоящее решение, вам необходимо в зависимости от вашего бизнес кейса, в зависимости от того готовы ли вы выделять дополнительные средства на поддержание этой возможности и если ответ утвердителен, то да необходимо ее разрабатывать.

00:20:15.000 --> 00:20:25.000
На стороне облака AWS предоставляется широкий набор сервисов и функционала, которые позволяют вам настроить DR.

00:20:25.000 --> 00:20:33.000
На этом мы выполнили все задания лабораторной работы.

00:20:33.000 --> 00:20:45.000
Теперь нам необходимо запустить скрипт для автооценивания, для этого необходимо нажать на кнопку submit, далее дать некоторое время отработать скрипту, может занять до 10 секунд.

00:20:45.000 --> 00:20:55.000
После того как скрипт отработает, отобразится окно с вашими набранными баллами и баллами отдельно за каждое задание.

00:20:55.000 --> 00:21:07.000
Если вы получили не максимальный балл и хотите ее улучшить, то вам необходимо пересмотреть задание и сделать соответствующие изменения в временном AWS аккаунте.

00:21:07.000 --> 00:21:18.000
После того как вы внесете необходимые изменения, вам необходимо еще раз нажать на кнопку submit для того чтобы автооценивание запустило скрипт еще раз.

00:21:18.000 --> 00:21:25.000
Я надеюсь вы таким образом набрали максимальные баллы.

00:21:25.000 --> 00:21:40.000
Обязательно необходимо со всех систем выйти корректно, в первую очередь это относится к AWS аккаунту, необходимо в верхней правой части нажать на имя пользователя и в выпадающем списке нажать на кнопку logout.

00:21:40.000 --> 00:21:51.000
То же самое необходимо выполнить в лабораторной работе, необходимо ее остановить, для этого необходимо нажать на кнопку end lab, подтвердить что вы останавливаете лабораторную работу,

00:21:51.000 --> 00:22:07.000
после чего дождаться сообщения о том что процесс удаления созданного AWS аккаунта запустился и вы можете закрывать это всплывающее окно.

00:22:07.000 --> 00:22:20.000
На этом мы завершили ведение в лабораторную работу, разобрали задание, я надеюсь оно стало более понятным для вас, если будут вопросы пишите.

00:22:20.000 --> 00:22:38.000
Спасибо за внимание, увидимся с вами на следующих наших активностях.