WEBVTT

00:00:00.000 --> 00:00:02.520
Добрый день, уважаемые студенты!

00:00:02.520 --> 00:00:05.640
Я рад вас всех видеть на очередной сессии обзора

00:00:05.640 --> 00:00:07.400
лабораторной работы.

00:00:07.400 --> 00:00:12.160
Тема сегодняшней лабораторной работы это настройка нетворкинга

00:00:12.160 --> 00:00:14.840
для нашего бизнес кейса, то есть для кафе.

00:00:14.840 --> 00:00:22.440
Эта лабораторная работа является Challenge Lab, то есть

00:00:22.440 --> 00:00:25.760
будет даваться минимальное количество инструкции и

00:00:25.760 --> 00:00:29.080
нам необходимо самостоятельно найти решение.

00:00:29.080 --> 00:00:32.520
Также я бы хотел отметить, что сама лабораторная

00:00:32.520 --> 00:00:35.920
работа достаточно объемная и я надеюсь, вам она понравится

00:00:35.920 --> 00:00:38.040
и будет интересно ее выполнять.

00:00:38.040 --> 00:00:42.160
Итак, давайте начнем.

00:00:42.160 --> 00:00:45.000
Начинаем мы с вами лабораторную работу с основной страницы

00:00:45.000 --> 00:00:48.320
курса Cloud Architecting в AWS Academy.

00:00:48.320 --> 00:00:51.440
Нам необходимо воспользоваться навигационным меню слева

00:00:51.440 --> 00:00:53.120
и перейти к модулю.

00:00:53.120 --> 00:00:56.680
Здесь нас интересует шестой модуль, а именно ссылка

00:00:56.680 --> 00:01:02.040
на лабораторную работу Challenge Lab Creating VPC Networking Environment

00:01:02.040 --> 00:01:03.760
for the Cafe.

00:01:03.760 --> 00:01:06.960
Как только вы окажетесь на главной странице лабораторной

00:01:06.960 --> 00:01:09.920
работы, необходимо будет скрыть окно терминала,

00:01:09.920 --> 00:01:13.920
чтобы оно нам не мешало и перепроверить заголовок

00:01:13.920 --> 00:01:15.720
лабораторной работы.

00:01:15.720 --> 00:01:21.040
Если все сделано, мы переходим к нашему бизнес кейсу.

00:01:21.040 --> 00:01:25.840
Согласно нему, София и Нихилл недавно только улучшили

00:01:25.840 --> 00:01:29.200
архитектуру в облаке AWS и перенесли базу данных

00:01:29.200 --> 00:01:33.480
в EC2 Instance в Managed Service Amazon RDS.

00:01:33.480 --> 00:01:38.560
Это улучшило работу всей инфраструктуры, разгрузило

00:01:38.560 --> 00:01:43.560
ребят от административных работ, связанных с поддержкой

00:01:43.560 --> 00:01:47.520
базы данных, и также они перенесли ресурсы базы

00:01:47.520 --> 00:01:51.840
данных из паблик сабнета в private subnet, его еще больше

00:01:51.840 --> 00:01:54.440
обезопасив.

00:01:54.440 --> 00:01:56.640
Они на днях встретились с Матео.

00:01:56.640 --> 00:02:02.800
Матео является системным администратором в AWS и он

00:02:02.800 --> 00:02:08.320
выслушал обновление наших главных героев и посоветовал

00:02:08.320 --> 00:02:10.000
еще дальше улучшать архитектуру.

00:02:10.000 --> 00:02:14.400
Он предложил настроить корректно VPC, создать все

00:02:14.400 --> 00:02:19.720
необходимые ее компоненты и также создать все необходимые

00:02:19.720 --> 00:02:23.280
ресурсы для удаленного доступа с административными

00:02:23.280 --> 00:02:24.280
правами.

00:02:24.280 --> 00:02:27.040
Также необходимо будет добавить дополнительные

00:02:27.040 --> 00:02:31.080
уровни безопасности, чтобы это решение работало корректно

00:02:31.080 --> 00:02:33.720
и злоумышленники не могли его взломать.

00:02:33.720 --> 00:02:39.880
В рамках лаборторной работы мы с вами научимся создавать

00:02:39.880 --> 00:02:42.840
VPC и ее основные компоненты.

00:02:42.840 --> 00:02:47.200
Далее научимся создавать ресурсы, которые позволяют

00:02:47.200 --> 00:02:52.000
безопасно, удаленно подключаться к ресурсам из private subnet.

00:02:52.000 --> 00:02:59.640
А также мы настроим дополнительные уровни безопасности, чтобы

00:02:59.640 --> 00:03:05.280
еще больше обезопасить периметр нашего VPC.

00:03:05.280 --> 00:03:12.880
Вы видите на слайде, какой станет архитектура в облаке

00:03:12.880 --> 00:03:15.520
AWS после выполнения лабораторной работы.

00:03:15.520 --> 00:03:23.040
На выполнение этой лабораторной работы рекомендуется выделить

00:03:23.040 --> 00:03:24.040
90 минут.

00:03:24.040 --> 00:03:26.840
Если этого времени будет недостаточно, вы всегда

00:03:26.840 --> 00:03:30.720
можете не нажимая кнопку end lab нажать на кнопку start

00:03:30.720 --> 00:03:32.480
lab и обнулить счетчик.

00:03:32.480 --> 00:03:38.600
Также здесь нам напоминают о том, что создается временный

00:03:38.600 --> 00:03:42.640
AWS аккаунт, специально предназначенный для лабораторной работы

00:03:42.640 --> 00:03:46.200
и все сервисы и компоненты, не относящиеся к лабораторной

00:03:46.200 --> 00:03:48.080
работе могут быть недоступны.

00:03:48.080 --> 00:03:51.080
А все те сервисы и компоненты, которые используются в

00:03:51.080 --> 00:03:54.760
лабораторной работе, они гарантированно будут доступны.

00:03:54.760 --> 00:03:57.440
Для того, чтобы начать лабораторную работу необходимо нажать

00:03:57.440 --> 00:04:00.620
на кнопку start lab, подтвердить то, что мы начинаем лабораторную

00:04:00.620 --> 00:04:06.800
работу и дождаться завершения создания временного AWS аккаунта.

00:04:06.800 --> 00:04:09.360
Вы увидите статус, что он готов к работе.

00:04:09.360 --> 00:04:14.400
После чего вы можете нажатием кнопки AWS перейти во временный

00:04:14.400 --> 00:04:20.640
AWS аккаунт и начать выполнять лабораторную работу.

00:04:20.640 --> 00:04:24.600
Мы с вами добрались до первого блока задания и в рамках

00:04:24.600 --> 00:04:28.720
бизнес кейса нам необходимо создать все необходимые

00:04:28.720 --> 00:04:34.600
компоненты внутри VPC, начиная от bastion-host до subnet, которые

00:04:34.600 --> 00:04:38.200
еще не созданы.

00:04:38.200 --> 00:04:41.960
Далее нам необходимо сделать таким образом, чтобы bastion-host

00:04:41.960 --> 00:04:43.560
был доступен из интернета.

00:04:43.560 --> 00:04:48.160
После этого создать все необходимое, чтобы из private

00:04:48.160 --> 00:04:52.680
subnet можно было подключаться безопасно к интернету, но

00:04:52.680 --> 00:04:59.040
чтобы доступ к ресурсам в private subnet был только из

00:04:59.040 --> 00:05:01.280
этого instance из public subnet.

00:05:01.280 --> 00:05:03.720
В нашем случае это bastion-host.

00:05:03.720 --> 00:05:04.960
Итак, давайте начнем.

00:05:04.960 --> 00:05:05.960
Первое задание.

00:05:05.960 --> 00:05:08.280
В рамках первого задания нам необходимо создать

00:05:08.280 --> 00:05:09.840
public subnet.

00:05:09.840 --> 00:05:14.200
Обратите внимание, что при просмотре списка существующих

00:05:14.200 --> 00:05:20.480
VPC в временном AWS аккаунте VPC с названием labvpc уже было

00:05:20.480 --> 00:05:21.880
создано за нас.

00:05:21.880 --> 00:05:24.000
Мы его будем использовать в дальнейшем.

00:05:24.000 --> 00:05:25.000
Следующий шаг.

00:05:25.000 --> 00:05:27.520
Нам необходимо создать public subnet.

00:05:27.520 --> 00:05:32.520
Для этого мы переходим на списку сабнетов и нажмем

00:05:32.520 --> 00:05:36.160
на соответствующую кнопку для создания нового сабнета.

00:05:36.160 --> 00:05:41.040
Как name укажем public subnet, как VPC выберем labvpc, как availability

00:05:41.040 --> 00:05:44.040
зону необходимо выбрать ту, которая заканчивается

00:05:44.040 --> 00:05:45.040
на A.

00:05:45.040 --> 00:05:48.860
В случае, если временный AWS аккаунт был создан в регионе

00:05:48.860 --> 00:05:52.440
Норс-Сверджиния, то как availability зону необходимо

00:05:52.440 --> 00:05:55.160
будет выбрать US-East-1A.

00:05:55.160 --> 00:06:00.040
Как cidre-block укажем следующее значение и создадим наш

00:06:00.040 --> 00:06:01.040
сабнет.

00:06:01.040 --> 00:06:04.320
Далее нам необходимо создать интернет-гейтвей и привязать

00:06:04.320 --> 00:06:11.680
ее к нашему VPC.

00:06:11.680 --> 00:06:16.560
Следующим шагом нам необходимо настроить road table нашего

00:06:16.560 --> 00:06:22.760
public subnet так, чтобы интернет трафик как target использовал

00:06:22.760 --> 00:06:25.160
наш интернет-гейтвей.

00:06:25.160 --> 00:06:29.440
После этого необходимо будет road table привязать к

00:06:29.440 --> 00:06:36.520
нашему public subnet в случае, если был создан кастомный

00:06:36.520 --> 00:06:37.520
road table.

00:06:37.520 --> 00:06:42.280
А в случае, если мы использовали и изменили дефолт road table,

00:06:42.280 --> 00:06:47.120
то привязывать нет необходимости, оно уже автоматически привязано

00:06:47.120 --> 00:06:52.280
ко всем сабнетам внутри VPC, где мы явно не указывали

00:06:52.280 --> 00:06:57.240
кастомный road table.

00:06:57.240 --> 00:07:03.640
Во второй задаче нам необходимо создать bastion-host.

00:07:03.640 --> 00:07:08.120
Bastion-host мы будем создавать в public subnet, это тот EC2-инстанц,

00:07:08.120 --> 00:07:11.080
которому мы будем через интернет подключаться

00:07:11.080 --> 00:07:13.920
по SSH.

00:07:13.920 --> 00:07:16.640
Давайте рассмотрим какие параметры необходимо указать

00:07:16.640 --> 00:07:19.520
при создании этого EC2-инстанца.

00:07:19.520 --> 00:07:23.000
Как операционную систему мы используем Amazon Linux, версию

00:07:23.000 --> 00:07:26.720
Amazon Linux 2 AMA HVM.

00:07:26.720 --> 00:07:29.360
Снайп должен быть титул micro.

00:07:29.360 --> 00:07:34.080
Далее к признаке auto assign public IP необходимо будет

00:07:34.080 --> 00:07:37.540
галочку убрать, чтобы публичный IP адрес не присвоился.

00:07:37.540 --> 00:07:42.120
Почему это нужно мы сейчас посмотрим и дойдем чуть

00:07:42.120 --> 00:07:45.880
дальше в следующем шаге.

00:07:45.880 --> 00:07:52.960
Как имя необходимо указать bastion-host и также необходимо

00:07:52.960 --> 00:07:58.280
создать security-группу с названием bastion-hostsg и по

00:07:58.280 --> 00:08:02.520
нему разрешить только inbound traffic по 22 порту, то есть

00:08:02.520 --> 00:08:08.400
это SSH трафик, который разрешает inbound трафик только для

00:08:08.400 --> 00:08:11.600
нашего IP адреса.

00:08:11.600 --> 00:08:17.560
Как private key будем использовать walkkey.

00:08:17.560 --> 00:08:21.240
Теперь на третьем задании нам необходимо будет создать

00:08:21.240 --> 00:08:23.520
elastic IP адрес.

00:08:23.520 --> 00:08:27.640
Как вы помните bastion-hostsg это тот инстанс, к которому

00:08:27.640 --> 00:08:32.000
подключаются удаленно все сотрудники компании

00:08:32.000 --> 00:08:35.200
и оно является единой точкой входа.

00:08:35.200 --> 00:08:38.680
Поэтому очень важно, чтобы ее IP адрес был известен

00:08:38.680 --> 00:08:40.600
всем и не менялся.

00:08:40.600 --> 00:08:46.900
Если бы мы создали для инстанца публичный IP адрес, то при

00:08:46.900 --> 00:08:52.120
пересоздании по тем или иным причинам bastion-hostsg у

00:08:52.120 --> 00:08:56.960
него публичный IP адрес мог бы смениться и вернуть

00:08:56.960 --> 00:08:59.960
на предыдущий мы бы никак не смогли.

00:08:59.960 --> 00:09:05.440
Таким образом сотрудники, у которых было записано

00:09:05.440 --> 00:09:09.120
старый IP адрес bastion-hostsg не смогли бы подключиться

00:09:09.120 --> 00:09:11.720
к нашей инфраструктуре в облаке.

00:09:11.720 --> 00:09:15.240
Поэтому правильным решением будет зафиксировать публичный

00:09:15.240 --> 00:09:19.840
IP адрес, а для этого мы создаем эластика IP адрес.

00:09:19.840 --> 00:09:22.720
Как только мы ее создадим, нам необходимо будет ее

00:09:22.720 --> 00:09:27.180
привязать к нашему bastion-hostsg.

00:09:27.180 --> 00:09:30.480
На четвертом задании нам необходимо проверить соединение

00:09:30.480 --> 00:09:32.240
к bastion-hostsg.

00:09:32.240 --> 00:09:35.840
Для этого необходимо на странице задания лаборторной

00:09:35.840 --> 00:09:40.680
работы нажать на кнопку details и в выпадающем списке

00:09:40.680 --> 00:09:46.960
выбрать возле надписи aws кнопку show.

00:09:46.960 --> 00:09:50.600
Здесь у вас есть возможность скачать приватный ключ

00:09:50.600 --> 00:09:52.000
в двух вариантах.

00:09:52.000 --> 00:09:56.180
В случае если вы работаете на Windows операционной системе

00:09:56.180 --> 00:09:59.040
вам необходимо скачать ключ с окончанием ppk.

00:09:59.040 --> 00:10:02.220
Если же вы работаете на Linux операционной системе

00:10:02.220 --> 00:10:06.000
либо macOS, в этом случае вам необходимо скачать ключ

00:10:06.000 --> 00:10:10.400
с расширением.pm.

00:10:10.400 --> 00:10:13.480
Как только вы скачали, вы можете закрыть это окно

00:10:13.480 --> 00:10:17.360
и попробовать подключиться к bastion-hostsg.

00:10:17.360 --> 00:10:22.560
Как подключаться к удаленному ICT инстанцу мы не раз проделывали

00:10:22.560 --> 00:10:26.200
в лаборторных работах и демо активностях, поэтому

00:10:26.200 --> 00:10:32.120
здесь мы не будем останавливаться на этом подробно.

00:10:32.120 --> 00:10:39.440
На пятом задании нам необходимо создать private subnet.

00:10:39.440 --> 00:10:44.480
Параметры private subnet как name укажем private subnet, как availability

00:10:44.480 --> 00:10:50.080
зону укажем ту, которую указывали для public subnet,

00:10:50.080 --> 00:10:57.120
как cidr блок укажем следующее значение и на этом мы создадим

00:10:57.120 --> 00:10:58.120
private subnet.

00:10:58.120 --> 00:11:01.720
Но для того чтобы предоставить возможность выхода в интернет

00:11:01.720 --> 00:11:06.400
безопасно из private subnet нам необходимо создать NAT gateway.

00:11:06.400 --> 00:11:12.520
NAT gateway создается в public subnet и напоминаю, что для

00:11:12.520 --> 00:11:16.520
NAT gateway в связке необходимо создать elastic IP адрес, после

00:11:16.520 --> 00:11:22.080
чего в route table нашего private subnet необходимо добавить

00:11:22.080 --> 00:11:26.680
routing rule, который будет направлять интернет трафик на наш NAT

00:11:26.680 --> 00:11:27.680
gateway.

00:11:27.680 --> 00:11:34.440
В рамках задания лаборторной работы нам необходимо создать

00:11:34.440 --> 00:11:37.920
route table с названием private route table.

00:11:37.920 --> 00:11:43.560
Это очень важно, так как при автооценивании нашей

00:11:43.560 --> 00:11:46.180
выполненной работы это может также учитываться

00:11:46.180 --> 00:11:50.800
и сказаться на вашем бале, поэтому необходимо в точности

00:11:50.800 --> 00:11:54.200
соблюдать значение, которое мы должны вводить для наших

00:11:54.200 --> 00:11:55.200
ресурсов.

00:11:55.200 --> 00:12:12.160
На седьмом задании мы должны будем создать EC2 instance в private

00:12:12.160 --> 00:12:18.320
subnet для последующей проверки подключения из bastion host

00:12:18.320 --> 00:12:24.560
в EC2 instance из private subnet.

00:12:24.560 --> 00:12:28.000
Давайте рассмотрим какие параметры необходимо ввести,

00:12:28.000 --> 00:12:36.400
как AMI используем AMI-linux2, AMI-HVM как instance type используем

00:12:36.400 --> 00:12:46.040
t2-micro, как имя укажем private instance и в security группе откроем

00:12:46.040 --> 00:12:52.080
inbound трафик только по 22 порту для security группы bastion

00:12:52.080 --> 00:12:55.080
host.

00:12:55.080 --> 00:13:04.120
Также обратите внимание, что для instance в private subnet

00:13:04.120 --> 00:13:07.480
мы будем создавать новый private ключ.

00:13:07.480 --> 00:13:12.080
Давайте его назовем walkk2.

00:13:12.080 --> 00:13:15.220
Мы добрались до восьмого задания и это последний

00:13:15.220 --> 00:13:18.640
шаг перед тем, как мы начнем все нами созданное тестировать.

00:13:18.640 --> 00:13:22.720
Здесь нам необходимо настроить возможность подключения

00:13:22.720 --> 00:13:30.600
к bastion host, а также из bastion host к EC2 instance в private subnet

00:13:30.600 --> 00:13:35.240
не сохраняя приватный ключ в bastion host.

00:13:35.240 --> 00:13:37.280
Давайте перефразирую.

00:13:37.280 --> 00:13:42.920
Когда мы подключаемся через интернет по протоколу SSH

00:13:42.920 --> 00:13:48.320
к любому удаленному серверу, мы локально у себя на компьютере

00:13:48.320 --> 00:13:49.960
храним приватный ключ.

00:13:49.960 --> 00:13:54.160
Когда мы подключаемся через путь, мы указываем в настройках

00:13:54.160 --> 00:13:59.000
программы, где находится этот ключ и во время подключения

00:13:59.000 --> 00:14:02.720
мы указываем публичный IP-адрес и вместе с ключом

00:14:02.720 --> 00:14:05.400
мы успешно подключаемся к этому инстанцу.

00:14:05.400 --> 00:14:08.720
Теперь следующий шаг, когда мы подключились к этому

00:14:08.720 --> 00:14:12.080
инстанцу, в нашем случае это bastion host, нам необходимо

00:14:12.080 --> 00:14:18.200
еще раз дальше подключиться также по SSH к другому EC2

00:14:18.200 --> 00:14:21.720
инстанцу, но этот EC2 инстанц находится в private subnet.

00:14:21.720 --> 00:14:24.760
Поэтому чтобы это сделать, нам необходимо чтобы в

00:14:24.760 --> 00:14:30.480
bastion host у нас был приватный ключ для подключения ко

00:14:30.480 --> 00:14:32.240
второму EC2 инстанцу.

00:14:32.240 --> 00:14:37.320
Это не очень хорошо и небезопасно, так как все пользователи,

00:14:37.320 --> 00:14:40.880
которые будут подключаться к bastion host под тем же пользователем,

00:14:40.880 --> 00:14:44.860
они будут возможно видеть ключи, которые они не должны

00:14:44.860 --> 00:14:46.400
были видеть.

00:14:46.400 --> 00:14:51.160
Поэтому это не самый хороший подход с точки зрения безопасности

00:14:51.160 --> 00:14:55.960
и есть готовое решение, так называемый SSH pass-through.

00:14:55.960 --> 00:14:59.640
Идея в том, что вы храните локально все необходимые

00:14:59.640 --> 00:15:06.720
ключи и при подключении последовательно к нескольким

00:15:06.720 --> 00:15:11.640
инстанцам по SSH, эти ключи ищутся не из инстанца, откуда

00:15:11.640 --> 00:15:16.560
вы подключаетесь, а они подтягиваются из локального

00:15:16.560 --> 00:15:21.400
компьютера, где было иницировано самое первое SSH соединение.

00:15:21.400 --> 00:15:25.720
Что для этого необходимо сделать?

00:15:25.720 --> 00:15:29.960
Для пользователей операционной системы Windows необходимо

00:15:29.960 --> 00:15:33.320
перейти по ссылке и скачать программу pageant.

00:15:33.320 --> 00:15:36.480
Эта программа также разрабатывается командой, которая создала

00:15:36.480 --> 00:15:38.640
программу пути.

00:15:38.640 --> 00:15:42.480
Как только мы ее загрузили, необходимо будет его установить

00:15:42.480 --> 00:15:43.760
и запустить.

00:15:43.760 --> 00:15:46.680
Как только вы ее запустите, там достаточно простой

00:15:46.680 --> 00:15:49.360
интерфейс и необходимо добавить два наших ключа

00:15:49.360 --> 00:15:57.280
wokkey от Pastian Host и wokkey2 от инстанца из private subnet в

00:15:57.280 --> 00:15:59.960
эту программу.

00:15:59.960 --> 00:16:02.600
Обратите внимание, что ваши private ключи должны

00:16:02.600 --> 00:16:07.400
быть с расширением.ppk.

00:16:07.400 --> 00:16:12.800
Далее при подключении через пути необходимо будет

00:16:12.800 --> 00:16:17.160
сделать дополнительную настройку, а именно перейти

00:16:17.160 --> 00:16:23.000
по пути настройки connection, ssh и auth и для признака allow

00:16:23.000 --> 00:16:25.320
agent forwarding поставить галочку.

00:16:25.320 --> 00:16:32.560
Также не забудьте в той же секции заполнить секцию

00:16:32.560 --> 00:16:37.040
credentials, а именно поле private key file for authentication.

00:16:37.040 --> 00:16:40.480
Здесь нам необходимо выбрать private key для подключения

00:16:40.480 --> 00:16:41.480
к bastion-host.

00:16:41.480 --> 00:16:45.680
В нашем случае это wokkey.

00:16:45.680 --> 00:16:48.800
Как только все мы это сделаем, нам необходимо использовать

00:16:48.800 --> 00:16:57.320
публичный IP-адрес нашего bastion-host и уже можем пробовать

00:16:57.320 --> 00:16:58.320
подключаться.

00:16:58.320 --> 00:17:02.480
Для пользователей с операционной системой macOS или Linux необходимо

00:17:02.480 --> 00:17:05.960
будет вести последовательно следующие команды, которые

00:17:05.960 --> 00:17:08.120
вы видите в задании.

00:17:08.120 --> 00:17:14.560
Идея такая же, вы сохраняете ключи в определенном месте

00:17:14.560 --> 00:17:17.800
в настройках и далее при подключении с дополнительным

00:17:17.800 --> 00:17:28.880
признаком создаете ssh соединение к bastion-host.

00:17:28.880 --> 00:17:32.960
Теперь нам необходимо подключиться к bastion-host.

00:17:32.960 --> 00:17:37.680
Как только мы подключились от bastion-host, нам необходимо

00:17:37.680 --> 00:17:43.360
подключиться к EC2-инстанцу в private subnet.

00:17:43.360 --> 00:17:46.360
Как это сделать вы уже знаете, поэтому подробнее останавливаться

00:17:46.360 --> 00:17:48.120
здесь не буду.

00:17:48.120 --> 00:17:51.680
Как только мы успешно подключились к EC2-инстанцу в private subnet,

00:17:51.680 --> 00:17:54.760
давайте проверим есть ли у этого инстанца выход

00:17:54.760 --> 00:17:55.760
в интернет.

00:17:55.760 --> 00:17:59.480
Для этого можете вести простейшую команду pint и IP-адрес со

00:17:59.480 --> 00:18:05.720
всеми восьмерками, в случае если вы увидите обмен пакетами

00:18:05.720 --> 00:18:10.480
и этот обмен пакетами успешен, то это говорит о том, что

00:18:10.480 --> 00:18:13.100
выход в интернет у этого инстанца есть и мы все

00:18:13.100 --> 00:18:18.080
настройки ввели корректно.

00:18:18.080 --> 00:18:22.600
Мы с вами добрались до второго блока нашей лабораторной

00:18:22.600 --> 00:18:28.460
работы и здесь мы будем создавать дополнительные

00:18:28.460 --> 00:18:30.360
уровни безопасности.

00:18:30.360 --> 00:18:33.640
Согласно бизнес-кейсу, София и Нихил рассказали

00:18:33.640 --> 00:18:38.680
свои обновления в облачной архитектуре другу Матео,

00:18:38.680 --> 00:18:43.200
он был впечатлен и после того как выслушал все обновления,

00:18:43.200 --> 00:18:47.480
дополнительно порекомендовал использовать Network ACL, чтобы

00:18:47.480 --> 00:18:53.600
еще больше обезопасить IT-архитектуру в облаке AWS.

00:18:53.600 --> 00:18:56.440
Что мы с вами сейчас и сделаем.

00:18:56.440 --> 00:19:00.120
Самый первый нам необходимо создать Network ACL.

00:19:00.120 --> 00:19:05.640
Этот Network ACL является кастомным, мы с вами помним, что дефолтный

00:19:05.640 --> 00:19:10.080
Network ACL он разрешает весь входящий и сходящий трафик

00:19:10.080 --> 00:19:12.800
и по умолчанию привязывается к сабнетам.

00:19:12.800 --> 00:19:18.200
В случае, когда мы создаем Custom Network ACL, то у него по

00:19:18.200 --> 00:19:21.960
умолчанию доступ входящий и сходящий закрыт и нам

00:19:21.960 --> 00:19:27.440
необходимо создавать дополнительные правила, чтобы доступ

00:19:27.440 --> 00:19:28.440
разрешать.

00:19:28.440 --> 00:19:36.840
Нам необходимо назвать наш Custom Network ACL Lab Network ACL

00:19:36.840 --> 00:19:42.680
и привязать ее к нашему private subnet.

00:19:42.680 --> 00:19:47.720
Далее нам необходимо для этого Custom Subnet разрешить

00:19:47.720 --> 00:19:55.120
весь входящий и сходящий трафик и далее уже на 11

00:19:55.120 --> 00:19:57.240
задании мы будем его тестировать.

00:19:57.240 --> 00:20:05.240
Чтобы его протестировать, нам необходимо в public subnet

00:20:05.240 --> 00:20:08.960
создать тестовый C2 Instance со следующими параметрами.

00:20:08.960 --> 00:20:14.720
Как AMI использовать Amazon Linux to AMI HVM, как Instance Type у нас

00:20:14.720 --> 00:20:21.640
будет T2 Micro, название будет Test Instance и в Security группе

00:20:21.640 --> 00:20:29.040
этого Instance необходимо разрешить весь входящий ICMP IPv4 трафик.

00:20:29.040 --> 00:20:34.480
Это как раз таки тот трафик, который приходит после

00:20:34.480 --> 00:20:37.440
запуска команды ping в командной строке.

00:20:37.440 --> 00:20:46.720
Нам необходимо сохранить приватный IP адрес этого

00:20:46.720 --> 00:20:51.600
тестового Instance, как только он создастся и мы возвращаемся

00:20:51.600 --> 00:20:58.480
к командной строке, где у нас текущее подключение

00:20:58.480 --> 00:21:07.280
до приватного Instance в private subnet и мы здесь будем пробовать

00:21:07.280 --> 00:21:13.280
через ping обратиться к приватному IP адресу тестового Instance.

00:21:13.280 --> 00:21:17.400
Вы увидите, что ping проходит, пакеты они обмениваются

00:21:17.400 --> 00:21:22.800
и это говорит о том, что приватный Instance может обратиться

00:21:22.800 --> 00:21:33.160
к нашему тестовому Instance в public subnet.

00:21:33.160 --> 00:21:38.480
Теперь нам необходимо произвести изменения в нашем кастомном

00:21:38.480 --> 00:21:42.080
нейтроке Icel, напоминаю, что этот нейтрок Icel привязан

00:21:42.080 --> 00:21:43.600
к private subnet.

00:21:43.600 --> 00:21:50.040
Здесь нам необходимо запретить весь ICMP IPv4 трафик для конкретного

00:21:50.040 --> 00:21:51.320
IP адреса.

00:21:51.320 --> 00:21:54.840
Когда нам нужно указать один IP адрес, то используется

00:21:54.840 --> 00:21:59.640
CIDRO блок размера 32, который в себе содержит один IP адрес.

00:21:59.640 --> 00:22:02.680
Обратите внимание, что очередность этого правила

00:22:02.680 --> 00:22:05.400
должна быть выше, чем другие правила, чтобы оно сработало.

00:22:05.400 --> 00:22:15.280
В терминале, где у нас отрабатывает команда ping, давайте его

00:22:15.280 --> 00:22:19.960
не будем закрывать и пусть оно отправляет пакеты.

00:22:19.960 --> 00:22:25.480
Как только мы сохраним изменения в network Icel, вы увидите, что

00:22:25.480 --> 00:22:27.800
пакеты перестали обмениваться.

00:22:27.800 --> 00:22:31.840
Это говорит о том, что мы запретили доступ через

00:22:31.840 --> 00:22:36.800
network Icel и добавили дополнительный уровень безопасности.

00:22:36.800 --> 00:22:47.520
Вы увидите, что у нас появился кастомный нейтрок Icel, который

00:22:47.520 --> 00:22:53.880
запрещает доступ специально для тестового инстанца

00:22:53.880 --> 00:23:00.360
в public subnet.

00:23:00.360 --> 00:23:04.160
После того, как это все сработало корректно, это говорит о

00:23:04.160 --> 00:23:07.080
том, что вы все настройки ввели правильно, мы добрались

00:23:07.080 --> 00:23:09.800
до самого последнего блока заданий.

00:23:09.800 --> 00:23:12.760
И здесь необходимо на основной странице лабораторной

00:23:12.760 --> 00:23:21.120
работы нажать на кнопку details, далее в выпадающем

00:23:21.120 --> 00:23:26.040
меню нажать на ссылку access the multiple choice questions.

00:23:26.040 --> 00:23:27.800
Там содержится 6 вопросов.

00:23:27.800 --> 00:23:31.480
Давайте пройдемся по каждому из вопросов.

00:23:31.480 --> 00:23:33.840
Первый вопрос звучит следующим образом.

00:23:33.840 --> 00:23:47.760
Какая цель интернет-гейтвея в public subnet?

00:23:47.760 --> 00:23:48.760
Далее второй вопрос.

00:23:48.760 --> 00:23:58.280
Что дает возможность инстанцу из private subnet подключаться

00:23:58.280 --> 00:24:01.480
в интернет и скачивать обновления?

00:24:01.480 --> 00:24:02.480
Третий вопрос.

00:24:02.480 --> 00:24:07.760
Может ли инстанц из private subnet напрямую подключаться

00:24:07.760 --> 00:24:08.960
в интернет?

00:24:08.960 --> 00:24:10.400
Четвертый вопрос.

00:24:10.400 --> 00:24:15.840
Почему мы создали два отдельных ключа для инстанца из private

00:24:15.840 --> 00:24:21.640
subnet и для инстанца из public subnet, а именно для bastion-host?

00:24:21.640 --> 00:24:22.640
Пятый вопрос.

00:24:22.640 --> 00:24:30.600
Может ли bastion-host успешно запустить команду ping и

00:24:30.600 --> 00:24:34.520
получить ответ от инстанца из private subnet?

00:24:34.520 --> 00:24:36.480
Это очень хороший вопрос.

00:24:36.480 --> 00:24:37.480
Шестой вопрос.

00:24:37.480 --> 00:24:51.840
Какое правило в security-группе инстанца в private subnet дает

00:24:51.840 --> 00:25:01.160
разрешение входящему трафику команды ping, который мы отправили

00:25:01.160 --> 00:25:06.400
из этого инстанца тестовому инстанцу в public subnet?

00:25:06.400 --> 00:25:11.600
На странице с вопросами у вас будут варианты, вы

00:25:11.600 --> 00:25:16.880
можете посмотреть на них и будут заведомо неверные

00:25:16.880 --> 00:25:19.280
варианты ответов и методами исключения попытаться

00:25:19.280 --> 00:25:21.120
ответить правильно.

00:25:21.120 --> 00:25:26.560
Обратите внимание, что сделанные действия в рамках

00:25:26.560 --> 00:25:32.980
AWS Management Console, что вопросы тестовые, они могут быть

00:25:32.980 --> 00:25:36.880
перезданы любое количество раз.

00:25:36.880 --> 00:25:41.440
Поэтому экспериментируйте для того, чтобы сдать задание,

00:25:41.440 --> 00:25:43.960
необходимо на главной странице лабораторной работы нажать

00:25:43.960 --> 00:25:47.560
на кнопку submit и подтвердить то, что вы запускаете скрипт

00:25:47.560 --> 00:25:49.680
автооценивания.

00:25:49.680 --> 00:25:52.600
Так как лабораторная работа объемная, необходимо будет

00:25:52.600 --> 00:25:55.680
некоторое время подождать, когда оно успешно отработает

00:25:55.680 --> 00:25:59.040
и в правой части страницы вы увидите набранные вами

00:25:59.040 --> 00:26:00.040
баллы.

00:26:00.040 --> 00:26:06.760
Если вы не добрали максимальный балл, то вы всегда можете

00:26:06.760 --> 00:26:09.440
посмотреть на каком шаге, в каком задании у вас не

00:26:09.440 --> 00:26:12.520
хватает баллов, вернуться к этому заданию и попробовать

00:26:12.520 --> 00:26:15.760
его сделать еще раз.

00:26:15.760 --> 00:26:18.780
Как только вы внесете необходимые изменения, вы можете еще

00:26:18.780 --> 00:26:23.480
раз запустить скрипт автооценивания и обновите свои баллы в

00:26:23.480 --> 00:26:28.360
рамках лабораторной работы.

00:26:28.360 --> 00:26:32.680
Как только вы закончили работу, вам необходимо

00:26:32.680 --> 00:26:34.400
правильно выйти со всех систем.

00:26:34.400 --> 00:26:38.640
В первую очередь это касается AWS Management консоли, необходимо

00:26:38.640 --> 00:26:40.620
будет разлагиниться.

00:26:40.620 --> 00:26:44.320
Далее на главной странице лабораторной работы необходимо

00:26:44.320 --> 00:26:47.520
будет нажать на кнопку end lab, подтвердить, что вы завершаете

00:26:47.520 --> 00:26:50.160
лабораторную работу и уже после этого закрывать

00:26:50.160 --> 00:26:53.600
страницу с лабораторной работы.

00:26:53.600 --> 00:26:59.080
На этом мы завершаем сессию обдора лабораторной работы.

00:26:59.080 --> 00:27:01.880
Это очень интересная лабораторная работа, очень надеюсь,

00:27:01.880 --> 00:27:03.200
что она вам понравится.

00:27:03.200 --> 00:27:05.760
Если будут вопросы, задавайте.

00:27:05.760 --> 00:27:08.920
Спасибо за внимание, увидимся с вами на следующих наших

00:27:08.920 --> 00:27:27.960
активностях.