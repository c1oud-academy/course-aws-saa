WEBVTT

00:00:00.000 --> 00:00:07.400
Добрый день, уважаемые студенты! Рад вас видеть
на очередной сессии обзора лабораторной работы.

00:00:07.400 --> 00:00:14.840
Тема сегодняшней лабораторной работы - это настройка
networking для нашего бизнес кейса, то есть для кафе.

00:00:14.840 --> 00:00:21.335
Эта лабораторная работа является
Challenge Lab, то есть будет даваться

00:00:21.359 --> 00:00:29.080
минимальное количество инструкции и нам
необходимо самостоятельно найти решение.

00:00:29.080 --> 00:00:35.608
Также я бы хотел отметить, что сама
лабораторная работа достаточно объемная и я

00:00:35.632 --> 00:00:42.160
надеюсь, вам она понравится и будет
интересно ее выполнять. Итак, давайте начнем.

00:00:42.160 --> 00:00:48.320
Начинаем мы с вами лабораторную работу с основной
страницы курса Cloud Architecting в AWS Academy.

00:00:48.320 --> 00:00:53.120
Нам необходимо воспользоваться
навигационным меню слева и перейти к модулю.

00:00:53.120 --> 00:00:58.197
Здесь нас интересует шестой модуль,
а именно ссылка на лабораторную

00:00:58.221 --> 00:01:03.760
работу Challenge Lab Creating VPC
Networking Environment for the Cafe.

00:01:03.760 --> 00:01:09.728
Как только вы окажетесь на главной странице
лабораторной работы, необходимо будет скрыть

00:01:09.752 --> 00:01:15.720
окно Terminal, чтобы оно нам не мешало и
перепроверить заголовок лабораторной работы.

00:01:15.720 --> 00:01:21.040
Если все сделано, мы
переходим к нашему бизнес кейсу.

00:01:21.040 --> 00:01:27.248
Согласно нему, София и Нихил недавно
только улучшили архитектуру в облаке

00:01:27.272 --> 00:01:33.480
AWS и перенесли базу данных в EC2
Instance в Managed Service Amazon RDS.

00:01:33.480 --> 00:01:38.749
Это улучшило работу всей
инфраструктуры, разгрузило ребят

00:01:38.773 --> 00:01:43.948
от административных работ,
связанных с поддержкой базы

00:01:43.972 --> 00:01:48.813
данных, и также они перенесли
ресурсы базы данных из

00:01:48.837 --> 00:01:54.440
public subnet в private subnet,
его еще больше обезопасив.

00:01:54.440 --> 00:02:01.981
Они на днях встретились с Матео. Матео является
 системным администратором в AWS и он

00:02:02.005 --> 00:02:10.000
выслушал обновление наших главных героев и
посоветовал еще дальше улучшать архитектуру.

00:02:10.000 --> 00:02:17.128
Он предложил настроить корректно VPC,
создать все необходимые ее компоненты и также

00:02:17.152 --> 00:02:24.280
создать все необходимые ресурсы для
удаленного доступа с административными правами.

00:02:24.280 --> 00:02:28.988
Также необходимо будет добавить
дополнительные уровни безопасности, чтобы

00:02:29.012 --> 00:02:33.720
это решение работало корректно и
злоумышленники не могли его взломать.

00:02:33.720 --> 00:02:42.840
В рамках лабораторной работы мы с вами
научимся создавать VPC и ее основные компоненты.

00:02:42.840 --> 00:02:46.846
Далее научимся создавать
ресурсы, которые позволяют

00:02:46.870 --> 00:02:52.000
безопасно, удаленно подключаться
к ресурсам из private subnet.

00:02:52.000 --> 00:03:05.280
Также настроим дополнительные уровни безопасности,
чтобы еще больше обезопасить периметр нашего VPC.

00:03:05.280 --> 00:03:15.520
Вы видите на слайде, какой станет архитектура в
облаке AWS после выполнения лабораторной работы.

00:03:15.520 --> 00:03:24.040
На выполнение этой лабораторной
работы рекомендуется выделить 90 минут.

00:03:24.040 --> 00:03:28.314
Если этого времени будет недостаточно,
вы всегда можете не нажимая

00:03:28.338 --> 00:03:32.480
кнопку End lab нажать на кнопку
Start lab и обнулить счетчик.

00:03:32.480 --> 00:03:39.932
Напоминаю, что создается временный AWS аккаунт,
 специально предназначенный для лабораторной

00:03:39.956 --> 00:03:48.080
работы и все сервисы и компоненты, не относящиеся
к лабораторной работе могут быть недоступны.

00:03:48.080 --> 00:03:51.408
А все те сервисы и компоненты,
которые используются в

00:03:51.432 --> 00:03:54.760
лабораторной работе, они
гарантированно будут доступны.

00:03:54.760 --> 00:03:58.029
Для того, чтобы начать
лабораторную работу необходимо

00:03:58.053 --> 00:04:01.827
нажать на кнопку Start lab,
подтвердить то, что мы начинаем

00:04:01.851 --> 00:04:05.754
лабораторную работу и дождаться
завершения создания временного

00:04:05.778 --> 00:04:09.360
AWS аккаунта. Вы увидите 
статус, что он готов к работе.

00:04:09.360 --> 00:04:14.339
После чего вы можете
нажатием кнопки AWS перейти во

00:04:14.363 --> 00:04:20.640
временный AWS аккаунт и начать
выполнять лабораторную работу.

00:04:20.640 --> 00:04:29.408
Мы с вами добрались до первого блока задания
и в рамках бизнес кейса нам необходимо создать все

00:04:29.432 --> 00:04:38.200
необходимые компоненты внутри VPC, начиная
от bastion host до subnet, которые еще не созданы.

00:04:38.200 --> 00:04:43.560
Далее нам необходимо сделать таким образом,
чтобы bastion host был доступен из интернета.

00:04:43.560 --> 00:04:52.137
После этого создать все необходимое, чтобы из
private subnet можно было подключаться безопасно к

00:04:52.161 --> 00:05:01.280
интернету, но чтобы доступ к ресурсам в private
subnet был только из EC2 инстанса из public subnet.

00:05:01.280 --> 00:05:05.960
В нашем случае это bastion host.
Итак, давайте начнем. Первое задание.

00:05:05.960 --> 00:05:09.840
В рамках первого задания нам
необходимо создать public subnet.

00:05:09.840 --> 00:05:15.357
Обратите внимание, что при
просмотре списка существующих VPC во

00:05:15.381 --> 00:05:21.880
временном AWS аккаунте VPC с
названием Lab VPC уже было создано за нас.

00:05:21.880 --> 00:05:27.520
Мы его будем использовать в дальнейшем.
Следующий шаг. Необходимо создать public subnet.

00:05:27.520 --> 00:05:36.160
Для этого мы переходим на списки subnet-ов и нажмем
на соответствующую кнопку для создания нового subnet.

00:05:36.160 --> 00:05:40.172
Как Name укажем Public subnet,
как VPC выберем Lab VPC, как

00:05:40.196 --> 00:05:45.040
Availability Zone необходимо
выбрать ту, которая заканчивается на a.

00:05:45.040 --> 00:05:49.676
В случае, если временный AWS
аккаунт был создан в регионе North

00:05:49.700 --> 00:05:55.160
Virginia, то как availability зону
необходимо будет выбрать us-east-1a.

00:05:55.160 --> 00:06:01.040
Как CIDR block укажем следующее
значение и создадим наш subnet.

00:06:01.040 --> 00:06:11.680
Далее нам необходимо создать Internet
gateway и привязать ее к нашему VPC.

00:06:11.680 --> 00:06:18.408
Следующим шагом нам необходимо
настроить route table нашего public subnet

00:06:18.432 --> 00:06:25.160
так, чтобы интернет трафик как
target использовал наш Internet gateway.

00:06:25.160 --> 00:06:31.024
После этого необходимо будет
route table привязать к нашему

00:06:31.048 --> 00:06:37.520
public subnet в случае, если
был создан кастомный route table.

00:06:37.520 --> 00:06:47.368
А в случае, если мы использовали и изменили default
route table, то привязывать нет необходимости, оно

00:06:47.392 --> 00:06:57.240
уже автоматически привязано ко всем subnet внутри
VPC, где мы явно не указывали кастомный route table.

00:06:57.240 --> 00:07:03.640
Во второй задаче нам
необходимо создать bastion host.

00:07:03.640 --> 00:07:08.480
Bastion host мы будем создавать
в public subnet, это тот EC2

00:07:08.504 --> 00:07:13.920
инстанс, к которому мы будем
через интернет подключаться по SSH.

00:07:13.920 --> 00:07:19.520
Давайте рассмотрим какие параметры необходимо
 указать при создании этого EC2 инстанса.

00:07:19.520 --> 00:07:26.720
Как операционную систему мы используем
Amazon Linux, версию Amazon Linux 2 AMI (HVM).

00:07:26.720 --> 00:07:29.360
Instance type
должен быть t2.micro.

00:07:29.360 --> 00:07:33.438
Далее в признаке Auto-assign
public IP необходимо будет

00:07:33.462 --> 00:07:37.540
галочку убрать, чтобы
публичный IP адрес не присвоился.

00:07:37.540 --> 00:07:45.880
Почему это нужно мы сейчас посмотрим
и дойдем чуть дальше в следующем шаге.

00:07:45.880 --> 00:07:52.598
Как Name необходимо указать
Bastion host и также необходимо создать

00:07:52.622 --> 00:07:59.034
Security group с названием
Bastion host SG и по нему разрешить

00:07:59.058 --> 00:08:05.317
только inbound traffic по 22
порту, то есть это SSH трафик,

00:08:05.341 --> 00:08:11.600
который разрешает inbound
трафик только для нашего IP адреса.

00:08:11.600 --> 00:08:17.560
Как private key будем
использовать vockey.

00:08:17.560 --> 00:08:23.520
Теперь на третьем задании нам
необходимо будет создать Elastic IP адрес.

00:08:23.520 --> 00:08:29.348
Как вы помните Bastion host это
тот инстанс, к которому подключаются

00:08:29.372 --> 00:08:35.200
удаленно все сотрудники компании
и оно является единой точкой входа.

00:08:35.200 --> 00:08:40.600
Поэтому очень важно, чтобы ее IP
адрес был известен всем и не менялся.

00:08:40.600 --> 00:08:49.830
Если бы мы создали для инстанса публичный
IP адрес, то при пересоздании bastion host

00:08:49.854 --> 00:08:59.960
у него публичный IP адрес мог бы смениться и
вернуть на предыдущий мы бы никак не смогли.

00:08:59.960 --> 00:09:05.442
Таким образом сотрудники, у
которых было записано старый IP адрес

00:09:05.466 --> 00:09:11.720
bastion host не смогли бы подключиться
к нашей инфраструктуре в облаке.

00:09:11.720 --> 00:09:15.918
Поэтому правильным решением
будет зафиксировать публичный

00:09:15.942 --> 00:09:19.840
IP адрес, а для этого мы
создаем Elastic IP адрес.

00:09:19.840 --> 00:09:27.180
Как только мы ее создадим, нам необходимо
будет ее привязать к нашему bastion host.

00:09:27.180 --> 00:09:32.240
На четвертом задании нам необходимо
проверить соединение к bastion host.

00:09:32.240 --> 00:09:39.185
Для этого необходимо на странице
задания лабораторной работы нажать на

00:09:39.209 --> 00:09:46.960
кнопку Details и в выпадающем списке
выбрать возле надписи AWS кнопку Show.

00:09:46.960 --> 00:09:52.000
Здесь у вас есть возможность скачать
приватный ключ в двух вариантах.

00:09:52.000 --> 00:09:59.040
В случае если вы работаете на Windows операционной
системе вам необходимо скачать ключ с окончанием PPK.

00:09:59.040 --> 00:10:04.708
Если же вы работаете на Linux
операционной системе либо macOS,

00:10:04.732 --> 00:10:10.400
в этом случае вам необходимо
скачать ключ с расширением PEM.

00:10:10.400 --> 00:10:17.360
Как только вы скачали, вы можете закрыть это
окно и попробовать подключиться к bastion host.

00:10:17.360 --> 00:10:24.242
Как подключаться к удаленному EC2
инстансу мы не раз проделывали в лабораторных

00:10:24.266 --> 00:10:32.120
работах и Демо активностях, поэтому здесь
мы не будем останавливаться на этом подробно.

00:10:32.120 --> 00:10:39.440
На пятом задании нам
необходимо создать private subnet.

00:10:39.440 --> 00:10:48.219
Параметры private subnet как Name укажем Private
 subnet, Availability zone укажем ту, которую

00:10:48.243 --> 00:10:58.120
указывали для Public subnet, CIDR блок укажем
следующее значение и на этом создадим private subnet.

00:10:58.120 --> 00:11:02.048
Но для того чтобы предоставить
возможность выхода в интернет

00:11:02.072 --> 00:11:06.400
безопасно из private subnet нам
необходимо создать NAT gateway.

00:11:06.400 --> 00:11:11.453
NAT gateway создается в public
subnet и напоминаю, что для NAT

00:11:11.477 --> 00:11:17.028
gateway в связке необходимо 
создать Elastic IP адрес. После чего в

00:11:17.052 --> 00:11:22.061
route table нашего private subnet
необходимо добавить routing

00:11:22.085 --> 00:11:27.680
rule, который будет направлять
интернет трафик на наш NAT gateway.

00:11:27.680 --> 00:11:37.920
В рамках задания лабораторной работы нам необходимо
создать route table с названием private route table.

00:11:37.920 --> 00:11:41.673
Это очень важно, так как
при автооценивании нашей

00:11:41.697 --> 00:11:46.548
выполненной работы это может
также учитываться и сказаться на

00:11:46.572 --> 00:11:50.874
ваших баллах, поэтому
необходимо в точности соблюдать

00:11:50.898 --> 00:11:55.200
значение, которое мы должны
вводить для наших ресурсов.

00:12:07.200 --> 00:12:15.377
На седьмом задании мы должны будем
создать EC2 instance в private subnet для

00:12:15.401 --> 00:12:24.560
последующей проверки подключения из
bastion host в EC2 instance из private subnet.

00:12:24.560 --> 00:12:32.750
Давайте рассмотрим какие параметры
необходимо ввести, как AMI используем

00:12:32.774 --> 00:12:40.155
Amazon Linux2 AMI (HVM), как
Instance type используем t2.micro,

00:12:40.179 --> 00:12:47.026
как имя укажем Private instance
и в security группе откроем

00:12:47.050 --> 00:12:55.080
inbound трафик только по 22
порту для security группы bastion host.

00:12:55.080 --> 00:13:03.568
Также обратите внимание, что
для инстанса в private subnet мы

00:13:03.592 --> 00:13:12.080
будем создавать новый private key.
Давайте его назовем vockey2.

00:13:12.080 --> 00:13:15.137
Мы добрались до восьмого
задания и это последний шаг

00:13:15.161 --> 00:13:18.640
перед тем, как мы начнем все
нами созданное тестировать.

00:13:18.640 --> 00:13:27.948
Здесь нам необходимо настроить возможность
подключения к bastion host, а также из bastion host к

00:13:27.972 --> 00:13:37.280
EC2 instance в private subnet, не сохраняя приватный
 ключ в bastion host. Давайте перефразирую.

00:13:37.280 --> 00:13:43.884
Когда мы подключаемся через интернет
по протоколу SSH к любому удаленному

00:13:43.908 --> 00:13:49.960
серверу, мы локально у себя на
компьютере храним приватный ключ.

00:13:49.960 --> 00:13:57.668
Когда мы подключаемся через PuTTY, мы указываем
в настройках программы, где находится этот ключ и во

00:13:57.692 --> 00:14:05.400
время подключения указываем публичный IP-адрес и
вместе с ключом подключаемся к этому инстансу.

00:14:05.400 --> 00:14:09.058
Теперь следующий шаг,
когда мы подключились к этому

00:14:09.082 --> 00:14:13.327
инстансу, в нашем случае это
bastion host, нам необходимо

00:14:13.351 --> 00:14:17.335
еще раз дальше подключиться
также по SSH к другому EC2

00:14:17.359 --> 00:14:21.720
инстансу, но этот EC2 инстанс
находится в private subnet.

00:14:21.720 --> 00:14:26.968
Поэтому чтобы это сделать, нам
необходимо чтобы в bastion host у

00:14:26.992 --> 00:14:32.240
нас был приватный ключ для
подключения ко второму EC2 инстансу.

00:14:32.240 --> 00:14:39.308
Это не очень хорошо и небезопасно, так как все
пользователи, которые будут подключаться к bastion

00:14:39.332 --> 00:14:46.400
host под тем же пользователем, они будут возможно
видеть ключи, которые они не должны были видеть.

00:14:46.400 --> 00:14:51.369
Поэтому это не самый хороший
подход с точки зрения безопасности

00:14:51.393 --> 00:14:55.960
и есть готовое решение, так
называемый SSH passthrough.

00:14:55.960 --> 00:15:01.657
Идея в том, что вы храните
локально все необходимые ключи и при

00:15:01.681 --> 00:15:08.668
подключении последовательно к нескольким
инстансам по SSH, эти ключи ищатся

00:15:08.692 --> 00:15:14.473
не из инстанса, откуда вы
подключаетесь, а они подтягиваются из

00:15:14.497 --> 00:15:21.400
локального компьютера, где было
инициировано самое первое SSH соединение.

00:15:21.400 --> 00:15:27.566
Что для этого необходимо сделать?
Для пользователей операционной системы

00:15:27.590 --> 00:15:33.320
Windows необходимо перейти по
ссылке и скачать программу Pageant.

00:15:33.320 --> 00:15:38.640
Эта программа также разрабатывается
командой, которая создала программу PuTTY.

00:15:38.640 --> 00:15:43.760
Как только мы ее загрузили, необходимо
будет ее установить и запустить.

00:15:43.760 --> 00:15:51.484
Как только вы ее запустите, там достаточно
простой интерфейс и необходимо добавить два

00:15:51.508 --> 00:15:59.960
наших ключа vockey от Bastion Host и vockey2
от инстанса из private subnet в эту программу.

00:15:59.960 --> 00:16:07.400
Обратите внимание, что ваши private
ключи должны быть с расширением .PPK.

00:16:07.400 --> 00:16:16.348
Далее при подключении через PuTTY необходимо будет
сделать дополнительную настройку, а именно перейти

00:16:16.372 --> 00:16:25.320
по пути настройки Connection &gt; SSH &gt; Auth и для
признака Allow agent forwarding поставить галочку.

00:16:25.320 --> 00:16:30.346
Также не забудьте в той
же секции заполнить секцию

00:16:30.370 --> 00:16:37.040
Credentials, а именно поле
Private key file for authentication.

00:16:37.040 --> 00:16:45.680
Здесь необходимо выбрать private key для подключения
к bastion host. В нашем случае это vockey.

00:16:45.680 --> 00:16:52.036
Как только все мы это сделаем, нам
необходимо использовать публичный

00:16:52.060 --> 00:16:58.320
IP-адрес нашего bastion host и
уже можем пробовать подключаться.

00:16:58.320 --> 00:17:03.242
Для пользователей с операционной
системой macOS или Linux необходимо будет

00:17:03.266 --> 00:17:08.120
ввести последовательно следующие
команды, которые вы видите в задании.

00:17:08.120 --> 00:17:18.488
Идея такая же, вы сохраняете ключи в
определенном месте в настройках и далее при

00:17:18.512 --> 00:17:28.880
подключении с дополнительным признаком
создаете SSH соединение к bastion host.

00:17:28.880 --> 00:17:32.960
Теперь нам необходимо
подключиться к bastion host.

00:17:32.960 --> 00:17:43.360
Как только подключились, от bastion host необходимо
подключиться к EC2 инстансу в private subnet.

00:17:43.360 --> 00:17:48.120
Как это сделать вы уже знаете, поэтому
подробнее останавливаться здесь не буду.

00:17:48.120 --> 00:17:52.049
Как только мы успешно подключились
к EC2инстансу в private subnet,

00:17:52.073 --> 00:17:55.760
давайте проверим есть ли у
этого инстанса выход в интернет.

00:17:55.760 --> 00:18:01.010
Для этого можете вести
простейшую команду ping и IP-адрес со

00:18:01.034 --> 00:18:06.908
всеми восьмерками, в случае если
вы увидите обмен пакетами и этот

00:18:06.932 --> 00:18:11.996
обмен пакетами успешен, то
это говорит о том, что выход в

00:18:12.020 --> 00:18:18.080
интернет у этого инстанса есть и
мы все настройки ввели корректно.

00:18:18.080 --> 00:18:24.208
Мы с вами добрались до второго
блока нашей лабораторной работы

00:18:24.232 --> 00:18:30.360
и здесь мы будем создавать
дополнительные уровни безопасности.

00:18:30.360 --> 00:18:36.625
Согласно бизнес-кейсу, София и Нихил
рассказали свои обновления в облачной

00:18:36.649 --> 00:18:42.829
архитектуре другу Матео, он был
впечатлен и после того как выслушал все

00:18:42.853 --> 00:18:49.415
обновления, дополнительно порекомендовал
использовать Network ACL, чтобы еще

00:18:49.439 --> 00:18:56.440
больше обезопасить IT-архитектуру в
облаке AWS, что мы с вами сейчас и сделаем.

00:18:56.440 --> 00:19:00.120
Самым первым нам
необходимо создать Network ACL.

00:19:00.120 --> 00:19:06.179
Этот Network ACL является кастомным, мы
с вами помним, что дефолтный Network ACL

00:19:06.203 --> 00:19:12.800
разрешает весь входящий и исходящий
трафик и по умолчанию привязывается к subnet-ам.

00:19:12.800 --> 00:19:20.302
В случае, когда мы создаем Custom Network
ACL, то у него по умолчанию доступ входящий и

00:19:20.326 --> 00:19:28.440
исходящий закрыт и нам необходимо создавать
дополнительные правила, чтобы доступ разрешать.

00:19:28.440 --> 00:19:42.680
Нам необходимо назвать наш Custom Network ACL Lab
Network ACL и привязать ее к нашему private subnet.

00:19:42.680 --> 00:19:49.948
Далее нам необходимо для этого
Custom Subnet разрешить весь входящий

00:19:49.972 --> 00:19:57.240
и исходящий трафик и далее уже на
11 задании мы будем его тестировать.

00:19:57.240 --> 00:20:03.088
Чтобы его протестировать,
нам необходимо в public subnet

00:20:03.112 --> 00:20:08.960
создать тестовыйEC2 Instance
со следующими параметрами.

00:20:08.960 --> 00:20:18.988
Как AMI использовать Amazon Linux 2 AMI (HVM), как
Instance Type у нас будет t2.micro, название будет

00:20:19.012 --> 00:20:29.040
Test Instance и в Security группе этого инстанса
необходимо разрешить весь входящий ICMP IPv4 трафик.

00:20:29.040 --> 00:20:37.440
Это как раз таки тот трафик, который приходит
после запуска команды ping в командной строке.

00:20:37.440 --> 00:20:46.474
Нам необходимо сохранить приватный
IP адрес этого тестового Instance, как

00:20:46.498 --> 00:20:55.531
только он создастся и мы возвращаемся
к командной строке, где у нас текущее

00:20:55.555 --> 00:21:03.906
подключение до приватного Instance
в private subnet и мы здесь будем

00:21:03.930 --> 00:21:13.280
пробовать через ping обратиться к
приватному IP адресу тестового Instance.

00:21:13.280 --> 00:21:22.759
Вы увидите, что ping проходит, пакеты
обмениваются и это говорит о том, что

00:21:22.783 --> 00:21:33.160
приватный инстанс может обратиться к
нашему тестовому инстансу в public subnet.

00:21:33.160 --> 00:21:38.447
Теперь нам необходимо произвести
изменения в нашем кастомном Network

00:21:38.471 --> 00:21:43.600
ACL, напоминаю, что этот Network
ACL привязан к private subnet.

00:21:43.600 --> 00:21:51.320
Здесь нам необходимо запретить весь
ICMP IPv4 трафик для конкретного IP адреса.

00:21:51.320 --> 00:21:55.504
Когда нам нужно указать один
IP адрес, то используется CIDR

00:21:55.528 --> 00:21:59.640
блок размера 32, который в
себе содержит один IP адрес.

00:21:59.640 --> 00:22:02.535
Обратите внимание, что
очередность этого правила должна

00:22:02.559 --> 00:22:05.400
быть выше, чем другие
правила, чтобы оно сработало.

00:22:05.400 --> 00:22:12.668
В Terminal, где у нас
отрабатывает команда ping, давайте

00:22:12.692 --> 00:22:19.960
его не будем закрывать и
пусть оно отправляет пакеты.

00:22:19.960 --> 00:22:27.800
Как только мы сохраним изменения в Network ACL,
 вы увидите, что пакеты перестали обмениваться.

00:22:27.800 --> 00:22:32.371
Это говорит о том, что мы
запретили доступ через Network

00:22:32.395 --> 00:22:36.800
ACL и добавили дополнительный
уровень безопасности.

00:22:36.800 --> 00:22:47.746
Вы увидите, что у нас появился
кастомный Network ACL, который

00:22:47.770 --> 00:23:00.360
запрещает доступ специально для
тестового инстанса в public subnet.

00:23:00.360 --> 00:23:05.068
После того, как это все сработало
корректно, это говорит о том, что вы все

00:23:05.092 --> 00:23:09.800
настройки ввели правильно, мы добрались
до самого последнего блока заданий.

00:23:09.800 --> 00:23:18.106
И здесь необходимо на основной странице
лабораторной работы нажать на кнопку Details,

00:23:18.130 --> 00:23:26.040
далее в выпадающем меню нажать на
ссылку Access the multiple choice questions.

00:23:26.040 --> 00:23:31.480
Там содержится 6 вопросов.
Давайте пройдемся по каждому из вопросов.

00:23:31.480 --> 00:23:47.760
Первый вопрос звучит следующим образом.
Какая цель у Internet gateway в public subnet?

00:23:47.760 --> 00:23:54.906
Далее второй вопрос.
Что дает возможность инстансу из private

00:23:54.930 --> 00:24:01.480
subnet подключаться в
интернет и скачивать обновления?

00:24:01.480 --> 00:24:08.960
Третий вопрос. Может ли инстанс из private
subnet напрямую подключаться в интернет?

00:24:08.960 --> 00:24:15.069
Четвертый вопрос. Почему мы создали 
два отдельных ключа для инстанса из

00:24:15.093 --> 00:24:21.640
private subnet и для инстанса из
public subnet, а именно для bastion host?

00:24:21.640 --> 00:24:28.781
Пятый вопрос. Может ли bastion
host успешно запустить команду ping и

00:24:28.805 --> 00:24:36.480
получить ответ от инстанса из private subnet?
Это очень хороший вопрос.

00:24:36.480 --> 00:24:51.428
Шестой вопрос. Какое правило в security group
инстанса в private subnet дает разрешение входящему

00:24:51.452 --> 00:25:06.400
трафику команды ping, который мы отправили из
этого инстанса тестовому инстансу в public subnet?

00:25:06.400 --> 00:25:13.356
На странице с вопросами у вас будут
варианты, вы можете посмотреть на них и будут

00:25:13.380 --> 00:25:21.120
заведомо неверные варианты ответов и методами
исключения попытаться ответить правильно.

00:25:21.120 --> 00:25:29.488
Обратите внимание, что сделанные действия в
рамках AWS Management Console, что вопросы

00:25:29.512 --> 00:25:37.880
тестовые, они могут быть пересданы любое
количество раз, поэтому экспериментируйте.

00:25:37.880 --> 00:25:43.768
Чтобы сдать задание, необходимо на
главной странице лабораторной работы нажать

00:25:43.792 --> 00:25:49.680
на кнопку Submit и подтвердить то, что
вы запускаете скрипт автооценивания.

00:25:49.680 --> 00:25:54.572
Так как лабораторная работа объемная,
необходимо будет некоторое время подождать,

00:25:54.596 --> 00:26:00.040
когда оно успешно отработает и в правой
части страницы вы увидите набранные вами баллы.

00:26:00.040 --> 00:26:07.888
Если вы не добрали максимальный балл, то вы
всегда можете посмотреть на каком шаге, в каком

00:26:07.912 --> 00:26:15.760
задании у вас не хватает баллов, вернуться к
этому заданию и попробовать его сделать еще раз.

00:26:15.760 --> 00:26:22.048
Как только вы внесете необходимые
изменения, вы можете еще раз запустить

00:26:22.072 --> 00:26:28.360
скрипт автооценивания и обновить
свои баллы в рамках лабораторной работы.

00:26:28.360 --> 00:26:34.400
Как только вы закончили работу, вам
необходимо правильно выйти со всех систем.

00:26:34.400 --> 00:26:40.620
В первую очередь это касается AWS Management
Console, необходимо будет разлогиниться.

00:26:40.620 --> 00:26:47.131
Далее на главной странице лабораторной работы
необходимо нажать на кнопку End lab, подтвердить,

00:26:47.155 --> 00:26:53.600
что вы завершаете лабораторную работу и уже
после этого закрывать страницу с лабораторной работы.

00:26:53.600 --> 00:26:59.080
На этом мы завершаем сессию
обзора лабораторной работы.

00:26:59.080 --> 00:27:03.200
Это очень интересная лабораторная работа, 
очень надеюсь, что она вам понравится.

00:27:03.200 --> 00:27:10.960
Если будут вопросы, задавайте. Спасибо за внимание,
увидимся с вами на следующих наших активностях.