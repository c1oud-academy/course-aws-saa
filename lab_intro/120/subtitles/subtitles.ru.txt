Добрый день, уважаемые студенты! Рад вас видеть на очередной сессии обзора лабораторной работы. Тема сегодняшней лабораторной работы - это настройка networking для нашего бизнес кейса, то есть для кафе. Эта лабораторная работа является Challenge Lab, то есть будет даваться минимальное количество инструкции и нам необходимо самостоятельно найти решение. Также я бы хотел отметить, что сама лабораторная работа достаточно объемная и я надеюсь, вам она понравится и будет интересно ее выполнять. Итак, давайте начнем. Начинаем мы с вами лабораторную работу с основной страницы курса Cloud Architecting в AWS Academy. Нам необходимо воспользоваться навигационным меню слева и перейти к модулю. Здесь нас интересует шестой модуль, а именно ссылка на лабораторную работу Challenge Lab Creating VPC Networking Environment for the Cafe. Как только вы окажетесь на главной странице лабораторной работы, необходимо будет скрыть окно Terminal, чтобы оно нам не мешало и перепроверить заголовок лабораторной работы. Если все сделано, мы переходим к нашему бизнес кейсу. Согласно нему, София и Нихил недавно только улучшили архитектуру в облаке AWS и перенесли базу данных в EC2 Instance в Managed Service Amazon RDS. Это улучшило работу всей инфраструктуры, разгрузило ребят от административных работ, связанных с поддержкой базы данных, и также они перенесли ресурсы базы данных из public subnet в private subnet, его еще больше обезопасив. Они на днях встретились с Матео. Матео является системным администратором в AWS и он выслушал обновление наших главных героев и посоветовал еще дальше улучшать архитектуру. Он предложил настроить корректно VPC, создать все необходимые ее компоненты и также создать все необходимые ресурсы для удаленного доступа с административными правами. Также необходимо будет добавить дополнительные уровни безопасности, чтобы это решение работало корректно и злоумышленники не могли его взломать. В рамках лабораторной работы мы с вами научимся создавать VPC и ее основные компоненты. Далее научимся создавать ресурсы, которые позволяют безопасно, удаленно подключаться к ресурсам из private subnet. Также настроим дополнительные уровни безопасности, чтобы еще больше обезопасить периметр нашего VPC. Вы видите на слайде, какой станет архитектура в облаке AWS после выполнения лабораторной работы. На выполнение этой лабораторной работы рекомендуется выделить 90 минут. Если этого времени будет недостаточно, вы всегда можете не нажимая кнопку End lab нажать на кнопку Start lab и обнулить счетчик. Напоминаю, что создается временный AWS аккаунт, специально предназначенный для лабораторной работы и все сервисы и компоненты, не относящиеся к лабораторной работе могут быть недоступны. А все те сервисы и компоненты, которые используются в лабораторной работе, они гарантированно будут доступны. Для того, чтобы начать лабораторную работу необходимо нажать на кнопку Start lab, подтвердить то, что мы начинаем лабораторную работу и дождаться завершения создания временного AWS аккаунта. Вы увидите статус, что он готов к работе. После чего вы можете нажатием кнопки AWS перейти во временный AWS аккаунт и начать выполнять лабораторную работу. Мы с вами добрались до первого блока задания и в рамках бизнес кейса нам необходимо создать все необходимые компоненты внутри VPC, начиная от bastion host до subnet, которые еще не созданы. Далее нам необходимо сделать таким образом, чтобы bastion host был доступен из интернета. После этого создать все необходимое, чтобы из private subnet можно было подключаться безопасно к интернету, но чтобы доступ к ресурсам в private subnet был только из EC2 инстанса из public subnet. В нашем случае это bastion host. Итак, давайте начнем. Первое задание. В рамках первого задания нам необходимо создать public subnet. Обратите внимание, что при просмотре списка существующих VPC во временном AWS аккаунте VPC с названием Lab VPC уже было создано за нас. Мы его будем использовать в дальнейшем. Следующий шаг. Необходимо создать public subnet. Для этого мы переходим на списки subnet-ов и нажмем на соответствующую кнопку для создания нового subnet. Как Name укажем Public subnet, как VPC выберем Lab VPC, как Availability Zone необходимо выбрать ту, которая заканчивается на a. В случае, если временный AWS аккаунт был создан в регионе North Virginia, то как availability зону необходимо будет выбрать us-east-1a. Как CIDR block укажем следующее значение и создадим наш subnet. Далее нам необходимо создать Internet gateway и привязать ее к нашему VPC. Следующим шагом нам необходимо настроить route table нашего public subnet так, чтобы интернет трафик как target использовал наш Internet gateway. После этого необходимо будет route table привязать к нашему public subnet в случае, если был создан кастомный route table. А в случае, если мы использовали и изменили default route table, то привязывать нет необходимости, оно уже автоматически привязано ко всем subnet внутри VPC, где мы явно не указывали кастомный route table. Во второй задаче нам необходимо создать bastion host. Bastion host мы будем создавать в public subnet, это тот EC2 инстанс, к которому мы будем через интернет подключаться по SSH. Давайте рассмотрим какие параметры необходимо указать при создании этого EC2 инстанса. Как операционную систему мы используем Amazon Linux, версию Amazon Linux 2 AMI (HVM). Instance type должен быть t2.micro. Далее в признаке Auto-assign public IP необходимо будет галочку убрать, чтобы публичный IP адрес не присвоился. Почему это нужно мы сейчас посмотрим и дойдем чуть дальше в следующем шаге. Как Name необходимо указать Bastion host и также необходимо создать Security group с названием Bastion host SG и по нему разрешить только inbound traffic по 22 порту, то есть это SSH трафик, который разрешает inbound трафик только для нашего IP адреса. Как private key будем использовать vockey. Теперь на третьем задании нам необходимо будет создать Elastic IP адрес. Как вы помните Bastion host это тот инстанс, к которому подключаются удаленно все сотрудники компании и оно является единой точкой входа. Поэтому очень важно, чтобы ее IP адрес был известен всем и не менялся. Если бы мы создали для инстанса публичный IP адрес, то при пересоздании bastion host у него публичный IP адрес мог бы смениться и вернуть на предыдущий мы бы никак не смогли. Таким образом сотрудники, у которых было записано старый IP адрес bastion host не смогли бы подключиться к нашей инфраструктуре в облаке. Поэтому правильным решением будет зафиксировать публичный IP адрес, а для этого мы создаем Elastic IP адрес. Как только мы ее создадим, нам необходимо будет ее привязать к нашему bastion host. На четвертом задании нам необходимо проверить соединение к bastion host. Для этого необходимо на странице задания лабораторной работы нажать на кнопку Details и в выпадающем списке выбрать возле надписи AWS кнопку Show. Здесь у вас есть возможность скачать приватный ключ в двух вариантах. В случае если вы работаете на Windows операционной системе вам необходимо скачать ключ с окончанием PPK. Если же вы работаете на Linux операционной системе либо macOS, в этом случае вам необходимо скачать ключ с расширением PEM. Как только вы скачали, вы можете закрыть это окно и попробовать подключиться к bastion host. Как подключаться к удаленному EC2 инстансу мы не раз проделывали в лабораторных работах и Демо активностях, поэтому здесь мы не будем останавливаться на этом подробно. На пятом задании нам необходимо создать private subnet. Параметры private subnet как Name укажем Private subnet, Availability zone укажем ту, которую указывали для Public subnet, CIDR блок укажем следующее значение и на этом создадим private subnet. Но для того чтобы предоставить возможность выхода в интернет безопасно из private subnet нам необходимо создать NAT gateway. NAT gateway создается в public subnet и напоминаю, что для NAT gateway в связке необходимо создать Elastic IP адрес. После чего в route table нашего private subnet необходимо добавить routing rule, который будет направлять интернет трафик на наш NAT gateway. В рамках задания лабораторной работы нам необходимо создать route table с названием private route table. Это очень важно, так как при автооценивании нашей выполненной работы это может также учитываться и сказаться на ваших баллах, поэтому необходимо в точности соблюдать значение, которое мы должны вводить для наших ресурсов. На седьмом задании мы должны будем создать EC2 instance в private subnet для последующей проверки подключения из bastion host в EC2 instance из private subnet. Давайте рассмотрим какие параметры необходимо ввести, как AMI используем Amazon Linux2 AMI (HVM), как Instance type используем t2.micro, как имя укажем Private instance и в security группе откроем inbound трафик только по 22 порту для security группы bastion host. Также обратите внимание, что для инстанса в private subnet мы будем создавать новый private key. Давайте его назовем vockey2. Мы добрались до восьмого задания и это последний шаг перед тем, как мы начнем все нами созданное тестировать. Здесь нам необходимо настроить возможность подключения к bastion host, а также из bastion host к EC2 instance в private subnet, не сохраняя приватный ключ в bastion host. Давайте перефразирую. Когда мы подключаемся через интернет по протоколу SSH к любому удаленному серверу, мы локально у себя на компьютере храним приватный ключ. Когда мы подключаемся через PuTTY, мы указываем в настройках программы, где находится этот ключ и во время подключения указываем публичный IP-адрес и вместе с ключом подключаемся к этому инстансу. Теперь следующий шаг, когда мы подключились к этому инстансу, в нашем случае это bastion host, нам необходимо еще раз дальше подключиться также по SSH к другому EC2 инстансу, но этот EC2 инстанс находится в private subnet. Поэтому чтобы это сделать, нам необходимо чтобы в bastion host у нас был приватный ключ для подключения ко второму EC2 инстансу. Это не очень хорошо и небезопасно, так как все пользователи, которые будут подключаться к bastion host под тем же пользователем, они будут возможно видеть ключи, которые они не должны были видеть. Поэтому это не самый хороший подход с точки зрения безопасности и есть готовое решение, так называемый SSH passthrough. Идея в том, что вы храните локально все необходимые ключи и при подключении последовательно к нескольким инстансам по SSH, эти ключи ищатся не из инстанса, откуда вы подключаетесь, а они подтягиваются из локального компьютера, где было инициировано самое первое SSH соединение. Что для этого необходимо сделать? Для пользователей операционной системы Windows необходимо перейти по ссылке и скачать программу Pageant. Эта программа также разрабатывается командой, которая создала программу PuTTY. Как только мы ее загрузили, необходимо будет ее установить и запустить. Как только вы ее запустите, там достаточно простой интерфейс и необходимо добавить два наших ключа vockey от Bastion Host и vockey2 от инстанса из private subnet в эту программу. Обратите внимание, что ваши private ключи должны быть с расширением .PPK. Далее при подключении через PuTTY необходимо будет сделать дополнительную настройку, а именно перейти по пути настройки Connection > SSH > Auth и для признака Allow agent forwarding поставить галочку. Также не забудьте в той же секции заполнить секцию Credentials, а именно поле Private key file for authentication. Здесь необходимо выбрать private key для подключения к bastion host. В нашем случае это vockey. Как только все мы это сделаем, нам необходимо использовать публичный IP-адрес нашего bastion host и уже можем пробовать подключаться. Для пользователей с операционной системой macOS или Linux необходимо будет ввести последовательно следующие команды, которые вы видите в задании. Идея такая же, вы сохраняете ключи в определенном месте в настройках и далее при подключении с дополнительным признаком создаете SSH соединение к bastion host. Теперь нам необходимо подключиться к bastion host. Как только подключились, от bastion host необходимо подключиться к EC2 инстансу в private subnet. Как это сделать вы уже знаете, поэтому подробнее останавливаться здесь не буду. Как только мы успешно подключились к EC2инстансу в private subnet, давайте проверим есть ли у этого инстанса выход в интернет. Для этого можете вести простейшую команду ping и IP-адрес со всеми восьмерками, в случае если вы увидите обмен пакетами и этот обмен пакетами успешен, то это говорит о том, что выход в интернет у этого инстанса есть и мы все настройки ввели корректно. Мы с вами добрались до второго блока нашей лабораторной работы и здесь мы будем создавать дополнительные уровни безопасности. Согласно бизнес-кейсу, София и Нихил рассказали свои обновления в облачной архитектуре другу Матео, он был впечатлен и после того как выслушал все обновления, дополнительно порекомендовал использовать Network ACL, чтобы еще больше обезопасить IT-архитектуру в облаке AWS, что мы с вами сейчас и сделаем. Самым первым нам необходимо создать Network ACL. Этот Network ACL является кастомным, мы с вами помним, что дефолтный Network ACL разрешает весь входящий и исходящий трафик и по умолчанию привязывается к subnet-ам. В случае, когда мы создаем Custom Network ACL, то у него по умолчанию доступ входящий и исходящий закрыт и нам необходимо создавать дополнительные правила, чтобы доступ разрешать. Нам необходимо назвать наш Custom Network ACL Lab Network ACL и привязать ее к нашему private subnet. Далее нам необходимо для этого Custom Subnet разрешить весь входящий и исходящий трафик и далее уже на 11 задании мы будем его тестировать. Чтобы его протестировать, нам необходимо в public subnet создать тестовыйEC2 Instance со следующими параметрами. Как AMI использовать Amazon Linux 2 AMI (HVM), как Instance Type у нас будет t2.micro, название будет Test Instance и в Security группе этого инстанса необходимо разрешить весь входящий ICMP IPv4 трафик. Это как раз таки тот трафик, который приходит после запуска команды ping в командной строке. Нам необходимо сохранить приватный IP адрес этого тестового Instance, как только он создастся и мы возвращаемся к командной строке, где у нас текущее подключение до приватного Instance в private subnet и мы здесь будем пробовать через ping обратиться к приватному IP адресу тестового Instance. Вы увидите, что ping проходит, пакеты обмениваются и это говорит о том, что приватный инстанс может обратиться к нашему тестовому инстансу в public subnet. Теперь нам необходимо произвести изменения в нашем кастомном Network ACL, напоминаю, что этот Network ACL привязан к private subnet. Здесь нам необходимо запретить весь ICMP IPv4 трафик для конкретного IP адреса. Когда нам нужно указать один IP адрес, то используется CIDR блок размера 32, который в себе содержит один IP адрес. Обратите внимание, что очередность этого правила должна быть выше, чем другие правила, чтобы оно сработало. В Terminal, где у нас отрабатывает команда ping, давайте его не будем закрывать и пусть оно отправляет пакеты. Как только мы сохраним изменения в Network ACL, вы увидите, что пакеты перестали обмениваться. Это говорит о том, что мы запретили доступ через Network ACL и добавили дополнительный уровень безопасности. Вы увидите, что у нас появился кастомный Network ACL, который запрещает доступ специально для тестового инстанса в public subnet. После того, как это все сработало корректно, это говорит о том, что вы все настройки ввели правильно, мы добрались до самого последнего блока заданий. И здесь необходимо на основной странице лабораторной работы нажать на кнопку Details, далее в выпадающем меню нажать на ссылку Access the multiple choice questions. Там содержится 6 вопросов. Давайте пройдемся по каждому из вопросов. Первый вопрос звучит следующим образом. Какая цель у Internet gateway в public subnet? Далее второй вопрос. Что дает возможность инстансу из private subnet подключаться в интернет и скачивать обновления? Третий вопрос. Может ли инстанс из private subnet напрямую подключаться в интернет? Четвертый вопрос. Почему мы создали два отдельных ключа для инстанса из private subnet и для инстанса из public subnet, а именно для bastion host? Пятый вопрос. Может ли bastion host успешно запустить команду ping и получить ответ от инстанса из private subnet? Это очень хороший вопрос. Шестой вопрос. Какое правило в security group инстанса в private subnet дает разрешение входящему трафику команды ping, который мы отправили из этого инстанса тестовому инстансу в public subnet? На странице с вопросами у вас будут варианты, вы можете посмотреть на них и будут заведомо неверные варианты ответов и методами исключения попытаться ответить правильно. Обратите внимание, что сделанные действия в рамках AWS Management Console, что вопросы тестовые, они могут быть пересданы любое количество раз, поэтому экспериментируйте. Чтобы сдать задание, необходимо на главной странице лабораторной работы нажать на кнопку Submit и подтвердить то, что вы запускаете скрипт автооценивания. Так как лабораторная работа объемная, необходимо будет некоторое время подождать, когда оно успешно отработает и в правой части страницы вы увидите набранные вами баллы. Если вы не добрали максимальный балл, то вы всегда можете посмотреть на каком шаге, в каком задании у вас не хватает баллов, вернуться к этому заданию и попробовать его сделать еще раз. Как только вы внесете необходимые изменения, вы можете еще раз запустить скрипт автооценивания и обновить свои баллы в рамках лабораторной работы. Как только вы закончили работу, вам необходимо правильно выйти со всех систем. В первую очередь это касается AWS Management Console, необходимо будет разлогиниться. Далее на главной странице лабораторной работы необходимо нажать на кнопку End lab, подтвердить, что вы завершаете лабораторную работу и уже после этого закрывать страницу с лабораторной работы. На этом мы завершаем сессию обзора лабораторной работы. Это очень интересная лабораторная работа, очень надеюсь, что она вам понравится. Если будут вопросы, задавайте. Спасибо за внимание, увидимся с вами на следующих наших активностях.