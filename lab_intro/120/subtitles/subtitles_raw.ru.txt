 Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной сессии обзора лабораторной работы. Тема сегодняшней лабораторной работы это настройка нетворкинга для нашего бизнес кейса, то есть для кафе. Эта лабораторная работа является Challenge Lab, то есть будет даваться минимальное количество инструкции и нам необходимо самостоятельно найти решение. Также я бы хотел отметить, что сама лабораторная работа достаточно объемная и я надеюсь, вам она понравится и будет интересно ее выполнять. Итак, давайте начнем. Начинаем мы с вами лабораторную работу с основной страницы курса Cloud Architecting в AWS Academy. Нам необходимо воспользоваться навигационным меню слева и перейти к модулю. Здесь нас интересует шестой модуль, а именно ссылка на лабораторную работу Challenge Lab Creating VPC Networking Environment for the Cafe. Как только вы окажетесь на главной странице лабораторной работы, необходимо будет скрыть окно терминала, чтобы оно нам не мешало и перепроверить заголовок лабораторной работы. Если все сделано, мы переходим к нашему бизнес кейсу. Согласно нему, София и Нихилл недавно только улучшили архитектуру в облаке AWS и перенесли базу данных в EC2 Instance в Managed Service Amazon RDS. Это улучшило работу всей инфраструктуры, разгрузило ребят от административных работ, связанных с поддержкой базы данных, и также они перенесли ресурсы базы данных из паблик сабнета в private subnet, его еще больше обезопасив. Они на днях встретились с Матео. Матео является системным администратором в AWS и он выслушал обновление наших главных героев и посоветовал еще дальше улучшать архитектуру. Он предложил настроить корректно VPC, создать все необходимые ее компоненты и также создать все необходимые ресурсы для удаленного доступа с административными правами. Также необходимо будет добавить дополнительные уровни безопасности, чтобы это решение работало корректно и злоумышленники не могли его взломать. В рамках лаборторной работы мы с вами научимся создавать VPC и ее основные компоненты. Далее научимся создавать ресурсы, которые позволяют безопасно, удаленно подключаться к ресурсам из private subnet. А также мы настроим дополнительные уровни безопасности, чтобы еще больше обезопасить периметр нашего VPC. Вы видите на слайде, какой станет архитектура в облаке AWS после выполнения лабораторной работы. На выполнение этой лабораторной работы рекомендуется выделить 90 минут. Если этого времени будет недостаточно, вы всегда можете не нажимая кнопку end lab нажать на кнопку start lab и обнулить счетчик. Также здесь нам напоминают о том, что создается временный AWS аккаунт, специально предназначенный для лабораторной работы и все сервисы и компоненты, не относящиеся к лабораторной работе могут быть недоступны. А все те сервисы и компоненты, которые используются в лабораторной работе, они гарантированно будут доступны. Для того, чтобы начать лабораторную работу необходимо нажать на кнопку start lab, подтвердить то, что мы начинаем лабораторную работу и дождаться завершения создания временного AWS аккаунта. Вы увидите статус, что он готов к работе. После чего вы можете нажатием кнопки AWS перейти во временный AWS аккаунт и начать выполнять лабораторную работу. Мы с вами добрались до первого блока задания и в рамках бизнес кейса нам необходимо создать все необходимые компоненты внутри VPC, начиная от bastion-host до subnet, которые еще не созданы. Далее нам необходимо сделать таким образом, чтобы bastion-host был доступен из интернета. После этого создать все необходимое, чтобы из private subnet можно было подключаться безопасно к интернету, но чтобы доступ к ресурсам в private subnet был только из этого instance из public subnet. В нашем случае это bastion-host. Итак, давайте начнем. Первое задание. В рамках первого задания нам необходимо создать public subnet. Обратите внимание, что при просмотре списка существующих VPC в временном AWS аккаунте VPC с названием labvpc уже было создано за нас. Мы его будем использовать в дальнейшем. Следующий шаг. Нам необходимо создать public subnet. Для этого мы переходим на списку сабнетов и нажмем на соответствующую кнопку для создания нового сабнета. Как name укажем public subnet, как VPC выберем labvpc, как availability зону необходимо выбрать ту, которая заканчивается на A. В случае, если временный AWS аккаунт был создан в регионе Норс-Сверджиния, то как availability зону необходимо будет выбрать US-East-1A. Как cidre-block укажем следующее значение и создадим наш сабнет. Далее нам необходимо создать интернет-гейтвей и привязать ее к нашему VPC. Следующим шагом нам необходимо настроить road table нашего public subnet так, чтобы интернет трафик как target использовал наш интернет-гейтвей. После этого необходимо будет road table привязать к нашему public subnet в случае, если был создан кастомный road table. А в случае, если мы использовали и изменили дефолт road table, то привязывать нет необходимости, оно уже автоматически привязано ко всем сабнетам внутри VPC, где мы явно не указывали кастомный road table. Во второй задаче нам необходимо создать bastion-host. Bastion-host мы будем создавать в public subnet, это тот EC2-инстанц, которому мы будем через интернет подключаться по SSH. Давайте рассмотрим какие параметры необходимо указать при создании этого EC2-инстанца. Как операционную систему мы используем Amazon Linux, версию Amazon Linux 2 AMA HVM. Снайп должен быть титул micro. Далее к признаке auto assign public IP необходимо будет галочку убрать, чтобы публичный IP адрес не присвоился. Почему это нужно мы сейчас посмотрим и дойдем чуть дальше в следующем шаге. Как имя необходимо указать bastion-host и также необходимо создать security-группу с названием bastion-hostsg и по нему разрешить только inbound traffic по 22 порту, то есть это SSH трафик, который разрешает inbound трафик только для нашего IP адреса. Как private key будем использовать walkkey. Теперь на третьем задании нам необходимо будет создать elastic IP адрес. Как вы помните bastion-hostsg это тот инстанс, к которому подключаются удаленно все сотрудники компании и оно является единой точкой входа. Поэтому очень важно, чтобы ее IP адрес был известен всем и не менялся. Если бы мы создали для инстанца публичный IP адрес, то при пересоздании по тем или иным причинам bastion-hostsg у него публичный IP адрес мог бы смениться и вернуть на предыдущий мы бы никак не смогли. Таким образом сотрудники, у которых было записано старый IP адрес bastion-hostsg не смогли бы подключиться к нашей инфраструктуре в облаке. Поэтому правильным решением будет зафиксировать публичный IP адрес, а для этого мы создаем эластика IP адрес. Как только мы ее создадим, нам необходимо будет ее привязать к нашему bastion-hostsg. На четвертом задании нам необходимо проверить соединение к bastion-hostsg. Для этого необходимо на странице задания лаборторной работы нажать на кнопку details и в выпадающем списке выбрать возле надписи aws кнопку show. Здесь у вас есть возможность скачать приватный ключ в двух вариантах. В случае если вы работаете на Windows операционной системе вам необходимо скачать ключ с окончанием ppk. Если же вы работаете на Linux операционной системе либо macOS, в этом случае вам необходимо скачать ключ с расширением.pm. Как только вы скачали, вы можете закрыть это окно и попробовать подключиться к bastion-hostsg. Как подключаться к удаленному ICT инстанцу мы не раз проделывали в лаборторных работах и демо активностях, поэтому здесь мы не будем останавливаться на этом подробно. На пятом задании нам необходимо создать private subnet. Параметры private subnet как name укажем private subnet, как availability зону укажем ту, которую указывали для public subnet, как cidr блок укажем следующее значение и на этом мы создадим private subnet. Но для того чтобы предоставить возможность выхода в интернет безопасно из private subnet нам необходимо создать NAT gateway. NAT gateway создается в public subnet и напоминаю, что для NAT gateway в связке необходимо создать elastic IP адрес, после чего в route table нашего private subnet необходимо добавить routing rule, который будет направлять интернет трафик на наш NAT gateway. В рамках задания лаборторной работы нам необходимо создать route table с названием private route table. Это очень важно, так как при автооценивании нашей выполненной работы это может также учитываться и сказаться на вашем бале, поэтому необходимо в точности соблюдать значение, которое мы должны вводить для наших ресурсов. На седьмом задании мы должны будем создать EC2 instance в private subnet для последующей проверки подключения из bastion host в EC2 instance из private subnet. Давайте рассмотрим какие параметры необходимо ввести, как AMI используем AMI-linux2, AMI-HVM как instance type используем t2-micro, как имя укажем private instance и в security группе откроем inbound трафик только по 22 порту для security группы bastion host. Также обратите внимание, что для instance в private subnet мы будем создавать новый private ключ. Давайте его назовем walkk2. Мы добрались до восьмого задания и это последний шаг перед тем, как мы начнем все нами созданное тестировать. Здесь нам необходимо настроить возможность подключения к bastion host, а также из bastion host к EC2 instance в private subnet не сохраняя приватный ключ в bastion host. Давайте перефразирую. Когда мы подключаемся через интернет по протоколу SSH к любому удаленному серверу, мы локально у себя на компьютере храним приватный ключ. Когда мы подключаемся через путь, мы указываем в настройках программы, где находится этот ключ и во время подключения мы указываем публичный IP-адрес и вместе с ключом мы успешно подключаемся к этому инстанцу. Теперь следующий шаг, когда мы подключились к этому инстанцу, в нашем случае это bastion host, нам необходимо еще раз дальше подключиться также по SSH к другому EC2 инстанцу, но этот EC2 инстанц находится в private subnet. Поэтому чтобы это сделать, нам необходимо чтобы в bastion host у нас был приватный ключ для подключения ко второму EC2 инстанцу. Это не очень хорошо и небезопасно, так как все пользователи, которые будут подключаться к bastion host под тем же пользователем, они будут возможно видеть ключи, которые они не должны были видеть. Поэтому это не самый хороший подход с точки зрения безопасности и есть готовое решение, так называемый SSH pass-through. Идея в том, что вы храните локально все необходимые ключи и при подключении последовательно к нескольким инстанцам по SSH, эти ключи ищутся не из инстанца, откуда вы подключаетесь, а они подтягиваются из локального компьютера, где было иницировано самое первое SSH соединение. Что для этого необходимо сделать? Для пользователей операционной системы Windows необходимо перейти по ссылке и скачать программу pageant. Эта программа также разрабатывается командой, которая создала программу пути. Как только мы ее загрузили, необходимо будет его установить и запустить. Как только вы ее запустите, там достаточно простой интерфейс и необходимо добавить два наших ключа wokkey от Pastian Host и wokkey2 от инстанца из private subnet в эту программу. Обратите внимание, что ваши private ключи должны быть с расширением.ppk. Далее при подключении через пути необходимо будет сделать дополнительную настройку, а именно перейти по пути настройки connection, ssh и auth и для признака allow agent forwarding поставить галочку. Также не забудьте в той же секции заполнить секцию credentials, а именно поле private key file for authentication. Здесь нам необходимо выбрать private key для подключения к bastion-host. В нашем случае это wokkey. Как только все мы это сделаем, нам необходимо использовать публичный IP-адрес нашего bastion-host и уже можем пробовать подключаться. Для пользователей с операционной системой macOS или Linux необходимо будет вести последовательно следующие команды, которые вы видите в задании. Идея такая же, вы сохраняете ключи в определенном месте в настройках и далее при подключении с дополнительным признаком создаете ssh соединение к bastion-host. Теперь нам необходимо подключиться к bastion-host. Как только мы подключились от bastion-host, нам необходимо подключиться к EC2-инстанцу в private subnet. Как это сделать вы уже знаете, поэтому подробнее останавливаться здесь не буду. Как только мы успешно подключились к EC2-инстанцу в private subnet, давайте проверим есть ли у этого инстанца выход в интернет. Для этого можете вести простейшую команду pint и IP-адрес со всеми восьмерками, в случае если вы увидите обмен пакетами и этот обмен пакетами успешен, то это говорит о том, что выход в интернет у этого инстанца есть и мы все настройки ввели корректно. Мы с вами добрались до второго блока нашей лабораторной работы и здесь мы будем создавать дополнительные уровни безопасности. Согласно бизнес-кейсу, София и Нихил рассказали свои обновления в облачной архитектуре другу Матео, он был впечатлен и после того как выслушал все обновления, дополнительно порекомендовал использовать Network ACL, чтобы еще больше обезопасить IT-архитектуру в облаке AWS. Что мы с вами сейчас и сделаем. Самый первый нам необходимо создать Network ACL. Этот Network ACL является кастомным, мы с вами помним, что дефолтный Network ACL он разрешает весь входящий и сходящий трафик и по умолчанию привязывается к сабнетам. В случае, когда мы создаем Custom Network ACL, то у него по умолчанию доступ входящий и сходящий закрыт и нам необходимо создавать дополнительные правила, чтобы доступ разрешать. Нам необходимо назвать наш Custom Network ACL Lab Network ACL и привязать ее к нашему private subnet. Далее нам необходимо для этого Custom Subnet разрешить весь входящий и сходящий трафик и далее уже на 11 задании мы будем его тестировать. Чтобы его протестировать, нам необходимо в public subnet создать тестовый C2 Instance со следующими параметрами. Как AMI использовать Amazon Linux to AMI HVM, как Instance Type у нас будет T2 Micro, название будет Test Instance и в Security группе этого Instance необходимо разрешить весь входящий ICMP IPv4 трафик. Это как раз таки тот трафик, который приходит после запуска команды ping в командной строке. Нам необходимо сохранить приватный IP адрес этого тестового Instance, как только он создастся и мы возвращаемся к командной строке, где у нас текущее подключение до приватного Instance в private subnet и мы здесь будем пробовать через ping обратиться к приватному IP адресу тестового Instance. Вы увидите, что ping проходит, пакеты они обмениваются и это говорит о том, что приватный Instance может обратиться к нашему тестовому Instance в public subnet. Теперь нам необходимо произвести изменения в нашем кастомном нейтроке Icel, напоминаю, что этот нейтрок Icel привязан к private subnet. Здесь нам необходимо запретить весь ICMP IPv4 трафик для конкретного IP адреса. Когда нам нужно указать один IP адрес, то используется CIDRO блок размера 32, который в себе содержит один IP адрес. Обратите внимание, что очередность этого правила должна быть выше, чем другие правила, чтобы оно сработало. В терминале, где у нас отрабатывает команда ping, давайте его не будем закрывать и пусть оно отправляет пакеты. Как только мы сохраним изменения в network Icel, вы увидите, что пакеты перестали обмениваться. Это говорит о том, что мы запретили доступ через network Icel и добавили дополнительный уровень безопасности. Вы увидите, что у нас появился кастомный нейтрок Icel, который запрещает доступ специально для тестового инстанца в public subnet. После того, как это все сработало корректно, это говорит о том, что вы все настройки ввели правильно, мы добрались до самого последнего блока заданий. И здесь необходимо на основной странице лабораторной работы нажать на кнопку details, далее в выпадающем меню нажать на ссылку access the multiple choice questions. Там содержится 6 вопросов. Давайте пройдемся по каждому из вопросов. Первый вопрос звучит следующим образом. Какая цель интернет-гейтвея в public subnet? Далее второй вопрос. Что дает возможность инстанцу из private subnet подключаться в интернет и скачивать обновления? Третий вопрос. Может ли инстанц из private subnet напрямую подключаться в интернет? Четвертый вопрос. Почему мы создали два отдельных ключа для инстанца из private subnet и для инстанца из public subnet, а именно для bastion-host? Пятый вопрос. Может ли bastion-host успешно запустить команду ping и получить ответ от инстанца из private subnet? Это очень хороший вопрос. Шестой вопрос. Какое правило в security-группе инстанца в private subnet дает разрешение входящему трафику команды ping, который мы отправили из этого инстанца тестовому инстанцу в public subnet? На странице с вопросами у вас будут варианты, вы можете посмотреть на них и будут заведомо неверные варианты ответов и методами исключения попытаться ответить правильно. Обратите внимание, что сделанные действия в рамках AWS Management Console, что вопросы тестовые, они могут быть перезданы любое количество раз. Поэтому экспериментируйте для того, чтобы сдать задание, необходимо на главной странице лабораторной работы нажать на кнопку submit и подтвердить то, что вы запускаете скрипт автооценивания. Так как лабораторная работа объемная, необходимо будет некоторое время подождать, когда оно успешно отработает и в правой части страницы вы увидите набранные вами баллы. Если вы не добрали максимальный балл, то вы всегда можете посмотреть на каком шаге, в каком задании у вас не хватает баллов, вернуться к этому заданию и попробовать его сделать еще раз. Как только вы внесете необходимые изменения, вы можете еще раз запустить скрипт автооценивания и обновите свои баллы в рамках лабораторной работы. Как только вы закончили работу, вам необходимо правильно выйти со всех систем. В первую очередь это касается AWS Management консоли, необходимо будет разлагиниться. Далее на главной странице лабораторной работы необходимо будет нажать на кнопку end lab, подтвердить, что вы завершаете лабораторную работу и уже после этого закрывать страницу с лабораторной работы. На этом мы завершаем сессию обдора лабораторной работы. Это очень интересная лабораторная работа, очень надеюсь, что она вам понравится. Если будут вопросы, задавайте. Спасибо за внимание, увидимся с вами на следующих наших активностях.
