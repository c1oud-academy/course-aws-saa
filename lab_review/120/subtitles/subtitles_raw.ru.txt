 Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной сессии разбора лабораторной работы. Тема сегодняшней лабораторной работы это создание VPC и всех ее компонентов в рамках нашего бизнес-кейса с кафе. Итак, давайте начнем. Начинаем мы с вами разбор лабораторной работы с основной страницы AWS Management Console. Здесь нам необходимо перейти в сервис VPC. Для этого необходимо воспользоваться строкой поиска сервисов и начать вводить VPC. Самая первая ссылка это та ссылка, которая нам нужна. На основной странице сервиса VPC нам необходимо воспользоваться навигационным меню слева и перейти в раздел существующих VPC. Здесь мы видим, что для нас уже в рамках лабораторной работы была создана лаб VPC, на базе которой мы будем создавать оставшиеся компоненты. Первым делом необходимо создать сабнеты. Для этого также в левом навигационном меню необходимо выбрать пункт Subnets. Здесь необходимо в открывшейся странице вверху справа нажать на кнопку Create Subnet. В самом начале необходимо будет выбрать VPC, в нашем случае Lab VPC. Далее необходимо будет ввести имя сабнету, в нашем случае это Public Subnet. Чуть ниже необходимо будет выбрать Availability Zone. В рамках лабораторной работы должна быть первая Availability Zone и это EOS East 1A. И как CIDR блок для нашего сабнета нам необходимо скопировать значение с задания лабораторной работы и ввести ее в соответствующем поле. После чего необходимо прокрутить до конца страницы и нажать на кнопку Create Subnet. Как только мы нажмем на кнопку Create Subnet, нас направят на страницу со списком всех сабнетов и отфильтрованные по нашему созданному сабнету. Теперь нам необходимо этот Public Subnet сделать фактически Public. Для этого необходимо в левом навигационном меню перейти в пункт Internet Gateways. Здесь мы также создаем новый ресурс, для этого в верхней правой части нажимаем на кнопку Create Internet Gateway. Во время создания интернет гейтвей много входных данных вводить не нужно, достаточно ввести имя этого ресурса, в нашем случае это Lab IGV. То есть сокращенно от Internet Gateway. И после чего можем в нижней части страницы нажать на кнопку Create Internet Gateway. Как только мы это сделаем, нас направят на основную страницу ресурса, в нашем случае Internet Gateway, и вы увидите, что состояние детачит. Также в уведомлении зеленым цветом вы увидите кнопку Attach to VPC. Это значит, что нам необходимо этот Internet Gateway привязать к одному из VPC, в нашем случае это Lab VPC. Давайте нажмем на эту кнопку, нас направят на страницу настройки, здесь необходимо выбрать VPC, в нашем случае Lab VPC. Выбираем ее и в нижней части страницы нажимаем на кнопку Attach Internet Gateway. Как только мы это сделаем, вы увидите соответствующее сообщение, что Internet Gateway был успешно привязан к этому VPC. Также вы увидите, что состояние поменялось на от тачит, и в поле VPC ID стоит ссылка на наш Lab VPC. Теперь нам необходимо настроить Root Table, для этого воспользуемся навигационным меню слева и выберем пункт Root Tables. Здесь, как мы знаем, при создании VPC создается дефолтовый Root Table, мы можем воспользоваться ею и создать необходимые Roots для нашего Public Subnet. В вашем случае может отобразиться несколько Root Tables, вы можете найти правильные, посмотрев на столбец VPC. В VPC ID и через разделитель названия VPC. Давайте ее выберем и в открывшемся блоке страницы с данными этого ресурса необходимо выбрать вкладку Roots и далее нажать на кнопку Edit Roots. На следующей странице нам необходимо будет как destination указать весь интернет и через интернет мы будем выходить через наш интернет Gateway. Как только мы заполним необходимые поля, мы можем сохранить изменения. Как только мы это сделаем, мы увидим соответствующее сообщение, теперь если мы перейдем на страницу субнетов, то увидим наш Public Subnet и все необходимые компоненты для него были созданы. И он не только в названии является Public, а также фактически является Public Subnet, ресурсы созданные в рамках этого Subnet могут выходить в интернет, также из интернета можно обращаться к ресурсам внутри этого Subnet. Следующим шагом нам необходимо создать Bastion Host. Для этого воспользуемся сервисом EC2. Для этого необходимо будет в строке поиска сервисов начать вводить EC2 и перейти по первой ссылке. Как только мы окажемся на основной странице сервиса EC2, необходимо будет нажать на кнопку Launch Instance и нас направить на страницу ввода входных данных. Здесь как Name введем Bastion Host, далее как операционную систему выберем Amazon Linux и как AMI выберем Amazon Linux 2 AMI HVM. Прокрутим чуть ниже, как Instance Type необходимо будет выбрать T2 Micro, если этого варианта нет, выберем T3 Micro. Как Key Pair выберем Voke Key и в секции Network Settings необходимо будет нажать на кнопку Edit. Мы будем вносить некоторые изменения. Как VPC необходимо будет выбрать Lab VPC, как Subnet выбираем Public Subnet, нами созданный. Для поля AutoAssign Public IP необходимо будет его отключить, так как мы будем создавать Elastic IP Address и привязывать к этому инстанцу. Далее необходимо будет выбрать опцию Create Security Group, как имя ввести Bastion Host SG. После чего необходимо будет нажать на кнопку Add Security Group Rule в секции Inbound Security Group Rules и добавить следующее правило. Мы разрешаем SSH трафик, как Source указываем MyIP, вводится мой публичный IP адрес с размером CIDR-блока 32, в котором находится один единственный IP адрес. Как Description необходимо будет указать некоторые значения, чтобы вы в будущем могли идентифицировать для чего оно было создано. В моем случае это SSH и Eljan, имя пользователя. Как только мы введем все эти настройки, мы можем в правой части страницы нажать на кнопку Launch Instance. Нас направит на страницу с сообщением, что создание инстанца было иницировано, мы можем нажать на ссылку с ID-инстанца и перейти на страницу с списком инстанцев и отфильтрованным по нашему инстанцу. Через некоторое время состояние инстанца перейдет в Running и пока это происходит, мы вне зависимости от этого можем продолжить создание следующих ресурсов, это Elastic IP Адрес. Для этого в левом навигационном меню необходимо выбрать опцию Elastic IPs. Здесь необходимо будет нажать на кнопку Allocate Elastic IP Address и на странице для ввода входных данных выбрать опцию Amazon's Pool of IPv4 Addresses. Все остальные настройки оставляем по умолчанию, необходимо прокрутить до конца страницы и нажать на кнопку Allocate. Как только мы это сделаем, нас направят на страницу со списком Elastic IP Адресов, вы также увидите в сообщении, что необходимо этот Elastic IP Адрес ассоциировать с ресурсом. Что мы и сделаем? Один из вариантов это нажать на кнопку Associate this Elastic IP Адрес вверху страницы, либо выбрать этот Elastic IP Адрес. Далее нажать на кнопку Actions и в выпадающем меню выбрать опцию Associate Elastic IP Адрес. Он направит нас на ту же страницу. На странице настроек необходимо будет выбрать, к какому ресурсу мы привязываем это, либо Network Interface, либо Instance. В нашем случае это Instance. Как только мы ее выберем, необходимо будет в поле ниже, где Instance, необходимо будет выбрать наш EC2 Instance с именем Bastion Host. Как только мы это сделаем, можем прокрутить до конца страницы и нажать на кнопку Associate. Как только мы это проделаем, мы получим сообщение о том, что Elastic IP Адрес был успешно привязан к ресурсу, к Instance с таким-то ID. Это значит, что наш EC2 Instance помимо того, что может выходить в интернет, также из интернета он доступен и к нему можно обратиться по статическому IP Адресу. Этот IP Адрес вы видите на нашем экране. Давайте теперь проверим, действительно ли мы можем подключаться к нашему EC2 Instance в Public Subnet. Для этого необходимо скачать правит ключ. Мы возвращаемся на страницу с лаборатурной работы, нажимаем на кнопку Details и в выпадающем списке нажимаем на кнопку Show. В всплывающем окне необходимо будет скачать PPK ключ в случае, если это Windows операционная система, в случае, если вы работаете с Linux операционной системой или MacOS, необходимо будет скачать PEM ключ. Как только вы это сделаете, в случае с Windows операционной системой вам необходимо будет скачать программу PuTTY. Мы неоднократно работали с этой программой на предыдущих наших лаборатурных работах, поэтому она скорее всего уже установлена, необходимо будет ее запустить. Также мы с вами ранее уже подключались с использованием PPK ключа к другим инстансам. И если у вас есть сохраненная сессия, вы можете ее подгрузить, после чего ввести в поле для ввода IP адреса IP адрес нашего Elastic IP ресурса. Если же у вас сессии созданной нет, вы можете в левом навигационном меню программы PuTTY пройти по пути Connection, далее SSH, после чего Auth и Credentials, и там для соответствующего поля указать путь приватного ключа. После чего вы можете вернуться обратно на вкладку Session, самая первая вкладка, и здесь ввести публичный IP адрес нашего EC2 инстанса. Как только мы введем все необходимые настройки, мы можем нажать на кнопку Open. Откроется командная строка и вы увидите подобное сообщение, если вы впервые подключаетесь к этому инстанцу. Так как это нами созданный инстанс и мы доверяем ему, мы можем нажать на кнопку Accept. При всех других случаях необходимо удостовериться, что вы подключаетесь к доверенному инстанцу, и только после этого вы подтверждаете ваше подключение. Как только нажмем на кнопку Accept, необходимо будет указать пользователя, дефолтовые пользователи для Amazon Linux, это EC2 Dash User. Как только мы это введем и нажмем на кнопку Enter, мы увидим сообщение о том, что мы успешно авторизованы и увидим промт для ввода команд. Это значит, что мы успешно смогли удаленно подключиться к нашему EC2 инстанцу в паблик сабнете, используя его публичный IP адрес. Отлично, я вас поздравляю, мы завершили это задание и переходим к следующему. В рамках следующего задания нам необходимо создать private subnet и все необходимые для него компоненты. Для этого мы в строке поиска сервисов начнем вводить VPC и перейдем к соответствующему сервису. Далее воспользуемся левым навигационным меню и выберем пункт Subnets. Здесь необходимо будет создать новый subnet, для этого нажмем на кнопку Create subnet и в открышейся странице для ввода входных данных начнем эти данные вводить. Как VPC ID мы выбираем Lab VPC и как Subnet Name необходимо будет написать private subnet. Прокрутим чуть ниже как availability зону, выбираем первую availability зону в этом регионе, в нашем случае это US East 1A. И как cidre block значение необходимо будет скопировать со страницы задания лабораторной работы, в нашем случае это 10.0.1.0.24. Как только мы введем все эти данные мы можем прокрутить до конца страницы и нажать на кнопку Create subnet. Мы видим что наш subnet был успешно создан, теперь мы создаем следующие компоненты, для этого воспользуемся левым навигационным меню и перейдем к пункту NAT gateways. У нас созданных NAT gateways не имеется, поэтому нажмем на кнопку Create NAT gateway. Здесь в открывшейся странице для ввода входных данных как name введем Lab NAT Gateway. Далее как subnet выберем public subnet, то есть наш NAT Gateway будет находиться в public subnet и будет давать возможность ресурсам из private subnet подключаться к интернету. Прокрутим чуть ниже и мы с вами помним что при создании NAT Gateway необходимо его ассоциировать с публичным статическим IP адресом. И здесь есть возможность путем нажатия на кнопки allocate IP адрес создать ресурс elastic IP и так как мы ее создаем в рамках создания NAT Gateway, то ID elastic IP она впишется в соответствующее поле. После чего нам необходимо будет прокрутить до конца страницы и нажать на кнопку Create NAT Gateway. Как только мы создадим NAT Gateway останется буквально последний шаг это работа с road table. Необходимо будет воспользоваться левым навигационным меню и перейти к пункту road tables. Ранее мы с вами использовали дефолтовый road table для привязки ее к public subnet. Сейчас нам необходимо создать отдельный road table для того чтобы привязать его к private subnet. Итак давайте нажмем на кнопку Create road table в открывшейся странице для ввода входных данных нам необходимо ввести имя private road table и как VPC выбрать Lab VPC. После чего мы можем нажать на кнопку Create road table. Наш road table создастся и мы перейдем на основную страницу ресурса. Здесь во вкладке roads увидим что у нас только один единственный дефолтовый rule который помогает общаться с ресурсом внутри VPC. Нам необходимо нажать на кнопку Edit roads и здесь необходимо будет добавить новый road. Как destination необходимо указать обозначение интернета это все нули слеш ноль. Далее как target указать NAT gateway то есть ресурсы находящиеся в private subnet будут подключаться к интернету через NAT gateway. А NAT gateway у нас находится в public subnet. Как только мы заполним эти два поля мы можем нажать на кнопку Save changes. Отлично на этом мы почти подготовили наш road table. Не забывайте что road table это независимый отдельный ресурс и если вы работаете с кастомным road table необходимо явно привязать его к subnet. Ранее нам не пришлось привязывать road table к subnet так как это был дефолтовый road table и дефолтовый road table он привязывается ко всем subnet которые создаются в рамках VPC. В нашем случае мы создали кастомный road table и здесь необходимо привязать его явно к нашему private subnet. Для этого необходимо перейти во вкладку subnet associations и здесь нажать на кнопку edit subnet associations. Нас направят на страницу с subnet здесь отображаются все subnets доступные для нас в рамках VPC. Вы увидите что есть public subnet и private subnet. Оба они привязаны к дефолтовому road table вы это видите в соответствующем столбце это последний столбец в рамках этой небольшой таблицы. На этой странице нам необходимо будет выбрать private subnet и нажать на кнопку save associations. Что произойдет? Мы с вами помним что subnet может быть ассоциирован только с одним road table в один момент времени тогда как один road table может использоваться в нескольких subnet. Поэтому привязка private subnet к дефолтовому road table она удалится и создается новая связка private subnet с кастомным road table. Отлично как только мы это сделали мы можем в списке subnet associations увидеть наш private subnet. Также увидим соответствующее сообщение о том что road table с таким то id был успешно привязан к нашему private subnet. Мы произвели все необходимые настройки теперь необходимо проверить все ли корректно работает и есть ли возможность подключаться из интернета к ресурсам находящимся в private subnet. Для этого необходимо создать instance переходим к сервису EC2 далее на основной странице сервиса EC2 нажимаем на кнопку launch instance и начинаем вводить входные данные. Как name указываем private instance далее выбираем как операционную систему amazon linux как AMI выбираем amazon linux to AMI HVM. Как тип instance выбираем t2 micro и в секции приватного ключа нам необходимо будет создать новый. Для этого нажимаем на кнопку create new key pair указываем отличное от предыдущего приватного ключа имя пусть это будет wok2 и необходимо будет выбрать правильный формат. Напоминаю что если вы работаете с windows операционной системой вам необходимо будет выбрать формат ppk он подходит для программы пути. Если же вы работаете с mac os либо с linux операционной системой вам необходимо выбрать формат pem. Отлично выбрали формат ввели имя теперь необходимо нажать на кнопку create key pair. Как только вы ее нажмете вам будет предложено сохранить приватный ключ на локальном компьютере. Это единственный кейс когда вы этот приватный ключ можете скачать поэтому сохраняем ее. Далее следующей секции настройках сети необходимо будет выбрать labvpc как subnet выбираем private subnet и чуть ниже нам необходимо будет выбрать опцию create security group. Мы создаем новую security группу нам необходимо будет в секции inbound security group rules добавить новый rule. Здесь мы указываем ssh traffic как source type указываем custom и в source указываем security группу нашего bastion host. Это значит что только subnet которым привязана эта security группа может быть использована как инициатор подключения по ssh. Только ресурсы из public subnet смогут подключаться к этому инстанцу. Как description давайте укажем bastion host sg чтобы легче было понимать для чего этот rule был создан. Отлично мы ввели все необходимые настройки теперь мы можем правой части экрана нажать на кнопку launch instance. Пока наш instance будет создаваться давайте попробуем ответить на следующий вопрос. У нас есть созданный bastion host в public subnet к нему мы уже можем подключаться мы это проверили. Теперь мы в private subnet создаем другой instance и идея в том чтобы подключаться к нему. Мы создали bastion host специально для того чтобы подключаться к ресурсам в private subnet это хорошо. Но представьте как это будет выглядеть для того чтобы подключиться к bastion host мы используем приватный ключ сохраненный локально на нашем компьютере. И с локального компьютера иницируем ssh соединение. Теперь для того чтобы с bastion host иницировать ssh соединение к instance из private subnet нам также на bastion host то есть локально с того места где мы иницируем ssh соединение. Необходимо чтобы был приватный ключ а именно тот ключ который мы создали и после чего у нас получится подключиться к приватному instance. Это не самый лучший вариант с точки зрения безопасности так как bastion host это то место где все сотрудники подключаются к нему а дальше от него подключается к необходимым ресурсам. Так как в компании могут работать различные команды то и таргеты куда они в конечном счете будут подключаться могут отличаться. И эти места используют различные приватные ключи. Если вы в bastion host сохраните ваш приватный ключ то другие пользователи могут воспользоваться этим ключом и не авторизованно его использовать. Поэтому как решение командой разработки программы пути была создана еще одна дополнительная программа это больше как плагин к программе пути называется pageant. Идея ее в том что вы можете сохранив все ключи локально в месте где иницируется ssh подключение подключаться к instance последовательно. То есть мы можем локально с нашего компьютера сохранив ключи приватные только на этом компьютере через bastion host подключиться к instance в private subnet. Таким образом используя эту программу нам нет необходимости приватный ключ от private instance хранить в bastion host. Согласитесь это очень удобная и хорошая программа. Давайте теперь посмотрим как она работает и как ее необходимо настроить. Первым делом необходимо ее скачать устанавливать ее не нужно как только вы запускаете xsh запускается сама программа и здесь необходимо будет нажать на кнопку add key. Далее необходимо будет выбрать оба наших ключа и добиться того чтобы они отобразились в списке приватных ключей. После этого мы произвели все необходимые настройки программе pageant можем нажать на кнопку close. Далее уже на стороне пути необходимо активировать соответствующий функционал. А именно в левом навигационном меню необходимо выбрать страницу off и на самой странице необходимо будет поставить галочку для опции allow agent forwarding. Как только вы это сделаете вам далее останется выбрать приватный ключ от bastion host это на странице credentials. Самое первое поле необходимо будет нажать на кнопку browse и указать путь для нашего ppk ключа. После этого необходимо будет нам скопировать публичный ip адрес от bastion host это мы можем сделать двумя путями. Первый это в списке EC2 instances если выбрать наш bastion host то в метаданных есть соответствующее поле. Также мы можем подсмотреть публичный ip адрес в списке elastic ip адресов. Как только мы скопировали ip адрес необходимо его ставить в пути и нажать на кнопку open. Здесь необходимо будет ввести название пользователя в нашем случае это EC2 user нажимаем на enter и вы увидите prompt. Где можно будет вводить команды это означает то что мы успешно подключились к нашему bastion host. Здесь отображается приватный ip адрес. Теперь нам необходимо попробовать подключиться к инстанцию в private subnet. Для этого мы вернемся обратно на страницу со списками EC2 instances и выберем наш private instance. Обратите внимание что у него отсутствует публичный ip адрес это корректно так как этот instance был создан в private subnet и из интернета к нему подключиться не получится. Но у него есть private ip адрес и он используется мы будем его использовать так как что bastion host что этот private instance они находятся в одном vpc таким образом они могут подключаться друг другу через приватный ip адреса. Давайте скопируем это значение и иницируем подключение следующей команды ssh пробел далее имя пользователя это EC2 user и через символ собачкой мы пишем наш приватный ip адрес instance в private subnet. Как только мы написали команду нажимаем на кнопку enter далее подтверждаем что мы действительно хотим подключиться к этому instance вводим команду yes и нажимаем enter. После чего вы увидите что появится prompt и ip адрес поменялся это ip адрес нашего private instance. Отлично я вас поздравляю мы смогли успешно подключиться к приватному instance в private subnet. Теперь самая последняя проверка нам необходимо убедиться что действительно этот instance в приватном subnet может выходить в интернет. Для этого можем ввести следующую команду ping и ip адрес со всеми восьмерками это DNS google либо можем ввести адрес URL адрес любого из знакомых вам веб сайтов. Давайте введем ping и google.com вы видите что в первом что во втором случае обмениваются успешно пакеты что говорит о том что у нас у instance в private subnet есть выход в интернет. Если у вас действительно также это говорит о том что все настройки необходимые до этого момента мы произвели верно все корректно настроили. Мы с вами переходим к следующему заданию и у нас остался еще один компонент это network isl еще один компонент vpc который является дополнительным слоем защиты. Давайте посмотрим как ее создавать и как можно с ней работать. Для этого в AWS Management Console перейдем в сервис VPC далее здесь воспользуемся навигационным меню слева и выберем опцию network isl обратите внимание что в группе security у нас находится. Два пункта это network isl и security groups. Как только мы перешли к списку network isl обратите внимание что у нас есть дефолтовый network isl который привязан к lab vpc если вы ее выберете и перейдете в секции metadata на вкладку subnet association вы увидите два наших subnet это private и public subnet. Они по умолчанию ассоциированы с дефолтовым network isl. Если мы посмотрим на inbound рулы мы увидим что весь трафик разрешен с приоритетом 100. Так как это наивысший приоритет в рамках inbound рулов то весь трафик он будет разрешен. Также обратите внимание что это дефолтовый network isl. А для дефолтового network isl весь входящий и исходящий трафик автоматически разрешен. Это же мы можем перепроверить во вкладке outbound rules вы видите что с приоритетом 100 весь трафик разрешен. Давайте теперь создадим кастомный network isl. Для этого вверху справа необходимо будет нажать на кнопку create network isl. Здесь необходимо будет ввести имя этого ресурса в нашем случае lab network isl и как в vpc необходимо будет выбрать lab vpc. После чего в нижней части страницы мы можем нажать на кнопку create network isl. Как только создаться наш кастомный network isl нас направит на список этих ресурсов и вы увидите в соответствующем столбце что lab network isl является не дефолтовым network isl. Отлично. Давайте теперь выберем его и в секции inbound rules посмотрим какие у нас есть рулы. Вы увидите что трафик по умолчанию запрещен что для inbound rules что для outbound rules. Это дефолтовое поведение кастомного network isl. Давайте теперь добавим некоторые рулы для того чтобы разрешить трафик. Для этого необходимо будет нажать на кнопку edit outbound rules. Здесь необходимо будет нажать на кнопку add new rule и приоритетом 100 разрешить весь трафик до сидроблока публичного сабнета. И после чего сохраняем изменения. Все те же самые изменения необходимо внести для inbound rules. А именно мы добавляем новый rule с приоритетом 100 разрешающий весь трафик до источника это сидроблок публичного сабнета и сохраняем эти изменения. Далее напоминаю здесь что network isl он является самостоятельным ресурсом. Поэтому при создании кастомного network isl необходимо явно его привязать к необходимым сабнетам. В нашем случае мы привяжем его к приватному сабнету. Как только мы это сделаем нам необходимо провести эксперимент. Чтобы это сделать нам необходимо в public сабнете создать тестовый инстанс. Поэтому давайте перейдем в сервисы сету. Далее нажмем на кнопку lunch instance и ведем входные данные. Как name укажем тест инстанс. Далее как операционную систему выберем amazon linux и как AMI выберем amazon linux to AMI HVM. Как тип инстанса выберем t2 micro. Приватный ключ можем не указывать так как к нему подключаться не будем. В настройках сети необходимо будет внести некоторые изменения. В поле VPC необходимо будет выбрать lab VPC. Как сабнет необходимо будет выбрать public сабнет и создать новую security группу. Здесь необходимо будет нажать на кнопку add security group rule и ввести соответствующие значения. А именно мы разрешаем весь трафик ICMP по IPv4 порту протоколу. Далее как source type указываем anywhere то есть весь интернет и как description напишем allow ICMP. Это в том числе разрешает трафик с использованием команды ping. Как только мы заполним эти все поля необходимо будет в правой части экрана прокрутить до конца страницы и нажать на кнопку lunch instance. Пока наш instance создается нам необходимо будет выбрать тест инстанс и скопировать его приватный IP адрес. Как только мы скопируем возвращаемся в ssh сессию где мы подключены к инстанцу в private сабнете и запустим команду ping и IP адрес нашего тестового инстанца. Этот тестовый инстанц напоминаю находится в публичном сабнете. Вы увидите что у нас обмениваются пакеты они успешно уходят и возвращаются указывается время. Давайте оставим обмен пакетами выполняться дальше и вернемся в AWS Management Console. Здесь нам необходимо будет выбрать кастомный нетверк ICL далее во вкладке outbound rules нажать на кнопку edit outbound rules. Здесь мы сейчас введем новое правило приоритетом выше пусть будет приоритет 50 и для типа трафика ICMP по IPv4 для destination это публичный. Это приватный IP адрес тестового инстанца CIDR блок размера 32 так как мы указываем конкретный IP адрес и в поле allow deny укажем deny. То есть мы запрещаем ICMP трафик до нашего тестового инстанца и сохраняем эти изменения. Как только мы сохраним изменения обратите внимание что в сессии пути у нас обмен пакетами прекратился. Мы можем выйти из программы и запустить команду ping и приватный IP адрес тестового инстанца еще раз и вы увидите что пакеты не обмениваются. Это говорит о том что мы воспользовались дополнительным слоем защиты нетверка ICL и запретили интересующий нас трафик до интересующего CIDR блока. В нашем случае это IP адрес тестового инстанца в паблик сабнете. Отлично мы с вами выполнили все задания в рамках лаборатурной работы с чем я вас поздравляю. Осталось только ответить на некоторые тестовые вопросы. Для того чтобы для них добраться необходимо на странице лаборатурной работы нажать на кнопку details. Далее в выпадающем списке нажать на кнопку show. Во всплывающем окне необходимо будет прокрутить самый низ и нажать на ссылку access the multiple choice questions. Вас направят на отдельную страницу в браузере со списком вопросов. Всего дано 6 вопросов. Давайте попробуем ответить на каждый из них. Самый первый вопрос для чего используется интернет gateway с паблик сабнетом? Вы можете остановить это видео и попробовать ответить на него самостоятельно. Интернет gateway используется для того чтобы предоставить выход в интернет для ресурсов в паблик сабнете и для тех ресурсов у которых есть публичный IP адрес. Второй вопрос. Что дает возможность выходить в интернет и устанавливать обновление по ресурсам из private сабнета? Вы также можете остановить это видео и попробовать ответить на него самостоятельно. Правильный ответ NAT gateway. Переходим к следующему вопросу. Третий вопрос. Можно ли из интернета напрямую обратиться к инстанцу в private сабнете? Вы можете остановить видео и попытаться ответить самостоятельно. Правильный ответ NO. То есть к инстанцу находящемуся в private сабнете напрямую из интернета подключиться невозможно. Таким образом в private сабнете мы можем хранить чувствительные ресурсы, именно базу данных, возможно инстанции где отрабатывает логика вашего приложения. Четвертый вопрос. Почему мы использовали два различных приватных ключа для private и for paste and host? Можете остановить видео и попытаться ответить самостоятельно. Правильный ответ является то, что мы создали отдельные ключи, чтобы в случае утечки приватного ключа минимизировать его возможный ущерб. То есть в случае если публично станет доступным приватный ключ от приватного инстанца, пользователи все равно добраться до него не смогут, так как не смогут подключиться с этим ключом к bastion-host. В обратном случае, если же у нас уйдет в публичный доступ приватный ключ bastion-host, то будет возможность подключиться только к этому bastion-host, а далее к другим инстанцам, в том числе к нашему private инстанцу подключиться также не получится, так как к нему подключается через другой приватный ключ. Следующий вопрос. Можно ли запустить команду ping на стороне bastion-host в сторону приватного инстанца и сможем ли мы получить ответ? Подумайте хорошенько и попытайтесь ответить самостоятельно. И мимо того, что вы ответите на вопрос, также продумайте почему тот или иной ответ является верным. Окей, правильным ответом является no. Отвечаю почему. Когда мы настраивали security-группу для приватного инстанца, мы создавали inbound rule только для SSH трафика. Так как ping не относится к SSH трафику, он относится к другому виду трафика, то из bastion-host в instance из private subnet мы не можем успешно выполнить команду ping. Шестой вопрос, также очень хороший вопрос, мне он очень понравился. Какие рулы security-группы разрешают приватному EC2 инстанцу получить обратный трафик, обратный результат выполнения команды ping до тестового инстанца? Я напоминаю, что приватный инстанц находится в private subnet, а тестовый инстанц находится в public subnet. Хорошенько подумайте, вы можете остановить видео и попытаться ответить самостоятельно. Правильный ответ на шестой вопрос, это outbound-рулы для private instance и inbound-рулы для тестового инстанца. Почему? Потому что security-группа она stateful, что говорит о том, что трафик, который вошел, он вне зависимости от того, разрешен ли outbound-трафик или нет, он вернется обратно. И обратный случай, тот трафик, который разрешен как outbound, вне зависимости от того, для конкретной security-группы разрешен inbound или нет, он все равно вернется. Поэтому, чтобы инициировать команду ping, нам необходимо, чтобы security-группа приватного инстанца содержала соответствующие outbound-рулы, зная, что inbound-трафик обязательно вернется. А для тестового инстанца эта команда является inbound-трафиком, поэтому необходимо, чтобы inbound-трафик был разрешен. А так как security-группа является stateful, то тот трафик, который вошел, он обратно вернется, вне зависимости от того, какие прописаны outbound-рулы. На этом мы ответили на все вопросы. Теперь давайте проверим результат оценивания выполнения нашей лабораторной работы. Для этого на странице лабораторной работы необходимо нажать на кнопку submit, подтвердить его и подождать некоторое время. Так как эта лабораторная работа является достаточно объемной, то проверка займет некоторое время. Как только скрипт оценивания отработает, вы увидите свои баллы. В моем случае я набрал 56 баллов из 56, значит мы с вами все задания выполнили корректно, а также ответили правильно на все вопросы. Если же у вас не набран максимальный балл, то вы можете прокрутить чуть ниже, посмотреть, в каком месте у вас не достают баллы, исправить ее и запустить оценивание еще раз. Если же вы набрали максимальные баллы, я вас поздравляю. Отлично. Теперь нам необходимо правильно выйти со всех систем. В первую очередь это относится к AWS Management Console. Нам необходимо в верхней правой части нажать на имя пользователя и в выпадающем списке нажать на кнопку sign out. Далее необходимо вернуться на страницу с лабораторной работой и здесь нажать на кнопку end lab. Подтвердить, что мы завершаем лабораторную работу и дождаться сообщения, что мы можем закрывать страницу с лабораторной работой. На этом мы завершаем сессию разбора лабораторной работы. Это была достаточно объемная лабораторная работа. Мы познакомились со всеми компонентами VPC и я очень надеюсь, что вы получили полное представление о VPC и ее компонентах. Спасибо за внимание. Увидимся с вами на следующих наших активностях.
