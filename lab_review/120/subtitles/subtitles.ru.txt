Добрый день, уважаемые студенты! Рад вас видеть на очередной сессии разбора лабораторной работы. Тема сегодняшней лабораторной работы - это создание VPC и всех ее компонентов в рамках нашего бизнес-кейса с кафе. Итак, давайте начнем. Начинаем с основной страницы AWS Management Console. Здесь нам необходимо перейти в сервис VPC. Для этого необходимо воспользоваться строкой поиска сервисов и начать вводить VPC. Самая первая ссылка - это та ссылка, которая нам нужна. На основной странице сервиса VPC нам необходимо воспользоваться навигационным меню слева и перейти в раздел существующих VPC. Здесь мы видим, что для нас уже в рамках лабораторной работы была создана Lab VPC, на базе которой мы будем создавать оставшиеся компоненты. Первым делом необходимо создать subnets. Для этого в левом навигационном меню необходимо выбрать пункт Subnets. Здесь необходимо в открывшейся странице вверху справа нажать на кнопку Create Subnet. В самом начале необходимо будет выбрать VPC, в нашем случае Lab VPC. Далее необходимо будет ввести Subnet name, в нашем случае это Public Subnet. Чуть ниже необходимо будет выбрать Availability Zone. В рамках лабораторной работы должна быть первая Availability Zone и это us-east-1a. И как CIDR блок для нашего subnet нам необходимо скопировать значение с задания лабораторной работы и ввести ее в соответствующее поле. После чего необходимо прокрутить до конца страницы и нажать на кнопку Create Subnet. Как только мы нажмем на кнопку Create Subnet, нас направят на страницу со списком всех subnets и отфильтрованные по нашему созданному subnet. Теперь нам необходимо этот Public Subnet сделать фактически Public. Для этого необходимо в левом навигационном меню перейти в пункт Internet Gateways. Здесь мы также создаем новый ресурс, для этого в верхней правой части нажимаем на кнопку Create Internet Gateway. Во время создания Internet gateway много входных данных вводить не нужно, достаточно ввести имя этого ресурса, в нашем случае это Lab IGW. То есть сокращенно от Internet Gateway. И после чего можем в нижней части страницы нажать на кнопку Create Internet Gateway. Как только мы это сделаем, нас направят на основную страницу ресурса, в нашем случае Internet Gateway, и вы увидите, что состояние Detached. Также в уведомлении зеленым цветом вы увидите кнопку Attach to VPC. Это значит, что нам необходимо этот Internet Gateway привязать к одному из VPC, в нашем случае это Lab VPC. Давайте нажмем на эту кнопку, нас направят на страницу настройки, здесь необходимо выбрать VPC, в нашем случае Lab VPC. Выбираем ее и в нижней части страницы нажимаем на кнопку Attach Internet Gateway. Как только мы это сделаем, вы увидите соответствующее сообщение, что Internet Gateway был успешно привязан к этому VPC. Также вы увидите, что состояние поменялось на Attached, и в поле VPC ID стоит ссылка на наш Lab VPC. Теперь нам необходимо настроить Route Table, для этого воспользуемся навигационным меню слева и выберем пункт Route Tables. Здесь, как мы знаем, при создании VPC создается дефолтовый Route Table, мы можем воспользоваться ею и создать необходимые Routes для нашего Public Subnet. В вашем случае может отобразиться несколько Route Tables, вы можете найти правильные, посмотрев на столбец VPC. Там будет VPC ID и через разделитель название VPC. Давайте ее выберем и в открывшемся блоке страницы с данными этого ресурса необходимо выбрать вкладку Routes и нажать на кнопку Edit Routes. На следующей странице нам необходимо будет как Destination указать весь интернет и через интернет мы будем выходить через наш Internet Gateway. Как только мы заполним необходимые поля, мы можем сохранить изменения. Как только мы это сделаем, мы увидим соответствующее сообщение, если перейдем на страницу subnets, то увидим наш Public Subnet и все необходимые компоненты для него были созданы. И он не только в названии является Public, а также фактически является Public Subnet, ресурсы созданные в рамках этого Subnet могут выходить в интернет, также из интернета можно обращаться к ресурсам внутри этого Subnet. Следующим шагом нам необходимо создать Bastion Host. Для этого воспользуемся сервисом EC2. Необходимо будет в строке поиска сервисов начать вводить EC2 и перейти по первой ссылке. Как только мы окажемся на основной странице сервиса EC2, необходимо нажать на кнопку Launch Instance и нас направит на страницу ввода входных данных. Здесь как Name введем Bastion Host, далее как операционную систему выберем Amazon Linux и как AMI выберем Amazon Linux 2 AMI (HVM). Прокрутим чуть ниже, как Instance Type необходимо будет выбрать t2.micro, если этого варианта нет, выберем t3.micro. Как Key Pair выберем vockey и в секции Network Settings необходимо будет нажать на кнопку Edit. Мы будем вносить некоторые изменения. Как VPC необходимо будет выбрать Lab VPC, как Subnet выбираем Public Subnet, нами созданный. Для поля Auto-assign Public IP необходимо будет его отключить, так как мы будем создавать Elastic IP Address и привязывать к этому инстансу. Далее необходимо будет выбрать опцию Create Security Group, как имя ввести Bastion Host SG. После чего необходимо будет нажать на кнопку Add Security Group Rule в секции Inbound Security Group Rules и добавить следующее правило. Мы разрешаем SSH трафик, как Source указываем MyIP, вводится мой публичный IP адрес с размером CIDR блока 32, в котором находится один единственный IP адрес. Как Description необходимо будет указать некоторые значения, чтобы вы в будущем могли идентифицировать для чего оно было создано. В моем случае это SSH и Yelzhan, имя пользователя. Как только введем эти настройки, можем в правой части страницы нажать на кнопку Launch Instance. Нас направит на страницу с сообщением, что создание инстанса было инициировано, мы можем нажать на ссылку с ID инстанса и перейти на страницу со списком инстансов и отфильтрованным по нашему инстансу. Через некоторое время состояние инстанса перейдет в Running и пока это происходит, мы вне зависимости от этого можем продолжить создание следующих ресурсов, это Elastic IP address. Для этого в левом навигационном меню необходимо выбрать опцию Elastic IPs. Здесь необходимо будет нажать на кнопку Allocate Elastic IP Address и на странице для ввода входных данных выбрать опцию Amazon's Pool of IPv4 Addresses. Все остальные настройки оставляем по умолчанию, необходимо прокрутить до конца страницы и нажать на кнопку Allocate. Как только мы это сделаем, нас направят на страницу со списком Elastic IP address, вы также увидите в сообщении, что необходимо этот Elastic IP address ассоциировать с ресурсом, что мы и сделаем. Один из вариантов это нажать на кнопку Associate this Elastic IP address вверху страницы, либо выбрать этот Elastic IP address. Далее нажать на кнопку Actions и в выпадающем меню выбрать опцию Associate Elastic IP address. Он направит нас на ту же страницу. На странице настроек необходимо будет выбрать, к какому ресурсу мы привязываем это либо Network Interface, либо Instance. В нашем случае это Instance. Как только мы ее выберем, необходимо будет в поле ниже, где Instance, выбрать наш EC2 Instance с именем Bastion Host. Как только мы это сделаем, можем прокрутить до конца страницы и нажать на кнопку Associate. Как только мы это проделаем, мы получим сообщение о том, что Elastic IP address был успешно привязан к ресурсу, к инстансу с таким-то ID. Это значит, что наш EC2 инстанс помимо того, что может выходить в интернет, также из интернета он доступен и к нему можно обратиться по статическому IP Адресу. Этот IP Адрес вы видите на нашем экране. Давайте проверим, действительно ли мы можем подключаться к нашему EC2 инстансу в Public Subnet. Для этого необходимо скачать private key. Мы возвращаемся на страницу лабораторной работы, нажимаем на кнопку Details и в выпадающем списке нажимаем на кнопку Show. Во всплывающем окне необходимо скачать PPK ключ, если это Windows операционная система, если вы работаете с Linux операционной системой или MacOS, необходимо будет скачать PEM ключ. Как только вы это сделаете, в случае с Windows операционной системой вам необходимо будет скачать программу PuTTY. Мы неоднократно работали с этой программой на предыдущих наших лабораторных работах, поэтому она скорее всего уже установлена, необходимо будет ее запустить. Также мы с вами ранее уже подключались с использованием PPK ключа к другим инстансам. И если у вас есть сохраненная сессия, вы можете ее подгрузить, после чего ввести в поле для ввода IP адреса IP адрес нашего Elastic IP ресурса. Если созданной сессии нет, можете в левом навигационном меню программы PuTTY пройти по пути Connection, SSH, Auth и Credentials, и для соответствующего поля указать путь приватного ключа. После чего вы можете вернуться обратно на вкладку Session, самая первая вкладка, и здесь ввести публичный IP адрес нашего EC2 инстанса. Как только мы введем все необходимые настройки, мы можем нажать на кнопку Open. Откроется командная строка и вы увидите подобное сообщение, если вы впервые подключаетесь к этому инстансу. Так как это нами созданный инстанс и мы доверяем ему, мы можем нажать на кнопку Accept. При всех других случаях необходимо удостовериться, что вы подключаетесь к доверенному инстансу, и только после этого вы подтверждаете ваше подключение. Как только нажмем на кнопку Accept, необходимо будет указать пользователя, дефолтовые пользователи для Amazon Linux, это ec2-user. Как только мы это введем и нажмем на кнопку Enter, мы увидим сообщение о том, что мы успешно авторизованы и увидим промпт для ввода команд. Это значит, что мы успешно смогли удаленно подключиться к нашему EC2 инстансу в public subnet, используя публичный IP адрес. Отлично, поздравляю, мы завершили задание и переходим к следующему. В рамках следующего задания нам необходимо создать private subnet и все необходимые для него компоненты. Для этого мы в строке поиска сервисов начнем вводить VPC и перейдем к соответствующему сервису. Далее воспользуемся левым навигационным меню и выберем пункт Subnets. Здесь необходимо будет создать новый subnet, для этого нажмем на кнопку Create subnet и в открывшейся странице для ввода входных данных начнем эти данные вводить. Как VPC ID мы выбираем Lab VPC и как Subnet Name необходимо будет написать Private subnet. Прокрутим чуть ниже, как Availability zone выбираем первую availability zone в этом регионе, в нашем случае это us-east-1a. И как значение CIDR block необходимо будет скопировать со страницы задания лабораторной работы, в нашем случае это 10.0.1.0/24. Как только мы введем все эти данные, мы можем прокрутить до конца страницы и нажать на кнопку Create subnet. Мы видим, что наш subnet был успешно создан, теперь мы создаем следующие компоненты, для этого воспользуемся левым навигационным меню и перейдем к пункту NAT gateways. У нас созданных NAT gateways не имеется, поэтому нажмем на кнопку Create NAT gateway. Здесь в открывшейся странице для ввода входных данных как Name введем Lab NAT Gateway. Далее, как Subnet выберем Public subnet, то есть наш NAT Gateway будет находиться в public subnet и будет давать возможность ресурсам из private subnet подключаться к интернету. Прокрутим чуть ниже, и мы с вами помним, что при создании NAT Gateway необходимо его ассоциировать с публичным статическим IP адресом. И здесь есть возможность путем нажатия на кнопки Allocate IP address создать ресурс Elastic IP и так как мы ее создаем в рамках создания NAT Gateway, то ID Elastic IP впишется в соответствующее поле. После чего нам необходимо будет прокрутить до конца страницы и нажать на кнопку Create NAT Gateway. Как только мы создадим NAT Gateway, останется буквально последний шаг, это работа с route table. Необходимо будет воспользоваться левым навигационным меню и перейти к пункту Routes tables. Ранее мы с вами использовали дефолтовый route table для привязки ее к public subnet. Сейчас нам необходимо создать отдельный route table для того чтобы привязать его к private subnet. Итак, давайте нажмем на кнопку Create route table, в открывшейся странице для ввода входных данных нам необходимо ввести имя Private route table и как VPC выбрать Lab VPC. После чего мы можем нажать на кнопку Create route table. Наш route table создастся и мы перейдем на основную страницу ресурса. Здесь во вкладке Routes увидим, что у нас только один единственный дефолтовый rule, который помогает общаться с ресурсом внутри VPC. Нам необходимо нажать на кнопку Edit routes и здесь необходимо будет добавить новый route. Как Destination необходимо указать обозначение интернета, это все нули слеш ноль. Далее, как Target указать NAT gateway, то есть ресурсы находящиеся в private subnet будут подключаться к интернету через NAT gateway. А NAT gateway у нас находится в public subnet. Как только мы заполним эти два поля, мы можем нажать на кнопку Save changes. Отлично, на этом мы почти подготовили наш route table. Не забывайте, что route table это независимый отдельный ресурс и если вы работаете с кастомным route table необходимо явно привязать его к subnet. Ранее нам не пришлось привязывать route table к subnet, так как это был дефолтовый route table и дефолтовый route table он привязывается ко всем subnet, которые создаются в рамках VPC. В нашем случае мы создали кастомный route table и здесь необходимо привязать его явно к нашему private subnet. Для этого необходимо перейти во вкладку Subnet associations и здесь нажать на кнопку Edit subnet associations. Нас направят на страницу с subnet, здесь отображаются все subnets доступные в рамках VPC. Вы увидите, что есть public subnet и private subnet. Оба они привязаны к дефолтовому route table, вы это видите в соответствующем столбце, это последний столбец в рамках этой небольшой таблицы. На этой странице нам необходимо будет выбрать Private subnet и нажать на кнопку Save associations. Что произойдет? Мы с вами помним, что subnet может быть ассоциирован только с одним route table в один момент времени, тогда как один route table может использоваться в нескольких subnet. Поэтому привязка private subnet к дефолтовому route table удалится и создается новая связка private subnet с кастомным route table. Отлично, как только мы это сделали, мы можем в списке Subnet associations увидеть наш private subnet. Также увидим соответствующее сообщение о том, что route table с таким то ID был успешно привязан к нашему private subnet. Мы произвели все необходимые настройки, теперь необходимо проверить все ли корректно работает и есть ли возможность подключаться из интернета к ресурсам, находящимся в private subnet. Для этого необходимо создать инстанс, переходим к сервису EC2, далее на основной странице сервиса EC2 нажимаем на кнопку Launch instance и начинаем вводить входные данные. Как Name указываем Private instance, далее выбираем как операционную систему Amazon Linux, как AMI выбираем Amazon Linux 2 AMI (HVM). Как Instance Type выбираем t2.micro и в секции приватного ключа нам необходимо будет создать новый. Для этого нажимаем на кнопку Create new key pair указываем отличное от предыдущего приватного ключа имя, пусть это будет vockey2 и необходимо будет выбрать правильный формат. Напоминаю, что если вы работаете с Windows операционной системой вам необходимо будет выбрать формат PPK, он подходит для программы PuTTY. Если вы работаете с MacOS либо с Linux операционной системой вам необходимо выбрать формат PEM. Отлично, выбрали формат, ввели имя, теперь необходимо нажать на кнопку Create key pair. Как только вы ее нажмете, вам будет предложено сохранить приватный ключ на локальном компьютере. Это единственный кейс, когда вы этот приватный ключ можете скачать, поэтому сохраняем ее. Далее, в следующей секции настройках сети необходимо будет выбрать Lab VPC, как Subnet выбираем Private subnet и чуть ниже необходимо будет выбрать опцию Create security group. Мы создаем новую security группу, нам необходимо будет в секции Inbound security group rules добавить новый rule. Здесь мы указываем SSH traffic, как Source type указываем Custom и в Source указываем security группу нашего bastion host. Это значит, что только subnets, к которым привязана эта security группа, может быть использована как инициатор подключения по SSH. Только ресурсы из public subnet смогут подключаться к этому инстансу. Как Description укажем Bastion host SG, чтобы легче было понимать для чего этот rule был создан. Отлично, мы ввели все необходимые настройки, теперь мы можем в правой части экрана нажать на кнопку Launch instance. Пока наш инстанс будет создаваться, давайте попробуем ответить на следующий вопрос. У нас есть созданный bastion host в public subnet, к нему мы уже можем подключаться, мы это проверили. Теперь мы в private subnet создаем другой инстанс и идея в том, чтобы подключаться к нему. Мы создали bastion host специально, чтобы подключаться к ресурсам в private subnet, это хорошо. Но представьте, как это будет выглядеть, для того чтобы подключиться к bastion host, мы используем приватный ключ сохраненный локально на нашем компьютере. И с локального компьютера инициируем SSH соединение. Теперь, для того чтобы с bastion host инициировать SSH соединение к инстансу из private subnet, нам также на bastion host-е, то есть локально с того места, где мы инициируем SSH соединение, необходимо, чтобы был приватный ключ, а именно тот ключ, который мы создали и после чего у нас получится подключиться к приватному инстансу. Это не самый лучший вариант с точки зрения безопасности, так как bastion host это то место, где все сотрудники подключаются к нему, а дальше от него подключаются к необходимым ресурсам. Так как в компании могут работать различные команды, то и targets, куда они в конечном счете будут подключаться, могут отличаться. И эти места используют различные приватные ключи. Если вы в bastion host сохраните ваш приватный ключ, то другие пользователи могут воспользоваться этим ключом и не авторизованно его использовать. Поэтому как решение командой разработки программы PuTTY, была создана еще одна дополнительная программа, это больше как плагин к программе PuTTY называется Pageant. Идея ее в том, что вы можете, сохранив все ключи локально в месте, где инициируется SSH подключение, подключаться к инстансам последовательно. То есть мы можем локально с нашего компьютера, сохранив приватные ключи только на этом компьютере, через bastion host подключиться к инстансу в private subnet. Таким образом, используя эту программу, нам нет необходимости приватный ключ от private instance хранить в bastion host. Согласитесь, это очень удобная и хорошая программа. Давайте теперь посмотрим как она работает и как ее необходимо настроить. Первым делом необходимо ее скачать, устанавливать ее не нужно, как только вы запускаете exe, запускается сама программа и здесь необходимо будет нажать на кнопку Add key. Далее, необходимо будет выбрать оба наших ключа и добиться того, чтобы они отобразились в списке приватных ключей. После этого мы произвели все необходимые настройки в программе Pageant, можем нажать на кнопку Close. Далее, уже на стороне PuTTY необходимо активировать соответствующий функционал. А именно в левом навигационном меню необходимо выбрать страницу Auth и на самой странице необходимо будет поставить галочку для опции Allow agent forwarding. Как только вы это сделаете, вам далее останется выбрать приватный ключ от bastion host, это на странице Credentials. Самое первое поле необходимо будет нажать на кнопку Browse и указать путь для нашего PPK ключа. После этого необходимо будет нам скопировать публичный IP адрес от bastion host, это мы можем сделать двумя путями. Первый - это в списке EC2 инстансов, если выбрать наш bastion host, то в метаданных есть соответствующее поле. Также мы можем подсмотреть публичный IP адрес в списке Elastic IP адресов. Как только мы скопировали IP адрес, необходимо его вставить в PuTTY и нажать на кнопку Open. Здесь необходимо будет ввести название пользователя в нашем случае это ec2-user нажимаем на Enter и вы увидите промпт, где можно будет вводить команды, это означает то что мы успешно подключились к нашему bastion host. Здесь отображается приватный IP адрес. Теперь нам необходимо попробовать подключиться к инстансу в private subnet. Для этого вернемся обратно на страницу со списками EC2 инстансов и выберем наш private instance. Обратите внимание, что у него отсутствует публичный IP адрес, это корректно, так как этот инстанс был создан в private subnet и из интернета к нему подключиться не получится. Но у него есть private IP адрес и мы будем его использовать, так как bastion host и этот private instance находятся в одном VPC, они могут подключаться друг к другу через приватный IP адреса. Давайте скопируем это значение и инициируем подключение команды, SSH пробел далее имя пользователя это ec2-user и через символ собачкой приватный IP адрес инстанса в private subnet. Как только мы написали команду, нажимаем на кнопку Enter, далее подтверждаем, что мы действительно хотим подключиться к этому инстансу, вводим команду Yes и нажимаем Enter. После чего вы увидите, что появится промпт и IP адрес поменялся, это IP адрес нашего private instance. Отлично, я вас поздравляю, мы смогли успешно подключиться к private instance в private subnet. Теперь самая последняя проверка, нам необходимо убедиться, что действительно этот инстанс в private subnet может выходить в интернет. Для этого можем ввести следующую команду ping и IP адрес со всеми восьмерками это DNS google, либо можем ввести URL адрес любого из знакомых вам веб-сайтов. Давайте введем ping и google.com, вы видите, что в первом, что во втором случае, обмениваются успешно пакеты, что говорит о том, что у инстансов в private subnet есть выход в интернет. Если у вас действительно также, это говорит о том, что все настройки необходимые до этого момента, мы произвели верно, все корректно настроили. Мы с вами переходим к следующему заданию и у нас остался еще один компонент, это Network ACL, еще один компонент VPC, который является дополнительным слоем защиты. Давайте посмотрим, как ее создавать и как можно с ней работать. Для этого в AWS Management Console перейдем в сервис VPC. Далее здесь воспользуемся навигационным меню слева и выберем опцию Network ACL. Обратите внимание, что в группе security у нас находится два пункта, это Network ACL и Security groups. Как только мы перешли к списку Network ACLs, обратите внимание, что у нас есть дефолтовый Network ACL, который привязан к Lab VPC, если вы ее выберете и перейдете в секции Metadata на вкладку Subnet associations, вы увидите два наших subnet, это private и public subnet. Они по умолчанию ассоциированы с дефолтовым Network ACL. Если мы посмотрим на Inbound rules, мы увидим, что весь трафик разрешен с приоритетом 100. Так как это наивысший приоритет в рамках Inbound rules, то весь трафик будет разрешен. Также обратите внимание, что это дефолтовый Network ACL. А для дефолтового Network ACL весь входящий и исходящий трафик автоматически разрешен. Это же мы можем перепроверить во вкладке Outbound rules, вы видите, что с приоритетом 100 весь outbound трафик разрешен. Давайте теперь создадим кастомный Network ACL. Для этого вверху справа необходимо будет нажать на кнопку Create Network ACL. Здесь необходимо будет ввести имя этого ресурса, в нашем случае Lab Network ACL и как VPC необходимо будет выбрать Lab VPC. После чего в нижней части страницы мы можем нажать на кнопку Create Network ACL. Как только создаться наш кастомный Network ACL, нас направит на список этих ресурсов, и вы увидите в соответствующем столбце, что Lab Network ACL является не дефолтовым Network ACL. Отлично. Давайте теперь выберем его и в секции Inbound rules посмотрим, какие у нас есть rules. Вы увидите, что трафик по умолчанию запрещен, и для inbound rules и для outbound rules. Это дефолтовое поведение кастомного Network ACL. Давайте теперь добавим некоторые rules для того чтобы разрешить трафик. Для этого необходимо будет нажать на кнопку Edit outbound rules. Здесь необходимо будет нажать на кнопку Add new rule и приоритетом 100 разрешить весь трафик до CIDR блока публичного subnet. И после чего сохраняем изменения. Все те же самые изменения необходимо внести для Inbound rules. А именно, мы добавляем новый rule с приоритетом 100, разрешающий весь трафик до источника, это CIDR блок публичного subnet и сохраняем эти изменения. Далее, напоминаю здесь, что Network ACL является самостоятельным ресурсом. Поэтому при создании кастомного Network ACL необходимо явно его привязать к необходимым subnets. В нашем случае мы привяжем его к private subnet. Как только мы это сделаем, нам необходимо провести эксперимент. Чтобы это сделать нам необходимо в public subnet создать тестовый инстанс. Поэтому давайте перейдем в сервис EC2. Далее, нажмем на кнопку Launch instance и введем входные данные. Как Name укажем Test Instance. Далее, как операционную систему выберем Amazon Linux и как AMI выберем Amazon Linux 2 AMI (HVM). Как Instance type выберем t2.micro. Приватный ключ можем не указывать, так как к нему подключаться не будем. В настройках сети необходимо будет внести некоторые изменения. В поле VPC необходимо будет выбрать Lab VPC. Как Subnet необходимо будет выбрать Public subnet и создать новую Security группу. Здесь необходимо нажать на кнопку Add security group rule и ввести соответствующие значения. А именно мы разрешаем весь трафик ICMP по IPv4 протоколу. Далее, как Source type указываем Anywhere, то есть весь интернет и как Description напишем Allow ICMP. Это в том числе разрешает трафик с использованием команды ping. Как только мы заполним эти все поля, необходимо будет в правой части экрана прокрутить до конца страницы и нажать на кнопку Launch instance. Пока наш инстанс создается, нам необходимо будет выбрать Test Instance и скопировать его приватный IP адрес. Как только мы скопируем, возвращаемся в SSH сессию, где мы подключены к инстансу в private subnet и запустим команду ping и IP адрес нашего тестового инстанса. Этот тестовый инстанс находится в public subnet. Вы увидите, что у нас обмениваются пакеты, они успешно уходят и возвращаются, указывается время. Давайте оставим обмен пакетами выполняться дальше и вернемся в AWS Management Console. Здесь нам необходимо будет выбрать кастомный Network ACL, далее во вкладке Outbound rules нажать на кнопку Edit outbound rules. Здесь мы сейчас введем новое правило приоритетом выше, пусть будет приоритет 50, и для Type трафика ICMP по IPv4, для Destination это приватный IP адрес тестового инстанса, CIDR блок размера 32, так как мы указываем конкретный IP адрес и в поле Allow/Deny укажем Deny. То есть мы запрещаем ICMP трафик до нашего тестового инстанса и сохраняем эти изменения. Как только мы сохраним изменения, обратите внимание, что в сессии PuTTY обмен пакетами прекратился. Мы можем выйти из программы и запустить команду ping и приватный IP адрес тестового инстанса еще раз и вы увидите, что пакеты не обмениваются. Это говорит о том, что мы воспользовались дополнительным слоем защиты Network ACL и запретили интересующий нас трафик до интересующего CIDR блока. В нашем случае это IP адрес тестового инстанса в public subnet. Отлично, мы с вами выполнили все задания в рамках лабораторной работы с чем я вас поздравляю. Осталось только ответить на некоторые тестовые вопросы. Чтобы до них добраться, необходимо на странице лабораторной работы нажать на кнопку Details. Далее в выпадающем списке нажать на кнопку Show. Во всплывающем окне необходимо будет прокрутить в самый низ и нажать на ссылку Access the multiple choice questions. Вас направят на отдельную страницу в веб-браузере со списком вопросов. Всего дано 6 вопросов. Давайте попробуем ответить на каждый из них. Самый первый вопрос: для чего используется Internet gateway с public subnet? Вы можете остановить это видео и попробовать ответить на него самостоятельно. Internet gateway используется для того, чтобы предоставить выход в интернет для ресурсов в public subnet и для тех ресурсов, у которых есть публичный IP адрес. Второй вопрос. Что дает возможность выходить в интернет и устанавливать обновление ПО ресурсам из private subnet? Вы также можете остановить это видео и попробовать ответить на него самостоятельно. Правильный ответ - NAT gateway. Переходим к следующему вопросу. Третий вопрос. Можно ли из интернета напрямую обратиться к инстансу в private subnet? Вы можете остановить видео и попытаться ответить самостоятельно. Правильный ответ - NO. То есть к инстансу, находящемуся в private subnet, напрямую из интернета подключиться невозможно. Таким образом, в private subnet мы можем хранить чувствительные ресурсы, именно базу данных, возможно инстансы, где отрабатывает логика вашего приложения. Четвертый вопрос. Почему мы использовали два различных приватных ключа для private instance и bastion host? Можете остановить видео и попытаться ответить самостоятельно. Правильный ответ является то, что мы создали отдельные ключи, чтобы в случае утечки приватного ключа минимизировать его возможный ущерб. То есть в случае если публично станет доступным приватный ключ от приватного инстанса, пользователи все равно добраться до него не смогут, так как не смогут подключиться с этим ключом к bastion host. В обратном случае, если же у нас уйдет в публичный доступ приватный ключ bastion host, то будет возможность подключиться только к этому bastion host, а далее к другим инстансам, в том числе к нашему private инстансу подключиться также не получится, так как к нему подключается через другой приватный ключ. Следующий вопрос. Можно ли запустить команду ping на стороне bastion host в сторону приватного инстанса и сможем ли мы получить ответ? Подумайте хорошенько и попытайтесь ответить самостоятельно. Помимо того, что вы ответите на вопрос, также подумайте почему тот или иной ответ является верным. Окей, правильным ответом является No. Отвечаю почему. Когда мы настраивали security group для приватного инстанса, мы создавали inbound rule только для SSH трафика. Так как ping не относится к SSH трафику, он относится к другому виду трафика, то из bastion host в инстанс из private subnet мы не можем успешно выполнить команду ping. Шестой вопрос, также очень хороший вопрос, мне он очень понравился. Какие security group rules разрешают приватному EC2 инстансу получить обратный трафик, обратный результат выполнения команды ping до тестового инстанса? Я напоминаю, что приватный инстанс находится в private subnet, а тестовый инстанс находится в public subnet. Хорошенько подумайте, вы можете остановить видео и попытаться ответить самостоятельно. Правильный ответ на шестой вопрос, это outbound rules для private instance и inbound rules для тестового инстанса. Почему? Потому что security group - stateful, что говорит о том, что трафик, который вошел, вне зависимости от того, разрешен ли outbound трафик или нет, он вернется обратно. И обратный случай, тот трафик, который разрешен как outbound, вне зависимости от того, для конкретной security группы разрешен inbound или нет, он все равно вернется. Поэтому, чтобы инициировать команду ping, нам необходимо, чтобы security группа приватного инстанса содержала соответствующие outbound rules, зная, что inbound трафик обязательно вернется. А для тестового инстанса эта команда является inbound трафиком, поэтому необходимо, чтобы inbound трафик был разрешен. А так как security группа является stateful, то тот трафик, который вошел, он обратно вернется, вне зависимости от того, какие прописаны outbound рулы. На этом мы ответили на все вопросы. Теперь давайте проверим результат оценивания выполнения нашей лабораторной работы. Для этого на странице лабораторной работы необходимо нажать на кнопку Submit, подтвердить его и подождать некоторое время. Так как эта лабораторная работа является достаточно объемной, то проверка займет некоторое время. Как только скрипт оценивания отработает, вы увидите свои баллы. В моем случае, я набрал 56 баллов из 56, значит мы с вами все задания выполнили корректно, а также ответили правильно на все вопросы. Если же у вас не набран максимальный балл, то вы можете прокрутить чуть ниже, посмотреть, в каком месте у вас не достают баллы, исправить ее и запустить оценивание еще раз. Если же вы набрали максимальные баллы, я вас поздравляю. Отлично. Теперь нам необходимо правильно выйти со всех систем. В первую очередь это относится к AWS Management Console. Нам необходимо в верхней правой части нажать на имя пользователя и в выпадающем списке нажать на кнопку Sign out. Далее, необходимо вернуться на страницу с лабораторной работой и нажать на кнопку End lab. Подтвердить, что мы завершаем лабораторную работу и дождаться сообщения, что мы можем закрывать страницу с лабораторной работой. На этом мы завершаем сессию разбора лабораторной работы. Это была достаточно объемная лабораторная работа. Мы познакомились со всеми компонентами VPC и я очень надеюсь, что вы получили полное представление о VPC и ее компонентах. Спасибо за внимание. Увидимся с вами на следующих наших активностях.