WEBVTT

00:00:00.000 --> 00:00:08.000
Добрый день, уважаемые студенты! Рад вас видеть
на очередной сессии разбора лабораторной работы.

00:00:08.000 --> 00:00:16.000
Тема лабораторной работы это создание static
website для нашего бизнес-кейса, а именно кафе.

00:00:16.000 --> 00:00:26.000
Эта лабораторная работа является Challenge Lab,
поэтому меньше деталей было указано в задании.

00:00:26.000 --> 00:00:32.000
И теперь мы сейчас попробуем вместе это все
проделать со всеми необходимыми деталями.

00:00:32.000 --> 00:00:38.000
Итак, давайте начнем!
Мы начинаем разбор лабораторной работы.

00:00:38.000 --> 00:00:42.000
Необходимо нам открыть главную
страницу лабораторной работы.

00:00:42.000 --> 00:00:49.000
Здесь необходимо нажать на кнопку Start
Lab, после чего откроется всплывающее окно.

00:00:49.000 --> 00:00:55.000
Необходимо дождаться, чтобы Lab Status из
состояния In Creation перейдет в состояние Ready.

00:00:55.000 --> 00:01:01.000
После чего можно закрывать эту
страницу и нажимать на кнопку AWS.

00:01:01.000 --> 00:01:07.000
После нажатия этой кнопки нас перекинет на
главную страницу AWS Management Console.

00:01:07.000 --> 00:01:16.000
Здесь нам первым делом необходимо скачать
zip-архив, в котором содержание нашего веб-сайта,

00:01:16.000 --> 00:01:23.000
разархивировать локально на нашем компьютере 
и подготовить для загрузки на S3 бакет.

00:01:23.000 --> 00:01:31.000
Переходим обратно на AWS Management Console
и здесь необходимо открыть сервис Amazon S3.

00:01:31.000 --> 00:01:40.000
В строке поиска сервисов начнем вводить S3. В 
выдаче увидим нужную нам ссылку и нажмем на нее.

00:01:40.000 --> 00:01:43.488
После того, как мы перейдем
на главную страницу сервиса

00:01:43.512 --> 00:01:47.000
Amazon S3, мы увидим, что
у нас есть системный бакет.

00:01:47.000 --> 00:01:51.000
На нее мы не обращаем внимания,
нам необходимо создать новый.

00:01:51.000 --> 00:01:56.000
Поэтому в правой части экрана необходимо 
нажать на кнопку Create Bucket.

00:01:56.000 --> 00:02:03.000
Давайте назовем его следующим
образом, пусть будет yelzhan-lab-review-50.

00:02:03.000 --> 00:02:10.488
Вы можете написать любое другое название,
самое главное помните, что это название S3

00:02:10.512 --> 00:02:18.000
бакета должно быть глобально уникальным.
Как регион необходимо выбрать North Virginia.

00:02:18.000 --> 00:02:21.488
Мы с вами помним, что этот
S3 бакет будет использоваться

00:02:21.512 --> 00:02:25.000
для публичного доступа, а
именно для хостинга веб-сайта.

00:02:25.000 --> 00:02:32.293
Поэтому в секции Object
Ownership выберем ACLs Enabled и

00:02:32.317 --> 00:02:42.000
удостоверимся, что Object Ownership
отмечен как Bucket Owner Preferred.

00:02:42.000 --> 00:02:51.000
Далее необходимо прокрутить чуть ниже и
убрать галочку с опции Block All Public Access.

00:02:51.000 --> 00:02:58.000
Чуть ниже необходимо подтвердить, что мы будем
открывать публичный доступ и поставить галочку.

00:02:58.000 --> 00:03:08.000
Прокручиваем в самый низ страницы
и нажимаем на кнопку Create Bucket.

00:03:08.000 --> 00:03:13.212
Нас направят на страницу со списком бакетов.
Вы увидите соответствующее

00:03:13.236 --> 00:03:18.000
сообщение с зеленым фоном о
том, что бакет был успешно создан.

00:03:18.000 --> 00:03:32.000
Теперь давайте нажмем на название бакета, чтобы 
перейти на основную страницу этого S3 бакета.

00:03:32.000 --> 00:03:38.988
Далее нам необходимо нажать на вкладку 
Properties. Здесь необходимо

00:03:39.012 --> 00:03:46.000
прокрутить в самый низ и
активировать Static Website Hosting опцию.

00:03:46.000 --> 00:03:50.748
На текущий момент мы видим, что
она отключена, поэтому необходимо

00:03:50.772 --> 00:03:55.000
нажать кнопку Edit.
Откроется соответствующая страница.

00:03:55.000 --> 00:04:03.000
Необходимо выбрать опцию Enable. Далее как
Hosting Type мы выбираем Host a Static Website.

00:04:03.000 --> 00:04:09.761
Как Index Document указываем 
наш index.html. Как Error Document

00:04:09.785 --> 00:04:16.000
указываем error.html и
нажимаем на кнопку Save Changes.

00:04:16.000 --> 00:04:21.488
Как только мы это сделали, мы
активировали Static Website Hosting

00:04:21.512 --> 00:04:27.000
опцию, теперь нам необходимо
загрузить контент нашего веб-сайта.

00:04:27.000 --> 00:04:33.000
Для этого переходим на вкладку
Objects и нажимаем на кнопку Upload.

00:04:33.000 --> 00:04:39.505
Так как у нас помимо отдельных
файлов есть еще и папки, мы можем

00:04:39.529 --> 00:04:48.000
воспользоваться кнопкой Add Files и Add
Folder и добавить все необходимые файлы.

00:04:48.000 --> 00:04:56.000
Вы видите список этих файлов, всего у нас
10 объектов, весит порядка 22 мегабайтов.

00:04:56.000 --> 00:05:04.000
Если все совпадает, в нижней части
страницы необходимо нажать на кнопку Upload.

00:05:04.000 --> 00:05:12.000
Как только мы ее нажмем, нам необходимо
проверить, как отображается наша веб-страница.

00:05:12.000 --> 00:05:16.715
Нам необходимо открыть
вкладку Properties, прокрутить

00:05:16.739 --> 00:05:22.000
чуть ниже и опуститься до
секции Static Website Hosting.

00:05:22.000 --> 00:05:25.528
Там как раз таки находится
Bucket website endpoint,

00:05:25.552 --> 00:05:30.000
необходимо ее скопировать и
открыть в новой вкладке браузера.

00:05:30.000 --> 00:05:35.000
Как только мы ее откроем, мы
увидим, что выходит ошибка 403.

00:05:35.000 --> 00:05:41.000
Это связано с тем, что мы еще не выдавали
для наших объектов публичный доступ.

00:05:41.000 --> 00:05:52.000
Перед тем, как мы перейдем к следующему заданию,
нам сейчас необходимо ответить на вопрос теста.

00:05:52.000 --> 00:05:59.000
Для этого на странице лабораторной
работы необходимо нажать на кнопку Details.

00:05:59.000 --> 00:06:04.000
Будет выпадающий список,
необходимо нажать на кнопку Show.

00:06:04.000 --> 00:06:14.000
И в всплывающем окне нажать на текст,
это ссылка Access the multiple choice questions.

00:06:14.000 --> 00:06:21.000
Откроется отдельная вкладка, закрывать не нужно,
мы ее сохраняем до конца лабораторной работы.

00:06:21.000 --> 00:06:27.000
И сейчас нам необходимо ответить на первый 
вопрос. Первый вопрос звучит следующим образом.

00:06:27.000 --> 00:06:34.000
После выполнение третьего задания, смогли ли вы
увидеть ваш веб-сайт в отдельной вкладке браузера?

00:06:34.000 --> 00:06:41.000
Мы увидеть его не смогли, поэтому мы отмечаем
опцию No, the files are not publicly accessible.

00:06:41.000 --> 00:06:49.000
Нажимаем на кнопку
Submit и двигаемся дальше.

00:06:49.000 --> 00:06:56.000
Для того, чтобы веб-сайт отобразился, нам
необходимо предоставить публичный доступ.

00:06:56.000 --> 00:07:04.000
Для этого, на вкладке Objects нашего S3 бакета
выделяем все объекты, нажимаем на кнопку Actions.

00:07:04.000 --> 00:07:12.000
И самым последним пунктом
находим опцию Make public using ACL.

00:07:12.000 --> 00:07:21.000
Необходимо ее нажать, после чего подтвердить, что
мы хотим сделать наши объекты доступными публично.

00:07:21.000 --> 00:07:25.557
Как только мы это сделаем,
вернемся на страницу нашего

00:07:25.581 --> 00:07:31.000
веб-сайта и обновим страницу, мы 
увидим наш веб-сайт. Отлично.

00:07:31.000 --> 00:07:37.000
Теперь давайте проведем эксперимент
и загрузим папку с картинками еще раз.

00:07:37.000 --> 00:07:42.000
Как только мы ее загрузили,
попробуем открыть наш веб-сайт.

00:07:42.000 --> 00:07:50.488
Вы видите, что картинки поломались, так
как повторная загрузка перевела публичный

00:07:50.512 --> 00:07:59.000
доступ к папке и файлам в значение по
умолчанию, то есть они защищены и приватные.

00:07:59.000 --> 00:08:07.000
Для того, чтобы они снова отобразились,
необходимо проделать предыдущее действие еще раз.

00:08:07.000 --> 00:08:17.000
Это достаточно неудобно, поэтому согласно нашему
бизнес-кейсу, София решила написать Bucket Policy.

00:08:17.000 --> 00:08:22.843
Для того, чтобы его написать,
нам необходимо открыть вкладку

00:08:22.867 --> 00:08:30.000
Permissions для нашего S3 бакета
и опуститься до секции Bucket Policy.

00:08:30.000 --> 00:08:36.000
Сейчас будем изменять. Для этого необходимо нажать
на кнопку Edit, откроется соответствующее окно.

00:08:36.000 --> 00:08:43.000
Здесь необходимо было вам ознакомиться с
AWS документацией и найти подходящие policy.

00:08:43.000 --> 00:08:46.000
Правильным ответом
является следующий документ.

00:08:46.000 --> 00:08:50.025
Мы здесь прописываем, что
Principal является звездочка,

00:08:50.049 --> 00:08:54.000
то есть это любой анонимный
пользователь интернета.

00:08:54.000 --> 00:08:58.042
Далее Effect: Allow, то есть
мы разрешаем доступ на

00:08:58.066 --> 00:09:03.000
единственное действие Get
Object, то есть это режим чтения.

00:09:03.000 --> 00:09:08.588
И как Resource указываем
конкретно наш бакет /* для того,

00:09:08.612 --> 00:09:15.000
чтобы изменения затронули
только объекты внутри нашего бакета.

00:09:15.000 --> 00:09:21.000
Отлично. Прокручиваем вниз страницы
и нажимаем на кнопку Save Changes.

00:09:21.000 --> 00:09:25.488
Мы увидим на следующей
странице сообщение о том, что Bucket

00:09:25.512 --> 00:09:30.000
Policy был успешно изменен.
Это сообщение зеленым фоном.

00:09:30.000 --> 00:09:38.000
Также мы увидим возле названия бакета
флажок красным цветом Publicly Accessible.

00:09:38.000 --> 00:09:43.000
Отлично. Давайте теперь попробуем
обновить страницу с нашим веб-сайтом.

00:09:43.000 --> 00:09:50.000
И здесь мы увидим, что наши картинки
вновь вернулись и все корректно отображается.

00:09:50.000 --> 00:09:54.000
Теперь мы переходим
к следующему заданию.

00:09:54.000 --> 00:09:59.103
Нам необходимо предоставить
дополнительную безопасность от случайных

00:09:59.127 --> 00:10:04.000
удалений и случайного переписывания
объектов внутри S3 бакета.

00:10:04.000 --> 00:10:08.000
Для этого нам необходимо
активировать Bucket versioning.

00:10:08.000 --> 00:10:17.000
Необходимо перейти на вкладку Properties
и прокрутить до секции Bucket versioning.

00:10:17.000 --> 00:10:24.000
Мы видим, что она сейчас деактивирована.
Необходимо нажать на кнопку Edit, чтобы изменить.

00:10:24.000 --> 00:10:31.988
Мы видим, что у нас есть две опции. Это 
Suspend или Enable. Так как он у нас сейчас все

00:10:32.012 --> 00:10:40.000
еще не включен, Suspend логически не подходит.
Нам необходимо сейчас включить versioning.

00:10:40.000 --> 00:10:45.000
Я напоминаю, что после того, как вы
включаете versioning, его отключить не получится.

00:10:45.000 --> 00:10:53.000
Единственный вариант – приостановить versioning.
В этом случае новые версии не создаются.

00:10:53.000 --> 00:10:58.000
При необходимости вы можете
versioning включить обратно.

00:10:58.000 --> 00:11:05.000
Отлично! Выбираем опцию Enable и нажимаем
на кнопку Save changes внизу страницы.

00:11:05.000 --> 00:11:11.198
Теперь нам необходимо протестировать,
как работает versioning. На локальном

00:11:11.222 --> 00:11:17.000
компьютере откроем в любом
текстовом редакторе наш index.html файл.

00:11:17.000 --> 00:11:21.175
Нам необходимо было найти
вхождение bgcolor="aquamarine",

00:11:21.199 --> 00:11:25.000
два вхождения, и одно
вхождение bgcolor="orange".

00:11:25.000 --> 00:11:29.809
Эти значения заменить на,
соответственно, bgcolor="gainsboro"

00:11:29.833 --> 00:11:34.000
и bgcolor="orange"
заменить на bgcolor="cornsilk".

00:11:34.000 --> 00:11:40.067
Как только мы это сделали, давайте
перейдем на список объектов в нашем бакете,

00:11:40.091 --> 00:11:46.000
нажмем на кнопку Upload для того,
чтобы загрузить обновленный index.html.

00:11:46.000 --> 00:11:54.113
Как только мы ее загрузим, мы
увидим уже после обновления страницы

00:11:54.137 --> 00:12:02.000
веб-сайта, что фон блоков в
нижней части страницы обновились.

00:12:02.000 --> 00:12:08.488
Отлично. Теперь нам необходимо открыть
главную страницу объекта index.html, далее

00:12:08.512 --> 00:12:15.000
открыть вкладку Versions и убедиться в
том, что действительно versioning включен.

00:12:15.000 --> 00:12:26.000
На текущий момент у нас две версии и текущим
является последняя версия, которую мы загрузили.

00:12:26.000 --> 00:12:32.000
Теперь мы переходим обратно к тестовым
вопросам, необходимо ответить на второй вопрос.

00:12:32.000 --> 00:12:40.409
Вопрос звучал следующим образом. Выберите 
опцию, которая помогает нам максимально

00:12:40.433 --> 00:12:48.000
защитить и избежать от случайного
удаления объектов в нашем S3 бакете.

00:12:48.000 --> 00:12:52.699
Давайте посмотрим какие 
варианты есть. Первый вариант -

00:12:52.723 --> 00:12:58.032
Cross-Region Replication.
Это немного не подходящий вариант,

00:12:58.056 --> 00:13:03.061
так как оно лишь реплицирует
наши данные на другой бакет,

00:13:03.085 --> 00:13:08.000
при этом на текущем бакете
удалить эти файлы возможно.

00:13:08.000 --> 00:13:13.488
Другой вариант - это Multi-Factor Authentication,
 так называемый MFA. Это является

00:13:13.512 --> 00:13:19.000
правильным ответом, нам необходимо его 
отметить. Почему оно является правильным?

00:13:19.000 --> 00:13:30.000
Потому что мы можем привязать MFA верификацию при
удалении объектов в S3 бакете. Как это происходит?

00:13:30.000 --> 00:13:37.488
Ваш IAM User подключается к AWS
Management Console, будь то CLI, неважно.

00:13:37.512 --> 00:13:45.000
Далее вводит временно генерируемый ключ для
того, чтобы подтвердить MFA устройство.

00:13:45.000 --> 00:13:51.134
Обычно это виртуальное MFA устройство, и
после чего у него стоит пометка на некоторое

00:13:51.158 --> 00:13:57.000
время под пользователем, что он может
производить действия, где требуется MFA.

00:13:57.000 --> 00:14:06.000
В момент удаления происходит эта проверка. Если
MFA не пройдено, то он не сможет удалить объекты.

00:14:06.000 --> 00:14:15.000
Пользователи, у которых MFA даже не включен,
не смогут удалять объекты, защищённые MFA.

00:14:15.000 --> 00:14:21.198
Третья опция - это Cross-Origin Resource
Sharing CORS. Он относится больше к

00:14:21.222 --> 00:14:28.000
взаимодействию двух веб-сайтов между
собой, поэтому не относится к безопасности.

00:14:28.000 --> 00:14:34.150
А именно к безопасности касательно
удаления объектов в S3 бакете. И четвертая

00:14:34.174 --> 00:14:40.000
- это Bucket Policy. Тоже не совсем 
подходящий вариант в нашем случае.

00:14:40.000 --> 00:14:49.000
Отлично. Мы отметили второй вариант как
верный, нажали Submit и двигаемся дальше.

00:14:49.000 --> 00:14:53.079
Мы с вами переходим к следующему 
заданию. Здесь нам

00:14:53.103 --> 00:14:58.000
необходимо оптимизировать
затраты на хранение в S3 бакете.

00:14:58.000 --> 00:15:05.000
Для этого мы настроим Lifecycle Rules. Чтобы это
сделать, необходимо перейти на вкладку Management.

00:15:05.000 --> 00:15:10.774
Первая секция это та секция, которая 
нам нужна. Она называется Lifecycle Rules.

00:15:10.798 --> 00:15:17.000
Мы видим, что у нас нет созданных рулов,
поэтому нажмем на кнопку Create Lifecycle Rule.

00:15:17.000 --> 00:15:23.000
Нас перенаправят на соответствующую
страницу, где необходимо ввести входные данные.

00:15:23.000 --> 00:15:28.000
Как Rule Name можем указать
move-to-ia, то есть Infrequent Access.

00:15:28.000 --> 00:15:32.988
Как Choose a Rule Scope выберем
опцию Apply to all objects in the

00:15:33.012 --> 00:15:38.000
Bucket, то есть оно будет
относиться ко всем объектам в бакете.

00:15:38.000 --> 00:15:46.000
И необходимо в поле с
подтверждением поставить галочку.

00:15:46.000 --> 00:15:54.161
Как Lifecycle Rule Actions нам необходимо
выбрать вторую опцию. Она означает

00:15:54.185 --> 00:16:03.000
то, что мы будем не текущие версии
объектов перемещать на другой Storage Class.

00:16:03.000 --> 00:16:08.600
Чуть ниже в следующей секции нам
необходимо дать детали этого Storage Class.

00:16:08.624 --> 00:16:14.000
В нашем случае это Standard-IA, на
который он переходит через 30 дней.

00:16:14.000 --> 00:16:18.899
На этом мы ввели все
необходимые данные.

00:16:18.923 --> 00:16:25.000
Необходимо прокрутить до конца страницы
и нажать на кнопку Create Rule.

00:16:25.000 --> 00:16:29.178
Нас направят на страницу
со списком Lifecycle Rules.

00:16:29.202 --> 00:16:34.000
Мы видим, что созданный нами Rule 
уже отображается. Он активен.

00:16:34.000 --> 00:16:37.988
Теперь необходимо создать второй.
Также нажмем на кнопку

00:16:38.012 --> 00:16:42.000
Create Lifecycle Rule.
Откроется аналогичная страница.

00:16:42.000 --> 00:16:47.488
В этом случае как Rule Name ведем 
delete-rule. Также отметим, что

00:16:47.512 --> 00:16:53.000
оно относится ко всем объектам
в бакете и подтвердим этот выбор.

00:16:53.000 --> 00:16:59.988
Для Lifecycle Rule Actions выберем
предпоследний вариант, который

00:17:00.012 --> 00:17:07.000
говорит нам, что необходимо удалить
все не текущие версии объектов.

00:17:07.000 --> 00:17:15.000
Чуть ниже необходимо указать количество дней, после
которого вступает в силу этот Rule. Это 365 дней.

00:17:15.000 --> 00:17:22.000
На этом ввели все необходимые данные. Прокручиваем
до конца страницы и нажимаем на кнопку Create Rule.

00:17:22.000 --> 00:17:29.000
Отлично! Вы видите в списке два рула, 
созданных нами. Они обе активированы.

00:17:29.000 --> 00:17:35.988
Мы двигаемся дальше. Переходим к следующему 
заданию. Здесь нам необходимо создать

00:17:36.012 --> 00:17:43.000
другой бакет в другом регионе для того,
чтобы настроить Cross-Region replication.

00:17:43.000 --> 00:17:47.988
Открываем основную страницу 
сервиса Amazon S3. Нажимаем на

00:17:48.012 --> 00:17:53.000
кнопку Create Bucket и вводим
необходимые входные данные.

00:17:53.000 --> 00:17:56.753
Здесь нам необходимо указать 
Bucket Name. В моем случае я

00:17:56.777 --> 00:18:01.000
указал yelzhan-replication-destination-bucket.
Он уникальный.

00:18:01.000 --> 00:18:11.000
Далее как регион указываем Oregon.
Это us-west-2. Чуть ниже мы включаем versioning.

00:18:11.000 --> 00:18:16.000
И в самом низу страницы нажимаем на
кнопку Create Bucket, чтобы его создать.

00:18:16.000 --> 00:18:22.717
Нажимаем, увидим зеленое сообщение, что
бакет был успешно создан. Также в списке бакетов

00:18:22.741 --> 00:18:30.000
видим, что у нас есть основной бакет, созданный
ранее. Он находится в регионе North Virginia.

00:18:30.000 --> 00:18:37.000
Мы видим второй созданный бакет. Он находится
в регионе Oregon. Все отлично! Двигаемся дальше.

00:18:37.000 --> 00:18:45.065
Теперь необходимо на основном S3 бакете
настроить Replication Rules. Открываем основную

00:18:45.089 --> 00:18:54.000
страницу S3 бакета, переходим на вкладку
Management и опускаемся до секции Replication Rules.

00:18:54.000 --> 00:18:57.643
На текущий момент у нас
рулов нет, поэтому нажимаем на

00:18:57.667 --> 00:19:02.000
кнопку Create Replication Rule.
Откроется отдельная страница.

00:19:02.000 --> 00:19:06.793
В этой странице необходимо ввести входные 
данные. Как Replication Rule Name

00:19:06.817 --> 00:19:12.000
укажем replication-rule-1. Вы можете указать 
любое другое название по желанию.

00:19:12.000 --> 00:19:16.000
Status будет у нас Enabled.
Здесь ничего не меняется.

00:19:16.000 --> 00:19:20.488
Как Source Bucket нам необходимо
в подсекции Choose a Rule

00:19:20.512 --> 00:19:25.000
Scope выбрать опцию Apply
to all objects in the Bucket.

00:19:25.000 --> 00:19:29.530
Таким образом все объекты,
которые находятся в основном

00:19:29.554 --> 00:19:34.000
S3 бакете будут реплицироваться
на второй S3 бакет.

00:19:34.000 --> 00:19:38.660
Далее, как в Destination
необходимо выбрать опцию Choose a

00:19:38.684 --> 00:19:44.000
Bucket in this Account и выбрать
наш второй созданный S3 бакет.

00:19:44.000 --> 00:19:48.000
В моем случае это
yelzhan-replication-destination-bucket.

00:19:48.000 --> 00:19:54.085
После того как мы ее выбрали, в
подсекции Destination Region укажется

00:19:54.109 --> 00:20:01.000
регион этого бакета. В нашем случае это Oregon.
Все верно. Двигаемся дальше.

00:20:01.000 --> 00:20:06.000
Секция IAM role - это та роль, которая
будет производить действия по репликации.

00:20:06.000 --> 00:20:12.000
Для нас уже в рамках лабораторной
работы уже была создана роль.

00:20:12.000 --> 00:20:17.000
Поэтому выбираем Choose from existing
IAM roles и из списка выбираем роль CafeRole.

00:20:17.000 --> 00:20:27.000
На этом мы ввели все необходимые данные. Давайте
прокрутим до конца страницы и нажмем на кнопку Save.

00:20:27.000 --> 00:20:35.000
Отлично. Теперь нас направят на страницу
с S3 бакетом в соответствующую вкладку.

00:20:35.000 --> 00:20:44.000
И мы видим, что в списке Replication Rules есть
нами созданный рул, который в состоянии Enabled.

00:20:44.000 --> 00:20:50.700
Отлично. Давайте теперь перейдем
на Replication Bucket и проверим какое

00:20:50.724 --> 00:20:58.000
количество объектов сейчас там есть.
Мы видим, что там сейчас объектов нет.

00:20:58.000 --> 00:21:07.000
И теперь нам необходимо перейти на страницу с
тестовыми вопросами и ответить на третий вопрос.

00:21:07.000 --> 00:21:09.000
Третий вопрос звучит
следующим образом.

00:21:09.000 --> 00:21:18.000
Увидели ли вы объекты из основного бакета
в бакете, на который это все реплицируется?

00:21:18.000 --> 00:21:23.000
Мы отвечаем нет, так как файлы не
появились и отправляем наш ответ.

00:21:23.000 --> 00:21:28.000
Теперь дам некоторые комментарии касательно
того, почему же эти файлы там не появились.

00:21:28.000 --> 00:21:34.000
Все просто. На самом деле, когда мы загружали 
наши файлы, Replication еще не работал.

00:21:34.000 --> 00:21:43.407
С того момента, как он был активирован,
теперь все изменения, которые произойдут в

00:21:43.431 --> 00:21:54.000
основном бакете, будут появляться и в Destination 
Bucket. Давайте попробуем это проверить.

00:21:54.000 --> 00:22:00.000
Для этого локально в файле index.html
сделаем абсолютно любые изменения.

00:22:00.000 --> 00:22:04.000
Вы здесь видите
пример моих изменений.

00:22:04.000 --> 00:22:10.000
Далее мы возвращаемся к основному
S3 бакету, нажимаем на кнопку Upload.

00:22:10.000 --> 00:22:14.358
Далее нажимаем на Add Files,
выбираем наш обновленный

00:22:14.382 --> 00:22:20.000
index.html, нажимаем на кнопку
Open и подтверждаем нашу загрузку.

00:22:20.000 --> 00:22:27.000
Если мы откроем список версии для объекта
index.html, мы увидим, что у нас три версии.

00:22:27.000 --> 00:22:33.000
Последняя загрузка является
текущей версией для этого файла.

00:22:33.000 --> 00:22:38.164
Теперь, если мы откроем наш второй
S3 бакет, который является Destination

00:22:38.188 --> 00:22:44.000
Bucket при Cross-Region Replication, мы
увидим, что у нас появился один объект.

00:22:44.000 --> 00:22:47.988
Это index.html. Это последняя 
версия этого файла, которую

00:22:48.012 --> 00:22:52.000
мы загрузили после активации
Cross-Region Replication.

00:22:52.000 --> 00:23:02.000
Теперь, что мы сделаем? На основном S3
бакете удалим последнюю версию index.html.

00:23:02.000 --> 00:23:06.000
Для этого необходимо из списка выбрать
последнюю версию, нажать на кнопку Delete.

00:23:06.000 --> 00:23:10.000
Откроется отдельная страница с
подтверждением списка объектов.

00:23:10.000 --> 00:23:16.741
В поле Permanently Delete Objects?
необходимо подтвердить это удаление и написать

00:23:16.765 --> 00:23:23.000
руками permanently delete.
После чего кнопка Delete Objects активируется.

00:23:23.000 --> 00:23:28.000
Давайте на нее нажмем и нас
направит на предыдущую страницу.

00:23:28.000 --> 00:23:36.000
Здесь мы увидим, что у нас остались две версии.
Предыдущая версия стала текущей версией. Отлично.

00:23:36.000 --> 00:23:41.150
Теперь, если мы откроем второй
S3 бакет и обновим страницу, мы

00:23:41.174 --> 00:23:47.000
увидим, что index.html никуда не
делся, новых версий не добавилось.

00:23:47.000 --> 00:23:53.000
На текущий момент у нас видна
третья версия файла index.html.

00:23:53.000 --> 00:24:02.000
Давайте теперь откроем страницу с тестовыми
вопросами и попробуем ответить на четвертый вопрос.

00:24:02.000 --> 00:24:11.988
Звучит следующим образом. После удаления
версии файла в основном S3 бакете удалился

00:24:12.012 --> 00:24:22.000
ли также объект в Destination Bucket?
В нашем случае ответ No. Почему так произошло?

00:24:22.000 --> 00:24:28.000
По умолчанию Delete маркеры не
реплицируются в Replication Bucket.

00:24:28.000 --> 00:24:31.488
Поэтому удаление, которое
произошло на основном бакете не

00:24:31.512 --> 00:24:35.000
отразилось на Replication,
то есть на Destination Bucket.

00:24:35.000 --> 00:24:43.592
Если вы хотите также передавать удаление
Delete Маркеры на Destination Bucket, для этого

00:24:43.616 --> 00:24:53.000
необходимо произвести дополнительные действия
и эту опцию включить. Отлично. Я вас поздравляю.

00:24:53.000 --> 00:24:56.000
Мы завершили все задания
лабораторной работы.

00:24:56.000 --> 00:25:00.988
Теперь нам необходимо запустить
скрипт для автооценивания

00:25:01.012 --> 00:25:06.000
и убедиться в том, что мы
корректно выполнили все задания.

00:25:06.000 --> 00:25:13.000
Для этого нам необходимо нажать на кнопку
Submit на странице с лабораторным заданием.

00:25:13.000 --> 00:25:20.000
Как только вы ее нажмете, необходимо
подтвердить, что мы хотим запустить автооценивание.

00:25:20.000 --> 00:25:23.000
Здесь нам необходимо
подождать некоторое время.

00:25:23.000 --> 00:25:29.033
В моем случае я набрал максимальное
количество баллов, 29 из 29, что

00:25:29.057 --> 00:25:35.000
говорит о том, что все задания
были выполнены корректно. Отлично.

00:25:35.000 --> 00:25:46.000
Теперь нам необходимо безопасно завершить
работу всех систем. Начнем мы с AWS аккаунта.

00:25:46.000 --> 00:25:49.078
Нам необходимо в правом
верхнем углу нажать на имя

00:25:49.102 --> 00:25:53.000
пользователя, в выпадающем
списке нажать на кнопку Sign out.

00:25:53.000 --> 00:25:58.000
Мы это проделывали несколько раз,
но я не перестаю об этом повторять.

00:25:58.000 --> 00:26:02.000
Мы возвращаемся на страницу
с лабораторным заданием.

00:26:02.000 --> 00:26:08.488
Здесь нам необходимо нажать на кнопку End
lab, подтвердить, что мы завершаем лабораторную

00:26:08.512 --> 00:26:15.000
работу и увидеть сообщение о том, что процесс
удаления временно созданных ресурсов запущен.

00:26:15.000 --> 00:26:21.000
Мы можем закрывать это окно и выходить 
с AWS Academy. Отлично. Я вас поздравляю.

00:26:21.000 --> 00:26:25.000
Мы завершили разбор
лабораторной работы.

00:26:25.000 --> 00:26:30.000
Я очень надеюсь, что на все вопросы,
которые у вас были, получили ответы.

00:26:30.000 --> 00:26:33.000
Если же остались еще вопросы,
пожалуйста, их задавайте.

00:26:33.000 --> 00:26:40.000
С радостью ответим. Спасибо за внимание.
Увидимся с вами на следующих наших активностях.