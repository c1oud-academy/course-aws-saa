 Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной сессии разбора лабораторной работы. Тема лабораторной работы это создание динамического веб-сайта для нашего бизнес-кейса кафе. Итак, давайте начнем. Мы начинаем с вами лабораторную работу с основной страницы лабораторной работы. Необходимо убедиться, что название совпадает. Должно быть module for Challenge Lab creating dynamic website for the cafe. Отлично. Сейчас для начала лабораторной работы нам необходимо инициировать создание временного AWS аккаунта. Для этого необходимо нажать на кнопку Start Lab. Далее в открывшейся странице необходимо дождаться, что Lab status изменит значение на Ready. Как только это произойдет, вы можете закрывать это всплывающее окно. И далее на странице с лабораторной работой необходимо нажать на кнопку AWS. По нажатию на эту кнопку вас направит на главную страницу AWS Management Console. Согласно заданию нам необходимо перейти в сервис EC2 и посмотреть какие же инстанции есть в этом AWS аккаунте. Сделать вы это можете двумя путями, либо через навигационное меню слева, либо через ссылку instances ранее. Как только вы переходите по любой из этих ссылок, вы увидите, что есть один единственный EC2 instance, в названии которого содержится AWS Cloud9 Cafe Web Server. Оно нам пригодится чуть позже. Давайте теперь перейдем на страницу с лабораторной работой. Нажмем на кнопку details, далее нажмем на кнопку show и в всплывающем окне перейдем на ссылку access the multiple choice questions. Откроется страница с вопросами. Это первая лабораторная работа, где мы помимо выполнения этой лабораторной работы также будем отвечать на некоторые вопросы. Сейчас нас просят ответить на первые четыре вопроса. Давайте пройдемся по каждому из них. Первый вопрос звучит следующим образом. Находится ли этот instance в публичном сабнете? Давайте это проверим. Для этого вернемся в AWS Management Console, откроем детали инстанца и во вкладке networking посмотрим subnet ID. Вы видите, что уже есть подсказка, что этот сабнет является паблик. Но тем не менее, давайте откроем эту ссылку. Она перейдет к деталям этого сабнета и во вкладке road table посмотрим какие road есть. Если есть road на destination весь интернет и target является интернет gateway. Это по определению значит, что этот сабнет является публичным. У нас есть также два ресурса, которые помогают контролировать доступ до наших ресурсов в сабнетах. Есть Network.SL, который привязывается к сабнетам. Вы видите, что inbound и outbound рули разрешают доступ со всего интернета. Ограничений нет. Также если мы посмотрим security группу на уровне нашего instance, мы увидим, что разрешен доступ на 22 порт. На следующие cedar блоки. Отлично. Давайте вернемся обратно к списку вопросов и ответим на этот вопрос. Так как instance находится в паблик сабнете, мы выбираем опцию yes. Давайте теперь перейдем ко второму вопросу. По поводу этого вопроса у нас спрашивают есть ли публичный IP адрес у этого easy2 instance. Чтобы это проверить нам достаточно открыть вкладку details и в соответствующем поле посмотреть есть ли значение. Если значение есть, это значит, что публичный IP адрес присвоен к этому instance. Поэтому на второй вопрос мы отвечаем yes. Третий вопрос звучит следующим образом. Какие inbound порты открыты для подключения к этому instance? Мы с вами это уже посмотрели. Давайте вернемся обратно к странице с деталями easy2 instance. Откроем вкладку security и в выделенном квадрате вы видите какой доступ предоставлен. Это 22 порт на два различных cedar блока. Поэтому мы выбираем четвертую опцию. То есть easy2 port 22 only open to a specific range of IP addresses является верным ответом. Двигаемся дальше. Четвертый вопрос. Здесь нам необходимо ответить на вопрос соединен ли соединена ли am роль к easy2 instance. Чтобы это посмотреть мы возвращаемся обратно странице с деталями easy2 instance. Откроем вкладку details и в соответствующем поле увидим есть ли значение для am role. Если бы роль была, то вы бы увидели название роли и по нажатию которой вы могли бы перейти на страницу этой роли. Так как там стоит прочерк, значит роль не привязана. Поэтому мы отвечаем на этот вопрос no. Мы переходим к следующему заданию. Согласно нему нам необходимо перейти в сервис cloud9. Для этого в строке поиска начнем вводить cloud9 и воспользуемся нужной нам ссылкой. Как только вы перейдете на главную страницу сервиса cloud9 вы увидите список существующих environannt. Там будет единственный environannt называется кафе web server. Мы с вами помним что easy2 instance содержит в имени кафе web server. Что означает IDE cloud9 был поднят в нашем easy2 instance. Для того чтобы открыть IDE необходимо нажать на ссылку open. Если в это время easy2 instance остановлен то cloud9 автоматически его стартует и после этого откроет нам IDE. Также я хотел обратить внимание что есть настройка вы указываете количество времени. И если такое время IDE не будет использоваться то она автоматически остановит easy2 instance чтобы мы не несли дополнительных расходов. Что очень удобно. Мы оплачиваем только за easy2 instance когда используем сервис cloud9. Сам сервис cloud9 он бесплатный. После загрузки IDE мы переходим на основную страницу. Этой среды разработки у нас состоит из трех основных частей. С левой стороны мы видим навигационное меню, файлы и папки. В нижней части есть баш терминал. А посередине основное поле это работа с файлами. Здесь мы можем просматривать различные файлы, также изменять наши скрипты и текстовые файлы. Согласно заданию нам необходимо посмотреть какая операционная система установлена на нашем easy2 instance. Мы видим что это Amazon Linux. Я рекомендую ее использовать потому что это операционная система нативно поддерживающая многие моменты связанные с AWS. AWS занимается постоянным ее улучшением. На текущий момент уже доступна вторая версия то есть Amazon Linux 2. Далее мы запускаем список команд, проверяем версию необходимых нам приложений и также проверяем их статус. Первые две команды проверяют веб-сервер. Далее две команды на проверку версии и статуса базы данных MazeQL. И последняя команда проверка версии языка программирования PHP. Мы видим что приложения остановлены, нам необходимо их стартовать. Для этого мы запускаем следующие команды. В первую очередь мы заносим старт этих команд в автозагрузку, далее стартуем эти приложения и проверяем статус. Мы видим что HTTP D сервис веб-сервер успешно стартовал. Далее то же самое проделываем с базой данных. И видим что оба приложения на текущий момент запущены и в состоянии ранее. Далее нам необходимо создать сим-линк до пути вар www и как target он будет использовать home-ec2user-environment. Это все те файлы которые доступны в IDE, будет создана соответствующая папка HTML и веб-сервер будет использовать все содержание из этой папки для отображения. Давайте перейдем в папку HTML и создадим там новый файл. Назовем ее index.html и она будет содержать себе простейшую веб-страницу. В тегах HTML будет текст hello from the cafe-веб-сервер. Отлично, теперь попробуем открыть наш веб-сервер. Мы знаем что необходимые приложения уже запущены, тестовую HTML страницу мы уже создали. И давайте теперь перейдем к нашему EC2-инстанцу для того чтобы скопировать его публичный IP-адрес и попробуем по нему перейти. Мы видим что сайт не открывается. Здесь нам нужно было провести некоторый troubleshooting. В первую очередь необходимо проверить security-группы. Если мы перейдем на страницу на вкладку security мы увидим ссылку на security-группу. Давайте по нему перейдем и вы видите в inbound-рулах, мы видели ее ранее, что доступ есть только по 22 порту на некоторый список cidre-блоков. Нам необходимо предоставить доступ ко всему интернету на 80 порт. Для этого необходимо нажать на кнопку edit inbound rules, далее добавить новый rule путем нажатия на кнопку add rule. После чего как type выбираем HTTP, протокол и порт рейндж он автоматически заполняется и как source необходимо выбрать anywhere ipv4. И вы увидите что появится значение все нули слеш ноль это cidre-блок всего интернета. Все готово, мы можем сохранять наши изменения. Как только сохранили свои изменения в списке inbound-рулов мы видим новый созданный rule. Теперь давайте попробуем вернуться на страницу с нашей тестовой веб-страницы и видим что она успешно открылась. Мы видим текст hello from cafe-вебсервер. Мы с вами двигаемся дальше к следующему заданию, теперь нам необходимо установить приложение с динамическим контентом. Это приложение уже было написано в рамках лабораторной работы за нас. Нам лишь необходимо произвести его установку и настройку и все что касается AWS. В рамках лабораторного задания даны команды для загрузки архивов и разархивирования содержания этих архивов. Давайте их запустим. После этого у нас в папке environment появятся три папки это cafe, db и setup. Давайте посмотрим содержание папки cafe, а именно откроем файл index.php. Вы видите что это HTML документ, также есть PHP вставки, то есть запускается PHP скрипт. В этом случае мы запускаем getappparameters.php. Давайте теперь откроем этот файл, посмотрим что там есть. Вы видите что на третьей строчке используется AWS SDK и скрипт использует клиент systems manager для создания семи параметров. Давайте запустим этот скрипт в ваш терминале. Вы видите что наши параметры были успешно созданы, тем не менее давайте перепроверим это в AWS Management консоли. Для этого начнем вводить systems manager и в появившейся выдаче воспользуемся нужной нам ссылкой. Как только мы перейдем на главную страницу systems manager, нам необходимо в левом навигационном меню выбрать пункт параметр store. Как только вы нажимаете на эту ссылку, нас направляет на страницу со всеми параметрами в этом AWS аккаунте и мы видим что 7 параметров были успешно созданы. Теперь нам необходимо открыть параметр cafeDBPassword, так как мы воспользуемся ее значением в следующем шаге. Нам необходимо значение скопировать. Теперь нам необходимо произвести настройку баз данных. Для этого необходимо в ваш терминале открыть папку db, там запустить скрипт setRootPassword.sh. Он запросит новый пароль и здесь вам необходимо вставить скопированный ранее пароль. Далее необходимо запустить скрипт createDB.sh, он произведет необходимые настройки в базе данных, создаст таблицы и наполнит эти таблицы тестовыми данными. Вы также можете посмотреть содержание лог файлов, это setRootPassword.log и createDB.log. Тем не менее давайте попробуем подключиться к базе данных и посмотреть действительно ли все там на месте. Для этого введем следующую команду, пароль у нас есть. Как только мы подключимся мы увидим приветственные сообщения MESKILL и увидим prompt, то есть мы уже можем вводить наши команды. Давайте введем следующие команды, мы посмотрим какие базы данных есть. Если мы спозиционируемся на cafeDB, посмотрим какие есть таблицы, мы видим что у нас есть 4 таблицы. Давайте как пример откроем содержание таблицы product, мы увидим что у нас есть 9 различных позиций и деталей по каждой из позиций. Отлично, давайте теперь произведем последнюю настройку, нам необходимо ввести тайм зону для PHP. Как только мы это сделаем, мы можем рестартовать наш веб сервер и можем попробовать открыть публичный IP адрес EC2 инстанца с добавлением slash кафе. Это тот путь где находится наш динамический веб сайт. Мы видим что отображается только header кафе, а оставшаяся часть не отображается. Значит что-то работает некорректно, здесь в рамках задания необходимо произвести некоторый troubleshooting. Как подсказка нам предлагается посмотреть в сторону доступов, так как ошибок на стороне PHP приложения нет. Когда мы говорим про доступы, сразу вспоминается сервис IEM, давайте попробуем на нее перейти, посмотрим список ролей. В списке ролей мы видим есть кафе роль, как trusted entity указано сервис EC2, давайте ее откроем и посмотрим какие полиси к ней привязаны. Первая полиси разрешает действие EC2 import key, keypair, далее есть другая полиси, называется root следующего содержания. Предоставляется полные права для работы с параметр store. Отлично, вам не кажется что эта роль идеально бы подошла для нашего EC2 инстанца и соответственно веб приложения? Это и есть ответ на вопрос, давайте теперь привяжем эту роль к нашему EC2 инстанцу. Для этого необходимо выбрать наш EC2 инстанц, далее нажать на кнопку actions, выбрать опцию security и далее выбрать опцию modify IEM роль. Как только вы на нее нажмете, вас направят на отдельную страницу, где вы можете выбрать из списка IEM ролей нужны. Обратите внимание, что в этом списке ролей намного меньше, которые мы видели ранее в сервисе IEM, почему? Потому что не все сервисы указали как trusted entity, сервис EC2, поэтому мы видим только две роли, которые мы можем выбрать. Нас интересует роль cafe-role, давайте ее выберем и нажмем на кнопку update IEM роль. Как только мы это сделаем, мы получим сообщение о том, что изменения успешно выполнены и также вы увидите в поле IEM роль ссылку на нашу роль. Отлично, давайте теперь вернемся на страницу с нашим веб приложением и попробуем ее обновить. Вы видите, что страница полностью открылась, у нас появилось некоторое содержание, также различные вкладки и нас интересует вкладка меню. Давайте на нее перейдем и мы увидим, что здесь мы можем выбрать продукцию, указать количество, давайте выберем три круассана, внизу отображается общая сумма и есть кнопка submit order. Как только мы на нее нажмем, мы перейдем на страницу с подтверждением нашего заказа, давайте теперь для разнообразия сделаем второй заказ и закажем горячий шоколад в одном количестве. Order total отображается корректно, также нажмем на кнопку submit order. Как только мы это сделаем, мы получаем подтверждение, теперь давайте посмотрим на вкладку order history. Отлично, мы видим, что оба наших заказа корректно отображаются, все детали верны и я вас поздравляю с этим, мы успешно настроили приложение и все корректно работает. Теперь мы переходим к следующему заданию, мы будем создавать второй environment в другом AWS регионе. Первым шагом для этого является создание AMI, а перед созданием AMI нам необходимо создать SSH ключи, чтобы они остались в этом AMI и можно было с копированным на локальный компьютер приватным ключом подключаться к любому инстанцию в любом AWS регионе, который использует созданный нами AMI. Но подключаться по SSH нет необходимости, это лишь сейчас сообщается и показывается как это можно настроить в будущей вашей работе. С точки зрения безопасности хранение этих ключей в AMI может быть не самым лучшим решением, это лишь один из вариантов. Самым лучшим с точки зрения безопасности и использования готового функционала является использование соответствующей настройки при создании сетей инстанции, где вы можете указать нужный вам публичный ключ. Если у вас есть приватный ключ пара от этого публичного ключа, то вы успешно сможете подключиться к этому инстанцию. Отлично, нам необходимо запустить серию команд, которые создаст SSH ключ и перенесет ее в нужное место. После того как мы это проделаем, мы можем начать создание AMI. Для этого необходимо в списке инстанций выбрать наш EC2 Instance, нажать на кнопку Actions, в выпадающем меню выбрать опцию Image and Templates и нажать на кнопку Create Image. Нас направят на страницу создания имидж, но перед тем как мы начнем ее заполнять, нам необходимо ответить на несколько вопросов. Сейчас нам необходимо ответить на три вопроса, это пятый, шестой и седьмой. Пятый вопрос звучит следующим образом. Когда мы создаем AMI от существующего инстанца, будет ли этот инстанц перезагружен? Давайте вернемся на страницу создания AMI и обратим внимание на параметр NoReboot. По умолчанию он не включен. Это говорит о том, что по умолчанию инстанц при создании от него AMI будет перезагружен. Если мы не хотим, чтобы инстанц перезагружался, то здесь необходимо поставить галочку. Таким образом для пятого вопроса третий вариант ответа является верным. Переходим к следующему вопросу. Звучит он следующим образом. Какие свойства root volume мы можем изменять при создании AMI от существующего инстанца? Давайте вернемся обратно на страницу создания AMI и посмотрим, что мы можем сделать. Вы видите, что мы можем изменить размер. Также мы видим, что мы можем менять параметр delete on termination. Но тип volume и другие параметры мы менять не можем. Поэтому возвращаемся обратно к вопросу и выбираем третий вариант ответа, который является верным. Переходим к следующему вопросу. Седьмой. Звучит он следующим образом. Можем ли мы добавить больше volume при создании AMI от инстанца, у которого есть один root volume? Если вы обратили внимание, у нас активная кнопка add volume, что означает, что мы можем добавлять любое количество data volume при необходимости. Поэтому на седьмой вопрос мы отвечаем yes. На этом мы ответили на все вопросы. Возвращаемся к AWS Management консоли. Необходимо как иммажняем ввести кафе сервер и внизу страницы нажать на кнопку Create Image. Image будет создаваться порядка двух минут. Для того, чтобы отобразить список AMI, нам необходимо в левом навигационном меню выбрать пункт AMI. Мы увидим, что у нас есть один единственный AMI, который сейчас создается, так как статус pending. Убирая страницу, нам необходимо дождаться, что статус поменяется на available и мы можем переходить к следующему заданию. Следующее задание необходимо нам поднять instance в другом регионе, используя этот AMI. В рамках лабораторной работы предлагается самостоятельно попробовать это сделать. И первым делом нам нужно скопировать AMI и сменить регион в AWS Management консоли. Мы меняем ее на регион US West Oregon. Как только мы это сделаем, мы видим, что список AMI пуст. Даже если мы начнем искать по скопированному AMI ID, то поиск тоже ничего не выдает. Как решение предлагается скопировать AMI, так как AMI доступен только в рамках одного региона. Если вам нужно этот AMI использовать в другом регионе, то необходимо его туда скопировать. Что мы сейчас и сделаем? Нам необходимо выбрать AMI из списка. Далее нажать на кнопку actions и выбрать опцию копии AMI. Вы перейдете на соответствующую страницу. Здесь оставляем все поля с значениями по умолчанию. Единственно необходимо выбрать регион. В нашем случае US West Oregon. После чего мы можем нажимать на кнопку копия AMI в нижней части страницы. Отлично, процесс создания копии AMI в другом регионе был запущен. Занимает это порядка пяти минут. Вы можете наблюдать за статусом создания AMI уже в target регионе. Поэтому мы переходим в AWS Management Console на регион US West Oregon. Обновляя страницу, нам необходимо дождаться, что статус из состояния pending поменяет состояние на available. Как только это произойдет, мы можем двигаться к следующему заданию. Теперь от созданного AMI мы можем создать EC2 instance. Для этого необходимо выделить AMI и в верхней правой части нажать на кнопку launch instance from AMI. Здесь нам необходимо как name ввести prot cafe server. Далее выбрать тип instance t2 small. Как Network Settings необходимо будет ввести некоторые вправки, поэтому необходимо нажать на кнопку edit. Здесь нужно будет выбрать VPC, Lab VPC, Region 2. Далее как Subnet выбираем Public Subnet из предложенного списка. И далее необходимо будет создать новую Security группу. Ее мы назовем cafe SG. Для него необходимо будет создать два inbound рула. Первый будет разрешать доступ из интернета на 22 порт. Это на тот случай, если нам нужно будет подключаться по SSH. Если все будет корректно выполнено, то в рамках лабораторной работы мы по SSH подключаться не будем. Второй рул это на 80 порт доступ со всего интернета, чтобы любой из интернета мог открыть наш веб-сайт. Как только мы введем эти настройки, нам необходимо прокрутить самые низ страницы и в Advanced Details выбрать роль cafe role, который мы выбирали ранее. И нажать на кнопку Launch Instance, чтобы запустить процесс создания этого инстанса. Как только вы ее нажмете, выйдет всплывающее окно о том, что мы создаем инстанс, где не будет SSH ключей и мы не сможем подключиться под 22 порту. В нашем случае нужные SSH ключи находятся внутри AMA, поэтому мы можем выбрать опцию Proceed without Key Pair. После этого нажимаем на кнопку Proceed without Key Pair. Отлично, мы увидим сообщение о том, что процесс создания инстанса успешно запущен и есть кнопка для перехода к списку всех инстанцев. Давайте на нее нажмем. Как только мы на нее нажмем, мы увидим, что инстанс создается. Необходимо дождаться, чтобы он прошел все системные проверки. Как только все будет готово, нам необходимо будет выбрать наш инстанс, отобразиться список метаданных этого инстанса и во вкладке Details необходимо скопировать публичный IP адрес. Давайте попробуем по нему перейти. Как только мы по нему перейдем и перейдем именно на наше веб-приложение, это IP-адрес слеш кафе, мы увидим, что главная страница успешно отображается. Давайте теперь попробуем перейти на вкладку меню, чтобы сделать заказ. Как только мы нажимаем на вкладку меню, мы видим, что никакие айтемы не существуют. Здесь в рамках лабораторной работы необходимо было по-трабблшутить, в чем же является проблема и попробовать самостоятельно ее решить. Я сразу дам ответ. Проблема в том, что в этом регионе не созданы нужные нам параметры. Необходимо их создать. Давайте проверим, действительно ли это является причиной отсутствия продуктов на нашем веб-сайте. Для этого переходим к AWS Management консоли и здесь необходимо перейти в сервис Parameter Store. Вы можете переходить напрямую на нужную вам ссылку, если начнете вводить Parameter Store. В выдаче в секции Features вы увидите ссылку на Parameter Store. Как только вы на нее нажмете, вы также перейдете на Systems Manager, это группа сервисов, но уже окажетесь на нужные вам вкладки в левом навигационном меню. Обратите внимание, что вы должны находиться в регионе Oregon и если все верно, вы увидите страницу с предложением создать новый параметр. Это говорит о том, что параметры еще не создавались. Отлично, теперь нам необходимо перейти на основной регион, нож свержения и открыть наш ID. Как только мы ее откроем, необходимо также открыть скрипт Setup Parameters и внести некоторые изменения, а именно на строке 12 для переменной регион и на строке 18 для переменной Public DNS. Как регион нам необходимо ввести US West 2, а как Public DNS необходимо скопировать значения у нового созданного из situ инстанса. Как только мы это сделаем, мы можем нажать правой кнопкой мыши на название нашего скрипта и выбрать опцию Run this file. Автоматически откроется новая вкладка Bash терминала и запустит этот скрипт. Мы увидим, что параметры были успешно созданы. Давайте теперь вернемся к AWS Management консоли и обновим страницу с параметр Store. Мы увидим, что 7 параметров были успешно созданы и также обратите внимание, что вы находитесь в нужном регионе, то есть регион Oregon. Отлично, давайте теперь вернемся на сайт и обновим страницу и в вкладке меню мы видим, что появились все наши продукты с тем же составом. Давайте теперь попробуем что-нибудь заказать. В этот раз закажем донат в одном количестве и попробуем создать заказ. Мы увидим подтверждение, что заказ успешно создан и если перейдем на страницу с историей заказов, также видим, что оно пополнилось одним нашим заказом. Все верно. Отлично, я вас поздравляю, на этом мы успешно завершили эту лабортуру на работу. Теперь нам необходимо запустить систему оценивания, чтобы убедиться, что мы действительно все правильно сделали. Для этого необходимо перейти на страницу с лаборатурной работой и нажать на кнопку submit. Выйдет всплывающее окно, необходимо нажать на кнопку yes и подождать некоторое время. Вы увидите сообщение о том, что вы набрали столько-то баллов из 30 возможных. В моем случае 30 из 30 это максимальный балл. Надеюсь, что у вас так же. Если не так, то вы видите, что есть расшифровка баллов и сможете определить, на каком этапе, в какой задачи была ошибка и попробовать ее исправить. Сейчас нам необходимо правильно выйти со всех систем. Для AWS Management Console необходимо в верхней правой части нажать на название пользователя и выбрать опцию sign out. На странице с лаборатурной работой необходимо нажать на кнопку end lab и подтвердить. Во всплывающем окне мы должны увидеть сообщение you may close this message box now. Lab resources are terminating. После этого мы закрываем всплывающее окно и можем закрывать окно с лаборатурной работой. На этом мы завершили лаборатурную работу, полностью ее разобрали. Я очень надеюсь, что вы получили более полное представление. Спасибо за внимание, увидимся с вами на следующих наших активностях.
